(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
  'use strict';

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  var _routesJsx = require('./routes.jsx');

  var _routesJsx2 = _interopRequireDefault(_routesJsx);

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _reactRouter = require('react-router');

  var _reactRouter2 = _interopRequireDefault(_reactRouter);

  var _reactBootstrap = require('react-bootstrap');

  var _reactRouterBootstrap = require('react-router-bootstrap');

  var RouteHandler = _reactRouter2['default'].RouteHandler;
  var Route = _reactRouter2['default'].Route;
  var DefaultRoute = _reactRouter2['default'].DefaultRoute;
  var NotFoundRoute = _reactRouter2['default'].NotFoundRoute;

  _reactRouter2['default'].run(_routesJsx2['default'], _reactRouter2['default'].HistoryLocation, function (Handler, state) {
    _react2['default'].render(_react2['default'].createElement(Handler, null), document.getElementById('my-main-container'));
  });

},{"./routes.jsx":36,"react":482,"react-bootstrap":188,"react-router":313,"react-router-bootstrap":288}],2:[function(require,module,exports){
  'use strict';

  exports.__esModule = true;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  var _commonDispatcherAppDispatcher = require('../../../../common/dispatcher/AppDispatcher');

  var _commonDispatcherAppDispatcher2 = _interopRequireDefault(_commonDispatcherAppDispatcher);

  var _constantsComposerConstantsJs = require('../constants/ComposerConstants.js');

  var _constantsComposerConstantsJs2 = _interopRequireDefault(_constantsComposerConstantsJs);

  var _jquery = require('jquery');

  var _jquery2 = _interopRequireDefault(_jquery);

  var ComposerActionCreator = {
    asyncSendMail: function asyncSendMail(toEmail, fromEmail, subject, content) {
      var _this = this;

      _jquery2['default'].ajax('/api/mail-services/basic', {
        method: 'POST',
        contentType: 'application/json; charset=utf-8',
        data: JSON.stringify({
          fromAddress: fromEmail,
          toAddresses: [toEmail],
          subject: subject,
          contentHTML: content
        })
      }).done(function (data) {
        _this._asyncSendMailResult(null, data);
      }).fail(function (err) {
        _this._asyncSendMailResult(err);
      });
    },
    _asyncSendMailResult: function _asyncSendMailResult(err, data) {
      if (err) {
        if (err.responseJSON) return _commonDispatcherAppDispatcher2['default'].dispatch({
          actionType: _constantsComposerConstantsJs2['default'].SEND_MAIL,
          data: err.responseJSON,
          err: err.responseJSON.info
        });else return console.log('Error on RESTful API:', err);
      }

      if (data.status === 'Success') {
        _commonDispatcherAppDispatcher2['default'].dispatch({
          actionType: _constantsComposerConstantsJs2['default'].SEND_MAIL,
          data: data,
          err: null
        });
      } else {
        console.log('Something went wrong on RESTful API:', data);
      }
    }

  };

  exports['default'] = ComposerActionCreator;
  module.exports = exports['default'];

},{"../../../../common/dispatcher/AppDispatcher":38,"../constants/ComposerConstants.js":8,"jquery":47}],3:[function(require,module,exports){
  'use strict';

  exports.__esModule = true;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _storesComposerStore = require('../stores/ComposerStore');

  var _storesComposerStore2 = _interopRequireDefault(_storesComposerStore);

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _moment = require('moment');

  var _moment2 = _interopRequireDefault(_moment);

  var _lodash = require('lodash');

  var _lodash2 = _interopRequireDefault(_lodash);

  var _HeaderJsx = require('./Header.jsx');

  var _HeaderJsx2 = _interopRequireDefault(_HeaderJsx);

  var _MainSectionJsx = require('./MainSection.jsx');

  var _MainSectionJsx2 = _interopRequireDefault(_MainSectionJsx);

  var _FooterJsx = require('./Footer.jsx');

  var _FooterJsx2 = _interopRequireDefault(_FooterJsx);

  var _commonComponentsBaseComponentJsx = require('../../../../common/components/BaseComponent.jsx');

  var _commonComponentsBaseComponentJsx2 = _interopRequireDefault(_commonComponentsBaseComponentJsx);

  /**
   * Private method only for `setState()` and `getInitialState()` - sync with the data in `HomeStore`.
   */
  function _getState() {
    return {
      allMailLogs: _storesComposerStore2['default'].getAllMailLogs(),
      allSentMail: _storesComposerStore2['default'].getAllSentMail(),
      formResetStatus: _storesComposerStore2['default'].getFormResetStatus()
    };
  }

  var ComposerApp = (function (_BaseComponent) {
    _inherits(ComposerApp, _BaseComponent);

    function ComposerApp(props) {
      _classCallCheck(this, ComposerApp);

      _BaseComponent.call(this);
      this._bind('_onChange');
      this.state = _getState();
    }

    ComposerApp.prototype.componentDidMount = function componentDidMount() {
      _storesComposerStore2['default'].addChangeListener(this._onChange);
    };

    ComposerApp.prototype.comonentWillUnmount = function comonentWillUnmount() {
      _storesComposerStore2['default'].removeChangeListener(this._onChange);
    };

    ComposerApp.prototype.render = function render() {
      return _react2['default'].createElement(
        'div',
        null,
        _react2['default'].createElement(_HeaderJsx2['default'], null),
        _react2['default'].createElement('br', null),
        _react2['default'].createElement(_MainSectionJsx2['default'], { formResetStatus: this.state.formResetStatus }),
        _react2['default'].createElement(_FooterJsx2['default'], { allMailLogs: this.state.allMailLogs, allSentMail: this.state.allSentMail })
      );
    };

    ComposerApp.prototype._onChange = function _onChange() {
      this.setState(_getState());
    };

    return ComposerApp;
  })(_commonComponentsBaseComponentJsx2['default']);

  exports['default'] = ComposerApp;
  module.exports = exports['default'];

},{"../../../../common/components/BaseComponent.jsx":37,"../stores/ComposerStore":9,"./Footer.jsx":4,"./Header.jsx":5,"./MainSection.jsx":7,"lodash":52,"moment":115,"react":482}],4:[function(require,module,exports){
  'use strict';

  exports.__esModule = true;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _commonComponentsBaseComponentJsx = require('../../../../common/components/BaseComponent.jsx');

  var _commonComponentsBaseComponentJsx2 = _interopRequireDefault(_commonComponentsBaseComponentJsx);

  var Footer = (function (_BaseComponent) {
    _inherits(Footer, _BaseComponent);

    function Footer() {
      _classCallCheck(this, Footer);

      _BaseComponent.call(this);
    }

    Footer.prototype.render = function render() {

      var totalMaliLogs = Object.keys(this.props.allMailLogs).length;
      var itemLeftPhrase1 = totalMaliLogs > 0 ? ' items' : ' item';
      var descriptionSpan1 = _react2['default'].createElement(
        'p',
        null,
        _react2['default'].createElement(
          'span',
          null,
          'Total Mail Logs:  ',
          _react2['default'].createElement(
            'strong',
            null,
            totalMaliLogs
          ),
          itemLeftPhrase1
        )
      );

      var totalSentMail = Object.keys(this.props.allSentMail).length;
      var itemLeftPhrase2 = totalSentMail > 0 ? ' items' : ' item';
      var descriptionSpan2 = _react2['default'].createElement(
        'p',
        null,
        _react2['default'].createElement(
          'span',
          null,
          'Total Mail Sent:  ',
          _react2['default'].createElement(
            'strong',
            null,
            totalSentMail
          ),
          itemLeftPhrase2
        )
      );

      return _react2['default'].createElement(
        'footer',
        null,
        descriptionSpan1,
        descriptionSpan2,
        _react2['default'].createElement(
          'p',
          null,
          'Some other info..'
        )
      );
    };

    return Footer;
  })(_commonComponentsBaseComponentJsx2['default']);

  Footer.propTypes = {
    allMailLogs: _react2['default'].PropTypes.array.isRequired,
    allSentMail: _react2['default'].PropTypes.array.isRequired
  };

  exports['default'] = Footer;
  module.exports = exports['default'];

},{"../../../../common/components/BaseComponent.jsx":37,"react":482}],5:[function(require,module,exports){
  'use strict';

  exports.__esModule = true;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _commonComponentsBaseComponentJsx = require('../../../../common/components/BaseComponent.jsx');

  var _commonComponentsBaseComponentJsx2 = _interopRequireDefault(_commonComponentsBaseComponentJsx);

  var Header = (function (_BaseComponent) {
    _inherits(Header, _BaseComponent);

    function Header() {
      _classCallCheck(this, Header);

      _BaseComponent.call(this);
    }

    Header.prototype.render = function render() {
      return _react2['default'].createElement(
        'header',
        null,
        _react2['default'].createElement(
          'h1',
          null,
          'Mail Composer'
        )
      );
    };

    return Header;
  })(_commonComponentsBaseComponentJsx2['default']);

  exports['default'] = Header;
  module.exports = exports['default'];

},{"../../../../common/components/BaseComponent.jsx":37,"react":482}],6:[function(require,module,exports){
  'use strict';

  exports.__esModule = true;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _actionsComposerActionCreator = require('../actions/ComposerActionCreator');

  var _actionsComposerActionCreator2 = _interopRequireDefault(_actionsComposerActionCreator);

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _registrationLoginComponentsFormInputJsx = require('../../../registration/login/components/FormInput.jsx');

  var _registrationLoginComponentsFormInputJsx2 = _interopRequireDefault(_registrationLoginComponentsFormInputJsx);

  var _commonComponentsBaseComponentJsx = require('../../../../common/components/BaseComponent.jsx');

  var _commonComponentsBaseComponentJsx2 = _interopRequireDefault(_commonComponentsBaseComponentJsx);

  var MailForm = (function (_BaseComponent) {
    _inherits(MailForm, _BaseComponent);

    function MailForm(props) {
      _classCallCheck(this, MailForm);

      _BaseComponent.call(this);
      this._bind('_onChange', '_onSubmit');
      this.state = {
        toEmail: '',
        toEmailIsValid: false,
        fromEmail: '',
        fromEmailIsValid: false,
        subject: '',
        subjectIsValid: false,
        content: '',
        contentIsValid: false
      };
    }

    MailForm.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
      if (nextProps.formResetStatus) {
        this.setState({
          toEmail: '',
          toEmailIsValid: false,
          fromEmail: '',
          fromEmailIsValid: false,
          subject: '',
          subjectIsValid: false,
          content: '',
          contentIsValid: false
        });
      }
    };

    MailForm.prototype.render = function render() {
      return _react2['default'].createElement(
        'form',
        null,
        _react2['default'].createElement(
          'div',
          { className: 'form-group' },
          _react2['default'].createElement(
            'label',
            null,
            'From'
          ),
          _react2['default'].createElement(_registrationLoginComponentsFormInputJsx2['default'], {
            onChange: this._onChange.bind(this, 'fromEmail'),
            value: this.state.fromEmail,
            type: 'email',
            placeholder: 'from@mail.com',
            className: 'form-control'
          })
        ),
        _react2['default'].createElement(
          'div',
          { className: 'form-group' },
          _react2['default'].createElement(
            'label',
            null,
            'To'
          ),
          _react2['default'].createElement(_registrationLoginComponentsFormInputJsx2['default'], {
            onChange: this._onChange.bind(this, 'toEmail'),
            value: this.state.toEmail,
            type: 'email',
            placeholder: 'to@mail.com',
            className: 'form-control'
          })
        ),
        _react2['default'].createElement(
          'div',
          { className: 'form-group' },
          _react2['default'].createElement(
            'label',
            null,
            'Subject'
          ),
          _react2['default'].createElement(_registrationLoginComponentsFormInputJsx2['default'], {
            onChange: this._onChange.bind(this, 'subject'),
            value: this.state.subject,
            type: 'text',
            placeholder: 'Subject..',
            className: 'form-control'
          })
        ),
        _react2['default'].createElement(
          'div',
          { className: 'form-group' },
          _react2['default'].createElement(
            'label',
            null,
            'Content'
          ),
          _react2['default'].createElement(_registrationLoginComponentsFormInputJsx2['default'], {
            onChange: this._onChange.bind(this, 'content'),
            value: this.state.content,
            type: 'text',
            placeholder: 'Content..',
            className: 'form-control'
          })
        ),
        _react2['default'].createElement(
          'button',
          {
            onClick: this._onSubmit,
            disabled: this.state.toEmailIsValid && this.state.fromEmailIsValid && this.state.subjectIsValid && this.state.contentIsValid ? '' : 'disabled',
            className: 'btn btn-success btn-sm btn-block',
            type: 'button'
          },
          'Send'
        )
      );
    };

    MailForm.prototype._onChange = function _onChange(field, value, isValid) {
      var nextState = {};
      nextState[field] = value;
      nextState[field + 'IsValid'] = isValid;
      this.setState(nextState);
    };

    MailForm.prototype._onSubmit = function _onSubmit() {
      _actionsComposerActionCreator2['default'].asyncSendMail(this.state.toEmail, this.state.fromEmail, this.state.subject, this.state.content);
    };

    return MailForm;
  })(_commonComponentsBaseComponentJsx2['default']);

  MailForm.propTypes = {
    formResetStatus: _react2['default'].PropTypes.bool.isRequired
  };

  exports['default'] = MailForm;
  module.exports = exports['default'];

},{"../../../../common/components/BaseComponent.jsx":37,"../../../registration/login/components/FormInput.jsx":31,"../actions/ComposerActionCreator":2,"react":482}],7:[function(require,module,exports){
  'use strict';

  exports.__esModule = true;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _actionsComposerActionCreator = require('../actions/ComposerActionCreator');

  var _actionsComposerActionCreator2 = _interopRequireDefault(_actionsComposerActionCreator);

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _MailFormJsx = require('./MailForm.jsx');

  var _MailFormJsx2 = _interopRequireDefault(_MailFormJsx);

  var _commonComponentsBaseComponentJsx = require('../../../../common/components/BaseComponent.jsx');

  var _commonComponentsBaseComponentJsx2 = _interopRequireDefault(_commonComponentsBaseComponentJsx);

  var MainSection = (function (_BaseComponent) {
    _inherits(MainSection, _BaseComponent);

    function MainSection() {
      _classCallCheck(this, MainSection);

      _BaseComponent.call(this);
    }

    MainSection.prototype.render = function render() {
      return _react2['default'].createElement(
        'section',
        null,
        _react2['default'].createElement(_MailFormJsx2['default'], { formResetStatus: this.props.formResetStatus })
      );
    };

    return MainSection;
  })(_commonComponentsBaseComponentJsx2['default']);

  MainSection.propTypes = {
    formResetStatus: _react2['default'].PropTypes.bool.isRequired
  };

  exports['default'] = MainSection;
  module.exports = exports['default'];

},{"../../../../common/components/BaseComponent.jsx":37,"../actions/ComposerActionCreator":2,"./MailForm.jsx":6,"react":482}],8:[function(require,module,exports){
  'use strict';

  exports.__esModule = true;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  var _keymirror = require('keymirror');

  var _keymirror2 = _interopRequireDefault(_keymirror);

  var ComposerConstant = _keymirror2['default']({
    SEND_MAIL: null
  });

  exports['default'] = ComposerConstant;
  module.exports = exports['default'];

},{"keymirror":48}],9:[function(require,module,exports){
  'use strict';

  exports.__esModule = true;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  var _commonDispatcherAppDispatcher = require('../../../../common/dispatcher/AppDispatcher');

  var _commonDispatcherAppDispatcher2 = _interopRequireDefault(_commonDispatcherAppDispatcher);

  var _actionsComposerActionCreator = require('../actions/ComposerActionCreator');

  var _actionsComposerActionCreator2 = _interopRequireDefault(_actionsComposerActionCreator);

  var _constantsComposerConstants = require('../constants/ComposerConstants');

  var _constantsComposerConstants2 = _interopRequireDefault(_constantsComposerConstants);

  var _events = require('events');

  var _objectAssign = require('object-assign');

  var _objectAssign2 = _interopRequireDefault(_objectAssign);

  var _jquery = require('jquery');

  var _jquery2 = _interopRequireDefault(_jquery);

  var CHANGE_EVENT = 'change';

  // [BLOCK] All Store Data
  var _allSentMail = [];
  var _allMailLogs = [];
  var _formResetStatus = false;

  // [BLOCK] All Helper Functions For Dispatcher Registration
  function _sendMail(err, data) {
    if (err) {
      console.log('Something went wrong on RESTful API:', data);
      alert('Mail Is Unable To Sent Because ' + err);
      _formResetStatus = false;
    } else {
      _allSentMail.push(data);
      _formResetStatus = true;
    }

    _allMailLogs.push(data || err);
  }

  // [BLOCK] Store Component
  var ComposerStore = _objectAssign2['default']({}, _events.EventEmitter.prototype, {
    getAllSentMail: function getAllSentMail() {
      return _allSentMail;
    },
    getAllMailLogs: function getAllMailLogs() {
      return _allMailLogs;
    },
    getFormResetStatus: function getFormResetStatus() {
      return _formResetStatus;
    },

    emitChange: function emitChange() {
      this.emit(CHANGE_EVENT);
    },
    addChangeListener: function addChangeListener(callback) {
      this.on(CHANGE_EVENT, callback);
    },
    removeChangeListener: function removeChangeListener(callback) {
      this.removeListener(CHANGE_EVENT, callback);
    }

  });

  // [BLOCK] Dispatcher Registration For The Current Store
  _commonDispatcherAppDispatcher2['default'].register(function (action) {
    console.log('Action in ComposerStore: ', action);

    var actionType = action.actionType;
    var data = action.data;
    var err = action.err;

    switch (actionType) {
      case _constantsComposerConstants2['default'].SEND_MAIL:
        _sendMail(err, data);
        ComposerStore.emitChange();
        break;
      default:
        return;
    }
  });

  exports['default'] = ComposerStore;
  module.exports = exports['default'];

},{"../../../../common/dispatcher/AppDispatcher":38,"../actions/ComposerActionCreator":2,"../constants/ComposerConstants":8,"events":45,"jquery":47,"object-assign":116}],10:[function(require,module,exports){
  'use strict';

  exports.__esModule = true;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  var _commonDispatcherAppDispatcher = require('../../../../common/dispatcher/AppDispatcher');

  var _commonDispatcherAppDispatcher2 = _interopRequireDefault(_commonDispatcherAppDispatcher);

  var _constantsHomeConstants = require('../constants/HomeConstants');

  var _constantsHomeConstants2 = _interopRequireDefault(_constantsHomeConstants);

  var _jquery = require('jquery');

  var _jquery2 = _interopRequireDefault(_jquery);

  var DashboardActionCreator = {
    asyncGetMailLogs: function asyncGetMailLogs() {
      var _this = this;

      // for server-side rendering since jQuery requires a `window` with a `document` to do `ajax()`
      if (_jquery2['default'].ajax) {
        _jquery2['default'].ajax('/api/mail-logs').done(function (data) {
          _this._asyncGetMailLogResult(null, data);
        }).fail(function (err) {
          _this._asyncGetMailLogResult(err);
        });
      }
    },
    _asyncGetMailLogResult: function _asyncGetMailLogResult(err, mailLogs) {
      if (err) return console.log('Error on RESTful API:', err);

      _commonDispatcherAppDispatcher2['default'].dispatch({
        actionType: _constantsHomeConstants2['default'].GET_MAIL_LOGS,
        data: mailLogs
      });
    }

  };

  exports['default'] = DashboardActionCreator;
  module.exports = exports['default'];

},{"../../../../common/dispatcher/AppDispatcher":38,"../constants/HomeConstants":15,"jquery":47}],11:[function(require,module,exports){
  'use strict';

  exports.__esModule = true;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _commonComponentsBaseComponentJsx = require('../../../../common/components/BaseComponent.jsx');

  var _commonComponentsBaseComponentJsx2 = _interopRequireDefault(_commonComponentsBaseComponentJsx);

  var Footer = (function (_BaseComponent) {
    _inherits(Footer, _BaseComponent);

    function Footer() {
      _classCallCheck(this, Footer);

      _BaseComponent.call(this);
    }

    Footer.prototype.render = function render() {
      var itemLeftPhrase = ' item';
      var total = Object.keys(this.props.allMailLogs).length;
      var descriptionSpan = _react2['default'].createElement(
        'p',
        null,
        _react2['default'].createElement(
          'span',
          null,
          'Total:  ',
          _react2['default'].createElement(
            'strong',
            null,
            total
          ),
          itemLeftPhrase
        )
      );

      return _react2['default'].createElement(
        'footer',
        null,
        descriptionSpan,
        _react2['default'].createElement(
          'p',
          null,
          'Some other info..'
        )
      );
    };

    return Footer;
  })(_commonComponentsBaseComponentJsx2['default']);

  Footer.propTypes = {
    allMailLogs: _react2['default'].PropTypes.array.isRequired
  };

  exports['default'] = Footer;
  module.exports = exports['default'];

},{"../../../../common/components/BaseComponent.jsx":37,"react":482}],12:[function(require,module,exports){
  'use strict';

  exports.__esModule = true;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _actionsHomeActionCreator = require('../actions/HomeActionCreator');

  var _actionsHomeActionCreator2 = _interopRequireDefault(_actionsHomeActionCreator);

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _commonComponentsBaseComponentJsx = require('../../../../common/components/BaseComponent.jsx');

  var _commonComponentsBaseComponentJsx2 = _interopRequireDefault(_commonComponentsBaseComponentJsx);

  var Header = (function (_BaseComponent) {
    _inherits(Header, _BaseComponent);

    function Header() {
      _classCallCheck(this, Header);

      _BaseComponent.call(this);
      this._bind('_onRefresh');
    }

    Header.prototype.render = function render() {
      return _react2['default'].createElement(
        'header',
        null,
        _react2['default'].createElement(
          'h1',
          { style: { display: 'inline-block' } },
          'Dashboard'
        ),
        '   ',
        _react2['default'].createElement(
          'button',
          { onClick: this._onRefresh },
          'Refresh'
        )
      );
    };

    Header.prototype._onRefresh = function _onRefresh() {
      _actionsHomeActionCreator2['default'].asyncGetMailLogs();
    };

    return Header;
  })(_commonComponentsBaseComponentJsx2['default']);

  exports['default'] = Header;
  module.exports = exports['default'];

},{"../../../../common/components/BaseComponent.jsx":37,"../actions/HomeActionCreator":10,"react":482}],13:[function(require,module,exports){
  'use strict';

  exports.__esModule = true;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _storesHomeStore = require('../stores/HomeStore');

  var _storesHomeStore2 = _interopRequireDefault(_storesHomeStore);

  var _actionsHomeActionCreator = require('../actions/HomeActionCreator');

  var _actionsHomeActionCreator2 = _interopRequireDefault(_actionsHomeActionCreator);

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _moment = require('moment');

  var _moment2 = _interopRequireDefault(_moment);

  var _lodash = require('lodash');

  var _lodash2 = _interopRequireDefault(_lodash);

  var _HeaderJsx = require('./Header.jsx');

  var _HeaderJsx2 = _interopRequireDefault(_HeaderJsx);

  var _MainSectionJsx = require('./MainSection.jsx');

  var _MainSectionJsx2 = _interopRequireDefault(_MainSectionJsx);

  var _FooterJsx = require('./Footer.jsx');

  var _FooterJsx2 = _interopRequireDefault(_FooterJsx);

  var _commonComponentsBaseComponentJsx = require('../../../../common/components/BaseComponent.jsx');

  var _commonComponentsBaseComponentJsx2 = _interopRequireDefault(_commonComponentsBaseComponentJsx);

  /**
   * Private method only for `setState()` and `getInitialState()` - sync with the data in `HomeStore`.
   */
  function _getState() {
    return {
      allMailLogs: _storesHomeStore2['default'].getAllMailLogs()
    };
  }

  // [NOTE] All Listeners: `HomeStore`

  var HomeApp = (function (_BaseComponent) {
    _inherits(HomeApp, _BaseComponent);

    function HomeApp(props) {
      _classCallCheck(this, HomeApp);

      _BaseComponent.call(this);
      this._bind('_onChange');
      this.state = _getState();
      _actionsHomeActionCreator2['default'].asyncGetMailLogs();
    }

    HomeApp.prototype.componentDidMount = function componentDidMount() {
      _storesHomeStore2['default'].addChangeListener(this._onChange);
    };

    HomeApp.prototype.comonentWillUnmount = function comonentWillUnmount() {
      _storesHomeStore2['default'].removeChangeListener(this._onChange);
    };

    HomeApp.prototype.render = function render() {
      var allMailLogs = this.state.allMailLogs;

      return _react2['default'].createElement(
        'div',
        null,
        _react2['default'].createElement(_HeaderJsx2['default'], null),
        _react2['default'].createElement('br', null),
        _react2['default'].createElement(_MainSectionJsx2['default'], {
          tableData: allMailLogs,
          tableColumns: [{ key: 'LogTimeStamp', label: 'Timestamp' }, { key: 'FromIP', label: 'Domain' }, { key: 'FromEmail', label: 'From' }, { key: 'ToEmails', label: 'To' }, { key: 'Subject', label: 'Subject' }, { key: 'Content', label: 'Content' }, { key: 'mailStatusDescription', label: 'Status' }],
          tableItemPerPage: 8,
          tableSortable: true,
          tableFilterable: ['Timestamp', 'Domain', 'From', 'To', 'Subject', 'Content', 'Status']
        }),
        _react2['default'].createElement(_FooterJsx2['default'], { allMailLogs: allMailLogs })
      );
    };

    HomeApp.prototype._onChange = function _onChange() {
      this.setState(_getState());
    };

    return HomeApp;
  })(_commonComponentsBaseComponentJsx2['default']);

  exports['default'] = HomeApp;
  module.exports = exports['default'];

},{"../../../../common/components/BaseComponent.jsx":37,"../actions/HomeActionCreator":10,"../stores/HomeStore":16,"./Footer.jsx":11,"./Header.jsx":12,"./MainSection.jsx":14,"lodash":52,"moment":115,"react":482}],14:[function(require,module,exports){
  'use strict';

  exports.__esModule = true;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _commonComponentsBaseComponentJsx = require('../../../../common/components/BaseComponent.jsx');

  var _commonComponentsBaseComponentJsx2 = _interopRequireDefault(_commonComponentsBaseComponentJsx);

  var _reactable = require('reactable');

  var _reactable2 = _interopRequireDefault(_reactable);

  var Table = _reactable2['default'].Table;

  var MainSection = (function (_BaseComponent) {
    _inherits(MainSection, _BaseComponent);

    function MainSection() {
      _classCallCheck(this, MainSection);

      _BaseComponent.apply(this, arguments);
    }

    MainSection.prototype.render = function render() {
      return _react2['default'].createElement(
        'section',
        null,
        _react2['default'].createElement(Table, {
          data: this.props.tableData,
          columns: this.props.tableColumns,
          itemsPerPage: this.props.tableItemPerPage,
          sortable: this.props.tableSortable,
          filterable: this.props.tableFilterable,
          className: 'table'
        })
      );
    };

    return MainSection;
  })(_commonComponentsBaseComponentJsx2['default']);

  MainSection.propTypes = {
    tableData: _react2['default'].PropTypes.array.isRequired,
    tableColumns: _react2['default'].PropTypes.array.isRequired,
    tableItemPerPage: _react2['default'].PropTypes.number.isRequired,
    tableSortable: _react2['default'].PropTypes.bool.isRequired,
    tableFilterable: _react2['default'].PropTypes.array.isRequired
  };

  exports['default'] = MainSection;
  module.exports = exports['default'];

},{"../../../../common/components/BaseComponent.jsx":37,"react":482,"reactable":483}],15:[function(require,module,exports){
  'use strict';

  exports.__esModule = true;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  var _keymirror = require('keymirror');

  var _keymirror2 = _interopRequireDefault(_keymirror);

  var DashboardConstant = _keymirror2['default']({
    GET_MAIL_LOGS: null
  });

  exports['default'] = DashboardConstant;
  module.exports = exports['default'];

},{"keymirror":48}],16:[function(require,module,exports){
  'use strict';

  exports.__esModule = true;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  var _commonDispatcherAppDispatcher = require('../../../../common/dispatcher/AppDispatcher');

  var _commonDispatcherAppDispatcher2 = _interopRequireDefault(_commonDispatcherAppDispatcher);

  var _actionsHomeActionCreator = require('../actions/HomeActionCreator');

  var _actionsHomeActionCreator2 = _interopRequireDefault(_actionsHomeActionCreator);

  var _constantsHomeConstants = require('../constants/HomeConstants');

  var _constantsHomeConstants2 = _interopRequireDefault(_constantsHomeConstants);

  var _events = require('events');

  var _objectAssign = require('object-assign');

  var _objectAssign2 = _interopRequireDefault(_objectAssign);

  var _jquery = require('jquery');

  var _jquery2 = _interopRequireDefault(_jquery);

  var CHANGE_EVENT = 'change';

  // [BLOCK] All Store Data
  var _allMailLogs = [];

  // [BLOCK] All Helper Functions For Dispatcher Registration
  function _updateAllMailLogs(allMailLogs) {
    _allMailLogs = allMailLogs;
  }

  // [BLOCK] Store Component
  var HomeStore = _objectAssign2['default']({}, _events.EventEmitter.prototype, {
    getAllMailLogs: function getAllMailLogs() {
      return _allMailLogs;
    },

    emitChange: function emitChange() {
      this.emit(CHANGE_EVENT);
    },
    addChangeListener: function addChangeListener(callback) {
      this.on(CHANGE_EVENT, callback);
    },
    removeChangeListener: function removeChangeListener(callback) {
      this.removeListener(CHANGE_EVENT, callback);
    }

  });

  // [BLOCK] Dispatcher Registration For The Current Store
  _commonDispatcherAppDispatcher2['default'].register(function (action) {
    console.log('Action in HomeStore: ', action);

    var actionType = action.actionType;
    var data = action.data;

    switch (actionType) {
      case _constantsHomeConstants2['default'].GET_MAIL_LOGS:
        _updateAllMailLogs(data);
        HomeStore.emitChange();
        break;
      default:
        return;
    }
  });

  exports['default'] = HomeStore;
  module.exports = exports['default'];

},{"../../../../common/dispatcher/AppDispatcher":38,"../actions/HomeActionCreator":10,"../constants/HomeConstants":15,"events":45,"jquery":47,"object-assign":116}],17:[function(require,module,exports){
  'use strict';

  exports.__esModule = true;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  var _commonDispatcherAppDispatcher = require('../../../../common/dispatcher/AppDispatcher');

  var _commonDispatcherAppDispatcher2 = _interopRequireDefault(_commonDispatcherAppDispatcher);

  var _constantsMemoConstants = require('../constants/MemoConstants');

  var _constantsMemoConstants2 = _interopRequireDefault(_constantsMemoConstants);

  var DashboardActionCreator = {
    create: function create(text) {
      _commonDispatcherAppDispatcher2['default'].dispatch({
        actionType: _constantsMemoConstants2['default'].TODO_CREATE,
        text: text
      });
    },
    toggleComplete: function toggleComplete(todo) {
      var id = todo.id;
      var isComplete = todo.isComplete;

      _commonDispatcherAppDispatcher2['default'].dispatch({
        actionType: _constantsMemoConstants2['default'].TODO_TOGGLE_COMPLETE,
        id: id,
        isComplete: isComplete
      });
    },
    toggleCompleteAll: function toggleCompleteAll() {
      _commonDispatcherAppDispatcher2['default'].dispatch({
        actionType: _constantsMemoConstants2['default'].TODO_TOGGLE_COMPLETE_ALL
      });
    },
    destroy: function destroy(id) {
      _commonDispatcherAppDispatcher2['default'].dispatch({
        actionType: _constantsMemoConstants2['default'].TODO_DESTROY,
        id: id
      });
    },
    updateText: function updateText(id, text) {
      _commonDispatcherAppDispatcher2['default'].dispatch({
        actionType: _constantsMemoConstants2['default'].TODO_UPDATE_TEXT,
        id: id,
        text: text
      });
    },
    destroyCompleted: function destroyCompleted() {
      _commonDispatcherAppDispatcher2['default'].dispatch({
        actionType: _constantsMemoConstants2['default'].TODO_DESTROY_COMPLETED
      });
    }

  };

  exports['default'] = DashboardActionCreator;
  module.exports = exports['default'];

},{"../../../../common/dispatcher/AppDispatcher":38,"../constants/MemoConstants":24}],18:[function(require,module,exports){
  'use strict';

  exports.__esModule = true;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _actionsMemoActionCreator = require('../actions/MemoActionCreator');

  var _actionsMemoActionCreator2 = _interopRequireDefault(_actionsMemoActionCreator);

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _commonComponentsBaseComponentJsx = require('../../../../common/components/BaseComponent.jsx');

  var _commonComponentsBaseComponentJsx2 = _interopRequireDefault(_commonComponentsBaseComponentJsx);

  var Footer = (function (_BaseComponent) {
    _inherits(Footer, _BaseComponent);

    function Footer() {
      _classCallCheck(this, Footer);

      _BaseComponent.call(this);
    }

    Footer.prototype.render = function render() {
      var itemLeftAmount = 0;
      var itemLeftPhrase = ' item';

      var descriptionSpan = null;
      var clearAllCompletedButton = null;
      var total = Object.keys(this.props.allTodos).length;
      if (total) {
        var completeAmount = 0;
        for (var id in this.props.allTodos) {
          if (this.props.allTodos[id].isComplete) {
            completeAmount++;
          }
        }
        if (completeAmount) {
          clearAllCompletedButton = _react2['default'].createElement(
            'button',
            {
              onClick: this._onClearAllCompletedClick },
            'clear ',
            completeAmount,
            ' completed ',
            itemLeftPhrase
          );
        }
        itemLeftAmount = total - completeAmount;
        itemLeftPhrase = itemLeftAmount > 1 ? ' items' : ' item';
      }
      descriptionSpan = _react2['default'].createElement(
        'p',
        null,
        _react2['default'].createElement(
          'span',
          null,
          'Total:  ',
          _react2['default'].createElement(
            'strong',
            null,
            total
          ),
          itemLeftPhrase
        ),
        '   ',
        clearAllCompletedButton
      );

      return _react2['default'].createElement(
        'footer',
        null,
        descriptionSpan,
        _react2['default'].createElement(
          'p',
          null,
          'Some other info..'
        )
      );
    };

    Footer.prototype._onClearAllCompletedClick = function _onClearAllCompletedClick() {
      _actionsMemoActionCreator2['default'].destroyCompleted();
    };

    return Footer;
  })(_commonComponentsBaseComponentJsx2['default']);

  Footer.propTypes = {
    allTodos: _react2['default'].PropTypes.object.isRequired
  };

  exports['default'] = Footer;
  module.exports = exports['default'];

},{"../../../../common/components/BaseComponent.jsx":37,"../actions/MemoActionCreator":17,"react":482}],19:[function(require,module,exports){
  'use strict';

  exports.__esModule = true;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _TextInputJsx = require('./TextInput.jsx');

  var _TextInputJsx2 = _interopRequireDefault(_TextInputJsx);

  var _actionsMemoActionCreator = require('../actions/MemoActionCreator');

  var _actionsMemoActionCreator2 = _interopRequireDefault(_actionsMemoActionCreator);

  var _commonComponentsBaseComponentJsx = require('../../../../common/components/BaseComponent.jsx');

  var _commonComponentsBaseComponentJsx2 = _interopRequireDefault(_commonComponentsBaseComponentJsx);

  var Header = (function (_BaseComponent) {
    _inherits(Header, _BaseComponent);

    function Header() {
      _classCallCheck(this, Header);

      _BaseComponent.call(this);
    }

    Header.prototype.render = function render() {
      return _react2['default'].createElement(
        'header',
        null,
        _react2['default'].createElement(
          'h1',
          null,
          'Memo'
        ),
        _react2['default'].createElement(_TextInputJsx2['default'], {
          onSave: this._onSave,
          value: '',
          placeholder: 'What needs to be done?'
        })
      );
    };

    Header.prototype._onSave = function _onSave(text) {
      if (text.trim()) {
        _actionsMemoActionCreator2['default'].create(text);
      }
    };

    return Header;
  })(_commonComponentsBaseComponentJsx2['default']);

  exports['default'] = Header;
  module.exports = exports['default'];

},{"../../../../common/components/BaseComponent.jsx":37,"../actions/MemoActionCreator":17,"./TextInput.jsx":23,"react":482}],20:[function(require,module,exports){
  'use strict';

  exports.__esModule = true;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _actionsMemoActionCreator = require('../actions/MemoActionCreator');

  var _actionsMemoActionCreator2 = _interopRequireDefault(_actionsMemoActionCreator);

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _classnames = require('classnames');

  var _classnames2 = _interopRequireDefault(_classnames);

  var _TextInputJsx = require('./TextInput.jsx');

  var _TextInputJsx2 = _interopRequireDefault(_TextInputJsx);

  var _commonComponentsBaseComponentJsx = require('../../../../common/components/BaseComponent.jsx');

  var _commonComponentsBaseComponentJsx2 = _interopRequireDefault(_commonComponentsBaseComponentJsx);

  var ListItem = (function (_BaseComponent) {
    _inherits(ListItem, _BaseComponent);

    function ListItem() {
      _classCallCheck(this, ListItem);

      _BaseComponent.call(this);
      this._bind('_onToggleComplete', '_onDeleteClick', '_onDoubleClick', '_onSave');
      this.state = {
        isEditing: false
      };
    }

    ListItem.prototype.render = function render() {
      var todo = this.props.todo;

      var input = null;
      if (this.state.isEditing) {
        input = _react2['default'].createElement(_TextInputJsx2['default'], {
          onSave: this._onSave,
          value: this.props.todo.text
        });
      }

      return _react2['default'].createElement(
        'li',
        {
          key: todo.key,
          className: _classnames2['default']({
            'text-danger': !todo.isComplete,
            'text-success': todo.isComplete,
            'text-warning': this.state.isEditing
          }) },
        _react2['default'].createElement(
          'div',
          null,
          _react2['default'].createElement('input', {
            onChange: this._onToggleComplete,
            checked: todo.isComplete,
            type: 'checkbox'
          }),
          '  ',
          _react2['default'].createElement(
            'label',
            { onDoubleClick: this._onDoubleClick },
            todo.text
          ),
          '  ',
          _react2['default'].createElement(
            'button',
            { onClick: this._onDeleteClick, type: 'button' },
            'delete'
          ),
          '   ',
          input
        )
      );
    };

    ListItem.prototype._onToggleComplete = function _onToggleComplete() {
      _actionsMemoActionCreator2['default'].toggleComplete(this.props.todo);
    };

    ListItem.prototype._onDeleteClick = function _onDeleteClick() {
      _actionsMemoActionCreator2['default'].destroy(this.props.todo.id);
    };

    ListItem.prototype._onDoubleClick = function _onDoubleClick() {
      this.setState({ isEditing: true });
    };

    ListItem.prototype._onSave = function _onSave(text) {
      _actionsMemoActionCreator2['default'].updateText(this.props.todo.id, text);
      this.setState({ isEditing: false });
    };

    return ListItem;
  })(_commonComponentsBaseComponentJsx2['default']);

  ListItem.propTypes = {
    todo: _react2['default'].PropTypes.object.isRequired
  };

  exports['default'] = ListItem;
  module.exports = exports['default'];

},{"../../../../common/components/BaseComponent.jsx":37,"../actions/MemoActionCreator":17,"./TextInput.jsx":23,"classnames":40,"react":482}],21:[function(require,module,exports){
  'use strict';

  exports.__esModule = true;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _actionsMemoActionCreator = require('../actions/MemoActionCreator');

  var _actionsMemoActionCreator2 = _interopRequireDefault(_actionsMemoActionCreator);

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _ListItemJsx = require('./ListItem.jsx');

  var _ListItemJsx2 = _interopRequireDefault(_ListItemJsx);

  var _commonComponentsBaseComponentJsx = require('../../../../common/components/BaseComponent.jsx');

  var _commonComponentsBaseComponentJsx2 = _interopRequireDefault(_commonComponentsBaseComponentJsx);

  var MainSection = (function (_BaseComponent) {
    _inherits(MainSection, _BaseComponent);

    function MainSection() {
      _classCallCheck(this, MainSection);

      _BaseComponent.call(this);
      this._bind('_onToggleCompleteAll');
    }

    MainSection.prototype.render = function render() {
      var allTodos = this.props.allTodos;
      if (Object.keys(allTodos).length < 1) {
        return null;
      }

      var todoList = [];
      for (var key in allTodos) {
        todoList.push(_react2['default'].createElement(_ListItemJsx2['default'], {
          key: key,
          todo: allTodos[key]
        }));
      }

      return _react2['default'].createElement(
        'section',
        null,
        _react2['default'].createElement('input', {
          checked: this.props.areAllComplete,
          onChange: this._onToggleCompleteAll,
          id: 'ToggleAll',
          type: 'checkbox'
        }),
        ' ',
        _react2['default'].createElement(
          'label',
          { htmlFor: 'ToggleAll' },
          'Toggle All'
        ),
        _react2['default'].createElement(
          'ul',
          null,
          todoList
        )
      );
    };

    MainSection.prototype._onToggleCompleteAll = function _onToggleCompleteAll() {
      _actionsMemoActionCreator2['default'].toggleCompleteAll();
    };

    return MainSection;
  })(_commonComponentsBaseComponentJsx2['default']);

  MainSection.propTypes = {
    allTodos: _react2['default'].PropTypes.object.isRequired,
    areAllComplete: _react2['default'].PropTypes.bool.isRequired
  };

  exports['default'] = MainSection;
  module.exports = exports['default'];

},{"../../../../common/components/BaseComponent.jsx":37,"../actions/MemoActionCreator":17,"./ListItem.jsx":20,"react":482}],22:[function(require,module,exports){
  'use strict';

  exports.__esModule = true;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _storesMemoStore = require('../stores/MemoStore');

  var _storesMemoStore2 = _interopRequireDefault(_storesMemoStore);

  var _actionsMemoActionCreator = require('../actions/MemoActionCreator');

  var _actionsMemoActionCreator2 = _interopRequireDefault(_actionsMemoActionCreator);

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _moment = require('moment');

  var _moment2 = _interopRequireDefault(_moment);

  var _lodash = require('lodash');

  var _lodash2 = _interopRequireDefault(_lodash);

  var _HeaderJsx = require('./Header.jsx');

  var _HeaderJsx2 = _interopRequireDefault(_HeaderJsx);

  var _MainSectionJsx = require('./MainSection.jsx');

  var _MainSectionJsx2 = _interopRequireDefault(_MainSectionJsx);

  var _FooterJsx = require('./Footer.jsx');

  var _FooterJsx2 = _interopRequireDefault(_FooterJsx);

  var _commonComponentsBaseComponentJsx = require('../../../../common/components/BaseComponent.jsx');

  var _commonComponentsBaseComponentJsx2 = _interopRequireDefault(_commonComponentsBaseComponentJsx);

  /**
   * Private method only for `setState()` and `getInitialState()` - sync with the data in `MemoStore`.
   */
  function _getState() {
    return {
      allTodos: _storesMemoStore2['default'].getAll(),
      areAllComplete: _storesMemoStore2['default'].areAllComplete()
    };
  }

  // [NOTE] All Listeners: `MemoStore`

  var MemoApp = (function (_BaseComponent) {
    _inherits(MemoApp, _BaseComponent);

    function MemoApp() {
      _classCallCheck(this, MemoApp);

      _BaseComponent.call(this);
      this._bind('_onChange');
      this.state = _getState();
    }

    MemoApp.prototype.componentDidMount = function componentDidMount() {
      _storesMemoStore2['default'].addChangeListener(this._onChange);
    };

    MemoApp.prototype.componentWillUnmount = function componentWillUnmount() {
      _storesMemoStore2['default'].removeChangeListener(this._onChange);
    };

    MemoApp.prototype.render = function render() {
      var allMailLogs = this.state.allMailLogs;
      for (var index in allMailLogs) {
        allMailLogs[index].level = allMailLogs[index].level.toUpperCase();
        allMailLogs[index].timestamp = _moment2['default'](allMailLogs[index].timestamp).format('YYYY-MM-DD HH:mm');
        allMailLogs[index].details = JSON.stringify(allMailLogs[index].details);
      }

      return _react2['default'].createElement(
        'div',
        { className: 'row' },
        _react2['default'].createElement(
          'div',
          { className: 'col-lg-offset-4 col-lg-8' },
          _react2['default'].createElement(_HeaderJsx2['default'], null),
          _react2['default'].createElement('br', null),
          _react2['default'].createElement(_MainSectionJsx2['default'], {
            allTodos: this.state.allTodos,
            areAllComplete: this.state.areAllComplete
          }),
          _react2['default'].createElement(_FooterJsx2['default'], { allTodos: this.state.allTodos })
        )
      );
    };

    MemoApp.prototype._onChange = function _onChange() {
      this.setState(_getState());
    };

    return MemoApp;
  })(_commonComponentsBaseComponentJsx2['default']);

  exports['default'] = MemoApp;
  module.exports = exports['default'];

},{"../../../../common/components/BaseComponent.jsx":37,"../actions/MemoActionCreator":17,"../stores/MemoStore":25,"./Footer.jsx":18,"./Header.jsx":19,"./MainSection.jsx":21,"lodash":52,"moment":115,"react":482}],23:[function(require,module,exports){
  'use strict';

  exports.__esModule = true;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _commonComponentsBaseComponentJsx = require('../../../../common/components/BaseComponent.jsx');

  var _commonComponentsBaseComponentJsx2 = _interopRequireDefault(_commonComponentsBaseComponentJsx);

  var ENTER_KEY_CODE = 13;

  // generic text input React Component

  var TextInput = (function (_BaseComponent) {
    _inherits(TextInput, _BaseComponent);

    function TextInput(props) {
      _classCallCheck(this, TextInput);

      _BaseComponent.call(this);
      this._bind('_onSave', '_onChange', '_onKeyDown');
      this.state = props;
    }

    TextInput.prototype.render = function render() {
      return _react2['default'].createElement('input', {
        onBlur: this._onSave,
        onChange: this._onChange,
        onKeyDown: this._onKeyDown,
        value: this.state.value,
        className: this.props.className,
        id: this.props.id,
        placeholder: this.props.placeholder,
        autoFocus: true,
        type: 'text'
      });
    };

    TextInput.prototype._onSave = function _onSave() {
      this.props.onSave(this.state.value);
      this.setState({
        value: ''
      });
    };

    TextInput.prototype._onChange = function _onChange(event) {
      this.setState({
        value: event.target.value
      });
    };

    TextInput.prototype._onKeyDown = function _onKeyDown(event) {
      if (event.keyCode === ENTER_KEY_CODE) {
        this._onSave();
      }
    };

    return TextInput;
  })(_commonComponentsBaseComponentJsx2['default']);

  TextInput.popTypes = {
    onSave: _react2['default'].PropTypes.func.isRequired,
    placeholder: _react2['default'].PropTypes.string,
    value: _react2['default'].PropTypes.string,
    className: _react2['default'].PropTypes.string,
    id: _react2['default'].PropTypes.string
  };

  exports['default'] = TextInput;
  module.exports = exports['default'];

},{"../../../../common/components/BaseComponent.jsx":37,"react":482}],24:[function(require,module,exports){
  'use strict';

  exports.__esModule = true;
  var keyMirror = require('keymirror');

  var MemoConstants = keyMirror({
    TODO_CREATE: null,
    TODO_TOGGLE_COMPLETE: null,
    TODO_TOGGLE_COMPLETE_ALL: null,
    TODO_DESTROY: null,
    TODO_UPDATE_TEXT: null,
    TODO_DESTROY_COMPLETED: null
  });

  exports['default'] = MemoConstants;
  module.exports = exports['default'];

},{"keymirror":48}],25:[function(require,module,exports){
  'use strict';

  exports.__esModule = true;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  var _commonDispatcherAppDispatcher = require('../../../../common/dispatcher/AppDispatcher');

  var _commonDispatcherAppDispatcher2 = _interopRequireDefault(_commonDispatcherAppDispatcher);

  var _actionsMemoActionCreator = require('../actions/MemoActionCreator');

  var _actionsMemoActionCreator2 = _interopRequireDefault(_actionsMemoActionCreator);

  var _constantsMemoConstants = require('../constants/MemoConstants');

  var _constantsMemoConstants2 = _interopRequireDefault(_constantsMemoConstants);

  var _events = require('events');

  var _objectAssign = require('object-assign');

  var _objectAssign2 = _interopRequireDefault(_objectAssign);

  var _jquery = require('jquery');

  var _jquery2 = _interopRequireDefault(_jquery);

  var CHANGE_EVENT = 'change';

  // [BLOCK] All Store Data
  var _todos = {};

  // [BLOCK] All Helper Functions For Dispatcher Registration
  function _create(text) {
    var id = +new Date() + Math.floor(Math.random() * 999999).toString(36);
    _todos[id] = {
      id: id,
      text: text,
      isComplete: false
    };
  }
  function _update(id, updates) {
    _todos[id] = _objectAssign2['default']({}, _todos[id], updates);
  }
  function _updateAll(updates) {
    for (var id in _todos) {
      _update(id, updates);
    }
  }
  function _destroy(id) {
    delete _todos[id];
  }
  function _destroyCompleted() {
    for (var id in _todos) {
      if (_todos[id].isComplete) {
        _destroy(id);
      }
    }
  }

  // [BLOCK] Store Component
  var MemoStore = _objectAssign2['default']({}, _events.EventEmitter.prototype, {
    getAll: function getAll() {
      return _todos;
    },
    areAllComplete: function areAllComplete() {
      for (var id in _todos) {
        if (!_todos[id].isComplete) {
          return false;
        }
      }
      return true;
    },

    emitChange: function emitChange() {
      this.emit(CHANGE_EVENT);
    },
    addChangeListener: function addChangeListener(callback) {
      this.on(CHANGE_EVENT, callback);
    },
    removeChangeListener: function removeChangeListener(callback) {
      this.removeListener(CHANGE_EVENT, callback);
    }

  });

  // [BLOCK] Dispatcher Registration For The Current Store
  _commonDispatcherAppDispatcher2['default'].register(function (action) {
    console.log('Action in MemoStore: ', action);

    var actionType = action.actionType;
    var id = action.id || 0;
    var isComplete = action.isComplete === false ? false : action.isComplete;
    var text = action.text && action.text.trim() || '';

    switch (actionType) {
      case _constantsMemoConstants2['default'].TODO_CREATE:
        if (text) {
          _create(text);
          MemoStore.emitChange();
        }
        break;
      case _constantsMemoConstants2['default'].TODO_TOGGLE_COMPLETE:
        _update(id, { isComplete: !isComplete });
        MemoStore.emitChange();
        break;
      case _constantsMemoConstants2['default'].TODO_TOGGLE_COMPLETE_ALL:
        if (MemoStore.areAllComplete()) {
          _updateAll({ isComplete: false });
        } else {
          _updateAll({ isComplete: true });
        }
        MemoStore.emitChange();
        break;
      case _constantsMemoConstants2['default'].TODO_DESTROY:
        _destroy(id);
        MemoStore.emitChange();
        break;
      case _constantsMemoConstants2['default'].TODO_DESTROY_COMPLETED:
        _destroyCompleted();
        MemoStore.emitChange();
        break;
      case _constantsMemoConstants2['default'].TODO_UPDATE_TEXT:
        if (text) {
          _update(id, { text: text });
          MemoStore.emitChange();
        }
        break;
      default:
        return;
    }
  });

  exports['default'] = MemoStore;
  module.exports = exports['default'];

},{"../../../../common/dispatcher/AppDispatcher":38,"../actions/MemoActionCreator":17,"../constants/MemoConstants":24,"events":45,"jquery":47,"object-assign":116}],26:[function(require,module,exports){
  'use strict';

  exports.__esModule = true;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  var _commonDispatcherAppDispatcher = require('../../../../common/dispatcher/AppDispatcher');

  var _commonDispatcherAppDispatcher2 = _interopRequireDefault(_commonDispatcherAppDispatcher);

  var _constantsPushNotificationConstants = require('../constants/PushNotificationConstants');

  var _constantsPushNotificationConstants2 = _interopRequireDefault(_constantsPushNotificationConstants);

  var _jquery = require('jquery');

  var _jquery2 = _interopRequireDefault(_jquery);

  var PushNotificationActionCreator = {
    asyncGetPushNotificationBucket: function asyncGetPushNotificationBucket() {
      var _this = this;

      // for server-side rendering since jQuery requires a `window` with a `document` to do `ajax()`
      if (_jquery2['default'].ajax) {
        _jquery2['default'].ajax('/api/mailman-push-notifications/level').done(function (data) {
          _this._asyncGetPushNotificationBucketResult(null, data);
        }).fail(function (err) {
          _this._asyncGetPushNotificationBucketResult(err);
        });
      }
    },
    _asyncGetPushNotificationBucketResult: function _asyncGetPushNotificationBucketResult(err, data) {
      if (err) return console.log('Error on RESTful API:', err);

      _commonDispatcherAppDispatcher2['default'].dispatch({
        actionType: _constantsPushNotificationConstants2['default'].GET_PUSH_NOTIFICATION_BUCKET,
        data: data
      });
    }

  };

  exports['default'] = PushNotificationActionCreator;
  module.exports = exports['default'];

},{"../../../../common/dispatcher/AppDispatcher":38,"../constants/PushNotificationConstants":28,"jquery":47}],27:[function(require,module,exports){
  'use strict';

  exports.__esModule = true;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _storesPushNotificationStore = require('../stores/PushNotificationStore');

  var _storesPushNotificationStore2 = _interopRequireDefault(_storesPushNotificationStore);

  var _actionsPushNotificationActionCreator = require('../actions/PushNotificationActionCreator');

  var _actionsPushNotificationActionCreator2 = _interopRequireDefault(_actionsPushNotificationActionCreator);

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _moment = require('moment');

  var _moment2 = _interopRequireDefault(_moment);

  var _lodash = require('lodash');

  var _lodash2 = _interopRequireDefault(_lodash);

  //import Header from './Header.jsx';

  var _homeComponentsMainSectionJsx = require('../../home/components/MainSection.jsx');

  var _homeComponentsMainSectionJsx2 = _interopRequireDefault(_homeComponentsMainSectionJsx);

  //import Footer from './Footer.jsx';

  var _commonComponentsBaseComponentJsx = require('../../../../common/components/BaseComponent.jsx');

  var _commonComponentsBaseComponentJsx2 = _interopRequireDefault(_commonComponentsBaseComponentJsx);

  /**
   * Private method only for `setState()` and `getInitialState()` - sync with the data in `PushNotificationStore`.
   */
  function _getState() {
    return {
      allPushNotifications: _storesPushNotificationStore2['default'].getPushNotificationBucket().allPushNotifications
    };
  }

  // [NOTE] All Listeners: `PushNotificationStore`

  var PushNotificationApp = (function (_BaseComponent) {
    _inherits(PushNotificationApp, _BaseComponent);

    function PushNotificationApp(props) {
      _classCallCheck(this, PushNotificationApp);

      _BaseComponent.call(this);
      this._bind('_onChange');
      this.state = _getState();
      _actionsPushNotificationActionCreator2['default'].asyncGetPushNotificationBucket();
    }

    PushNotificationApp.prototype.componentDidMount = function componentDidMount() {
      _storesPushNotificationStore2['default'].addChangeListener(this._onChange);
    };

    PushNotificationApp.prototype.comonentWillUnmount = function comonentWillUnmount() {
      _storesPushNotificationStore2['default'].removeChangeListener(this._onChange);
    };

    PushNotificationApp.prototype.render = function render() {
      var allPushNotifications = this.state.allPushNotifications;
      for (var index in allPushNotifications) {
        allPushNotifications[index].MailmanPushNotificationDetail = allPushNotifications[index].MailmanPushNotificationDetail || 'N/A';
      }

      return _react2['default'].createElement(
        'div',
        null,
        _react2['default'].createElement(_homeComponentsMainSectionJsx2['default'], {
          tableData: allPushNotifications,
          tableColumns: [{ key: 'MailmanPushNotificationType', label: 'Type' }, { key: 'MailmanPushNotificationTimeStamp', label: 'Timestamp' }, { key: 'MailmanPushNotificationDetail', label: 'Details' }],
          tableItemPerPage: 12,
          tableSortable: true,
          tableFilterable: ['MailmanPushNotificationType', 'MailmanPushNotificationTimeStamp', 'MailmanPushNotificationDetail']
        })
      );
    };

    PushNotificationApp.prototype._onChange = function _onChange() {
      this.setState(_getState());
    };

    return PushNotificationApp;
  })(_commonComponentsBaseComponentJsx2['default']);

  exports['default'] = PushNotificationApp;
  module.exports = exports['default'];

},{"../../../../common/components/BaseComponent.jsx":37,"../../home/components/MainSection.jsx":14,"../actions/PushNotificationActionCreator":26,"../stores/PushNotificationStore":29,"lodash":52,"moment":115,"react":482}],28:[function(require,module,exports){
  'use strict';

  exports.__esModule = true;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  var _keymirror = require('keymirror');

  var _keymirror2 = _interopRequireDefault(_keymirror);

  var PushNotificationConstants = _keymirror2['default']({
    GET_PUSH_NOTIFICATION_BUCKET: null
  });

  exports['default'] = PushNotificationConstants;
  module.exports = exports['default'];

},{"keymirror":48}],29:[function(require,module,exports){
  'use strict';

  exports.__esModule = true;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  var _commonDispatcherAppDispatcher = require('../../../../common/dispatcher/AppDispatcher');

  var _commonDispatcherAppDispatcher2 = _interopRequireDefault(_commonDispatcherAppDispatcher);

  var _actionsPushNotificationActionCreator = require('../actions/PushNotificationActionCreator');

  var _actionsPushNotificationActionCreator2 = _interopRequireDefault(_actionsPushNotificationActionCreator);

  var _constantsPushNotificationConstants = require('../constants/PushNotificationConstants');

  var _constantsPushNotificationConstants2 = _interopRequireDefault(_constantsPushNotificationConstants);

  var _events = require('events');

  var _objectAssign = require('object-assign');

  var _objectAssign2 = _interopRequireDefault(_objectAssign);

  var _jquery = require('jquery');

  var _jquery2 = _interopRequireDefault(_jquery);

  var CHANGE_EVENT = 'change';

  // [BLOCK] All Store Data
  var _pushNotificationUnreadCount = 0;
  var _allPushNotifications = [];

  // [BLOCK] All Helper Functions For Dispatcher Registration
  function _updatePushNotificationBucket(data) {
    if (data.unreadCount !== _pushNotificationUnreadCount || data.allNotifications.length !== _allPushNotifications.length) {
      _pushNotificationUnreadCount = data.unreadCount;
      _allPushNotifications = data.allNotifications;
    }
  }

  // [BLOCK] Store Component
  var PushNotificationStore = _objectAssign2['default']({}, _events.EventEmitter.prototype, {
    getPushNotificationBucket: function getPushNotificationBucket() {
      return {
        pushNotificationUnreadCount: _pushNotificationUnreadCount,
        allPushNotifications: _allPushNotifications
      };
    },

    emitChange: function emitChange() {
      this.emit(CHANGE_EVENT);
    },
    addChangeListener: function addChangeListener(callback) {
      this.on(CHANGE_EVENT, callback);
    },
    removeChangeListener: function removeChangeListener(callback) {
      this.removeListener(CHANGE_EVENT, callback);
    }

  });

  // [BLOCK] Dispatcher Registration For The Current Store
  _commonDispatcherAppDispatcher2['default'].register(function (action) {
    console.log('Action in PushNotificationStore: ', action);

    var actionType = action.actionType;
    var data = action.data;

    switch (actionType) {
      case _constantsPushNotificationConstants2['default'].GET_PUSH_NOTIFICATION_BUCKET:
        _updatePushNotificationBucket(data);
        PushNotificationStore.emitChange();
        break;
      default:
        return;
    }
  });

  exports['default'] = PushNotificationStore;
  module.exports = exports['default'];

},{"../../../../common/dispatcher/AppDispatcher":38,"../actions/PushNotificationActionCreator":26,"../constants/PushNotificationConstants":28,"events":45,"jquery":47,"object-assign":116}],30:[function(require,module,exports){
  'use strict';

  exports.__esModule = true;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  var _commonDispatcherAppDispatcher = require('../../../../common/dispatcher/AppDispatcher');

  var _commonDispatcherAppDispatcher2 = _interopRequireDefault(_commonDispatcherAppDispatcher);

  var _constantsAuthConstants = require('../constants/AuthConstants');

  var _constantsAuthConstants2 = _interopRequireDefault(_constantsAuthConstants);

  var _jquery = require('jquery');

  var _jquery2 = _interopRequireDefault(_jquery);

  var AuthActionCreator = {
    asyncLogin: function asyncLogin(email, password) {
      var _this = this;

      _jquery2['default'].ajax('/api/users/login', {
        method: 'POST',
        contentType: 'application/json; charset=utf-8',
        data: JSON.stringify({
          userEmail: email,
          userPassword: password
        })
      }).done(function (data) {
        _this._asyncLoginResult(null, data);
      }).fail(function (err) {
        _this._asyncLoginResult(err);
      });
    },
    _asyncLoginResult: function _asyncLoginResult(err, data) {
      if (err) {
        if (err.responseJSON) return _commonDispatcherAppDispatcher2['default'].dispatch({
          actionType: _constantsAuthConstants2['default'].AUTH_LOGIN,
          data: {
            isLoggedIn: false,
            sessionData: null
          }
        });else return console.log('Error on RESTful API:', err);
      }

      if (data.msg === 'Login successfully!') {
        _commonDispatcherAppDispatcher2['default'].dispatch({
          actionType: _constantsAuthConstants2['default'].AUTH_LOGIN,
          data: {
            isLoggedIn: true,
            sessionData: data.userInfo
          }
        });
      } else {
        console.log('Something went wrong on RESTful API:', data);
      }
    },
    asyncLogout: function asyncLogout() {
      var _this2 = this;

      _jquery2['default'].ajax('/api/users/logout', {
        method: 'POST'
      }).done(function (data) {
        _this2._asyncLogotResult(null, data);
      }).fail(function (err) {
        _this2._asyncLogotResult(err);
      });
    },
    _asyncLogotResult: function _asyncLogotResult(err, data) {
      if (err) return console.log('Error on RESTful API:', err);

      if (data.msg === 'Logout successfully!') {
        _commonDispatcherAppDispatcher2['default'].dispatch({
          actionType: _constantsAuthConstants2['default'].AUTH_LOGOUT
        });
      } else {
        console.log('Something went wrong on RESTful API:', data);
      }
    },
    asyncGetUnreadNotificationCount: function asyncGetUnreadNotificationCount(err, unreadNotificationCount) {
      if (err) return console.log('Error on RESTful API:', err);

      _commonDispatcherAppDispatcher2['default'].dispatch({
        actionType: _constantsAuthConstants2['default'].ASYNC_GET_UNREAD_NOTIFICATION_COUNT,
        data: unreadNotificationCount
      });
    }

  };

  exports['default'] = AuthActionCreator;
  module.exports = exports['default'];

},{"../../../../common/dispatcher/AppDispatcher":38,"../constants/AuthConstants":34,"jquery":47}],31:[function(require,module,exports){
  'use strict';

  exports.__esModule = true;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _commonComponentsBaseComponentJsx = require('../../../../common/components/BaseComponent.jsx');

  var _commonComponentsBaseComponentJsx2 = _interopRequireDefault(_commonComponentsBaseComponentJsx);

  var FormInput = (function (_BaseComponent) {
    _inherits(FormInput, _BaseComponent);

    function FormInput(props) {
      _classCallCheck(this, FormInput);

      _BaseComponent.call(this);
      this._bind('_onChange');
      this.state = {
        email: '',
        emailIsValid: false,
        password: '',
        passwordIsValid: false
      };
    }

    FormInput.prototype.render = function render() {
      return _react2['default'].createElement('input', {
        onChange: this._onChange,
        value: this.props.value,
        type: this.props.type,
        placeholder: this.props.placeholder,
        className: this.props.className,
        required: 'required'
      });
    };

    FormInput.prototype._onChange = function _onChange(event) {
      this.props.onChange(event.target.value, event.target.checkValidity());
    };

    return FormInput;
  })(_commonComponentsBaseComponentJsx2['default']);

  FormInput.propTypes = {
    onChange: _react2['default'].PropTypes.func.isRequired,
    value: _react2['default'].PropTypes.string.isRequired,
    type: _react2['default'].PropTypes.string.isRequired,
    placeholder: _react2['default'].PropTypes.string.isRequired,
    className: _react2['default'].PropTypes.string.isRequired
  };

  exports['default'] = FormInput;
  module.exports = exports['default'];

},{"../../../../common/components/BaseComponent.jsx":37,"react":482}],32:[function(require,module,exports){
  'use strict';

  exports.__esModule = true;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _moment = require('moment');

  var _moment2 = _interopRequireDefault(_moment);

  var _lodash = require('lodash');

  var _lodash2 = _interopRequireDefault(_lodash);

  var _LoginFormJsx = require('./LoginForm.jsx');

  var _LoginFormJsx2 = _interopRequireDefault(_LoginFormJsx);

  var _commonComponentsBaseComponentJsx = require('../../../../common/components/BaseComponent.jsx');

  var _commonComponentsBaseComponentJsx2 = _interopRequireDefault(_commonComponentsBaseComponentJsx);

  var LoginApp = (function (_BaseComponent) {
    _inherits(LoginApp, _BaseComponent);

    function LoginApp(props) {
      _classCallCheck(this, LoginApp);

      _BaseComponent.call(this);
    }

    LoginApp.prototype.render = function render() {
      return _react2['default'].createElement(
        'div',
        null,
        _react2['default'].createElement(
          'div',
          { className: 'row' },
          _react2['default'].createElement('div', { style: { paddingTop: '15%' }, className: 'col-lg-12' })
        ),
        _react2['default'].createElement(
          'div',
          { className: 'row' },
          _react2['default'].createElement(
            'div',
            { className: 'col-lg-offset-4 col-lg-4' },
            _react2['default'].createElement(
              'div',
              { className: 'panel panel-default' },
              _react2['default'].createElement(
                'div',
                { className: 'panel-heading text-center' },
                _react2['default'].createElement(
                  'h4',
                  null,
                  _react2['default'].createElement(
                    'span',
                    { className: 'label label-primary' },
                    'Mailman'
                  )
                )
              ),
              _react2['default'].createElement(
                'div',
                { className: 'panel-body' },
                _react2['default'].createElement(_LoginFormJsx2['default'], { onSubmit: this._onSubmit }),
                _react2['default'].createElement(
                  'div',
                  { className: 'panel-footer text-center' },
                  _react2['default'].createElement(
                    'p',
                    { className: 'text-muted' },
                    _react2['default'].createElement(
                      'a',
                      { href: 'mailto:dev@acupay.com' },
                      'Development Support'
                    )
                  ),
                  _react2['default'].createElement(
                    'p',
                    null,
                    'v0.1.0'
                  )
                )
              )
            )
          )
        )
      );
    };

    return LoginApp;
  })(_commonComponentsBaseComponentJsx2['default']);

  exports['default'] = LoginApp;
  module.exports = exports['default'];

},{"../../../../common/components/BaseComponent.jsx":37,"./LoginForm.jsx":33,"lodash":52,"moment":115,"react":482}],33:[function(require,module,exports){
  'use strict';

  exports.__esModule = true;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _actionsAuthActionCreator = require('../actions/AuthActionCreator');

  var _actionsAuthActionCreator2 = _interopRequireDefault(_actionsAuthActionCreator);

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _FormInputJsx = require('./FormInput.jsx');

  var _FormInputJsx2 = _interopRequireDefault(_FormInputJsx);

  var _commonComponentsBaseComponentJsx = require('../../../../common/components/BaseComponent.jsx');

  var _commonComponentsBaseComponentJsx2 = _interopRequireDefault(_commonComponentsBaseComponentJsx);

  var LoginForm = (function (_BaseComponent) {
    _inherits(LoginForm, _BaseComponent);

    function LoginForm(props) {
      _classCallCheck(this, LoginForm);

      _BaseComponent.call(this);
      this._bind('_onChange', '_onSubmit');
      this.state = {
        email: '',
        emailIsValid: false,
        password: '',
        passwordIsValid: false
      };
    }

    LoginForm.prototype.render = function render() {
      return _react2['default'].createElement(
        'form',
        { onSubmit: this._onSubmit },
        _react2['default'].createElement(
          'div',
          { className: 'form-group' },
          _react2['default'].createElement(
            'label',
            null,
            'Email'
          ),
          _react2['default'].createElement(_FormInputJsx2['default'], {
            onChange: this._onChange.bind(this, 'email'),
            value: this.state.email,
            type: 'email',
            placeholder: 'Email',
            className: 'form-control'
          })
        ),
        _react2['default'].createElement(
          'div',
          { className: 'form-group' },
          _react2['default'].createElement(
            'label',
            null,
            'Password'
          ),
          _react2['default'].createElement(_FormInputJsx2['default'], {
            onChange: this._onChange.bind(this, 'password'),
            value: this.state.password,
            type: 'password',
            placeholder: 'Password',
            className: 'form-control'
          })
        ),
        _react2['default'].createElement(
          'button',
          {
            disabled: this.state.emailIsValid && this.state.passwordIsValid ? '' : 'disabled',
            className: 'btn btn-success btn-sm btn-block',
            type: 'submit'
          },
          'Login'
        )
      );
    };

    LoginForm.prototype._onChange = function _onChange(field, value, isValid) {
      var nextState = {};
      nextState[field] = value;
      nextState[field + 'IsValid'] = isValid;
      this.setState(nextState);
    };

    LoginForm.prototype._onSubmit = function _onSubmit(event) {
      // prevents browser navigation (refresh)
      event.preventDefault();

      _actionsAuthActionCreator2['default'].asyncLogin(this.state.email, this.state.password);
    };

    return LoginForm;
  })(_commonComponentsBaseComponentJsx2['default']);

  exports['default'] = LoginForm;
  module.exports = exports['default'];

},{"../../../../common/components/BaseComponent.jsx":37,"../actions/AuthActionCreator":30,"./FormInput.jsx":31,"react":482}],34:[function(require,module,exports){
  'use strict';

  exports.__esModule = true;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  var _keymirror = require('keymirror');

  var _keymirror2 = _interopRequireDefault(_keymirror);

  var AuthConstant = _keymirror2['default']({
    AUTH_LOGIN: null,
    AUTH_LOGIN_RESULT: null,
    AUTH_LOGOUT: null,
    AUTH_LOGOUT_RESULT: null,
    ASYNC_GET_UNREAD_NOTIFICATION_COUNT: null
  });

  exports['default'] = AuthConstant;
  module.exports = exports['default'];

},{"keymirror":48}],35:[function(require,module,exports){
  'use strict';

  exports.__esModule = true;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  var _commonDispatcherAppDispatcher = require('../../../../common/dispatcher/AppDispatcher');

  var _commonDispatcherAppDispatcher2 = _interopRequireDefault(_commonDispatcherAppDispatcher);

  var _actionsAuthActionCreator = require('../actions/AuthActionCreator');

  var _actionsAuthActionCreator2 = _interopRequireDefault(_actionsAuthActionCreator);

  var _constantsAuthConstants = require('../constants/AuthConstants');

  var _constantsAuthConstants2 = _interopRequireDefault(_constantsAuthConstants);

  var _events = require('events');

  var _objectAssign = require('object-assign');

  var _objectAssign2 = _interopRequireDefault(_objectAssign);

  var _jquery = require('jquery');

  var _jquery2 = _interopRequireDefault(_jquery);

  var _cookiesJs = require('cookies-js');

  var _cookiesJs2 = _interopRequireDefault(_cookiesJs);

  var CHANGE_EVENT = 'change';

  // [BLOCK] All Store Data
  var me = { isLoggedIn: false };
  //Cookies.expire('login_tmp');
  if (typeof window !== 'undefined') {
    //console.log('F', Cookies.get('login_tmp'));

    me.isLoggedIn = _cookiesJs2['default'].get('login_tmp') === 'yes';
    _cookiesJs2['default'].expire('login_tmp');
  }

  // [BLOCK] All Helper Functions For Dispatcher Registration
  function _login(isLoggedIn, sessionData) {
    me.isLoggedIn = isLoggedIn;
    if (!me.isLoggedIn) {
      alert('The Email/password combination you entered is incorrect. Please try again or contact Acupay for additional help.');
    }
  }
  function _logout() {
    me.isLoggedIn = false;
  }

  // [BLOCK] Store Component
  var AuthStore = _objectAssign2['default']({}, _events.EventEmitter.prototype, {
    isLoggedIn: function isLoggedIn() {
      return me.isLoggedIn;
    },

    emitChange: function emitChange() {
      this.emit(CHANGE_EVENT);
    },
    addChangeListener: function addChangeListener(callback) {
      this.on(CHANGE_EVENT, callback);
    },
    removeChangeListener: function removeChangeListener(callback) {
      this.removeListener(CHANGE_EVENT, callback);
    }

  });

  // [BLOCK] Dispatcher Registration For The Current Store
  _commonDispatcherAppDispatcher2['default'].register(function (action) {
    console.log('Action in AuthStore: ', action);

    var actionType = action.actionType;
    var data = action.data;

    switch (actionType) {
      case _constantsAuthConstants2['default'].AUTH_LOGIN:
        _login(data.isLoggedIn, data.sessionData);
        AuthStore.emitChange();
        break;
      case _constantsAuthConstants2['default'].AUTH_LOGOUT:
        _logout();
        AuthStore.emitChange();
        break;
      default:
        return;
    }
  });

  exports['default'] = AuthStore;
  module.exports = exports['default'];

},{"../../../../common/dispatcher/AppDispatcher":38,"../actions/AuthActionCreator":30,"../constants/AuthConstants":34,"cookies-js":41,"events":45,"jquery":47,"object-assign":116}],36:[function(require,module,exports){
  'use strict';

  exports.__esModule = true;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _registrationLoginStoresAuthStore = require('./registration/login/stores/AuthStore');

  var _registrationLoginStoresAuthStore2 = _interopRequireDefault(_registrationLoginStoresAuthStore);

  var _registrationLoginActionsAuthActionCreator = require('./registration/login/actions/AuthActionCreator');

  var _registrationLoginActionsAuthActionCreator2 = _interopRequireDefault(_registrationLoginActionsAuthActionCreator);

  var _dashboardPushNotificationStoresPushNotificationStore = require('./dashboard/push-notification/stores/PushNotificationStore');

  var _dashboardPushNotificationStoresPushNotificationStore2 = _interopRequireDefault(_dashboardPushNotificationStoresPushNotificationStore);

  var _dashboardPushNotificationActionsPushNotificationActionCreator = require('./dashboard/push-notification/actions/PushNotificationActionCreator');

  var _dashboardPushNotificationActionsPushNotificationActionCreator2 = _interopRequireDefault(_dashboardPushNotificationActionsPushNotificationActionCreator);

  var _registrationLoginComponentsLoginAppJsx = require('./registration/login/components/LoginApp.jsx');

  var _registrationLoginComponentsLoginAppJsx2 = _interopRequireDefault(_registrationLoginComponentsLoginAppJsx);

  var _dashboardHomeComponentsHomeAppJsx = require('./dashboard/home/components/HomeApp.jsx');

  var _dashboardHomeComponentsHomeAppJsx2 = _interopRequireDefault(_dashboardHomeComponentsHomeAppJsx);

  var _dashboardMemoComponentsMemoAppJsx = require('./dashboard/memo/components/MemoApp.jsx');

  var _dashboardMemoComponentsMemoAppJsx2 = _interopRequireDefault(_dashboardMemoComponentsMemoAppJsx);

  var _dashboardComposerComponentsComposerAppJsx = require('./dashboard/composer/components/ComposerApp.jsx');

  var _dashboardComposerComponentsComposerAppJsx2 = _interopRequireDefault(_dashboardComposerComponentsComposerAppJsx);

  var _dashboardPushNotificationComponentsPushNotificationAppJsx = require('./dashboard/push-notification/components/PushNotificationApp.jsx');

  var _dashboardPushNotificationComponentsPushNotificationAppJsx2 = _interopRequireDefault(_dashboardPushNotificationComponentsPushNotificationAppJsx);

  var _commonComponentsBaseComponentJsx = require('../common/components/BaseComponent.jsx');

  var _commonComponentsBaseComponentJsx2 = _interopRequireDefault(_commonComponentsBaseComponentJsx);

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _reactRouter = require('react-router');

  var _commonSocketIo = require('../common/socket-io');

  var _commonSocketIo2 = _interopRequireDefault(_commonSocketIo);

  var _jquery = require('jquery');

  var _jquery2 = _interopRequireDefault(_jquery);

  var _reactBootstrap = require('react-bootstrap');

  var _reactRouterBootstrap = require('react-router-bootstrap');

  /**
   * Private method only for `setState()` and `getInitialState()` - sync with the data in `AuthStore`, `PushNotificationStore`.
   */
  function _getState() {
    return {
      isLoggedIn: _registrationLoginStoresAuthStore2['default'].isLoggedIn(),
      unreadNotificationCount: _dashboardPushNotificationStoresPushNotificationStore2['default'].getPushNotificationBucket().pushNotificationUnreadCount
    };
  }

  // [NOTE] All Listeners: `AuthStore`, `PushNotificationStore`

  var APP = (function (_BaseComponent) {
    _inherits(APP, _BaseComponent);

    function APP() {
      _classCallCheck(this, APP);

      _BaseComponent.call(this);
      this._bind('_onChange');
      this.state = _getState();
      _dashboardPushNotificationActionsPushNotificationActionCreator2['default'].asyncGetPushNotificationBucket();

      //console.log('B2:', this.props);
      //console.log('F2:', this.state);
    }

    APP.prototype.componentDidMount = function componentDidMount() {
      _registrationLoginStoresAuthStore2['default'].addChangeListener(this._onChange);
      _dashboardPushNotificationStoresPushNotificationStore2['default'].addChangeListener(this._onChange);
    };

    APP.prototype.componentWillUnmount = function componentWillUnmount() {
      _registrationLoginStoresAuthStore2['default'].removeChangeListener(this._onChange);
      _dashboardPushNotificationStoresPushNotificationStore2['default'].addChangeListener(this._onChange);
    };

    APP.prototype.render = function render() {
      //console.log('B3', this.props);

      // `this.props.isLoggedIn` is for server-side rendering and `this.state.isLoggedIn` is for client-side rendering
      if (this.props.isLoggedIn || this.state.isLoggedIn) {
        _commonSocketIo2['default']();

        return _react2['default'].createElement(
          'div',
          null,
          _react2['default'].createElement(
            _reactBootstrap.Navbar,
            { brand: 'Mailman', toggleNavKey: 0 },
            _react2['default'].createElement(
              _reactBootstrap.Nav,
              { eventKey: 0 },
              _react2['default'].createElement(
                _reactRouterBootstrap.NavItemLink,
                { to: 'home' },
                'Home'
              ),
              _react2['default'].createElement(
                _reactRouterBootstrap.NavItemLink,
                { to: 'memo' },
                'Memo'
              ),
              _react2['default'].createElement(
                _reactRouterBootstrap.NavItemLink,
                { to: 'composer' },
                'Composer'
              ),
              _react2['default'].createElement(
                _reactRouterBootstrap.NavItemLink,
                { to: 'push-notification' },
                _react2['default'].createElement(
                  'span',
                  { onClick: this._onRead },
                  'Push Notification  ',
                  _react2['default'].createElement(
                    'span',
                    { style: { color: '#ED6262' } },
                    this.state.unreadNotificationCount
                  )
                )
              )
            )
          ),
          _react2['default'].createElement(
            'button',
            { onClick: this._onClick, style: { marginLeft: '94%' }, className: 'btn-warning' },
            'Logout'
          ),
          _react2['default'].createElement(_reactRouter.RouteHandler, null)
        );
      } else {
        return _react2['default'].createElement(_registrationLoginComponentsLoginAppJsx2['default'], { onLogin: this._onLogin });
      }
    };

    APP.prototype._asyncGetUnreadNotificationCount = function _asyncGetUnreadNotificationCount(err, data) {
      if (err) return _registrationLoginActionsAuthActionCreator2['default'].asyncGetUnreadNotificationCount(err);

      if (data.test !== this.state.totalUnreadNotifications) {
        _registrationLoginActionsAuthActionCreator2['default'].asyncGetUnreadNotificationCount(null, data.test);
      }
    };

    APP.prototype._onChange = function _onChange() {
      this.setState(_getState());
    };

    APP.prototype._onClick = function _onClick() {
      _registrationLoginActionsAuthActionCreator2['default'].asyncLogout();
    };

    APP.prototype._onRead = function _onRead() {};

    return APP;
  })(_commonComponentsBaseComponentJsx2['default']);

  var clientRoutes = [_react2['default'].createElement(
    _reactRouter.Route,
    { namepath: '/', handler: APP },
    _react2['default'].createElement(_reactRouter.Route, { name: 'home', path: '/home', handler: _dashboardHomeComponentsHomeAppJsx2['default'] }),
    _react2['default'].createElement(_reactRouter.Route, { name: 'memo', path: '/memo', handler: _dashboardMemoComponentsMemoAppJsx2['default'] }),
    _react2['default'].createElement(_reactRouter.Route, { name: 'composer', path: '/composer', handler: _dashboardComposerComponentsComposerAppJsx2['default'] }),
    _react2['default'].createElement(_reactRouter.Route, { name: 'push-notification', path: '/push-notification', handler: _dashboardPushNotificationComponentsPushNotificationAppJsx2['default'] }),
    '*/}',
    _react2['default'].createElement(_reactRouter.DefaultRoute, { handler: _dashboardHomeComponentsHomeAppJsx2['default'] }),
    _react2['default'].createElement(_reactRouter.NotFoundRoute, { handler: _dashboardHomeComponentsHomeAppJsx2['default'] })
  )];

  exports['default'] = clientRoutes;
  module.exports = exports['default'];
  /*<Redirect from='/*' to='home' />*/

},{"../common/components/BaseComponent.jsx":37,"../common/socket-io":39,"./dashboard/composer/components/ComposerApp.jsx":3,"./dashboard/home/components/HomeApp.jsx":13,"./dashboard/memo/components/MemoApp.jsx":22,"./dashboard/push-notification/actions/PushNotificationActionCreator":26,"./dashboard/push-notification/components/PushNotificationApp.jsx":27,"./dashboard/push-notification/stores/PushNotificationStore":29,"./registration/login/actions/AuthActionCreator":30,"./registration/login/components/LoginApp.jsx":32,"./registration/login/stores/AuthStore":35,"jquery":47,"react":482,"react-bootstrap":188,"react-router":313,"react-router-bootstrap":288}],37:[function(require,module,exports){
  'use strict';

  exports.__esModule = true;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var BaseComponent = (function (_React$Component) {
    _inherits(BaseComponent, _React$Component);

    function BaseComponent() {
      _classCallCheck(this, BaseComponent);

      _React$Component.apply(this, arguments);
    }

    BaseComponent.prototype._bind = function _bind() {
      var _this = this;

      for (var _len = arguments.length, methods = Array(_len), _key = 0; _key < _len; _key++) {
        methods[_key] = arguments[_key];
      }

      methods.forEach(function (method) {
        _this[method] = _this[method].bind(_this);
      });
    };

    return BaseComponent;
  })(_react2['default'].Component);

  exports['default'] = BaseComponent;
  module.exports = exports['default'];

},{"react":482}],38:[function(require,module,exports){
  'use strict';

  exports.__esModule = true;

  var _flux = require('flux');

  var AppDispatcher = new _flux.Dispatcher();

  exports['default'] = AppDispatcher;

  /// [BLOCK] Source Code For `require('flux').Dispatcher`
  //var Promise = require('es6-promise').Promise;
  //var assign = require('object-assign');
  //
  //var _callbacks = [];
  //var _promises = [];
  //
  //var Dispatcher = function() {};
  //Dispatcher.prototype = assign({}, Dispatcher.prototype, {
  //
  //  /**
  //   * Register a Store's callback so that it may be invoked by an action.
  //   *
  //   * @param  {Function} callback                                              - the callback to be registered
  //   * @return {number}   the index of the callback within the _callbacks array
  //   */
  //  register: function(callback) {
  //    _callbacks.push(callback);
  //    return _callbacks.length - 1; // index
  //  },
  //
  //  /**
  //   * Dispatch an action.
  //   *
  //   * @param {Object} payload - the data from the action
  //   */
  //  dispatch: function(payload) {
  //    // first create an array of promises for callbacks to reference.
  //    var resolves = [];
  //    var rejects = [];
  //    _promises = _callbacks.map(function(_, i) {
  //      return new Promise(function(resolve, reject) {
  //        resolves[i] = resolve;
  //        rejects[i] = reject;
  //      });
  //    });
  //    // dispatch to callbacks and resolve/reject promises.
  //    _callbacks.forEach(function(callback, i) {
  //      // `callback` can return an obj, to resolve, or a promise, to chain
  //      // check `waitFor()` for why this might be useful
  //      Promise.resolve(callback(payload)).then(function() {
  //        resolves[i](payload);
  //      }, function() {
  //        rejects[i](new Error('Dispatcher callback unsuccessful'));
  //      });
  //    });
  //    _promises = [];
  //  },
  //
  //  /**
  //   * @param  {Array}    promiseIndexes
  //   * @param  {Function} callback
  //   */
  //  waitFor: function(promiseIndexes, callback) {
  //    var selectedPromises = promiseIndexes.map(function(index) {
  //      return _promises[index];
  //    });
  //    return Promise.all(selectedPromises).then(callback);
  //  }
  //});
  module.exports = exports['default'];

},{"flux":42}],39:[function(require,module,exports){
  'use strict';

  exports.__esModule = true;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  var _socketIoClient = require('socket.io-client');

  var _socketIoClient2 = _interopRequireDefault(_socketIoClient);

  var _appDashboardPushNotificationActionsPushNotificationActionCreator = require('../../app/dashboard/push-notification/actions/PushNotificationActionCreator');

  var _appDashboardPushNotificationActionsPushNotificationActionCreator2 = _interopRequireDefault(_appDashboardPushNotificationActionsPushNotificationActionCreator);

  function socketIO() {
    var socket = _socketIoClient2['default'].connect('http://localhost:7000/mailman');

    socket.on('MailSent', function (msg) {
      _appDashboardPushNotificationActionsPushNotificationActionCreator2['default'].asyncGetPushNotificationBucket();
    });
  }

  exports['default'] = socketIO;
  module.exports = exports['default'];

},{"../../app/dashboard/push-notification/actions/PushNotificationActionCreator":26,"socket.io-client":484}],40:[function(require,module,exports){
  /*!
   Copyright (c) 2015 Jed Watson.
   Licensed under the MIT License (MIT), see
   http://jedwatson.github.io/classnames
   */
  /* global define */

  (function () {
    'use strict';

    var hasOwn = {}.hasOwnProperty;

    function classNames () {
      var classes = '';

      for (var i = 0; i < arguments.length; i++) {
        var arg = arguments[i];
        if (!arg) continue;

        var argType = typeof arg;

        if (argType === 'string' || argType === 'number') {
          classes += ' ' + arg;
        } else if (Array.isArray(arg)) {
          classes += ' ' + classNames.apply(null, arg);
        } else if (argType === 'object') {
          for (var key in arg) {
            if (hasOwn.call(arg, key) && arg[key]) {
              classes += ' ' + key;
            }
          }
        }
      }

      return classes.substr(1);
    }

    if (typeof module !== 'undefined' && module.exports) {
      module.exports = classNames;
    } else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {
      // register as 'classnames', consistent with npm package name
      define('classnames', function () {
        return classNames;
      });
    } else {
      window.classNames = classNames;
    }
  }());

},{}],41:[function(require,module,exports){
  /*
   * Cookies.js - 1.2.2
   * https://github.com/ScottHamper/Cookies
   *
   * This is free and unencumbered software released into the public domain.
   */
  (function (global, undefined) {
    'use strict';

    var factory = function (window) {
      if (typeof window.document !== 'object') {
        throw new Error('Cookies.js requires a `window` with a `document` object');
      }

      var Cookies = function (key, value, options) {
        return arguments.length === 1 ?
          Cookies.get(key) : Cookies.set(key, value, options);
      };

      // Allows for setter injection in unit tests
      Cookies._document = window.document;

      // Used to ensure cookie keys do not collide with
      // built-in `Object` properties
      Cookies._cacheKeyPrefix = 'cookey.'; // Hurr hurr, :)

      Cookies._maxExpireDate = new Date('Fri, 31 Dec 9999 23:59:59 UTC');

      Cookies.defaults = {
        path: '/',
        secure: false
      };

      Cookies.get = function (key) {
        if (Cookies._cachedDocumentCookie !== Cookies._document.cookie) {
          Cookies._renewCache();
        }

        var value = Cookies._cache[Cookies._cacheKeyPrefix + key];

        return value === undefined ? undefined : decodeURIComponent(value);
      };

      Cookies.set = function (key, value, options) {
        options = Cookies._getExtendedOptions(options);
        options.expires = Cookies._getExpiresDate(value === undefined ? -1 : options.expires);

        Cookies._document.cookie = Cookies._generateCookieString(key, value, options);

        return Cookies;
      };

      Cookies.expire = function (key, options) {
        return Cookies.set(key, undefined, options);
      };

      Cookies._getExtendedOptions = function (options) {
        return {
          path: options && options.path || Cookies.defaults.path,
          domain: options && options.domain || Cookies.defaults.domain,
          expires: options && options.expires || Cookies.defaults.expires,
          secure: options && options.secure !== undefined ?  options.secure : Cookies.defaults.secure
        };
      };

      Cookies._isValidDate = function (date) {
        return Object.prototype.toString.call(date) === '[object Date]' && !isNaN(date.getTime());
      };

      Cookies._getExpiresDate = function (expires, now) {
        now = now || new Date();

        if (typeof expires === 'number') {
          expires = expires === Infinity ?
            Cookies._maxExpireDate : new Date(now.getTime() + expires * 1000);
        } else if (typeof expires === 'string') {
          expires = new Date(expires);
        }

        if (expires && !Cookies._isValidDate(expires)) {
          throw new Error('`expires` parameter cannot be converted to a valid Date instance');
        }

        return expires;
      };

      Cookies._generateCookieString = function (key, value, options) {
        key = key.replace(/[^#$&+\^`|]/g, encodeURIComponent);
        key = key.replace(/\(/g, '%28').replace(/\)/g, '%29');
        value = (value + '').replace(/[^!#$&-+\--:<-\[\]-~]/g, encodeURIComponent);
        options = options || {};

        var cookieString = key + '=' + value;
        cookieString += options.path ? ';path=' + options.path : '';
        cookieString += options.domain ? ';domain=' + options.domain : '';
        cookieString += options.expires ? ';expires=' + options.expires.toUTCString() : '';
        cookieString += options.secure ? ';secure' : '';

        return cookieString;
      };

      Cookies._getCacheFromString = function (documentCookie) {
        var cookieCache = {};
        var cookiesArray = documentCookie ? documentCookie.split('; ') : [];

        for (var i = 0; i < cookiesArray.length; i++) {
          var cookieKvp = Cookies._getKeyValuePairFromCookieString(cookiesArray[i]);

          if (cookieCache[Cookies._cacheKeyPrefix + cookieKvp.key] === undefined) {
            cookieCache[Cookies._cacheKeyPrefix + cookieKvp.key] = cookieKvp.value;
          }
        }

        return cookieCache;
      };

      Cookies._getKeyValuePairFromCookieString = function (cookieString) {
        // "=" is a valid character in a cookie value according to RFC6265, so cannot `split('=')`
        var separatorIndex = cookieString.indexOf('=');

        // IE omits the "=" when the cookie value is an empty string
        separatorIndex = separatorIndex < 0 ? cookieString.length : separatorIndex;

        var key = cookieString.substr(0, separatorIndex);
        var decodedKey;
        try {
          decodedKey = decodeURIComponent(key);
        } catch (e) {
          if (console && typeof console.error === 'function') {
            console.error('Could not decode cookie with key "' + key + '"', e);
          }
        }

        return {
          key: decodedKey,
          value: cookieString.substr(separatorIndex + 1) // Defer decoding value until accessed
        };
      };

      Cookies._renewCache = function () {
        Cookies._cache = Cookies._getCacheFromString(Cookies._document.cookie);
        Cookies._cachedDocumentCookie = Cookies._document.cookie;
      };

      Cookies._areEnabled = function () {
        var testKey = 'cookies.js';
        var areEnabled = Cookies.set(testKey, 1).get(testKey) === '1';
        Cookies.expire(testKey);
        return areEnabled;
      };

      Cookies.enabled = Cookies._areEnabled();

      return Cookies;
    };

    var cookiesExport = typeof global.document === 'object' ? factory(global) : factory;

    // AMD support
    if (typeof define === 'function' && define.amd) {
      define(function () { return cookiesExport; });
      // CommonJS/Node.js support
    } else if (typeof exports === 'object') {
      // Support Node.js specific `module.exports` (which can be a function)
      if (typeof module === 'object' && typeof module.exports === 'object') {
        exports = module.exports = cookiesExport;
      }
      // But always support CommonJS module 1.1.1 spec (`exports` cannot be a function)
      exports.Cookies = cookiesExport;
    } else {
      global.Cookies = cookiesExport;
    }
  })(typeof window === 'undefined' ? this : window);
},{}],42:[function(require,module,exports){
  /**
   * Copyright (c) 2014-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   */

  module.exports.Dispatcher = require('./lib/Dispatcher');

},{"./lib/Dispatcher":43}],43:[function(require,module,exports){
  (function (process){
    /**
     * Copyright (c) 2014-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule Dispatcher
     *
     * @preventMunge
     */

    'use strict';

    exports.__esModule = true;

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    var invariant = require('fbjs/lib/invariant');

    var _prefix = 'ID_';

    /**
     * Dispatcher is used to broadcast payloads to registered callbacks. This is
     * different from generic pub-sub systems in two ways:
     *
     *   1) Callbacks are not subscribed to particular events. Every payload is
     *      dispatched to every registered callback.
     *   2) Callbacks can be deferred in whole or part until other callbacks have
     *      been executed.
     *
     * For example, consider this hypothetical flight destination form, which
     * selects a default city when a country is selected:
     *
     *   var flightDispatcher = new Dispatcher();
     *
     *   // Keeps track of which country is selected
     *   var CountryStore = {country: null};
     *
     *   // Keeps track of which city is selected
     *   var CityStore = {city: null};
     *
     *   // Keeps track of the base flight price of the selected city
     *   var FlightPriceStore = {price: null}
     *
     * When a user changes the selected city, we dispatch the payload:
     *
     *   flightDispatcher.dispatch({
 *     actionType: 'city-update',
 *     selectedCity: 'paris'
 *   });
     *
     * This payload is digested by `CityStore`:
     *
     *   flightDispatcher.register(function(payload) {
 *     if (payload.actionType === 'city-update') {
 *       CityStore.city = payload.selectedCity;
 *     }
 *   });
     *
     * When the user selects a country, we dispatch the payload:
     *
     *   flightDispatcher.dispatch({
 *     actionType: 'country-update',
 *     selectedCountry: 'australia'
 *   });
     *
     * This payload is digested by both stores:
     *
     *   CountryStore.dispatchToken = flightDispatcher.register(function(payload) {
 *     if (payload.actionType === 'country-update') {
 *       CountryStore.country = payload.selectedCountry;
 *     }
 *   });
     *
     * When the callback to update `CountryStore` is registered, we save a reference
     * to the returned token. Using this token with `waitFor()`, we can guarantee
     * that `CountryStore` is updated before the callback that updates `CityStore`
     * needs to query its data.
     *
     *   CityStore.dispatchToken = flightDispatcher.register(function(payload) {
 *     if (payload.actionType === 'country-update') {
 *       // `CountryStore.country` may not be updated.
 *       flightDispatcher.waitFor([CountryStore.dispatchToken]);
 *       // `CountryStore.country` is now guaranteed to be updated.
 *
 *       // Select the default city for the new country
 *       CityStore.city = getDefaultCityForCountry(CountryStore.country);
 *     }
 *   });
     *
     * The usage of `waitFor()` can be chained, for example:
     *
     *   FlightPriceStore.dispatchToken =
     *     flightDispatcher.register(function(payload) {
 *       switch (payload.actionType) {
 *         case 'country-update':
 *         case 'city-update':
 *           flightDispatcher.waitFor([CityStore.dispatchToken]);
 *           FlightPriceStore.price =
 *             getFlightPriceStore(CountryStore.country, CityStore.city);
 *           break;
 *     }
 *   });
     *
     * The `country-update` payload will be guaranteed to invoke the stores'
     * registered callbacks in order: `CountryStore`, `CityStore`, then
     * `FlightPriceStore`.
     */

    var Dispatcher = (function () {
      function Dispatcher() {
        _classCallCheck(this, Dispatcher);

        this._callbacks = {};
        this._isDispatching = false;
        this._isHandled = {};
        this._isPending = {};
        this._lastID = 1;
      }

      /**
       * Registers a callback to be invoked with every dispatched payload. Returns
       * a token that can be used with `waitFor()`.
       */

      Dispatcher.prototype.register = function register(callback) {
        var id = _prefix + this._lastID++;
        this._callbacks[id] = callback;
        return id;
      };

      /**
       * Removes a callback based on its token.
       */

      Dispatcher.prototype.unregister = function unregister(id) {
        !this._callbacks[id] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.unregister(...): `%s` does not map to a registered callback.', id) : invariant(false) : undefined;
        delete this._callbacks[id];
      };

      /**
       * Waits for the callbacks specified to be invoked before continuing execution
       * of the current callback. This method should only be used by a callback in
       * response to a dispatched payload.
       */

      Dispatcher.prototype.waitFor = function waitFor(ids) {
        !this._isDispatching ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.waitFor(...): Must be invoked while dispatching.') : invariant(false) : undefined;
        for (var ii = 0; ii < ids.length; ii++) {
          var id = ids[ii];
          if (this._isPending[id]) {
            !this._isHandled[id] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.waitFor(...): Circular dependency detected while ' + 'waiting for `%s`.', id) : invariant(false) : undefined;
            continue;
          }
          !this._callbacks[id] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.waitFor(...): `%s` does not map to a registered callback.', id) : invariant(false) : undefined;
          this._invokeCallback(id);
        }
      };

      /**
       * Dispatches a payload to all registered callbacks.
       */

      Dispatcher.prototype.dispatch = function dispatch(payload) {
        !!this._isDispatching ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatch.dispatch(...): Cannot dispatch in the middle of a dispatch.') : invariant(false) : undefined;
        this._startDispatching(payload);
        try {
          for (var id in this._callbacks) {
            if (this._isPending[id]) {
              continue;
            }
            this._invokeCallback(id);
          }
        } finally {
          this._stopDispatching();
        }
      };

      /**
       * Is this Dispatcher currently dispatching.
       */

      Dispatcher.prototype.isDispatching = function isDispatching() {
        return this._isDispatching;
      };

      /**
       * Call the callback stored with the given id. Also do some internal
       * bookkeeping.
       *
       * @internal
       */

      Dispatcher.prototype._invokeCallback = function _invokeCallback(id) {
        this._isPending[id] = true;
        this._callbacks[id](this._pendingPayload);
        this._isHandled[id] = true;
      };

      /**
       * Set up bookkeeping needed when dispatching.
       *
       * @internal
       */

      Dispatcher.prototype._startDispatching = function _startDispatching(payload) {
        for (var id in this._callbacks) {
          this._isPending[id] = false;
          this._isHandled[id] = false;
        }
        this._pendingPayload = payload;
        this._isDispatching = true;
      };

      /**
       * Clear bookkeeping used for dispatching.
       *
       * @internal
       */

      Dispatcher.prototype._stopDispatching = function _stopDispatching() {
        delete this._pendingPayload;
        this._isDispatching = false;
      };

      return Dispatcher;
    })();

    module.exports = Dispatcher;
  }).call(this,require('_process'))
},{"_process":46,"fbjs/lib/invariant":44}],44:[function(require,module,exports){
  (function (process){
    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule invariant
     */

    "use strict";

    /**
     * Use invariant() to assert state which your program assumes to be true.
     *
     * Provide sprintf-style format (only %s is supported) and arguments
     * to provide information about what broke and what you were
     * expecting.
     *
     * The invariant message will be stripped in production, but the invariant
     * will remain to ensure logic does not differ in production.
     */

    var invariant = function (condition, format, a, b, c, d, e, f) {
      if (process.env.NODE_ENV !== 'production') {
        if (format === undefined) {
          throw new Error('invariant requires an error message argument');
        }
      }

      if (!condition) {
        var error;
        if (format === undefined) {
          error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
        } else {
          var args = [a, b, c, d, e, f];
          var argIndex = 0;
          error = new Error('Invariant Violation: ' + format.replace(/%s/g, function () {
              return args[argIndex++];
            }));
        }

        error.framesToPop = 1; // we don't care about invariant's own frame
        throw error;
      }
    };

    module.exports = invariant;
  }).call(this,require('_process'))
},{"_process":46}],45:[function(require,module,exports){
  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.

  function EventEmitter() {
    this._events = this._events || {};
    this._maxListeners = this._maxListeners || undefined;
  }
  module.exports = EventEmitter;

  // Backwards-compat with node 0.10.x
  EventEmitter.EventEmitter = EventEmitter;

  EventEmitter.prototype._events = undefined;
  EventEmitter.prototype._maxListeners = undefined;

  // By default EventEmitters will print a warning if more than 10 listeners are
  // added to it. This is a useful default which helps finding memory leaks.
  EventEmitter.defaultMaxListeners = 10;

  // Obviously not all Emitters should be limited to 10. This function allows
  // that to be increased. Set to zero for unlimited.
  EventEmitter.prototype.setMaxListeners = function(n) {
    if (!isNumber(n) || n < 0 || isNaN(n))
      throw TypeError('n must be a positive number');
    this._maxListeners = n;
    return this;
  };

  EventEmitter.prototype.emit = function(type) {
    var er, handler, len, args, i, listeners;

    if (!this._events)
      this._events = {};

    // If there is no 'error' event listener then throw.
    if (type === 'error') {
      if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
        er = arguments[1];
        if (er instanceof Error) {
          throw er; // Unhandled 'error' event
        }
        throw TypeError('Uncaught, unspecified "error" event.');
      }
    }

    handler = this._events[type];

    if (isUndefined(handler))
      return false;

    if (isFunction(handler)) {
      switch (arguments.length) {
        // fast cases
        case 1:
          handler.call(this);
          break;
        case 2:
          handler.call(this, arguments[1]);
          break;
        case 3:
          handler.call(this, arguments[1], arguments[2]);
          break;
        // slower
        default:
          len = arguments.length;
          args = new Array(len - 1);
          for (i = 1; i < len; i++)
            args[i - 1] = arguments[i];
          handler.apply(this, args);
      }
    } else if (isObject(handler)) {
      len = arguments.length;
      args = new Array(len - 1);
      for (i = 1; i < len; i++)
        args[i - 1] = arguments[i];

      listeners = handler.slice();
      len = listeners.length;
      for (i = 0; i < len; i++)
        listeners[i].apply(this, args);
    }

    return true;
  };

  EventEmitter.prototype.addListener = function(type, listener) {
    var m;

    if (!isFunction(listener))
      throw TypeError('listener must be a function');

    if (!this._events)
      this._events = {};

    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (this._events.newListener)
      this.emit('newListener', type,
        isFunction(listener.listener) ?
          listener.listener : listener);

    if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
      this._events[type] = listener;
    else if (isObject(this._events[type]))
    // If we've already got an array, just append.
      this._events[type].push(listener);
    else
    // Adding the second element, need to change to array.
      this._events[type] = [this._events[type], listener];

    // Check for listener leak
    if (isObject(this._events[type]) && !this._events[type].warned) {
      var m;
      if (!isUndefined(this._maxListeners)) {
        m = this._maxListeners;
      } else {
        m = EventEmitter.defaultMaxListeners;
      }

      if (m && m > 0 && this._events[type].length > m) {
        this._events[type].warned = true;
        console.error('(node) warning: possible EventEmitter memory ' +
          'leak detected. %d listeners added. ' +
          'Use emitter.setMaxListeners() to increase limit.',
          this._events[type].length);
        if (typeof console.trace === 'function') {
          // not supported in IE 10
          console.trace();
        }
      }
    }

    return this;
  };

  EventEmitter.prototype.on = EventEmitter.prototype.addListener;

  EventEmitter.prototype.once = function(type, listener) {
    if (!isFunction(listener))
      throw TypeError('listener must be a function');

    var fired = false;

    function g() {
      this.removeListener(type, g);

      if (!fired) {
        fired = true;
        listener.apply(this, arguments);
      }
    }

    g.listener = listener;
    this.on(type, g);

    return this;
  };

  // emits a 'removeListener' event iff the listener was removed
  EventEmitter.prototype.removeListener = function(type, listener) {
    var list, position, length, i;

    if (!isFunction(listener))
      throw TypeError('listener must be a function');

    if (!this._events || !this._events[type])
      return this;

    list = this._events[type];
    length = list.length;
    position = -1;

    if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
      delete this._events[type];
      if (this._events.removeListener)
        this.emit('removeListener', type, listener);

    } else if (isObject(list)) {
      for (i = length; i-- > 0;) {
        if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
          position = i;
          break;
        }
      }

      if (position < 0)
        return this;

      if (list.length === 1) {
        list.length = 0;
        delete this._events[type];
      } else {
        list.splice(position, 1);
      }

      if (this._events.removeListener)
        this.emit('removeListener', type, listener);
    }

    return this;
  };

  EventEmitter.prototype.removeAllListeners = function(type) {
    var key, listeners;

    if (!this._events)
      return this;

    // not listening for removeListener, no need to emit
    if (!this._events.removeListener) {
      if (arguments.length === 0)
        this._events = {};
      else if (this._events[type])
        delete this._events[type];
      return this;
    }

    // emit removeListener for all listeners on all events
    if (arguments.length === 0) {
      for (key in this._events) {
        if (key === 'removeListener') continue;
        this.removeAllListeners(key);
      }
      this.removeAllListeners('removeListener');
      this._events = {};
      return this;
    }

    listeners = this._events[type];

    if (isFunction(listeners)) {
      this.removeListener(type, listeners);
    } else {
      // LIFO order
      while (listeners.length)
        this.removeListener(type, listeners[listeners.length - 1]);
    }
    delete this._events[type];

    return this;
  };

  EventEmitter.prototype.listeners = function(type) {
    var ret;
    if (!this._events || !this._events[type])
      ret = [];
    else if (isFunction(this._events[type]))
      ret = [this._events[type]];
    else
      ret = this._events[type].slice();
    return ret;
  };

  EventEmitter.listenerCount = function(emitter, type) {
    var ret;
    if (!emitter._events || !emitter._events[type])
      ret = 0;
    else if (isFunction(emitter._events[type]))
      ret = 1;
    else
      ret = emitter._events[type].length;
    return ret;
  };

  function isFunction(arg) {
    return typeof arg === 'function';
  }

  function isNumber(arg) {
    return typeof arg === 'number';
  }

  function isObject(arg) {
    return typeof arg === 'object' && arg !== null;
  }

  function isUndefined(arg) {
    return arg === void 0;
  }

},{}],46:[function(require,module,exports){
  // shim for using process in browser

  var process = module.exports = {};
  var queue = [];
  var draining = false;
  var currentQueue;
  var queueIndex = -1;

  function cleanUpNextTick() {
    draining = false;
    if (currentQueue.length) {
      queue = currentQueue.concat(queue);
    } else {
      queueIndex = -1;
    }
    if (queue.length) {
      drainQueue();
    }
  }

  function drainQueue() {
    if (draining) {
      return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
      currentQueue = queue;
      queue = [];
      while (++queueIndex < len) {
        if (currentQueue) {
          currentQueue[queueIndex].run();
        }
      }
      queueIndex = -1;
      len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
  }

  process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
      for (var i = 1; i < arguments.length; i++) {
        args[i - 1] = arguments[i];
      }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
      setTimeout(drainQueue, 0);
    }
  };

  // v8 likes predictible objects
  function Item(fun, array) {
    this.fun = fun;
    this.array = array;
  }
  Item.prototype.run = function () {
    this.fun.apply(null, this.array);
  };
  process.title = 'browser';
  process.browser = true;
  process.env = {};
  process.argv = [];
  process.version = ''; // empty string to avoid regexp issues
  process.versions = {};

  function noop() {}

  process.on = noop;
  process.addListener = noop;
  process.once = noop;
  process.off = noop;
  process.removeListener = noop;
  process.removeAllListeners = noop;
  process.emit = noop;

  process.binding = function (name) {
    throw new Error('process.binding is not supported');
  };

  process.cwd = function () { return '/' };
  process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
  };
  process.umask = function() { return 0; };

},{}],47:[function(require,module,exports){
  /*!
   * jQuery JavaScript Library v2.1.4
   * http://jquery.com/
   *
   * Includes Sizzle.js
   * http://sizzlejs.com/
   *
   * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors
   * Released under the MIT license
   * http://jquery.org/license
   *
   * Date: 2015-04-28T16:01Z
   */

  (function( global, factory ) {

    if ( typeof module === "object" && typeof module.exports === "object" ) {
      // For CommonJS and CommonJS-like environments where a proper `window`
      // is present, execute the factory and get jQuery.
      // For environments that do not have a `window` with a `document`
      // (such as Node.js), expose a factory as module.exports.
      // This accentuates the need for the creation of a real `window`.
      // e.g. var jQuery = require("jquery")(window);
      // See ticket #14549 for more info.
      module.exports = global.document ?
        factory( global, true ) :
        function( w ) {
          if ( !w.document ) {
            throw new Error( "jQuery requires a window with a document" );
          }
          return factory( w );
        };
    } else {
      factory( global );
    }

    // Pass this if window is not defined yet
  }(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

    // Support: Firefox 18+
    // Can't be in strict mode, several libs including ASP.NET trace
    // the stack via arguments.caller.callee and Firefox dies if
    // you try to trace through "use strict" call chains. (#13335)
    //

    var arr = [];

    var slice = arr.slice;

    var concat = arr.concat;

    var push = arr.push;

    var indexOf = arr.indexOf;

    var class2type = {};

    var toString = class2type.toString;

    var hasOwn = class2type.hasOwnProperty;

    var support = {};



    var
    // Use the correct document accordingly with window argument (sandbox)
      document = window.document,

      version = "2.1.4",

    // Define a local copy of jQuery
      jQuery = function( selector, context ) {
        // The jQuery object is actually just the init constructor 'enhanced'
        // Need init if jQuery is called (just allow error to be thrown if not included)
        return new jQuery.fn.init( selector, context );
      },

    // Support: Android<4.1
    // Make sure we trim BOM and NBSP
      rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

    // Matches dashed string for camelizing
      rmsPrefix = /^-ms-/,
      rdashAlpha = /-([\da-z])/gi,

    // Used by jQuery.camelCase as callback to replace()
      fcamelCase = function( all, letter ) {
        return letter.toUpperCase();
      };

    jQuery.fn = jQuery.prototype = {
      // The current version of jQuery being used
      jquery: version,

      constructor: jQuery,

      // Start with an empty selector
      selector: "",

      // The default length of a jQuery object is 0
      length: 0,

      toArray: function() {
        return slice.call( this );
      },

      // Get the Nth element in the matched element set OR
      // Get the whole matched element set as a clean array
      get: function( num ) {
        return num != null ?

          // Return just the one element from the set
          ( num < 0 ? this[ num + this.length ] : this[ num ] ) :

          // Return all the elements in a clean array
          slice.call( this );
      },

      // Take an array of elements and push it onto the stack
      // (returning the new matched element set)
      pushStack: function( elems ) {

        // Build a new jQuery matched element set
        var ret = jQuery.merge( this.constructor(), elems );

        // Add the old object onto the stack (as a reference)
        ret.prevObject = this;
        ret.context = this.context;

        // Return the newly-formed element set
        return ret;
      },

      // Execute a callback for every element in the matched set.
      // (You can seed the arguments with an array of args, but this is
      // only used internally.)
      each: function( callback, args ) {
        return jQuery.each( this, callback, args );
      },

      map: function( callback ) {
        return this.pushStack( jQuery.map(this, function( elem, i ) {
          return callback.call( elem, i, elem );
        }));
      },

      slice: function() {
        return this.pushStack( slice.apply( this, arguments ) );
      },

      first: function() {
        return this.eq( 0 );
      },

      last: function() {
        return this.eq( -1 );
      },

      eq: function( i ) {
        var len = this.length,
          j = +i + ( i < 0 ? len : 0 );
        return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
      },

      end: function() {
        return this.prevObject || this.constructor(null);
      },

      // For internal use only.
      // Behaves like an Array's method, not like a jQuery method.
      push: push,
      sort: arr.sort,
      splice: arr.splice
    };

    jQuery.extend = jQuery.fn.extend = function() {
      var options, name, src, copy, copyIsArray, clone,
        target = arguments[0] || {},
        i = 1,
        length = arguments.length,
        deep = false;

      // Handle a deep copy situation
      if ( typeof target === "boolean" ) {
        deep = target;

        // Skip the boolean and the target
        target = arguments[ i ] || {};
        i++;
      }

      // Handle case when target is a string or something (possible in deep copy)
      if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
        target = {};
      }

      // Extend jQuery itself if only one argument is passed
      if ( i === length ) {
        target = this;
        i--;
      }

      for ( ; i < length; i++ ) {
        // Only deal with non-null/undefined values
        if ( (options = arguments[ i ]) != null ) {
          // Extend the base object
          for ( name in options ) {
            src = target[ name ];
            copy = options[ name ];

            // Prevent never-ending loop
            if ( target === copy ) {
              continue;
            }

            // Recurse if we're merging plain objects or arrays
            if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
              if ( copyIsArray ) {
                copyIsArray = false;
                clone = src && jQuery.isArray(src) ? src : [];

              } else {
                clone = src && jQuery.isPlainObject(src) ? src : {};
              }

              // Never move original objects, clone them
              target[ name ] = jQuery.extend( deep, clone, copy );

              // Don't bring in undefined values
            } else if ( copy !== undefined ) {
              target[ name ] = copy;
            }
          }
        }
      }

      // Return the modified object
      return target;
    };

    jQuery.extend({
      // Unique for each copy of jQuery on the page
      expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

      // Assume jQuery is ready without the ready module
      isReady: true,

      error: function( msg ) {
        throw new Error( msg );
      },

      noop: function() {},

      isFunction: function( obj ) {
        return jQuery.type(obj) === "function";
      },

      isArray: Array.isArray,

      isWindow: function( obj ) {
        return obj != null && obj === obj.window;
      },

      isNumeric: function( obj ) {
        // parseFloat NaNs numeric-cast false positives (null|true|false|"")
        // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
        // subtraction forces infinities to NaN
        // adding 1 corrects loss of precision from parseFloat (#15100)
        return !jQuery.isArray( obj ) && (obj - parseFloat( obj ) + 1) >= 0;
      },

      isPlainObject: function( obj ) {
        // Not plain objects:
        // - Any object or value whose internal [[Class]] property is not "[object Object]"
        // - DOM nodes
        // - window
        if ( jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
          return false;
        }

        if ( obj.constructor &&
          !hasOwn.call( obj.constructor.prototype, "isPrototypeOf" ) ) {
          return false;
        }

        // If the function hasn't returned already, we're confident that
        // |obj| is a plain object, created by {} or constructed with new Object
        return true;
      },

      isEmptyObject: function( obj ) {
        var name;
        for ( name in obj ) {
          return false;
        }
        return true;
      },

      type: function( obj ) {
        if ( obj == null ) {
          return obj + "";
        }
        // Support: Android<4.0, iOS<6 (functionish RegExp)
        return typeof obj === "object" || typeof obj === "function" ?
        class2type[ toString.call(obj) ] || "object" :
          typeof obj;
      },

      // Evaluates a script in a global context
      globalEval: function( code ) {
        var script,
          indirect = eval;

        code = jQuery.trim( code );

        if ( code ) {
          // If the code includes a valid, prologue position
          // strict mode pragma, execute code by injecting a
          // script tag into the document.
          if ( code.indexOf("use strict") === 1 ) {
            script = document.createElement("script");
            script.text = code;
            document.head.appendChild( script ).parentNode.removeChild( script );
          } else {
            // Otherwise, avoid the DOM node creation, insertion
            // and removal by using an indirect global eval
            indirect( code );
          }
        }
      },

      // Convert dashed to camelCase; used by the css and data modules
      // Support: IE9-11+
      // Microsoft forgot to hump their vendor prefix (#9572)
      camelCase: function( string ) {
        return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
      },

      nodeName: function( elem, name ) {
        return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
      },

      // args is for internal usage only
      each: function( obj, callback, args ) {
        var value,
          i = 0,
          length = obj.length,
          isArray = isArraylike( obj );

        if ( args ) {
          if ( isArray ) {
            for ( ; i < length; i++ ) {
              value = callback.apply( obj[ i ], args );

              if ( value === false ) {
                break;
              }
            }
          } else {
            for ( i in obj ) {
              value = callback.apply( obj[ i ], args );

              if ( value === false ) {
                break;
              }
            }
          }

          // A special, fast, case for the most common use of each
        } else {
          if ( isArray ) {
            for ( ; i < length; i++ ) {
              value = callback.call( obj[ i ], i, obj[ i ] );

              if ( value === false ) {
                break;
              }
            }
          } else {
            for ( i in obj ) {
              value = callback.call( obj[ i ], i, obj[ i ] );

              if ( value === false ) {
                break;
              }
            }
          }
        }

        return obj;
      },

      // Support: Android<4.1
      trim: function( text ) {
        return text == null ?
          "" :
          ( text + "" ).replace( rtrim, "" );
      },

      // results is for internal usage only
      makeArray: function( arr, results ) {
        var ret = results || [];

        if ( arr != null ) {
          if ( isArraylike( Object(arr) ) ) {
            jQuery.merge( ret,
              typeof arr === "string" ?
                [ arr ] : arr
            );
          } else {
            push.call( ret, arr );
          }
        }

        return ret;
      },

      inArray: function( elem, arr, i ) {
        return arr == null ? -1 : indexOf.call( arr, elem, i );
      },

      merge: function( first, second ) {
        var len = +second.length,
          j = 0,
          i = first.length;

        for ( ; j < len; j++ ) {
          first[ i++ ] = second[ j ];
        }

        first.length = i;

        return first;
      },

      grep: function( elems, callback, invert ) {
        var callbackInverse,
          matches = [],
          i = 0,
          length = elems.length,
          callbackExpect = !invert;

        // Go through the array, only saving the items
        // that pass the validator function
        for ( ; i < length; i++ ) {
          callbackInverse = !callback( elems[ i ], i );
          if ( callbackInverse !== callbackExpect ) {
            matches.push( elems[ i ] );
          }
        }

        return matches;
      },

      // arg is for internal usage only
      map: function( elems, callback, arg ) {
        var value,
          i = 0,
          length = elems.length,
          isArray = isArraylike( elems ),
          ret = [];

        // Go through the array, translating each of the items to their new values
        if ( isArray ) {
          for ( ; i < length; i++ ) {
            value = callback( elems[ i ], i, arg );

            if ( value != null ) {
              ret.push( value );
            }
          }

          // Go through every key on the object,
        } else {
          for ( i in elems ) {
            value = callback( elems[ i ], i, arg );

            if ( value != null ) {
              ret.push( value );
            }
          }
        }

        // Flatten any nested arrays
        return concat.apply( [], ret );
      },

      // A global GUID counter for objects
      guid: 1,

      // Bind a function to a context, optionally partially applying any
      // arguments.
      proxy: function( fn, context ) {
        var tmp, args, proxy;

        if ( typeof context === "string" ) {
          tmp = fn[ context ];
          context = fn;
          fn = tmp;
        }

        // Quick check to determine if target is callable, in the spec
        // this throws a TypeError, but we will just return undefined.
        if ( !jQuery.isFunction( fn ) ) {
          return undefined;
        }

        // Simulated bind
        args = slice.call( arguments, 2 );
        proxy = function() {
          return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
        };

        // Set the guid of unique handler to the same of original handler, so it can be removed
        proxy.guid = fn.guid = fn.guid || jQuery.guid++;

        return proxy;
      },

      now: Date.now,

      // jQuery.support is not used in Core but other projects attach their
      // properties to it so it needs to exist.
      support: support
    });

    // Populate the class2type map
    jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
      class2type[ "[object " + name + "]" ] = name.toLowerCase();
    });

    function isArraylike( obj ) {

      // Support: iOS 8.2 (not reproducible in simulator)
      // `in` check used to prevent JIT error (gh-2145)
      // hasOwn isn't used here due to false negatives
      // regarding Nodelist length in IE
      var length = "length" in obj && obj.length,
        type = jQuery.type( obj );

      if ( type === "function" || jQuery.isWindow( obj ) ) {
        return false;
      }

      if ( obj.nodeType === 1 && length ) {
        return true;
      }

      return type === "array" || length === 0 ||
        typeof length === "number" && length > 0 && ( length - 1 ) in obj;
    }
    var Sizzle =
      /*!
       * Sizzle CSS Selector Engine v2.2.0-pre
       * http://sizzlejs.com/
       *
       * Copyright 2008, 2014 jQuery Foundation, Inc. and other contributors
       * Released under the MIT license
       * http://jquery.org/license
       *
       * Date: 2014-12-16
       */
      (function( window ) {

        var i,
          support,
          Expr,
          getText,
          isXML,
          tokenize,
          compile,
          select,
          outermostContext,
          sortInput,
          hasDuplicate,

        // Local document vars
          setDocument,
          document,
          docElem,
          documentIsHTML,
          rbuggyQSA,
          rbuggyMatches,
          matches,
          contains,

        // Instance-specific data
          expando = "sizzle" + 1 * new Date(),
          preferredDoc = window.document,
          dirruns = 0,
          done = 0,
          classCache = createCache(),
          tokenCache = createCache(),
          compilerCache = createCache(),
          sortOrder = function( a, b ) {
            if ( a === b ) {
              hasDuplicate = true;
            }
            return 0;
          },

        // General-purpose constants
          MAX_NEGATIVE = 1 << 31,

        // Instance methods
          hasOwn = ({}).hasOwnProperty,
          arr = [],
          pop = arr.pop,
          push_native = arr.push,
          push = arr.push,
          slice = arr.slice,
        // Use a stripped-down indexOf as it's faster than native
        // http://jsperf.com/thor-indexof-vs-for/5
          indexOf = function( list, elem ) {
            var i = 0,
              len = list.length;
            for ( ; i < len; i++ ) {
              if ( list[i] === elem ) {
                return i;
              }
            }
            return -1;
          },

          booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

        // Regular expressions

        // Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
          whitespace = "[\\x20\\t\\r\\n\\f]",
        // http://www.w3.org/TR/css3-syntax/#characters
          characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

        // Loosely modeled on CSS identifier characters
        // An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
        // Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
          identifier = characterEncoding.replace( "w", "w#" ),

        // Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
          attributes = "\\[" + whitespace + "*(" + characterEncoding + ")(?:" + whitespace +
            // Operator (capture 2)
            "*([*^$|!~]?=)" + whitespace +
            // "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
            "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
            "*\\]",

          pseudos = ":(" + characterEncoding + ")(?:\\((" +
            // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
            // 1. quoted (capture 3; capture 4 or capture 5)
            "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
            // 2. simple (capture 6)
            "((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
            // 3. anything else (capture 2)
            ".*" +
            ")\\)|)",

        // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
          rwhitespace = new RegExp( whitespace + "+", "g" ),
          rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

          rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
          rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

          rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

          rpseudo = new RegExp( pseudos ),
          ridentifier = new RegExp( "^" + identifier + "$" ),

          matchExpr = {
            "ID": new RegExp( "^#(" + characterEncoding + ")" ),
            "CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
            "TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
            "ATTR": new RegExp( "^" + attributes ),
            "PSEUDO": new RegExp( "^" + pseudos ),
            "CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
              "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
              "*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
            "bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
            // For use in libraries implementing .is()
            // We use this for POS matching in `select`
            "needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
              whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
          },

          rinputs = /^(?:input|select|textarea|button)$/i,
          rheader = /^h\d$/i,

          rnative = /^[^{]+\{\s*\[native \w/,

        // Easily-parseable/retrievable ID or TAG or CLASS selectors
          rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

          rsibling = /[+~]/,
          rescape = /'|\\/g,

        // CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
          runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
          funescape = function( _, escaped, escapedWhitespace ) {
            var high = "0x" + escaped - 0x10000;
            // NaN means non-codepoint
            // Support: Firefox<24
            // Workaround erroneous numeric interpretation of +"0x"
            return high !== high || escapedWhitespace ?
              escaped :
              high < 0 ?
                // BMP codepoint
                String.fromCharCode( high + 0x10000 ) :
                // Supplemental Plane codepoint (surrogate pair)
                String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
          },

        // Used for iframes
        // See setDocument()
        // Removing the function wrapper causes a "Permission Denied"
        // error in IE
          unloadHandler = function() {
            setDocument();
          };

        // Optimize for push.apply( _, NodeList )
        try {
          push.apply(
            (arr = slice.call( preferredDoc.childNodes )),
            preferredDoc.childNodes
          );
          // Support: Android<4.0
          // Detect silently failing push.apply
          arr[ preferredDoc.childNodes.length ].nodeType;
        } catch ( e ) {
          push = { apply: arr.length ?

            // Leverage slice if possible
            function( target, els ) {
              push_native.apply( target, slice.call(els) );
            } :

            // Support: IE<9
            // Otherwise append directly
            function( target, els ) {
              var j = target.length,
                i = 0;
              // Can't trust NodeList.length
              while ( (target[j++] = els[i++]) ) {}
              target.length = j - 1;
            }
          };
        }

        function Sizzle( selector, context, results, seed ) {
          var match, elem, m, nodeType,
          // QSA vars
            i, groups, old, nid, newContext, newSelector;

          if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
            setDocument( context );
          }

          context = context || document;
          results = results || [];
          nodeType = context.nodeType;

          if ( typeof selector !== "string" || !selector ||
            nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

            return results;
          }

          if ( !seed && documentIsHTML ) {

            // Try to shortcut find operations when possible (e.g., not under DocumentFragment)
            if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {
              // Speed-up: Sizzle("#ID")
              if ( (m = match[1]) ) {
                if ( nodeType === 9 ) {
                  elem = context.getElementById( m );
                  // Check parentNode to catch when Blackberry 4.6 returns
                  // nodes that are no longer in the document (jQuery #6963)
                  if ( elem && elem.parentNode ) {
                    // Handle the case where IE, Opera, and Webkit return items
                    // by name instead of ID
                    if ( elem.id === m ) {
                      results.push( elem );
                      return results;
                    }
                  } else {
                    return results;
                  }
                } else {
                  // Context is not a document
                  if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
                    contains( context, elem ) && elem.id === m ) {
                    results.push( elem );
                    return results;
                  }
                }

                // Speed-up: Sizzle("TAG")
              } else if ( match[2] ) {
                push.apply( results, context.getElementsByTagName( selector ) );
                return results;

                // Speed-up: Sizzle(".CLASS")
              } else if ( (m = match[3]) && support.getElementsByClassName ) {
                push.apply( results, context.getElementsByClassName( m ) );
                return results;
              }
            }

            // QSA path
            if ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
              nid = old = expando;
              newContext = context;
              newSelector = nodeType !== 1 && selector;

              // qSA works strangely on Element-rooted queries
              // We can work around this by specifying an extra ID on the root
              // and working up from there (Thanks to Andrew Dupont for the technique)
              // IE 8 doesn't work on object elements
              if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
                groups = tokenize( selector );

                if ( (old = context.getAttribute("id")) ) {
                  nid = old.replace( rescape, "\\$&" );
                } else {
                  context.setAttribute( "id", nid );
                }
                nid = "[id='" + nid + "'] ";

                i = groups.length;
                while ( i-- ) {
                  groups[i] = nid + toSelector( groups[i] );
                }
                newContext = rsibling.test( selector ) && testContext( context.parentNode ) || context;
                newSelector = groups.join(",");
              }

              if ( newSelector ) {
                try {
                  push.apply( results,
                    newContext.querySelectorAll( newSelector )
                  );
                  return results;
                } catch(qsaError) {
                } finally {
                  if ( !old ) {
                    context.removeAttribute("id");
                  }
                }
              }
            }
          }

          // All others
          return select( selector.replace( rtrim, "$1" ), context, results, seed );
        }

        /**
         * Create key-value caches of limited size
         * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
         *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
         *	deleting the oldest entry
         */
        function createCache() {
          var keys = [];

          function cache( key, value ) {
            // Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
            if ( keys.push( key + " " ) > Expr.cacheLength ) {
              // Only keep the most recent entries
              delete cache[ keys.shift() ];
            }
            return (cache[ key + " " ] = value);
          }
          return cache;
        }

        /**
         * Mark a function for special use by Sizzle
         * @param {Function} fn The function to mark
         */
        function markFunction( fn ) {
          fn[ expando ] = true;
          return fn;
        }

        /**
         * Support testing using an element
         * @param {Function} fn Passed the created div and expects a boolean result
         */
        function assert( fn ) {
          var div = document.createElement("div");

          try {
            return !!fn( div );
          } catch (e) {
            return false;
          } finally {
            // Remove from its parent by default
            if ( div.parentNode ) {
              div.parentNode.removeChild( div );
            }
            // release memory in IE
            div = null;
          }
        }

        /**
         * Adds the same handler for all of the specified attrs
         * @param {String} attrs Pipe-separated list of attributes
         * @param {Function} handler The method that will be applied
         */
        function addHandle( attrs, handler ) {
          var arr = attrs.split("|"),
            i = attrs.length;

          while ( i-- ) {
            Expr.attrHandle[ arr[i] ] = handler;
          }
        }

        /**
         * Checks document order of two siblings
         * @param {Element} a
         * @param {Element} b
         * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
         */
        function siblingCheck( a, b ) {
          var cur = b && a,
            diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
              ( ~b.sourceIndex || MAX_NEGATIVE ) -
              ( ~a.sourceIndex || MAX_NEGATIVE );

          // Use IE sourceIndex if available on both nodes
          if ( diff ) {
            return diff;
          }

          // Check if b follows a
          if ( cur ) {
            while ( (cur = cur.nextSibling) ) {
              if ( cur === b ) {
                return -1;
              }
            }
          }

          return a ? 1 : -1;
        }

        /**
         * Returns a function to use in pseudos for input types
         * @param {String} type
         */
        function createInputPseudo( type ) {
          return function( elem ) {
            var name = elem.nodeName.toLowerCase();
            return name === "input" && elem.type === type;
          };
        }

        /**
         * Returns a function to use in pseudos for buttons
         * @param {String} type
         */
        function createButtonPseudo( type ) {
          return function( elem ) {
            var name = elem.nodeName.toLowerCase();
            return (name === "input" || name === "button") && elem.type === type;
          };
        }

        /**
         * Returns a function to use in pseudos for positionals
         * @param {Function} fn
         */
        function createPositionalPseudo( fn ) {
          return markFunction(function( argument ) {
            argument = +argument;
            return markFunction(function( seed, matches ) {
              var j,
                matchIndexes = fn( [], seed.length, argument ),
                i = matchIndexes.length;

              // Match elements found at the specified indexes
              while ( i-- ) {
                if ( seed[ (j = matchIndexes[i]) ] ) {
                  seed[j] = !(matches[j] = seed[j]);
                }
              }
            });
          });
        }

        /**
         * Checks a node for validity as a Sizzle context
         * @param {Element|Object=} context
         * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
         */
        function testContext( context ) {
          return context && typeof context.getElementsByTagName !== "undefined" && context;
        }

        // Expose support vars for convenience
        support = Sizzle.support = {};

        /**
         * Detects XML nodes
         * @param {Element|Object} elem An element or a document
         * @returns {Boolean} True iff elem is a non-HTML XML node
         */
        isXML = Sizzle.isXML = function( elem ) {
          // documentElement is verified for cases where it doesn't yet exist
          // (such as loading iframes in IE - #4833)
          var documentElement = elem && (elem.ownerDocument || elem).documentElement;
          return documentElement ? documentElement.nodeName !== "HTML" : false;
        };

        /**
         * Sets document-related variables once based on the current document
         * @param {Element|Object} [doc] An element or document object to use to set the document
         * @returns {Object} Returns the current document
         */
        setDocument = Sizzle.setDocument = function( node ) {
          var hasCompare, parent,
            doc = node ? node.ownerDocument || node : preferredDoc;

          // If no document and documentElement is available, return
          if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
            return document;
          }

          // Set our document
          document = doc;
          docElem = doc.documentElement;
          parent = doc.defaultView;

          // Support: IE>8
          // If iframe document is assigned to "document" variable and if iframe has been reloaded,
          // IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
          // IE6-8 do not support the defaultView property so parent will be undefined
          if ( parent && parent !== parent.top ) {
            // IE11 does not have attachEvent, so all must suffer
            if ( parent.addEventListener ) {
              parent.addEventListener( "unload", unloadHandler, false );
            } else if ( parent.attachEvent ) {
              parent.attachEvent( "onunload", unloadHandler );
            }
          }

          /* Support tests
           ---------------------------------------------------------------------- */
          documentIsHTML = !isXML( doc );

          /* Attributes
           ---------------------------------------------------------------------- */

          // Support: IE<8
          // Verify that getAttribute really returns attributes and not properties
          // (excepting IE8 booleans)
          support.attributes = assert(function( div ) {
            div.className = "i";
            return !div.getAttribute("className");
          });

          /* getElement(s)By*
           ---------------------------------------------------------------------- */

          // Check if getElementsByTagName("*") returns only elements
          support.getElementsByTagName = assert(function( div ) {
            div.appendChild( doc.createComment("") );
            return !div.getElementsByTagName("*").length;
          });

          // Support: IE<9
          support.getElementsByClassName = rnative.test( doc.getElementsByClassName );

          // Support: IE<10
          // Check if getElementById returns elements by name
          // The broken getElementById methods don't pick up programatically-set names,
          // so use a roundabout getElementsByName test
          support.getById = assert(function( div ) {
            docElem.appendChild( div ).id = expando;
            return !doc.getElementsByName || !doc.getElementsByName( expando ).length;
          });

          // ID find and filter
          if ( support.getById ) {
            Expr.find["ID"] = function( id, context ) {
              if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
                var m = context.getElementById( id );
                // Check parentNode to catch when Blackberry 4.6 returns
                // nodes that are no longer in the document #6963
                return m && m.parentNode ? [ m ] : [];
              }
            };
            Expr.filter["ID"] = function( id ) {
              var attrId = id.replace( runescape, funescape );
              return function( elem ) {
                return elem.getAttribute("id") === attrId;
              };
            };
          } else {
            // Support: IE6/7
            // getElementById is not reliable as a find shortcut
            delete Expr.find["ID"];

            Expr.filter["ID"] =  function( id ) {
              var attrId = id.replace( runescape, funescape );
              return function( elem ) {
                var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
                return node && node.value === attrId;
              };
            };
          }

          // Tag
          Expr.find["TAG"] = support.getElementsByTagName ?
            function( tag, context ) {
              if ( typeof context.getElementsByTagName !== "undefined" ) {
                return context.getElementsByTagName( tag );

                // DocumentFragment nodes don't have gEBTN
              } else if ( support.qsa ) {
                return context.querySelectorAll( tag );
              }
            } :

            function( tag, context ) {
              var elem,
                tmp = [],
                i = 0,
              // By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
                results = context.getElementsByTagName( tag );

              // Filter out possible comments
              if ( tag === "*" ) {
                while ( (elem = results[i++]) ) {
                  if ( elem.nodeType === 1 ) {
                    tmp.push( elem );
                  }
                }

                return tmp;
              }
              return results;
            };

          // Class
          Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
              if ( documentIsHTML ) {
                return context.getElementsByClassName( className );
              }
            };

          /* QSA/matchesSelector
           ---------------------------------------------------------------------- */

          // QSA and matchesSelector support

          // matchesSelector(:active) reports false when true (IE9/Opera 11.5)
          rbuggyMatches = [];

          // qSa(:focus) reports false when true (Chrome 21)
          // We allow this because of a bug in IE8/9 that throws an error
          // whenever `document.activeElement` is accessed on an iframe
          // So, we allow :focus to pass through QSA all the time to avoid the IE error
          // See http://bugs.jquery.com/ticket/13378
          rbuggyQSA = [];

          if ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {
            // Build QSA regex
            // Regex strategy adopted from Diego Perini
            assert(function( div ) {
              // Select is set to empty string on purpose
              // This is to test IE's treatment of not explicitly
              // setting a boolean content attribute,
              // since its presence should be enough
              // http://bugs.jquery.com/ticket/12359
              docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
                "<select id='" + expando + "-\f]' msallowcapture=''>" +
                "<option selected=''></option></select>";

              // Support: IE8, Opera 11-12.16
              // Nothing should be selected when empty strings follow ^= or $= or *=
              // The test attribute must be unknown in Opera but "safe" for WinRT
              // http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
              if ( div.querySelectorAll("[msallowcapture^='']").length ) {
                rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
              }

              // Support: IE8
              // Boolean attributes and "value" are not treated correctly
              if ( !div.querySelectorAll("[selected]").length ) {
                rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
              }

              // Support: Chrome<29, Android<4.2+, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.7+
              if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
                rbuggyQSA.push("~=");
              }

              // Webkit/Opera - :checked should return selected option elements
              // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
              // IE8 throws error here and will not see later tests
              if ( !div.querySelectorAll(":checked").length ) {
                rbuggyQSA.push(":checked");
              }

              // Support: Safari 8+, iOS 8+
              // https://bugs.webkit.org/show_bug.cgi?id=136851
              // In-page `selector#id sibing-combinator selector` fails
              if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
                rbuggyQSA.push(".#.+[+~]");
              }
            });

            assert(function( div ) {
              // Support: Windows 8 Native Apps
              // The type and name attributes are restricted during .innerHTML assignment
              var input = doc.createElement("input");
              input.setAttribute( "type", "hidden" );
              div.appendChild( input ).setAttribute( "name", "D" );

              // Support: IE8
              // Enforce case-sensitivity of name attribute
              if ( div.querySelectorAll("[name=d]").length ) {
                rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
              }

              // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
              // IE8 throws error here and will not see later tests
              if ( !div.querySelectorAll(":enabled").length ) {
                rbuggyQSA.push( ":enabled", ":disabled" );
              }

              // Opera 10-11 does not throw on post-comma invalid pseudos
              div.querySelectorAll("*,:x");
              rbuggyQSA.push(",.*:");
            });
          }

          if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
              docElem.webkitMatchesSelector ||
              docElem.mozMatchesSelector ||
              docElem.oMatchesSelector ||
              docElem.msMatchesSelector) )) ) {

            assert(function( div ) {
              // Check to see if it's possible to do matchesSelector
              // on a disconnected node (IE 9)
              support.disconnectedMatch = matches.call( div, "div" );

              // This should fail with an exception
              // Gecko does not error, returns false instead
              matches.call( div, "[s!='']:x" );
              rbuggyMatches.push( "!=", pseudos );
            });
          }

          rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
          rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

          /* Contains
           ---------------------------------------------------------------------- */
          hasCompare = rnative.test( docElem.compareDocumentPosition );

          // Element contains another
          // Purposefully does not implement inclusive descendent
          // As in, an element does not contain itself
          contains = hasCompare || rnative.test( docElem.contains ) ?
            function( a, b ) {
              var adown = a.nodeType === 9 ? a.documentElement : a,
                bup = b && b.parentNode;
              return a === bup || !!( bup && bup.nodeType === 1 && (
                  adown.contains ?
                    adown.contains( bup ) :
                  a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
                ));
            } :
            function( a, b ) {
              if ( b ) {
                while ( (b = b.parentNode) ) {
                  if ( b === a ) {
                    return true;
                  }
                }
              }
              return false;
            };

          /* Sorting
           ---------------------------------------------------------------------- */

          // Document order sorting
          sortOrder = hasCompare ?
            function( a, b ) {

              // Flag for duplicate removal
              if ( a === b ) {
                hasDuplicate = true;
                return 0;
              }

              // Sort on method existence if only one input has compareDocumentPosition
              var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
              if ( compare ) {
                return compare;
              }

              // Calculate position if both inputs belong to the same document
              compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
                a.compareDocumentPosition( b ) :

                // Otherwise we know they are disconnected
                1;

              // Disconnected nodes
              if ( compare & 1 ||
                (!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

                // Choose the first element that is related to our preferred document
                if ( a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
                  return -1;
                }
                if ( b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
                  return 1;
                }

                // Maintain original order
                return sortInput ?
                  ( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
                  0;
              }

              return compare & 4 ? -1 : 1;
            } :
            function( a, b ) {
              // Exit early if the nodes are identical
              if ( a === b ) {
                hasDuplicate = true;
                return 0;
              }

              var cur,
                i = 0,
                aup = a.parentNode,
                bup = b.parentNode,
                ap = [ a ],
                bp = [ b ];

              // Parentless nodes are either documents or disconnected
              if ( !aup || !bup ) {
                return a === doc ? -1 :
                  b === doc ? 1 :
                    aup ? -1 :
                      bup ? 1 :
                        sortInput ?
                          ( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
                          0;

                // If the nodes are siblings, we can do a quick check
              } else if ( aup === bup ) {
                return siblingCheck( a, b );
              }

              // Otherwise we need full lists of their ancestors for comparison
              cur = a;
              while ( (cur = cur.parentNode) ) {
                ap.unshift( cur );
              }
              cur = b;
              while ( (cur = cur.parentNode) ) {
                bp.unshift( cur );
              }

              // Walk down the tree looking for a discrepancy
              while ( ap[i] === bp[i] ) {
                i++;
              }

              return i ?
                // Do a sibling check if the nodes have a common ancestor
                siblingCheck( ap[i], bp[i] ) :

                // Otherwise nodes in our document sort first
                ap[i] === preferredDoc ? -1 :
                  bp[i] === preferredDoc ? 1 :
                    0;
            };

          return doc;
        };

        Sizzle.matches = function( expr, elements ) {
          return Sizzle( expr, null, null, elements );
        };

        Sizzle.matchesSelector = function( elem, expr ) {
          // Set document vars if needed
          if ( ( elem.ownerDocument || elem ) !== document ) {
            setDocument( elem );
          }

          // Make sure that attribute selectors are quoted
          expr = expr.replace( rattributeQuotes, "='$1']" );

          if ( support.matchesSelector && documentIsHTML &&
            ( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
            ( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

            try {
              var ret = matches.call( elem, expr );

              // IE 9's matchesSelector returns false on disconnected nodes
              if ( ret || support.disconnectedMatch ||
                // As well, disconnected nodes are said to be in a document
                // fragment in IE 9
                elem.document && elem.document.nodeType !== 11 ) {
                return ret;
              }
            } catch (e) {}
          }

          return Sizzle( expr, document, null, [ elem ] ).length > 0;
        };

        Sizzle.contains = function( context, elem ) {
          // Set document vars if needed
          if ( ( context.ownerDocument || context ) !== document ) {
            setDocument( context );
          }
          return contains( context, elem );
        };

        Sizzle.attr = function( elem, name ) {
          // Set document vars if needed
          if ( ( elem.ownerDocument || elem ) !== document ) {
            setDocument( elem );
          }

          var fn = Expr.attrHandle[ name.toLowerCase() ],
          // Don't get fooled by Object.prototype properties (jQuery #13807)
            val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
              fn( elem, name, !documentIsHTML ) :
              undefined;

          return val !== undefined ?
            val :
            support.attributes || !documentIsHTML ?
              elem.getAttribute( name ) :
              (val = elem.getAttributeNode(name)) && val.specified ?
                val.value :
                null;
        };

        Sizzle.error = function( msg ) {
          throw new Error( "Syntax error, unrecognized expression: " + msg );
        };

        /**
         * Document sorting and removing duplicates
         * @param {ArrayLike} results
         */
        Sizzle.uniqueSort = function( results ) {
          var elem,
            duplicates = [],
            j = 0,
            i = 0;

          // Unless we *know* we can detect duplicates, assume their presence
          hasDuplicate = !support.detectDuplicates;
          sortInput = !support.sortStable && results.slice( 0 );
          results.sort( sortOrder );

          if ( hasDuplicate ) {
            while ( (elem = results[i++]) ) {
              if ( elem === results[ i ] ) {
                j = duplicates.push( i );
              }
            }
            while ( j-- ) {
              results.splice( duplicates[ j ], 1 );
            }
          }

          // Clear input after sorting to release objects
          // See https://github.com/jquery/sizzle/pull/225
          sortInput = null;

          return results;
        };

        /**
         * Utility function for retrieving the text value of an array of DOM nodes
         * @param {Array|Element} elem
         */
        getText = Sizzle.getText = function( elem ) {
          var node,
            ret = "",
            i = 0,
            nodeType = elem.nodeType;

          if ( !nodeType ) {
            // If no nodeType, this is expected to be an array
            while ( (node = elem[i++]) ) {
              // Do not traverse comment nodes
              ret += getText( node );
            }
          } else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
            // Use textContent for elements
            // innerText usage removed for consistency of new lines (jQuery #11153)
            if ( typeof elem.textContent === "string" ) {
              return elem.textContent;
            } else {
              // Traverse its children
              for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
                ret += getText( elem );
              }
            }
          } else if ( nodeType === 3 || nodeType === 4 ) {
            return elem.nodeValue;
          }
          // Do not include comment or processing instruction nodes

          return ret;
        };

        Expr = Sizzle.selectors = {

          // Can be adjusted by the user
          cacheLength: 50,

          createPseudo: markFunction,

          match: matchExpr,

          attrHandle: {},

          find: {},

          relative: {
            ">": { dir: "parentNode", first: true },
            " ": { dir: "parentNode" },
            "+": { dir: "previousSibling", first: true },
            "~": { dir: "previousSibling" }
          },

          preFilter: {
            "ATTR": function( match ) {
              match[1] = match[1].replace( runescape, funescape );

              // Move the given value to match[3] whether quoted or unquoted
              match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

              if ( match[2] === "~=" ) {
                match[3] = " " + match[3] + " ";
              }

              return match.slice( 0, 4 );
            },

            "CHILD": function( match ) {
              /* matches from matchExpr["CHILD"]
               1 type (only|nth|...)
               2 what (child|of-type)
               3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
               4 xn-component of xn+y argument ([+-]?\d*n|)
               5 sign of xn-component
               6 x of xn-component
               7 sign of y-component
               8 y of y-component
               */
              match[1] = match[1].toLowerCase();

              if ( match[1].slice( 0, 3 ) === "nth" ) {
                // nth-* requires argument
                if ( !match[3] ) {
                  Sizzle.error( match[0] );
                }

                // numeric x and y parameters for Expr.filter.CHILD
                // remember that false/true cast respectively to 0/1
                match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
                match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

                // other types prohibit arguments
              } else if ( match[3] ) {
                Sizzle.error( match[0] );
              }

              return match;
            },

            "PSEUDO": function( match ) {
              var excess,
                unquoted = !match[6] && match[2];

              if ( matchExpr["CHILD"].test( match[0] ) ) {
                return null;
              }

              // Accept quoted arguments as-is
              if ( match[3] ) {
                match[2] = match[4] || match[5] || "";

                // Strip excess characters from unquoted arguments
              } else if ( unquoted && rpseudo.test( unquoted ) &&
                // Get excess from tokenize (recursively)
                (excess = tokenize( unquoted, true )) &&
                // advance to the next closing parenthesis
                (excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

                // excess is a negative index
                match[0] = match[0].slice( 0, excess );
                match[2] = unquoted.slice( 0, excess );
              }

              // Return only captures needed by the pseudo filter method (type and argument)
              return match.slice( 0, 3 );
            }
          },

          filter: {

            "TAG": function( nodeNameSelector ) {
              var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
              return nodeNameSelector === "*" ?
                function() { return true; } :
                function( elem ) {
                  return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
                };
            },

            "CLASS": function( className ) {
              var pattern = classCache[ className + " " ];

              return pattern ||
                (pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
                classCache( className, function( elem ) {
                  return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
                });
            },

            "ATTR": function( name, operator, check ) {
              return function( elem ) {
                var result = Sizzle.attr( elem, name );

                if ( result == null ) {
                  return operator === "!=";
                }
                if ( !operator ) {
                  return true;
                }

                result += "";

                return operator === "=" ? result === check :
                  operator === "!=" ? result !== check :
                    operator === "^=" ? check && result.indexOf( check ) === 0 :
                      operator === "*=" ? check && result.indexOf( check ) > -1 :
                        operator === "$=" ? check && result.slice( -check.length ) === check :
                          operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
                            operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
                              false;
              };
            },

            "CHILD": function( type, what, argument, first, last ) {
              var simple = type.slice( 0, 3 ) !== "nth",
                forward = type.slice( -4 ) !== "last",
                ofType = what === "of-type";

              return first === 1 && last === 0 ?

                // Shortcut for :nth-*(n)
                function( elem ) {
                  return !!elem.parentNode;
                } :

                function( elem, context, xml ) {
                  var cache, outerCache, node, diff, nodeIndex, start,
                    dir = simple !== forward ? "nextSibling" : "previousSibling",
                    parent = elem.parentNode,
                    name = ofType && elem.nodeName.toLowerCase(),
                    useCache = !xml && !ofType;

                  if ( parent ) {

                    // :(first|last|only)-(child|of-type)
                    if ( simple ) {
                      while ( dir ) {
                        node = elem;
                        while ( (node = node[ dir ]) ) {
                          if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
                            return false;
                          }
                        }
                        // Reverse direction for :only-* (if we haven't yet done so)
                        start = dir = type === "only" && !start && "nextSibling";
                      }
                      return true;
                    }

                    start = [ forward ? parent.firstChild : parent.lastChild ];

                    // non-xml :nth-child(...) stores cache data on `parent`
                    if ( forward && useCache ) {
                      // Seek `elem` from a previously-cached index
                      outerCache = parent[ expando ] || (parent[ expando ] = {});
                      cache = outerCache[ type ] || [];
                      nodeIndex = cache[0] === dirruns && cache[1];
                      diff = cache[0] === dirruns && cache[2];
                      node = nodeIndex && parent.childNodes[ nodeIndex ];

                      while ( (node = ++nodeIndex && node && node[ dir ] ||

                        // Fallback to seeking `elem` from the start
                        (diff = nodeIndex = 0) || start.pop()) ) {

                        // When found, cache indexes on `parent` and break
                        if ( node.nodeType === 1 && ++diff && node === elem ) {
                          outerCache[ type ] = [ dirruns, nodeIndex, diff ];
                          break;
                        }
                      }

                      // Use previously-cached element index if available
                    } else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
                      diff = cache[1];

                      // xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
                    } else {
                      // Use the same loop as above to seek `elem` from the start
                      while ( (node = ++nodeIndex && node && node[ dir ] ||
                        (diff = nodeIndex = 0) || start.pop()) ) {

                        if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
                          // Cache the index of each encountered element
                          if ( useCache ) {
                            (node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
                          }

                          if ( node === elem ) {
                            break;
                          }
                        }
                      }
                    }

                    // Incorporate the offset, then check against cycle size
                    diff -= last;
                    return diff === first || ( diff % first === 0 && diff / first >= 0 );
                  }
                };
            },

            "PSEUDO": function( pseudo, argument ) {
              // pseudo-class names are case-insensitive
              // http://www.w3.org/TR/selectors/#pseudo-classes
              // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
              // Remember that setFilters inherits from pseudos
              var args,
                fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
                  Sizzle.error( "unsupported pseudo: " + pseudo );

              // The user may use createPseudo to indicate that
              // arguments are needed to create the filter function
              // just as Sizzle does
              if ( fn[ expando ] ) {
                return fn( argument );
              }

              // But maintain support for old signatures
              if ( fn.length > 1 ) {
                args = [ pseudo, pseudo, "", argument ];
                return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
                  markFunction(function( seed, matches ) {
                    var idx,
                      matched = fn( seed, argument ),
                      i = matched.length;
                    while ( i-- ) {
                      idx = indexOf( seed, matched[i] );
                      seed[ idx ] = !( matches[ idx ] = matched[i] );
                    }
                  }) :
                  function( elem ) {
                    return fn( elem, 0, args );
                  };
              }

              return fn;
            }
          },

          pseudos: {
            // Potentially complex pseudos
            "not": markFunction(function( selector ) {
              // Trim the selector passed to compile
              // to avoid treating leading and trailing
              // spaces as combinators
              var input = [],
                results = [],
                matcher = compile( selector.replace( rtrim, "$1" ) );

              return matcher[ expando ] ?
                markFunction(function( seed, matches, context, xml ) {
                  var elem,
                    unmatched = matcher( seed, null, xml, [] ),
                    i = seed.length;

                  // Match elements unmatched by `matcher`
                  while ( i-- ) {
                    if ( (elem = unmatched[i]) ) {
                      seed[i] = !(matches[i] = elem);
                    }
                  }
                }) :
                function( elem, context, xml ) {
                  input[0] = elem;
                  matcher( input, null, xml, results );
                  // Don't keep the element (issue #299)
                  input[0] = null;
                  return !results.pop();
                };
            }),

            "has": markFunction(function( selector ) {
              return function( elem ) {
                return Sizzle( selector, elem ).length > 0;
              };
            }),

            "contains": markFunction(function( text ) {
              text = text.replace( runescape, funescape );
              return function( elem ) {
                return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
              };
            }),

            // "Whether an element is represented by a :lang() selector
            // is based solely on the element's language value
            // being equal to the identifier C,
            // or beginning with the identifier C immediately followed by "-".
            // The matching of C against the element's language value is performed case-insensitively.
            // The identifier C does not have to be a valid language name."
            // http://www.w3.org/TR/selectors/#lang-pseudo
            "lang": markFunction( function( lang ) {
              // lang value must be a valid identifier
              if ( !ridentifier.test(lang || "") ) {
                Sizzle.error( "unsupported lang: " + lang );
              }
              lang = lang.replace( runescape, funescape ).toLowerCase();
              return function( elem ) {
                var elemLang;
                do {
                  if ( (elemLang = documentIsHTML ?
                      elem.lang :
                    elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

                    elemLang = elemLang.toLowerCase();
                    return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
                  }
                } while ( (elem = elem.parentNode) && elem.nodeType === 1 );
                return false;
              };
            }),

            // Miscellaneous
            "target": function( elem ) {
              var hash = window.location && window.location.hash;
              return hash && hash.slice( 1 ) === elem.id;
            },

            "root": function( elem ) {
              return elem === docElem;
            },

            "focus": function( elem ) {
              return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
            },

            // Boolean properties
            "enabled": function( elem ) {
              return elem.disabled === false;
            },

            "disabled": function( elem ) {
              return elem.disabled === true;
            },

            "checked": function( elem ) {
              // In CSS3, :checked should return both checked and selected elements
              // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
              var nodeName = elem.nodeName.toLowerCase();
              return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
            },

            "selected": function( elem ) {
              // Accessing this property makes selected-by-default
              // options in Safari work properly
              if ( elem.parentNode ) {
                elem.parentNode.selectedIndex;
              }

              return elem.selected === true;
            },

            // Contents
            "empty": function( elem ) {
              // http://www.w3.org/TR/selectors/#empty-pseudo
              // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
              //   but not by others (comment: 8; processing instruction: 7; etc.)
              // nodeType < 6 works because attributes (2) do not appear as children
              for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
                if ( elem.nodeType < 6 ) {
                  return false;
                }
              }
              return true;
            },

            "parent": function( elem ) {
              return !Expr.pseudos["empty"]( elem );
            },

            // Element/input types
            "header": function( elem ) {
              return rheader.test( elem.nodeName );
            },

            "input": function( elem ) {
              return rinputs.test( elem.nodeName );
            },

            "button": function( elem ) {
              var name = elem.nodeName.toLowerCase();
              return name === "input" && elem.type === "button" || name === "button";
            },

            "text": function( elem ) {
              var attr;
              return elem.nodeName.toLowerCase() === "input" &&
                elem.type === "text" &&

                // Support: IE<8
                // New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
                ( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
            },

            // Position-in-collection
            "first": createPositionalPseudo(function() {
              return [ 0 ];
            }),

            "last": createPositionalPseudo(function( matchIndexes, length ) {
              return [ length - 1 ];
            }),

            "eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
              return [ argument < 0 ? argument + length : argument ];
            }),

            "even": createPositionalPseudo(function( matchIndexes, length ) {
              var i = 0;
              for ( ; i < length; i += 2 ) {
                matchIndexes.push( i );
              }
              return matchIndexes;
            }),

            "odd": createPositionalPseudo(function( matchIndexes, length ) {
              var i = 1;
              for ( ; i < length; i += 2 ) {
                matchIndexes.push( i );
              }
              return matchIndexes;
            }),

            "lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
              var i = argument < 0 ? argument + length : argument;
              for ( ; --i >= 0; ) {
                matchIndexes.push( i );
              }
              return matchIndexes;
            }),

            "gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
              var i = argument < 0 ? argument + length : argument;
              for ( ; ++i < length; ) {
                matchIndexes.push( i );
              }
              return matchIndexes;
            })
          }
        };

        Expr.pseudos["nth"] = Expr.pseudos["eq"];

        // Add button/input type pseudos
        for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
          Expr.pseudos[ i ] = createInputPseudo( i );
        }
        for ( i in { submit: true, reset: true } ) {
          Expr.pseudos[ i ] = createButtonPseudo( i );
        }

        // Easy API for creating new setFilters
        function setFilters() {}
        setFilters.prototype = Expr.filters = Expr.pseudos;
        Expr.setFilters = new setFilters();

        tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
          var matched, match, tokens, type,
            soFar, groups, preFilters,
            cached = tokenCache[ selector + " " ];

          if ( cached ) {
            return parseOnly ? 0 : cached.slice( 0 );
          }

          soFar = selector;
          groups = [];
          preFilters = Expr.preFilter;

          while ( soFar ) {

            // Comma and first run
            if ( !matched || (match = rcomma.exec( soFar )) ) {
              if ( match ) {
                // Don't consume trailing commas as valid
                soFar = soFar.slice( match[0].length ) || soFar;
              }
              groups.push( (tokens = []) );
            }

            matched = false;

            // Combinators
            if ( (match = rcombinators.exec( soFar )) ) {
              matched = match.shift();
              tokens.push({
                value: matched,
                // Cast descendant combinators to space
                type: match[0].replace( rtrim, " " )
              });
              soFar = soFar.slice( matched.length );
            }

            // Filters
            for ( type in Expr.filter ) {
              if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
                (match = preFilters[ type ]( match ))) ) {
                matched = match.shift();
                tokens.push({
                  value: matched,
                  type: type,
                  matches: match
                });
                soFar = soFar.slice( matched.length );
              }
            }

            if ( !matched ) {
              break;
            }
          }

          // Return the length of the invalid excess
          // if we're just parsing
          // Otherwise, throw an error or return tokens
          return parseOnly ?
            soFar.length :
            soFar ?
              Sizzle.error( selector ) :
              // Cache the tokens
              tokenCache( selector, groups ).slice( 0 );
        };

        function toSelector( tokens ) {
          var i = 0,
            len = tokens.length,
            selector = "";
          for ( ; i < len; i++ ) {
            selector += tokens[i].value;
          }
          return selector;
        }

        function addCombinator( matcher, combinator, base ) {
          var dir = combinator.dir,
            checkNonElements = base && dir === "parentNode",
            doneName = done++;

          return combinator.first ?
            // Check against closest ancestor/preceding element
            function( elem, context, xml ) {
              while ( (elem = elem[ dir ]) ) {
                if ( elem.nodeType === 1 || checkNonElements ) {
                  return matcher( elem, context, xml );
                }
              }
            } :

            // Check against all ancestor/preceding elements
            function( elem, context, xml ) {
              var oldCache, outerCache,
                newCache = [ dirruns, doneName ];

              // We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
              if ( xml ) {
                while ( (elem = elem[ dir ]) ) {
                  if ( elem.nodeType === 1 || checkNonElements ) {
                    if ( matcher( elem, context, xml ) ) {
                      return true;
                    }
                  }
                }
              } else {
                while ( (elem = elem[ dir ]) ) {
                  if ( elem.nodeType === 1 || checkNonElements ) {
                    outerCache = elem[ expando ] || (elem[ expando ] = {});
                    if ( (oldCache = outerCache[ dir ]) &&
                      oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

                      // Assign to newCache so results back-propagate to previous elements
                      return (newCache[ 2 ] = oldCache[ 2 ]);
                    } else {
                      // Reuse newcache so results back-propagate to previous elements
                      outerCache[ dir ] = newCache;

                      // A match means we're done; a fail means we have to keep checking
                      if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
                        return true;
                      }
                    }
                  }
                }
              }
            };
        }

        function elementMatcher( matchers ) {
          return matchers.length > 1 ?
            function( elem, context, xml ) {
              var i = matchers.length;
              while ( i-- ) {
                if ( !matchers[i]( elem, context, xml ) ) {
                  return false;
                }
              }
              return true;
            } :
            matchers[0];
        }

        function multipleContexts( selector, contexts, results ) {
          var i = 0,
            len = contexts.length;
          for ( ; i < len; i++ ) {
            Sizzle( selector, contexts[i], results );
          }
          return results;
        }

        function condense( unmatched, map, filter, context, xml ) {
          var elem,
            newUnmatched = [],
            i = 0,
            len = unmatched.length,
            mapped = map != null;

          for ( ; i < len; i++ ) {
            if ( (elem = unmatched[i]) ) {
              if ( !filter || filter( elem, context, xml ) ) {
                newUnmatched.push( elem );
                if ( mapped ) {
                  map.push( i );
                }
              }
            }
          }

          return newUnmatched;
        }

        function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
          if ( postFilter && !postFilter[ expando ] ) {
            postFilter = setMatcher( postFilter );
          }
          if ( postFinder && !postFinder[ expando ] ) {
            postFinder = setMatcher( postFinder, postSelector );
          }
          return markFunction(function( seed, results, context, xml ) {
            var temp, i, elem,
              preMap = [],
              postMap = [],
              preexisting = results.length,

            // Get initial elements from seed or context
              elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

            // Prefilter to get matcher input, preserving a map for seed-results synchronization
              matcherIn = preFilter && ( seed || !selector ) ?
                condense( elems, preMap, preFilter, context, xml ) :
                elems,

              matcherOut = matcher ?
                // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
                postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

                  // ...intermediate processing is necessary
                  [] :

                  // ...otherwise use results directly
                  results :
                matcherIn;

            // Find primary matches
            if ( matcher ) {
              matcher( matcherIn, matcherOut, context, xml );
            }

            // Apply postFilter
            if ( postFilter ) {
              temp = condense( matcherOut, postMap );
              postFilter( temp, [], context, xml );

              // Un-match failing elements by moving them back to matcherIn
              i = temp.length;
              while ( i-- ) {
                if ( (elem = temp[i]) ) {
                  matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
                }
              }
            }

            if ( seed ) {
              if ( postFinder || preFilter ) {
                if ( postFinder ) {
                  // Get the final matcherOut by condensing this intermediate into postFinder contexts
                  temp = [];
                  i = matcherOut.length;
                  while ( i-- ) {
                    if ( (elem = matcherOut[i]) ) {
                      // Restore matcherIn since elem is not yet a final match
                      temp.push( (matcherIn[i] = elem) );
                    }
                  }
                  postFinder( null, (matcherOut = []), temp, xml );
                }

                // Move matched elements from seed to results to keep them synchronized
                i = matcherOut.length;
                while ( i-- ) {
                  if ( (elem = matcherOut[i]) &&
                    (temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

                    seed[temp] = !(results[temp] = elem);
                  }
                }
              }

              // Add elements to results, through postFinder if defined
            } else {
              matcherOut = condense(
                matcherOut === results ?
                  matcherOut.splice( preexisting, matcherOut.length ) :
                  matcherOut
              );
              if ( postFinder ) {
                postFinder( null, results, matcherOut, xml );
              } else {
                push.apply( results, matcherOut );
              }
            }
          });
        }

        function matcherFromTokens( tokens ) {
          var checkContext, matcher, j,
            len = tokens.length,
            leadingRelative = Expr.relative[ tokens[0].type ],
            implicitRelative = leadingRelative || Expr.relative[" "],
            i = leadingRelative ? 1 : 0,

          // The foundational matcher ensures that elements are reachable from top-level context(s)
            matchContext = addCombinator( function( elem ) {
              return elem === checkContext;
            }, implicitRelative, true ),
            matchAnyContext = addCombinator( function( elem ) {
              return indexOf( checkContext, elem ) > -1;
            }, implicitRelative, true ),
            matchers = [ function( elem, context, xml ) {
              var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
                  (checkContext = context).nodeType ?
                    matchContext( elem, context, xml ) :
                    matchAnyContext( elem, context, xml ) );
              // Avoid hanging onto element (issue #299)
              checkContext = null;
              return ret;
            } ];

          for ( ; i < len; i++ ) {
            if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
              matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
            } else {
              matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

              // Return special upon seeing a positional matcher
              if ( matcher[ expando ] ) {
                // Find the next relative operator (if any) for proper handling
                j = ++i;
                for ( ; j < len; j++ ) {
                  if ( Expr.relative[ tokens[j].type ] ) {
                    break;
                  }
                }
                return setMatcher(
                  i > 1 && elementMatcher( matchers ),
                  i > 1 && toSelector(
                    // If the preceding token was a descendant combinator, insert an implicit any-element `*`
                    tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
                  ).replace( rtrim, "$1" ),
                  matcher,
                  i < j && matcherFromTokens( tokens.slice( i, j ) ),
                  j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
                  j < len && toSelector( tokens )
                );
              }
              matchers.push( matcher );
            }
          }

          return elementMatcher( matchers );
        }

        function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
          var bySet = setMatchers.length > 0,
            byElement = elementMatchers.length > 0,
            superMatcher = function( seed, context, xml, results, outermost ) {
              var elem, j, matcher,
                matchedCount = 0,
                i = "0",
                unmatched = seed && [],
                setMatched = [],
                contextBackup = outermostContext,
              // We must always have either seed elements or outermost context
                elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
              // Use integer dirruns iff this is the outermost matcher
                dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
                len = elems.length;

              if ( outermost ) {
                outermostContext = context !== document && context;
              }

              // Add elements passing elementMatchers directly to results
              // Keep `i` a string if there are no elements so `matchedCount` will be "00" below
              // Support: IE<9, Safari
              // Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
              for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
                if ( byElement && elem ) {
                  j = 0;
                  while ( (matcher = elementMatchers[j++]) ) {
                    if ( matcher( elem, context, xml ) ) {
                      results.push( elem );
                      break;
                    }
                  }
                  if ( outermost ) {
                    dirruns = dirrunsUnique;
                  }
                }

                // Track unmatched elements for set filters
                if ( bySet ) {
                  // They will have gone through all possible matchers
                  if ( (elem = !matcher && elem) ) {
                    matchedCount--;
                  }

                  // Lengthen the array for every element, matched or not
                  if ( seed ) {
                    unmatched.push( elem );
                  }
                }
              }

              // Apply set filters to unmatched elements
              matchedCount += i;
              if ( bySet && i !== matchedCount ) {
                j = 0;
                while ( (matcher = setMatchers[j++]) ) {
                  matcher( unmatched, setMatched, context, xml );
                }

                if ( seed ) {
                  // Reintegrate element matches to eliminate the need for sorting
                  if ( matchedCount > 0 ) {
                    while ( i-- ) {
                      if ( !(unmatched[i] || setMatched[i]) ) {
                        setMatched[i] = pop.call( results );
                      }
                    }
                  }

                  // Discard index placeholder values to get only actual matches
                  setMatched = condense( setMatched );
                }

                // Add matches to results
                push.apply( results, setMatched );

                // Seedless set matches succeeding multiple successful matchers stipulate sorting
                if ( outermost && !seed && setMatched.length > 0 &&
                  ( matchedCount + setMatchers.length ) > 1 ) {

                  Sizzle.uniqueSort( results );
                }
              }

              // Override manipulation of globals by nested matchers
              if ( outermost ) {
                dirruns = dirrunsUnique;
                outermostContext = contextBackup;
              }

              return unmatched;
            };

          return bySet ?
            markFunction( superMatcher ) :
            superMatcher;
        }

        compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
          var i,
            setMatchers = [],
            elementMatchers = [],
            cached = compilerCache[ selector + " " ];

          if ( !cached ) {
            // Generate a function of recursive functions that can be used to check each element
            if ( !match ) {
              match = tokenize( selector );
            }
            i = match.length;
            while ( i-- ) {
              cached = matcherFromTokens( match[i] );
              if ( cached[ expando ] ) {
                setMatchers.push( cached );
              } else {
                elementMatchers.push( cached );
              }
            }

            // Cache the compiled function
            cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

            // Save selector and tokenization
            cached.selector = selector;
          }
          return cached;
        };

        /**
         * A low-level selection function that works with Sizzle's compiled
         *  selector functions
         * @param {String|Function} selector A selector or a pre-compiled
         *  selector function built with Sizzle.compile
         * @param {Element} context
         * @param {Array} [results]
         * @param {Array} [seed] A set of elements to match against
         */
        select = Sizzle.select = function( selector, context, results, seed ) {
          var i, tokens, token, type, find,
            compiled = typeof selector === "function" && selector,
            match = !seed && tokenize( (selector = compiled.selector || selector) );

          results = results || [];

          // Try to minimize operations if there is no seed and only one group
          if ( match.length === 1 ) {

            // Take a shortcut and set the context if the root selector is an ID
            tokens = match[0] = match[0].slice( 0 );
            if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
              support.getById && context.nodeType === 9 && documentIsHTML &&
              Expr.relative[ tokens[1].type ] ) {

              context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
              if ( !context ) {
                return results;

                // Precompiled matchers will still verify ancestry, so step up a level
              } else if ( compiled ) {
                context = context.parentNode;
              }

              selector = selector.slice( tokens.shift().value.length );
            }

            // Fetch a seed set for right-to-left matching
            i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
            while ( i-- ) {
              token = tokens[i];

              // Abort if we hit a combinator
              if ( Expr.relative[ (type = token.type) ] ) {
                break;
              }
              if ( (find = Expr.find[ type ]) ) {
                // Search, expanding context for leading sibling combinators
                if ( (seed = find(
                    token.matches[0].replace( runescape, funescape ),
                    rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
                  )) ) {

                  // If seed is empty or no tokens remain, we can return early
                  tokens.splice( i, 1 );
                  selector = seed.length && toSelector( tokens );
                  if ( !selector ) {
                    push.apply( results, seed );
                    return results;
                  }

                  break;
                }
              }
            }
          }

          // Compile and execute a filtering function if one is not provided
          // Provide `match` to avoid retokenization if we modified the selector above
          ( compiled || compile( selector, match ) )(
            seed,
            context,
            !documentIsHTML,
            results,
            rsibling.test( selector ) && testContext( context.parentNode ) || context
          );
          return results;
        };

        // One-time assignments

        // Sort stability
        support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

        // Support: Chrome 14-35+
        // Always assume duplicates if they aren't passed to the comparison function
        support.detectDuplicates = !!hasDuplicate;

        // Initialize against the default document
        setDocument();

        // Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
        // Detached nodes confoundingly follow *each other*
        support.sortDetached = assert(function( div1 ) {
          // Should return 1, but returns 4 (following)
          return div1.compareDocumentPosition( document.createElement("div") ) & 1;
        });

        // Support: IE<8
        // Prevent attribute/property "interpolation"
        // http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
        if ( !assert(function( div ) {
            div.innerHTML = "<a href='#'></a>";
            return div.firstChild.getAttribute("href") === "#" ;
          }) ) {
          addHandle( "type|href|height|width", function( elem, name, isXML ) {
            if ( !isXML ) {
              return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
            }
          });
        }

        // Support: IE<9
        // Use defaultValue in place of getAttribute("value")
        if ( !support.attributes || !assert(function( div ) {
            div.innerHTML = "<input/>";
            div.firstChild.setAttribute( "value", "" );
            return div.firstChild.getAttribute( "value" ) === "";
          }) ) {
          addHandle( "value", function( elem, name, isXML ) {
            if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
              return elem.defaultValue;
            }
          });
        }

        // Support: IE<9
        // Use getAttributeNode to fetch booleans when getAttribute lies
        if ( !assert(function( div ) {
            return div.getAttribute("disabled") == null;
          }) ) {
          addHandle( booleans, function( elem, name, isXML ) {
            var val;
            if ( !isXML ) {
              return elem[ name ] === true ? name.toLowerCase() :
                (val = elem.getAttributeNode( name )) && val.specified ?
                  val.value :
                  null;
            }
          });
        }

        return Sizzle;

      })( window );



    jQuery.find = Sizzle;
    jQuery.expr = Sizzle.selectors;
    jQuery.expr[":"] = jQuery.expr.pseudos;
    jQuery.unique = Sizzle.uniqueSort;
    jQuery.text = Sizzle.getText;
    jQuery.isXMLDoc = Sizzle.isXML;
    jQuery.contains = Sizzle.contains;



    var rneedsContext = jQuery.expr.match.needsContext;

    var rsingleTag = (/^<(\w+)\s*\/?>(?:<\/\1>|)$/);



    var risSimple = /^.[^:#\[\.,]*$/;

    // Implement the identical functionality for filter and not
    function winnow( elements, qualifier, not ) {
      if ( jQuery.isFunction( qualifier ) ) {
        return jQuery.grep( elements, function( elem, i ) {
          /* jshint -W018 */
          return !!qualifier.call( elem, i, elem ) !== not;
        });

      }

      if ( qualifier.nodeType ) {
        return jQuery.grep( elements, function( elem ) {
          return ( elem === qualifier ) !== not;
        });

      }

      if ( typeof qualifier === "string" ) {
        if ( risSimple.test( qualifier ) ) {
          return jQuery.filter( qualifier, elements, not );
        }

        qualifier = jQuery.filter( qualifier, elements );
      }

      return jQuery.grep( elements, function( elem ) {
        return ( indexOf.call( qualifier, elem ) >= 0 ) !== not;
      });
    }

    jQuery.filter = function( expr, elems, not ) {
      var elem = elems[ 0 ];

      if ( not ) {
        expr = ":not(" + expr + ")";
      }

      return elems.length === 1 && elem.nodeType === 1 ?
        jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
        jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
          return elem.nodeType === 1;
        }));
    };

    jQuery.fn.extend({
      find: function( selector ) {
        var i,
          len = this.length,
          ret = [],
          self = this;

        if ( typeof selector !== "string" ) {
          return this.pushStack( jQuery( selector ).filter(function() {
            for ( i = 0; i < len; i++ ) {
              if ( jQuery.contains( self[ i ], this ) ) {
                return true;
              }
            }
          }) );
        }

        for ( i = 0; i < len; i++ ) {
          jQuery.find( selector, self[ i ], ret );
        }

        // Needed because $( selector, context ) becomes $( context ).find( selector )
        ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
        ret.selector = this.selector ? this.selector + " " + selector : selector;
        return ret;
      },
      filter: function( selector ) {
        return this.pushStack( winnow(this, selector || [], false) );
      },
      not: function( selector ) {
        return this.pushStack( winnow(this, selector || [], true) );
      },
      is: function( selector ) {
        return !!winnow(
          this,

          // If this is a positional/relative selector, check membership in the returned set
          // so $("p:first").is("p:last") won't return true for a doc with two "p".
          typeof selector === "string" && rneedsContext.test( selector ) ?
            jQuery( selector ) :
          selector || [],
          false
        ).length;
      }
    });


    // Initialize a jQuery object


    // A central reference to the root jQuery(document)
    var rootjQuery,

    // A simple way to check for HTML strings
    // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
    // Strict HTML recognition (#11290: must start with <)
      rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

      init = jQuery.fn.init = function( selector, context ) {
        var match, elem;

        // HANDLE: $(""), $(null), $(undefined), $(false)
        if ( !selector ) {
          return this;
        }

        // Handle HTML strings
        if ( typeof selector === "string" ) {
          if ( selector[0] === "<" && selector[ selector.length - 1 ] === ">" && selector.length >= 3 ) {
            // Assume that strings that start and end with <> are HTML and skip the regex check
            match = [ null, selector, null ];

          } else {
            match = rquickExpr.exec( selector );
          }

          // Match html or make sure no context is specified for #id
          if ( match && (match[1] || !context) ) {

            // HANDLE: $(html) -> $(array)
            if ( match[1] ) {
              context = context instanceof jQuery ? context[0] : context;

              // Option to run scripts is true for back-compat
              // Intentionally let the error be thrown if parseHTML is not present
              jQuery.merge( this, jQuery.parseHTML(
                match[1],
                context && context.nodeType ? context.ownerDocument || context : document,
                true
              ) );

              // HANDLE: $(html, props)
              if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
                for ( match in context ) {
                  // Properties of context are called as methods if possible
                  if ( jQuery.isFunction( this[ match ] ) ) {
                    this[ match ]( context[ match ] );

                    // ...and otherwise set as attributes
                  } else {
                    this.attr( match, context[ match ] );
                  }
                }
              }

              return this;

              // HANDLE: $(#id)
            } else {
              elem = document.getElementById( match[2] );

              // Support: Blackberry 4.6
              // gEBID returns nodes no longer in the document (#6963)
              if ( elem && elem.parentNode ) {
                // Inject the element directly into the jQuery object
                this.length = 1;
                this[0] = elem;
              }

              this.context = document;
              this.selector = selector;
              return this;
            }

            // HANDLE: $(expr, $(...))
          } else if ( !context || context.jquery ) {
            return ( context || rootjQuery ).find( selector );

            // HANDLE: $(expr, context)
            // (which is just equivalent to: $(context).find(expr)
          } else {
            return this.constructor( context ).find( selector );
          }

          // HANDLE: $(DOMElement)
        } else if ( selector.nodeType ) {
          this.context = this[0] = selector;
          this.length = 1;
          return this;

          // HANDLE: $(function)
          // Shortcut for document ready
        } else if ( jQuery.isFunction( selector ) ) {
          return typeof rootjQuery.ready !== "undefined" ?
            rootjQuery.ready( selector ) :
            // Execute immediately if ready is not present
            selector( jQuery );
        }

        if ( selector.selector !== undefined ) {
          this.selector = selector.selector;
          this.context = selector.context;
        }

        return jQuery.makeArray( selector, this );
      };

    // Give the init function the jQuery prototype for later instantiation
    init.prototype = jQuery.fn;

    // Initialize central reference
    rootjQuery = jQuery( document );


    var rparentsprev = /^(?:parents|prev(?:Until|All))/,
    // Methods guaranteed to produce a unique set when starting from a unique set
      guaranteedUnique = {
        children: true,
        contents: true,
        next: true,
        prev: true
      };

    jQuery.extend({
      dir: function( elem, dir, until ) {
        var matched = [],
          truncate = until !== undefined;

        while ( (elem = elem[ dir ]) && elem.nodeType !== 9 ) {
          if ( elem.nodeType === 1 ) {
            if ( truncate && jQuery( elem ).is( until ) ) {
              break;
            }
            matched.push( elem );
          }
        }
        return matched;
      },

      sibling: function( n, elem ) {
        var matched = [];

        for ( ; n; n = n.nextSibling ) {
          if ( n.nodeType === 1 && n !== elem ) {
            matched.push( n );
          }
        }

        return matched;
      }
    });

    jQuery.fn.extend({
      has: function( target ) {
        var targets = jQuery( target, this ),
          l = targets.length;

        return this.filter(function() {
          var i = 0;
          for ( ; i < l; i++ ) {
            if ( jQuery.contains( this, targets[i] ) ) {
              return true;
            }
          }
        });
      },

      closest: function( selectors, context ) {
        var cur,
          i = 0,
          l = this.length,
          matched = [],
          pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
            jQuery( selectors, context || this.context ) :
            0;

        for ( ; i < l; i++ ) {
          for ( cur = this[i]; cur && cur !== context; cur = cur.parentNode ) {
            // Always skip document fragments
            if ( cur.nodeType < 11 && (pos ?
              pos.index(cur) > -1 :

                // Don't pass non-elements to Sizzle
              cur.nodeType === 1 &&
              jQuery.find.matchesSelector(cur, selectors)) ) {

              matched.push( cur );
              break;
            }
          }
        }

        return this.pushStack( matched.length > 1 ? jQuery.unique( matched ) : matched );
      },

      // Determine the position of an element within the set
      index: function( elem ) {

        // No argument, return index in parent
        if ( !elem ) {
          return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
        }

        // Index in selector
        if ( typeof elem === "string" ) {
          return indexOf.call( jQuery( elem ), this[ 0 ] );
        }

        // Locate the position of the desired element
        return indexOf.call( this,

          // If it receives a jQuery object, the first element is used
          elem.jquery ? elem[ 0 ] : elem
        );
      },

      add: function( selector, context ) {
        return this.pushStack(
          jQuery.unique(
            jQuery.merge( this.get(), jQuery( selector, context ) )
          )
        );
      },

      addBack: function( selector ) {
        return this.add( selector == null ?
          this.prevObject : this.prevObject.filter(selector)
        );
      }
    });

    function sibling( cur, dir ) {
      while ( (cur = cur[dir]) && cur.nodeType !== 1 ) {}
      return cur;
    }

    jQuery.each({
      parent: function( elem ) {
        var parent = elem.parentNode;
        return parent && parent.nodeType !== 11 ? parent : null;
      },
      parents: function( elem ) {
        return jQuery.dir( elem, "parentNode" );
      },
      parentsUntil: function( elem, i, until ) {
        return jQuery.dir( elem, "parentNode", until );
      },
      next: function( elem ) {
        return sibling( elem, "nextSibling" );
      },
      prev: function( elem ) {
        return sibling( elem, "previousSibling" );
      },
      nextAll: function( elem ) {
        return jQuery.dir( elem, "nextSibling" );
      },
      prevAll: function( elem ) {
        return jQuery.dir( elem, "previousSibling" );
      },
      nextUntil: function( elem, i, until ) {
        return jQuery.dir( elem, "nextSibling", until );
      },
      prevUntil: function( elem, i, until ) {
        return jQuery.dir( elem, "previousSibling", until );
      },
      siblings: function( elem ) {
        return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
      },
      children: function( elem ) {
        return jQuery.sibling( elem.firstChild );
      },
      contents: function( elem ) {
        return elem.contentDocument || jQuery.merge( [], elem.childNodes );
      }
    }, function( name, fn ) {
      jQuery.fn[ name ] = function( until, selector ) {
        var matched = jQuery.map( this, fn, until );

        if ( name.slice( -5 ) !== "Until" ) {
          selector = until;
        }

        if ( selector && typeof selector === "string" ) {
          matched = jQuery.filter( selector, matched );
        }

        if ( this.length > 1 ) {
          // Remove duplicates
          if ( !guaranteedUnique[ name ] ) {
            jQuery.unique( matched );
          }

          // Reverse order for parents* and prev-derivatives
          if ( rparentsprev.test( name ) ) {
            matched.reverse();
          }
        }

        return this.pushStack( matched );
      };
    });
    var rnotwhite = (/\S+/g);



    // String to Object options format cache
    var optionsCache = {};

    // Convert String-formatted options into Object-formatted ones and store in cache
    function createOptions( options ) {
      var object = optionsCache[ options ] = {};
      jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
        object[ flag ] = true;
      });
      return object;
    }

    /*
     * Create a callback list using the following parameters:
     *
     *	options: an optional list of space-separated options that will change how
     *			the callback list behaves or a more traditional option object
     *
     * By default a callback list will act like an event callback list and can be
     * "fired" multiple times.
     *
     * Possible options:
     *
     *	once:			will ensure the callback list can only be fired once (like a Deferred)
     *
     *	memory:			will keep track of previous values and will call any callback added
     *					after the list has been fired right away with the latest "memorized"
     *					values (like a Deferred)
     *
     *	unique:			will ensure a callback can only be added once (no duplicate in the list)
     *
     *	stopOnFalse:	interrupt callings when a callback returns false
     *
     */
    jQuery.Callbacks = function( options ) {

      // Convert options from String-formatted to Object-formatted if needed
      // (we check in cache first)
      options = typeof options === "string" ?
        ( optionsCache[ options ] || createOptions( options ) ) :
        jQuery.extend( {}, options );

      var // Last fire value (for non-forgettable lists)
        memory,
      // Flag to know if list was already fired
        fired,
      // Flag to know if list is currently firing
        firing,
      // First callback to fire (used internally by add and fireWith)
        firingStart,
      // End of the loop when firing
        firingLength,
      // Index of currently firing callback (modified by remove if needed)
        firingIndex,
      // Actual callback list
        list = [],
      // Stack of fire calls for repeatable lists
        stack = !options.once && [],
      // Fire callbacks
        fire = function( data ) {
          memory = options.memory && data;
          fired = true;
          firingIndex = firingStart || 0;
          firingStart = 0;
          firingLength = list.length;
          firing = true;
          for ( ; list && firingIndex < firingLength; firingIndex++ ) {
            if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
              memory = false; // To prevent further calls using add
              break;
            }
          }
          firing = false;
          if ( list ) {
            if ( stack ) {
              if ( stack.length ) {
                fire( stack.shift() );
              }
            } else if ( memory ) {
              list = [];
            } else {
              self.disable();
            }
          }
        },
      // Actual Callbacks object
        self = {
          // Add a callback or a collection of callbacks to the list
          add: function() {
            if ( list ) {
              // First, we save the current length
              var start = list.length;
              (function add( args ) {
                jQuery.each( args, function( _, arg ) {
                  var type = jQuery.type( arg );
                  if ( type === "function" ) {
                    if ( !options.unique || !self.has( arg ) ) {
                      list.push( arg );
                    }
                  } else if ( arg && arg.length && type !== "string" ) {
                    // Inspect recursively
                    add( arg );
                  }
                });
              })( arguments );
              // Do we need to add the callbacks to the
              // current firing batch?
              if ( firing ) {
                firingLength = list.length;
                // With memory, if we're not firing then
                // we should call right away
              } else if ( memory ) {
                firingStart = start;
                fire( memory );
              }
            }
            return this;
          },
          // Remove a callback from the list
          remove: function() {
            if ( list ) {
              jQuery.each( arguments, function( _, arg ) {
                var index;
                while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
                  list.splice( index, 1 );
                  // Handle firing indexes
                  if ( firing ) {
                    if ( index <= firingLength ) {
                      firingLength--;
                    }
                    if ( index <= firingIndex ) {
                      firingIndex--;
                    }
                  }
                }
              });
            }
            return this;
          },
          // Check if a given callback is in the list.
          // If no argument is given, return whether or not list has callbacks attached.
          has: function( fn ) {
            return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
          },
          // Remove all callbacks from the list
          empty: function() {
            list = [];
            firingLength = 0;
            return this;
          },
          // Have the list do nothing anymore
          disable: function() {
            list = stack = memory = undefined;
            return this;
          },
          // Is it disabled?
          disabled: function() {
            return !list;
          },
          // Lock the list in its current state
          lock: function() {
            stack = undefined;
            if ( !memory ) {
              self.disable();
            }
            return this;
          },
          // Is it locked?
          locked: function() {
            return !stack;
          },
          // Call all callbacks with the given context and arguments
          fireWith: function( context, args ) {
            if ( list && ( !fired || stack ) ) {
              args = args || [];
              args = [ context, args.slice ? args.slice() : args ];
              if ( firing ) {
                stack.push( args );
              } else {
                fire( args );
              }
            }
            return this;
          },
          // Call all the callbacks with the given arguments
          fire: function() {
            self.fireWith( this, arguments );
            return this;
          },
          // To know if the callbacks have already been called at least once
          fired: function() {
            return !!fired;
          }
        };

      return self;
    };


    jQuery.extend({

      Deferred: function( func ) {
        var tuples = [
            // action, add listener, listener list, final state
            [ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
            [ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
            [ "notify", "progress", jQuery.Callbacks("memory") ]
          ],
          state = "pending",
          promise = {
            state: function() {
              return state;
            },
            always: function() {
              deferred.done( arguments ).fail( arguments );
              return this;
            },
            then: function( /* fnDone, fnFail, fnProgress */ ) {
              var fns = arguments;
              return jQuery.Deferred(function( newDefer ) {
                jQuery.each( tuples, function( i, tuple ) {
                  var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
                  // deferred[ done | fail | progress ] for forwarding actions to newDefer
                  deferred[ tuple[1] ](function() {
                    var returned = fn && fn.apply( this, arguments );
                    if ( returned && jQuery.isFunction( returned.promise ) ) {
                      returned.promise()
                        .done( newDefer.resolve )
                        .fail( newDefer.reject )
                        .progress( newDefer.notify );
                    } else {
                      newDefer[ tuple[ 0 ] + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
                    }
                  });
                });
                fns = null;
              }).promise();
            },
            // Get a promise for this deferred
            // If obj is provided, the promise aspect is added to the object
            promise: function( obj ) {
              return obj != null ? jQuery.extend( obj, promise ) : promise;
            }
          },
          deferred = {};

        // Keep pipe for back-compat
        promise.pipe = promise.then;

        // Add list-specific methods
        jQuery.each( tuples, function( i, tuple ) {
          var list = tuple[ 2 ],
            stateString = tuple[ 3 ];

          // promise[ done | fail | progress ] = list.add
          promise[ tuple[1] ] = list.add;

          // Handle state
          if ( stateString ) {
            list.add(function() {
              // state = [ resolved | rejected ]
              state = stateString;

              // [ reject_list | resolve_list ].disable; progress_list.lock
            }, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
          }

          // deferred[ resolve | reject | notify ]
          deferred[ tuple[0] ] = function() {
            deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
            return this;
          };
          deferred[ tuple[0] + "With" ] = list.fireWith;
        });

        // Make the deferred a promise
        promise.promise( deferred );

        // Call given func if any
        if ( func ) {
          func.call( deferred, deferred );
        }

        // All done!
        return deferred;
      },

      // Deferred helper
      when: function( subordinate /* , ..., subordinateN */ ) {
        var i = 0,
          resolveValues = slice.call( arguments ),
          length = resolveValues.length,

        // the count of uncompleted subordinates
          remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

        // the master Deferred. If resolveValues consist of only a single Deferred, just use that.
          deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

        // Update function for both resolve and progress values
          updateFunc = function( i, contexts, values ) {
            return function( value ) {
              contexts[ i ] = this;
              values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
              if ( values === progressValues ) {
                deferred.notifyWith( contexts, values );
              } else if ( !( --remaining ) ) {
                deferred.resolveWith( contexts, values );
              }
            };
          },

          progressValues, progressContexts, resolveContexts;

        // Add listeners to Deferred subordinates; treat others as resolved
        if ( length > 1 ) {
          progressValues = new Array( length );
          progressContexts = new Array( length );
          resolveContexts = new Array( length );
          for ( ; i < length; i++ ) {
            if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
              resolveValues[ i ].promise()
                .done( updateFunc( i, resolveContexts, resolveValues ) )
                .fail( deferred.reject )
                .progress( updateFunc( i, progressContexts, progressValues ) );
            } else {
              --remaining;
            }
          }
        }

        // If we're not waiting on anything, resolve the master
        if ( !remaining ) {
          deferred.resolveWith( resolveContexts, resolveValues );
        }

        return deferred.promise();
      }
    });


    // The deferred used on DOM ready
    var readyList;

    jQuery.fn.ready = function( fn ) {
      // Add the callback
      jQuery.ready.promise().done( fn );

      return this;
    };

    jQuery.extend({
      // Is the DOM ready to be used? Set to true once it occurs.
      isReady: false,

      // A counter to track how many items to wait for before
      // the ready event fires. See #6781
      readyWait: 1,

      // Hold (or release) the ready event
      holdReady: function( hold ) {
        if ( hold ) {
          jQuery.readyWait++;
        } else {
          jQuery.ready( true );
        }
      },

      // Handle when the DOM is ready
      ready: function( wait ) {

        // Abort if there are pending holds or we're already ready
        if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
          return;
        }

        // Remember that the DOM is ready
        jQuery.isReady = true;

        // If a normal DOM Ready event fired, decrement, and wait if need be
        if ( wait !== true && --jQuery.readyWait > 0 ) {
          return;
        }

        // If there are functions bound, to execute
        readyList.resolveWith( document, [ jQuery ] );

        // Trigger any bound ready events
        if ( jQuery.fn.triggerHandler ) {
          jQuery( document ).triggerHandler( "ready" );
          jQuery( document ).off( "ready" );
        }
      }
    });

    /**
     * The ready event handler and self cleanup method
     */
    function completed() {
      document.removeEventListener( "DOMContentLoaded", completed, false );
      window.removeEventListener( "load", completed, false );
      jQuery.ready();
    }

    jQuery.ready.promise = function( obj ) {
      if ( !readyList ) {

        readyList = jQuery.Deferred();

        // Catch cases where $(document).ready() is called after the browser event has already occurred.
        // We once tried to use readyState "interactive" here, but it caused issues like the one
        // discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
        if ( document.readyState === "complete" ) {
          // Handle it asynchronously to allow scripts the opportunity to delay ready
          setTimeout( jQuery.ready );

        } else {

          // Use the handy event callback
          document.addEventListener( "DOMContentLoaded", completed, false );

          // A fallback to window.onload, that will always work
          window.addEventListener( "load", completed, false );
        }
      }
      return readyList.promise( obj );
    };

    // Kick off the DOM ready check even if the user does not
    jQuery.ready.promise();




    // Multifunctional method to get and set values of a collection
    // The value/s can optionally be executed if it's a function
    var access = jQuery.access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
      var i = 0,
        len = elems.length,
        bulk = key == null;

      // Sets many values
      if ( jQuery.type( key ) === "object" ) {
        chainable = true;
        for ( i in key ) {
          jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
        }

        // Sets one value
      } else if ( value !== undefined ) {
        chainable = true;

        if ( !jQuery.isFunction( value ) ) {
          raw = true;
        }

        if ( bulk ) {
          // Bulk operations run against the entire set
          if ( raw ) {
            fn.call( elems, value );
            fn = null;

            // ...except when executing function values
          } else {
            bulk = fn;
            fn = function( elem, key, value ) {
              return bulk.call( jQuery( elem ), value );
            };
          }
        }

        if ( fn ) {
          for ( ; i < len; i++ ) {
            fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
          }
        }
      }

      return chainable ?
        elems :

        // Gets
        bulk ?
          fn.call( elems ) :
          len ? fn( elems[0], key ) : emptyGet;
    };


    /**
     * Determines whether an object can have data
     */
    jQuery.acceptData = function( owner ) {
      // Accepts only:
      //  - Node
      //    - Node.ELEMENT_NODE
      //    - Node.DOCUMENT_NODE
      //  - Object
      //    - Any
      /* jshint -W018 */
      return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
    };


    function Data() {
      // Support: Android<4,
      // Old WebKit does not have Object.preventExtensions/freeze method,
      // return new empty object instead with no [[set]] accessor
      Object.defineProperty( this.cache = {}, 0, {
        get: function() {
          return {};
        }
      });

      this.expando = jQuery.expando + Data.uid++;
    }

    Data.uid = 1;
    Data.accepts = jQuery.acceptData;

    Data.prototype = {
      key: function( owner ) {
        // We can accept data for non-element nodes in modern browsers,
        // but we should not, see #8335.
        // Always return the key for a frozen object.
        if ( !Data.accepts( owner ) ) {
          return 0;
        }

        var descriptor = {},
        // Check if the owner object already has a cache key
          unlock = owner[ this.expando ];

        // If not, create one
        if ( !unlock ) {
          unlock = Data.uid++;

          // Secure it in a non-enumerable, non-writable property
          try {
            descriptor[ this.expando ] = { value: unlock };
            Object.defineProperties( owner, descriptor );

            // Support: Android<4
            // Fallback to a less secure definition
          } catch ( e ) {
            descriptor[ this.expando ] = unlock;
            jQuery.extend( owner, descriptor );
          }
        }

        // Ensure the cache object
        if ( !this.cache[ unlock ] ) {
          this.cache[ unlock ] = {};
        }

        return unlock;
      },
      set: function( owner, data, value ) {
        var prop,
        // There may be an unlock assigned to this node,
        // if there is no entry for this "owner", create one inline
        // and set the unlock as though an owner entry had always existed
          unlock = this.key( owner ),
          cache = this.cache[ unlock ];

        // Handle: [ owner, key, value ] args
        if ( typeof data === "string" ) {
          cache[ data ] = value;

          // Handle: [ owner, { properties } ] args
        } else {
          // Fresh assignments by object are shallow copied
          if ( jQuery.isEmptyObject( cache ) ) {
            jQuery.extend( this.cache[ unlock ], data );
            // Otherwise, copy the properties one-by-one to the cache object
          } else {
            for ( prop in data ) {
              cache[ prop ] = data[ prop ];
            }
          }
        }
        return cache;
      },
      get: function( owner, key ) {
        // Either a valid cache is found, or will be created.
        // New caches will be created and the unlock returned,
        // allowing direct access to the newly created
        // empty data object. A valid owner object must be provided.
        var cache = this.cache[ this.key( owner ) ];

        return key === undefined ?
          cache : cache[ key ];
      },
      access: function( owner, key, value ) {
        var stored;
        // In cases where either:
        //
        //   1. No key was specified
        //   2. A string key was specified, but no value provided
        //
        // Take the "read" path and allow the get method to determine
        // which value to return, respectively either:
        //
        //   1. The entire cache object
        //   2. The data stored at the key
        //
        if ( key === undefined ||
          ((key && typeof key === "string") && value === undefined) ) {

          stored = this.get( owner, key );

          return stored !== undefined ?
            stored : this.get( owner, jQuery.camelCase(key) );
        }

        // [*]When the key is not a string, or both a key and value
        // are specified, set or extend (existing objects) with either:
        //
        //   1. An object of properties
        //   2. A key and value
        //
        this.set( owner, key, value );

        // Since the "set" path can have two possible entry points
        // return the expected data based on which path was taken[*]
        return value !== undefined ? value : key;
      },
      remove: function( owner, key ) {
        var i, name, camel,
          unlock = this.key( owner ),
          cache = this.cache[ unlock ];

        if ( key === undefined ) {
          this.cache[ unlock ] = {};

        } else {
          // Support array or space separated string of keys
          if ( jQuery.isArray( key ) ) {
            // If "name" is an array of keys...
            // When data is initially created, via ("key", "val") signature,
            // keys will be converted to camelCase.
            // Since there is no way to tell _how_ a key was added, remove
            // both plain key and camelCase key. #12786
            // This will only penalize the array argument path.
            name = key.concat( key.map( jQuery.camelCase ) );
          } else {
            camel = jQuery.camelCase( key );
            // Try the string as a key before any manipulation
            if ( key in cache ) {
              name = [ key, camel ];
            } else {
              // If a key with the spaces exists, use it.
              // Otherwise, create an array by matching non-whitespace
              name = camel;
              name = name in cache ?
                [ name ] : ( name.match( rnotwhite ) || [] );
            }
          }

          i = name.length;
          while ( i-- ) {
            delete cache[ name[ i ] ];
          }
        }
      },
      hasData: function( owner ) {
        return !jQuery.isEmptyObject(
          this.cache[ owner[ this.expando ] ] || {}
        );
      },
      discard: function( owner ) {
        if ( owner[ this.expando ] ) {
          delete this.cache[ owner[ this.expando ] ];
        }
      }
    };
    var data_priv = new Data();

    var data_user = new Data();



    //	Implementation Summary
    //
    //	1. Enforce API surface and semantic compatibility with 1.9.x branch
    //	2. Improve the module's maintainability by reducing the storage
    //		paths to a single mechanism.
    //	3. Use the same single mechanism to support "private" and "user" data.
    //	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
    //	5. Avoid exposing implementation details on user objects (eg. expando properties)
    //	6. Provide a clear path for implementation upgrade to WeakMap in 2014

    var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
      rmultiDash = /([A-Z])/g;

    function dataAttr( elem, key, data ) {
      var name;

      // If nothing was found internally, try to fetch any
      // data from the HTML5 data-* attribute
      if ( data === undefined && elem.nodeType === 1 ) {
        name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();
        data = elem.getAttribute( name );

        if ( typeof data === "string" ) {
          try {
            data = data === "true" ? true :
              data === "false" ? false :
                data === "null" ? null :
                  // Only convert to a number if it doesn't change the string
                  +data + "" === data ? +data :
                    rbrace.test( data ) ? jQuery.parseJSON( data ) :
                      data;
          } catch( e ) {}

          // Make sure we set the data so it isn't changed later
          data_user.set( elem, key, data );
        } else {
          data = undefined;
        }
      }
      return data;
    }

    jQuery.extend({
      hasData: function( elem ) {
        return data_user.hasData( elem ) || data_priv.hasData( elem );
      },

      data: function( elem, name, data ) {
        return data_user.access( elem, name, data );
      },

      removeData: function( elem, name ) {
        data_user.remove( elem, name );
      },

      // TODO: Now that all calls to _data and _removeData have been replaced
      // with direct calls to data_priv methods, these can be deprecated.
      _data: function( elem, name, data ) {
        return data_priv.access( elem, name, data );
      },

      _removeData: function( elem, name ) {
        data_priv.remove( elem, name );
      }
    });

    jQuery.fn.extend({
      data: function( key, value ) {
        var i, name, data,
          elem = this[ 0 ],
          attrs = elem && elem.attributes;

        // Gets all values
        if ( key === undefined ) {
          if ( this.length ) {
            data = data_user.get( elem );

            if ( elem.nodeType === 1 && !data_priv.get( elem, "hasDataAttrs" ) ) {
              i = attrs.length;
              while ( i-- ) {

                // Support: IE11+
                // The attrs elements can be null (#14894)
                if ( attrs[ i ] ) {
                  name = attrs[ i ].name;
                  if ( name.indexOf( "data-" ) === 0 ) {
                    name = jQuery.camelCase( name.slice(5) );
                    dataAttr( elem, name, data[ name ] );
                  }
                }
              }
              data_priv.set( elem, "hasDataAttrs", true );
            }
          }

          return data;
        }

        // Sets multiple values
        if ( typeof key === "object" ) {
          return this.each(function() {
            data_user.set( this, key );
          });
        }

        return access( this, function( value ) {
          var data,
            camelKey = jQuery.camelCase( key );

          // The calling jQuery object (element matches) is not empty
          // (and therefore has an element appears at this[ 0 ]) and the
          // `value` parameter was not undefined. An empty jQuery object
          // will result in `undefined` for elem = this[ 0 ] which will
          // throw an exception if an attempt to read a data cache is made.
          if ( elem && value === undefined ) {
            // Attempt to get data from the cache
            // with the key as-is
            data = data_user.get( elem, key );
            if ( data !== undefined ) {
              return data;
            }

            // Attempt to get data from the cache
            // with the key camelized
            data = data_user.get( elem, camelKey );
            if ( data !== undefined ) {
              return data;
            }

            // Attempt to "discover" the data in
            // HTML5 custom data-* attrs
            data = dataAttr( elem, camelKey, undefined );
            if ( data !== undefined ) {
              return data;
            }

            // We tried really hard, but the data doesn't exist.
            return;
          }

          // Set the data...
          this.each(function() {
            // First, attempt to store a copy or reference of any
            // data that might've been store with a camelCased key.
            var data = data_user.get( this, camelKey );

            // For HTML5 data-* attribute interop, we have to
            // store property names with dashes in a camelCase form.
            // This might not apply to all properties...*
            data_user.set( this, camelKey, value );

            // *... In the case of properties that might _actually_
            // have dashes, we need to also store a copy of that
            // unchanged property.
            if ( key.indexOf("-") !== -1 && data !== undefined ) {
              data_user.set( this, key, value );
            }
          });
        }, null, value, arguments.length > 1, null, true );
      },

      removeData: function( key ) {
        return this.each(function() {
          data_user.remove( this, key );
        });
      }
    });


    jQuery.extend({
      queue: function( elem, type, data ) {
        var queue;

        if ( elem ) {
          type = ( type || "fx" ) + "queue";
          queue = data_priv.get( elem, type );

          // Speed up dequeue by getting out quickly if this is just a lookup
          if ( data ) {
            if ( !queue || jQuery.isArray( data ) ) {
              queue = data_priv.access( elem, type, jQuery.makeArray(data) );
            } else {
              queue.push( data );
            }
          }
          return queue || [];
        }
      },

      dequeue: function( elem, type ) {
        type = type || "fx";

        var queue = jQuery.queue( elem, type ),
          startLength = queue.length,
          fn = queue.shift(),
          hooks = jQuery._queueHooks( elem, type ),
          next = function() {
            jQuery.dequeue( elem, type );
          };

        // If the fx queue is dequeued, always remove the progress sentinel
        if ( fn === "inprogress" ) {
          fn = queue.shift();
          startLength--;
        }

        if ( fn ) {

          // Add a progress sentinel to prevent the fx queue from being
          // automatically dequeued
          if ( type === "fx" ) {
            queue.unshift( "inprogress" );
          }

          // Clear up the last queue stop function
          delete hooks.stop;
          fn.call( elem, next, hooks );
        }

        if ( !startLength && hooks ) {
          hooks.empty.fire();
        }
      },

      // Not public - generate a queueHooks object, or return the current one
      _queueHooks: function( elem, type ) {
        var key = type + "queueHooks";
        return data_priv.get( elem, key ) || data_priv.access( elem, key, {
            empty: jQuery.Callbacks("once memory").add(function() {
              data_priv.remove( elem, [ type + "queue", key ] );
            })
          });
      }
    });

    jQuery.fn.extend({
      queue: function( type, data ) {
        var setter = 2;

        if ( typeof type !== "string" ) {
          data = type;
          type = "fx";
          setter--;
        }

        if ( arguments.length < setter ) {
          return jQuery.queue( this[0], type );
        }

        return data === undefined ?
          this :
          this.each(function() {
            var queue = jQuery.queue( this, type, data );

            // Ensure a hooks for this queue
            jQuery._queueHooks( this, type );

            if ( type === "fx" && queue[0] !== "inprogress" ) {
              jQuery.dequeue( this, type );
            }
          });
      },
      dequeue: function( type ) {
        return this.each(function() {
          jQuery.dequeue( this, type );
        });
      },
      clearQueue: function( type ) {
        return this.queue( type || "fx", [] );
      },
      // Get a promise resolved when queues of a certain type
      // are emptied (fx is the type by default)
      promise: function( type, obj ) {
        var tmp,
          count = 1,
          defer = jQuery.Deferred(),
          elements = this,
          i = this.length,
          resolve = function() {
            if ( !( --count ) ) {
              defer.resolveWith( elements, [ elements ] );
            }
          };

        if ( typeof type !== "string" ) {
          obj = type;
          type = undefined;
        }
        type = type || "fx";

        while ( i-- ) {
          tmp = data_priv.get( elements[ i ], type + "queueHooks" );
          if ( tmp && tmp.empty ) {
            count++;
            tmp.empty.add( resolve );
          }
        }
        resolve();
        return defer.promise( obj );
      }
    });
    var pnum = (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source;

    var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

    var isHidden = function( elem, el ) {
      // isHidden might be called from jQuery#filter function;
      // in that case, element will be second argument
      elem = el || elem;
      return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
    };

    var rcheckableType = (/^(?:checkbox|radio)$/i);



    (function() {
      var fragment = document.createDocumentFragment(),
        div = fragment.appendChild( document.createElement( "div" ) ),
        input = document.createElement( "input" );

      // Support: Safari<=5.1
      // Check state lost if the name is set (#11217)
      // Support: Windows Web Apps (WWA)
      // `name` and `type` must use .setAttribute for WWA (#14901)
      input.setAttribute( "type", "radio" );
      input.setAttribute( "checked", "checked" );
      input.setAttribute( "name", "t" );

      div.appendChild( input );

      // Support: Safari<=5.1, Android<4.2
      // Older WebKit doesn't clone checked state correctly in fragments
      support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

      // Support: IE<=11+
      // Make sure textarea (and checkbox) defaultValue is properly cloned
      div.innerHTML = "<textarea>x</textarea>";
      support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
    })();
    var strundefined = typeof undefined;



    support.focusinBubbles = "onfocusin" in window;


    var
      rkeyEvent = /^key/,
      rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/,
      rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
      rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

    function returnTrue() {
      return true;
    }

    function returnFalse() {
      return false;
    }

    function safeActiveElement() {
      try {
        return document.activeElement;
      } catch ( err ) { }
    }

    /*
     * Helper functions for managing events -- not part of the public interface.
     * Props to Dean Edwards' addEvent library for many of the ideas.
     */
    jQuery.event = {

      global: {},

      add: function( elem, types, handler, data, selector ) {

        var handleObjIn, eventHandle, tmp,
          events, t, handleObj,
          special, handlers, type, namespaces, origType,
          elemData = data_priv.get( elem );

        // Don't attach events to noData or text/comment nodes (but allow plain objects)
        if ( !elemData ) {
          return;
        }

        // Caller can pass in an object of custom data in lieu of the handler
        if ( handler.handler ) {
          handleObjIn = handler;
          handler = handleObjIn.handler;
          selector = handleObjIn.selector;
        }

        // Make sure that the handler has a unique ID, used to find/remove it later
        if ( !handler.guid ) {
          handler.guid = jQuery.guid++;
        }

        // Init the element's event structure and main handler, if this is the first
        if ( !(events = elemData.events) ) {
          events = elemData.events = {};
        }
        if ( !(eventHandle = elemData.handle) ) {
          eventHandle = elemData.handle = function( e ) {
            // Discard the second event of a jQuery.event.trigger() and
            // when an event is called after a page has unloaded
            return typeof jQuery !== strundefined && jQuery.event.triggered !== e.type ?
              jQuery.event.dispatch.apply( elem, arguments ) : undefined;
          };
        }

        // Handle multiple events separated by a space
        types = ( types || "" ).match( rnotwhite ) || [ "" ];
        t = types.length;
        while ( t-- ) {
          tmp = rtypenamespace.exec( types[t] ) || [];
          type = origType = tmp[1];
          namespaces = ( tmp[2] || "" ).split( "." ).sort();

          // There *must* be a type, no attaching namespace-only handlers
          if ( !type ) {
            continue;
          }

          // If event changes its type, use the special event handlers for the changed type
          special = jQuery.event.special[ type ] || {};

          // If selector defined, determine special event api type, otherwise given type
          type = ( selector ? special.delegateType : special.bindType ) || type;

          // Update special based on newly reset type
          special = jQuery.event.special[ type ] || {};

          // handleObj is passed to all event handlers
          handleObj = jQuery.extend({
            type: type,
            origType: origType,
            data: data,
            handler: handler,
            guid: handler.guid,
            selector: selector,
            needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
            namespace: namespaces.join(".")
          }, handleObjIn );

          // Init the event handler queue if we're the first
          if ( !(handlers = events[ type ]) ) {
            handlers = events[ type ] = [];
            handlers.delegateCount = 0;

            // Only use addEventListener if the special events handler returns false
            if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
              if ( elem.addEventListener ) {
                elem.addEventListener( type, eventHandle, false );
              }
            }
          }

          if ( special.add ) {
            special.add.call( elem, handleObj );

            if ( !handleObj.handler.guid ) {
              handleObj.handler.guid = handler.guid;
            }
          }

          // Add to the element's handler list, delegates in front
          if ( selector ) {
            handlers.splice( handlers.delegateCount++, 0, handleObj );
          } else {
            handlers.push( handleObj );
          }

          // Keep track of which events have ever been used, for event optimization
          jQuery.event.global[ type ] = true;
        }

      },

      // Detach an event or set of events from an element
      remove: function( elem, types, handler, selector, mappedTypes ) {

        var j, origCount, tmp,
          events, t, handleObj,
          special, handlers, type, namespaces, origType,
          elemData = data_priv.hasData( elem ) && data_priv.get( elem );

        if ( !elemData || !(events = elemData.events) ) {
          return;
        }

        // Once for each type.namespace in types; type may be omitted
        types = ( types || "" ).match( rnotwhite ) || [ "" ];
        t = types.length;
        while ( t-- ) {
          tmp = rtypenamespace.exec( types[t] ) || [];
          type = origType = tmp[1];
          namespaces = ( tmp[2] || "" ).split( "." ).sort();

          // Unbind all events (on this namespace, if provided) for the element
          if ( !type ) {
            for ( type in events ) {
              jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
            }
            continue;
          }

          special = jQuery.event.special[ type ] || {};
          type = ( selector ? special.delegateType : special.bindType ) || type;
          handlers = events[ type ] || [];
          tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );

          // Remove matching events
          origCount = j = handlers.length;
          while ( j-- ) {
            handleObj = handlers[ j ];

            if ( ( mappedTypes || origType === handleObj.origType ) &&
              ( !handler || handler.guid === handleObj.guid ) &&
              ( !tmp || tmp.test( handleObj.namespace ) ) &&
              ( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
              handlers.splice( j, 1 );

              if ( handleObj.selector ) {
                handlers.delegateCount--;
              }
              if ( special.remove ) {
                special.remove.call( elem, handleObj );
              }
            }
          }

          // Remove generic event handler if we removed something and no more handlers exist
          // (avoids potential for endless recursion during removal of special event handlers)
          if ( origCount && !handlers.length ) {
            if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
              jQuery.removeEvent( elem, type, elemData.handle );
            }

            delete events[ type ];
          }
        }

        // Remove the expando if it's no longer used
        if ( jQuery.isEmptyObject( events ) ) {
          delete elemData.handle;
          data_priv.remove( elem, "events" );
        }
      },

      trigger: function( event, data, elem, onlyHandlers ) {

        var i, cur, tmp, bubbleType, ontype, handle, special,
          eventPath = [ elem || document ],
          type = hasOwn.call( event, "type" ) ? event.type : event,
          namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];

        cur = tmp = elem = elem || document;

        // Don't do events on text and comment nodes
        if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
          return;
        }

        // focus/blur morphs to focusin/out; ensure we're not firing them right now
        if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
          return;
        }

        if ( type.indexOf(".") >= 0 ) {
          // Namespaced trigger; create a regexp to match event type in handle()
          namespaces = type.split(".");
          type = namespaces.shift();
          namespaces.sort();
        }
        ontype = type.indexOf(":") < 0 && "on" + type;

        // Caller can pass in a jQuery.Event object, Object, or just an event type string
        event = event[ jQuery.expando ] ?
          event :
          new jQuery.Event( type, typeof event === "object" && event );

        // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
        event.isTrigger = onlyHandlers ? 2 : 3;
        event.namespace = namespaces.join(".");
        event.namespace_re = event.namespace ?
          new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
          null;

        // Clean up the event in case it is being reused
        event.result = undefined;
        if ( !event.target ) {
          event.target = elem;
        }

        // Clone any incoming data and prepend the event, creating the handler arg list
        data = data == null ?
          [ event ] :
          jQuery.makeArray( data, [ event ] );

        // Allow special events to draw outside the lines
        special = jQuery.event.special[ type ] || {};
        if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
          return;
        }

        // Determine event propagation path in advance, per W3C events spec (#9951)
        // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
        if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

          bubbleType = special.delegateType || type;
          if ( !rfocusMorph.test( bubbleType + type ) ) {
            cur = cur.parentNode;
          }
          for ( ; cur; cur = cur.parentNode ) {
            eventPath.push( cur );
            tmp = cur;
          }

          // Only add window if we got to document (e.g., not plain obj or detached DOM)
          if ( tmp === (elem.ownerDocument || document) ) {
            eventPath.push( tmp.defaultView || tmp.parentWindow || window );
          }
        }

        // Fire handlers on the event path
        i = 0;
        while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {

          event.type = i > 1 ?
            bubbleType :
          special.bindType || type;

          // jQuery handler
          handle = ( data_priv.get( cur, "events" ) || {} )[ event.type ] && data_priv.get( cur, "handle" );
          if ( handle ) {
            handle.apply( cur, data );
          }

          // Native handler
          handle = ontype && cur[ ontype ];
          if ( handle && handle.apply && jQuery.acceptData( cur ) ) {
            event.result = handle.apply( cur, data );
            if ( event.result === false ) {
              event.preventDefault();
            }
          }
        }
        event.type = type;

        // If nobody prevented the default action, do it now
        if ( !onlyHandlers && !event.isDefaultPrevented() ) {

          if ( (!special._default || special._default.apply( eventPath.pop(), data ) === false) &&
            jQuery.acceptData( elem ) ) {

            // Call a native DOM method on the target with the same name name as the event.
            // Don't do default actions on window, that's where global variables be (#6170)
            if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

              // Don't re-trigger an onFOO event when we call its FOO() method
              tmp = elem[ ontype ];

              if ( tmp ) {
                elem[ ontype ] = null;
              }

              // Prevent re-triggering of the same event, since we already bubbled it above
              jQuery.event.triggered = type;
              elem[ type ]();
              jQuery.event.triggered = undefined;

              if ( tmp ) {
                elem[ ontype ] = tmp;
              }
            }
          }
        }

        return event.result;
      },

      dispatch: function( event ) {

        // Make a writable jQuery.Event from the native event object
        event = jQuery.event.fix( event );

        var i, j, ret, matched, handleObj,
          handlerQueue = [],
          args = slice.call( arguments ),
          handlers = ( data_priv.get( this, "events" ) || {} )[ event.type ] || [],
          special = jQuery.event.special[ event.type ] || {};

        // Use the fix-ed jQuery.Event rather than the (read-only) native event
        args[0] = event;
        event.delegateTarget = this;

        // Call the preDispatch hook for the mapped type, and let it bail if desired
        if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
          return;
        }

        // Determine handlers
        handlerQueue = jQuery.event.handlers.call( this, event, handlers );

        // Run delegates first; they may want to stop propagation beneath us
        i = 0;
        while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
          event.currentTarget = matched.elem;

          j = 0;
          while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {

            // Triggered event must either 1) have no namespace, or 2) have namespace(s)
            // a subset or equal to those in the bound event (both can have no namespace).
            if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {

              event.handleObj = handleObj;
              event.data = handleObj.data;

              ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
                .apply( matched.elem, args );

              if ( ret !== undefined ) {
                if ( (event.result = ret) === false ) {
                  event.preventDefault();
                  event.stopPropagation();
                }
              }
            }
          }
        }

        // Call the postDispatch hook for the mapped type
        if ( special.postDispatch ) {
          special.postDispatch.call( this, event );
        }

        return event.result;
      },

      handlers: function( event, handlers ) {
        var i, matches, sel, handleObj,
          handlerQueue = [],
          delegateCount = handlers.delegateCount,
          cur = event.target;

        // Find delegate handlers
        // Black-hole SVG <use> instance trees (#13180)
        // Avoid non-left-click bubbling in Firefox (#3861)
        if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {

          for ( ; cur !== this; cur = cur.parentNode || this ) {

            // Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
            if ( cur.disabled !== true || event.type !== "click" ) {
              matches = [];
              for ( i = 0; i < delegateCount; i++ ) {
                handleObj = handlers[ i ];

                // Don't conflict with Object.prototype properties (#13203)
                sel = handleObj.selector + " ";

                if ( matches[ sel ] === undefined ) {
                  matches[ sel ] = handleObj.needsContext ?
                  jQuery( sel, this ).index( cur ) >= 0 :
                    jQuery.find( sel, this, null, [ cur ] ).length;
                }
                if ( matches[ sel ] ) {
                  matches.push( handleObj );
                }
              }
              if ( matches.length ) {
                handlerQueue.push({ elem: cur, handlers: matches });
              }
            }
          }
        }

        // Add the remaining (directly-bound) handlers
        if ( delegateCount < handlers.length ) {
          handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
        }

        return handlerQueue;
      },

      // Includes some event props shared by KeyEvent and MouseEvent
      props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

      fixHooks: {},

      keyHooks: {
        props: "char charCode key keyCode".split(" "),
        filter: function( event, original ) {

          // Add which for key events
          if ( event.which == null ) {
            event.which = original.charCode != null ? original.charCode : original.keyCode;
          }

          return event;
        }
      },

      mouseHooks: {
        props: "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
        filter: function( event, original ) {
          var eventDoc, doc, body,
            button = original.button;

          // Calculate pageX/Y if missing and clientX/Y available
          if ( event.pageX == null && original.clientX != null ) {
            eventDoc = event.target.ownerDocument || document;
            doc = eventDoc.documentElement;
            body = eventDoc.body;

            event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
            event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
          }

          // Add which for click: 1 === left; 2 === middle; 3 === right
          // Note: button is not normalized, so don't use it
          if ( !event.which && button !== undefined ) {
            event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
          }

          return event;
        }
      },

      fix: function( event ) {
        if ( event[ jQuery.expando ] ) {
          return event;
        }

        // Create a writable copy of the event object and normalize some properties
        var i, prop, copy,
          type = event.type,
          originalEvent = event,
          fixHook = this.fixHooks[ type ];

        if ( !fixHook ) {
          this.fixHooks[ type ] = fixHook =
            rmouseEvent.test( type ) ? this.mouseHooks :
              rkeyEvent.test( type ) ? this.keyHooks :
              {};
        }
        copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

        event = new jQuery.Event( originalEvent );

        i = copy.length;
        while ( i-- ) {
          prop = copy[ i ];
          event[ prop ] = originalEvent[ prop ];
        }

        // Support: Cordova 2.5 (WebKit) (#13255)
        // All events should have a target; Cordova deviceready doesn't
        if ( !event.target ) {
          event.target = document;
        }

        // Support: Safari 6.0+, Chrome<28
        // Target should not be a text node (#504, #13143)
        if ( event.target.nodeType === 3 ) {
          event.target = event.target.parentNode;
        }

        return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
      },

      special: {
        load: {
          // Prevent triggered image.load events from bubbling to window.load
          noBubble: true
        },
        focus: {
          // Fire native event if possible so blur/focus sequence is correct
          trigger: function() {
            if ( this !== safeActiveElement() && this.focus ) {
              this.focus();
              return false;
            }
          },
          delegateType: "focusin"
        },
        blur: {
          trigger: function() {
            if ( this === safeActiveElement() && this.blur ) {
              this.blur();
              return false;
            }
          },
          delegateType: "focusout"
        },
        click: {
          // For checkbox, fire native event so checked state will be right
          trigger: function() {
            if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
              this.click();
              return false;
            }
          },

          // For cross-browser consistency, don't fire native .click() on links
          _default: function( event ) {
            return jQuery.nodeName( event.target, "a" );
          }
        },

        beforeunload: {
          postDispatch: function( event ) {

            // Support: Firefox 20+
            // Firefox doesn't alert if the returnValue field is not set.
            if ( event.result !== undefined && event.originalEvent ) {
              event.originalEvent.returnValue = event.result;
            }
          }
        }
      },

      simulate: function( type, elem, event, bubble ) {
        // Piggyback on a donor event to simulate a different one.
        // Fake originalEvent to avoid donor's stopPropagation, but if the
        // simulated event prevents default then we do the same on the donor.
        var e = jQuery.extend(
          new jQuery.Event(),
          event,
          {
            type: type,
            isSimulated: true,
            originalEvent: {}
          }
        );
        if ( bubble ) {
          jQuery.event.trigger( e, null, elem );
        } else {
          jQuery.event.dispatch.call( elem, e );
        }
        if ( e.isDefaultPrevented() ) {
          event.preventDefault();
        }
      }
    };

    jQuery.removeEvent = function( elem, type, handle ) {
      if ( elem.removeEventListener ) {
        elem.removeEventListener( type, handle, false );
      }
    };

    jQuery.Event = function( src, props ) {
      // Allow instantiation without the 'new' keyword
      if ( !(this instanceof jQuery.Event) ) {
        return new jQuery.Event( src, props );
      }

      // Event object
      if ( src && src.type ) {
        this.originalEvent = src;
        this.type = src.type;

        // Events bubbling up the document may have been marked as prevented
        // by a handler lower down the tree; reflect the correct value.
        this.isDefaultPrevented = src.defaultPrevented ||
        src.defaultPrevented === undefined &&
        // Support: Android<4.0
        src.returnValue === false ?
          returnTrue :
          returnFalse;

        // Event type
      } else {
        this.type = src;
      }

      // Put explicitly provided properties onto the event object
      if ( props ) {
        jQuery.extend( this, props );
      }

      // Create a timestamp if incoming event doesn't have one
      this.timeStamp = src && src.timeStamp || jQuery.now();

      // Mark it as fixed
      this[ jQuery.expando ] = true;
    };

    // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
    // http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
    jQuery.Event.prototype = {
      isDefaultPrevented: returnFalse,
      isPropagationStopped: returnFalse,
      isImmediatePropagationStopped: returnFalse,

      preventDefault: function() {
        var e = this.originalEvent;

        this.isDefaultPrevented = returnTrue;

        if ( e && e.preventDefault ) {
          e.preventDefault();
        }
      },
      stopPropagation: function() {
        var e = this.originalEvent;

        this.isPropagationStopped = returnTrue;

        if ( e && e.stopPropagation ) {
          e.stopPropagation();
        }
      },
      stopImmediatePropagation: function() {
        var e = this.originalEvent;

        this.isImmediatePropagationStopped = returnTrue;

        if ( e && e.stopImmediatePropagation ) {
          e.stopImmediatePropagation();
        }

        this.stopPropagation();
      }
    };

    // Create mouseenter/leave events using mouseover/out and event-time checks
    // Support: Chrome 15+
    jQuery.each({
      mouseenter: "mouseover",
      mouseleave: "mouseout",
      pointerenter: "pointerover",
      pointerleave: "pointerout"
    }, function( orig, fix ) {
      jQuery.event.special[ orig ] = {
        delegateType: fix,
        bindType: fix,

        handle: function( event ) {
          var ret,
            target = this,
            related = event.relatedTarget,
            handleObj = event.handleObj;

          // For mousenter/leave call the handler if related is outside the target.
          // NB: No relatedTarget if the mouse left/entered the browser window
          if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
            event.type = handleObj.origType;
            ret = handleObj.handler.apply( this, arguments );
            event.type = fix;
          }
          return ret;
        }
      };
    });

    // Support: Firefox, Chrome, Safari
    // Create "bubbling" focus and blur events
    if ( !support.focusinBubbles ) {
      jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

        // Attach a single capturing handler on the document while someone wants focusin/focusout
        var handler = function( event ) {
          jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
        };

        jQuery.event.special[ fix ] = {
          setup: function() {
            var doc = this.ownerDocument || this,
              attaches = data_priv.access( doc, fix );

            if ( !attaches ) {
              doc.addEventListener( orig, handler, true );
            }
            data_priv.access( doc, fix, ( attaches || 0 ) + 1 );
          },
          teardown: function() {
            var doc = this.ownerDocument || this,
              attaches = data_priv.access( doc, fix ) - 1;

            if ( !attaches ) {
              doc.removeEventListener( orig, handler, true );
              data_priv.remove( doc, fix );

            } else {
              data_priv.access( doc, fix, attaches );
            }
          }
        };
      });
    }

    jQuery.fn.extend({

      on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
        var origFn, type;

        // Types can be a map of types/handlers
        if ( typeof types === "object" ) {
          // ( types-Object, selector, data )
          if ( typeof selector !== "string" ) {
            // ( types-Object, data )
            data = data || selector;
            selector = undefined;
          }
          for ( type in types ) {
            this.on( type, selector, data, types[ type ], one );
          }
          return this;
        }

        if ( data == null && fn == null ) {
          // ( types, fn )
          fn = selector;
          data = selector = undefined;
        } else if ( fn == null ) {
          if ( typeof selector === "string" ) {
            // ( types, selector, fn )
            fn = data;
            data = undefined;
          } else {
            // ( types, data, fn )
            fn = data;
            data = selector;
            selector = undefined;
          }
        }
        if ( fn === false ) {
          fn = returnFalse;
        } else if ( !fn ) {
          return this;
        }

        if ( one === 1 ) {
          origFn = fn;
          fn = function( event ) {
            // Can use an empty set, since event contains the info
            jQuery().off( event );
            return origFn.apply( this, arguments );
          };
          // Use same guid so caller can remove using origFn
          fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
        }
        return this.each( function() {
          jQuery.event.add( this, types, fn, data, selector );
        });
      },
      one: function( types, selector, data, fn ) {
        return this.on( types, selector, data, fn, 1 );
      },
      off: function( types, selector, fn ) {
        var handleObj, type;
        if ( types && types.preventDefault && types.handleObj ) {
          // ( event )  dispatched jQuery.Event
          handleObj = types.handleObj;
          jQuery( types.delegateTarget ).off(
            handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
            handleObj.selector,
            handleObj.handler
          );
          return this;
        }
        if ( typeof types === "object" ) {
          // ( types-object [, selector] )
          for ( type in types ) {
            this.off( type, selector, types[ type ] );
          }
          return this;
        }
        if ( selector === false || typeof selector === "function" ) {
          // ( types [, fn] )
          fn = selector;
          selector = undefined;
        }
        if ( fn === false ) {
          fn = returnFalse;
        }
        return this.each(function() {
          jQuery.event.remove( this, types, fn, selector );
        });
      },

      trigger: function( type, data ) {
        return this.each(function() {
          jQuery.event.trigger( type, data, this );
        });
      },
      triggerHandler: function( type, data ) {
        var elem = this[0];
        if ( elem ) {
          return jQuery.event.trigger( type, data, elem, true );
        }
      }
    });


    var
      rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
      rtagName = /<([\w:]+)/,
      rhtml = /<|&#?\w+;/,
      rnoInnerhtml = /<(?:script|style|link)/i,
    // checked="checked" or checked
      rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
      rscriptType = /^$|\/(?:java|ecma)script/i,
      rscriptTypeMasked = /^true\/(.*)/,
      rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

    // We have to close these tags to support XHTML (#13200)
      wrapMap = {

        // Support: IE9
        option: [ 1, "<select multiple='multiple'>", "</select>" ],

        thead: [ 1, "<table>", "</table>" ],
        col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
        tr: [ 2, "<table><tbody>", "</tbody></table>" ],
        td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

        _default: [ 0, "", "" ]
      };

    // Support: IE9
    wrapMap.optgroup = wrapMap.option;

    wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
    wrapMap.th = wrapMap.td;

    // Support: 1.x compatibility
    // Manipulating tables requires a tbody
    function manipulationTarget( elem, content ) {
      return jQuery.nodeName( elem, "table" ) &&
      jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?

      elem.getElementsByTagName("tbody")[0] ||
      elem.appendChild( elem.ownerDocument.createElement("tbody") ) :
        elem;
    }

    // Replace/restore the type attribute of script elements for safe DOM manipulation
    function disableScript( elem ) {
      elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
      return elem;
    }
    function restoreScript( elem ) {
      var match = rscriptTypeMasked.exec( elem.type );

      if ( match ) {
        elem.type = match[ 1 ];
      } else {
        elem.removeAttribute("type");
      }

      return elem;
    }

    // Mark scripts as having already been evaluated
    function setGlobalEval( elems, refElements ) {
      var i = 0,
        l = elems.length;

      for ( ; i < l; i++ ) {
        data_priv.set(
          elems[ i ], "globalEval", !refElements || data_priv.get( refElements[ i ], "globalEval" )
        );
      }
    }

    function cloneCopyEvent( src, dest ) {
      var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

      if ( dest.nodeType !== 1 ) {
        return;
      }

      // 1. Copy private data: events, handlers, etc.
      if ( data_priv.hasData( src ) ) {
        pdataOld = data_priv.access( src );
        pdataCur = data_priv.set( dest, pdataOld );
        events = pdataOld.events;

        if ( events ) {
          delete pdataCur.handle;
          pdataCur.events = {};

          for ( type in events ) {
            for ( i = 0, l = events[ type ].length; i < l; i++ ) {
              jQuery.event.add( dest, type, events[ type ][ i ] );
            }
          }
        }
      }

      // 2. Copy user data
      if ( data_user.hasData( src ) ) {
        udataOld = data_user.access( src );
        udataCur = jQuery.extend( {}, udataOld );

        data_user.set( dest, udataCur );
      }
    }

    function getAll( context, tag ) {
      var ret = context.getElementsByTagName ? context.getElementsByTagName( tag || "*" ) :
        context.querySelectorAll ? context.querySelectorAll( tag || "*" ) :
          [];

      return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
        jQuery.merge( [ context ], ret ) :
        ret;
    }

    // Fix IE bugs, see support tests
    function fixInput( src, dest ) {
      var nodeName = dest.nodeName.toLowerCase();

      // Fails to persist the checked state of a cloned checkbox or radio button.
      if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
        dest.checked = src.checked;

        // Fails to return the selected option to the default selected state when cloning options
      } else if ( nodeName === "input" || nodeName === "textarea" ) {
        dest.defaultValue = src.defaultValue;
      }
    }

    jQuery.extend({
      clone: function( elem, dataAndEvents, deepDataAndEvents ) {
        var i, l, srcElements, destElements,
          clone = elem.cloneNode( true ),
          inPage = jQuery.contains( elem.ownerDocument, elem );

        // Fix IE cloning issues
        if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
          !jQuery.isXMLDoc( elem ) ) {

          // We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
          destElements = getAll( clone );
          srcElements = getAll( elem );

          for ( i = 0, l = srcElements.length; i < l; i++ ) {
            fixInput( srcElements[ i ], destElements[ i ] );
          }
        }

        // Copy the events from the original to the clone
        if ( dataAndEvents ) {
          if ( deepDataAndEvents ) {
            srcElements = srcElements || getAll( elem );
            destElements = destElements || getAll( clone );

            for ( i = 0, l = srcElements.length; i < l; i++ ) {
              cloneCopyEvent( srcElements[ i ], destElements[ i ] );
            }
          } else {
            cloneCopyEvent( elem, clone );
          }
        }

        // Preserve script evaluation history
        destElements = getAll( clone, "script" );
        if ( destElements.length > 0 ) {
          setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
        }

        // Return the cloned set
        return clone;
      },

      buildFragment: function( elems, context, scripts, selection ) {
        var elem, tmp, tag, wrap, contains, j,
          fragment = context.createDocumentFragment(),
          nodes = [],
          i = 0,
          l = elems.length;

        for ( ; i < l; i++ ) {
          elem = elems[ i ];

          if ( elem || elem === 0 ) {

            // Add nodes directly
            if ( jQuery.type( elem ) === "object" ) {
              // Support: QtWebKit, PhantomJS
              // push.apply(_, arraylike) throws on ancient WebKit
              jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

              // Convert non-html into a text node
            } else if ( !rhtml.test( elem ) ) {
              nodes.push( context.createTextNode( elem ) );

              // Convert html into DOM nodes
            } else {
              tmp = tmp || fragment.appendChild( context.createElement("div") );

              // Deserialize a standard representation
              tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
              wrap = wrapMap[ tag ] || wrapMap._default;
              tmp.innerHTML = wrap[ 1 ] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[ 2 ];

              // Descend through wrappers to the right content
              j = wrap[ 0 ];
              while ( j-- ) {
                tmp = tmp.lastChild;
              }

              // Support: QtWebKit, PhantomJS
              // push.apply(_, arraylike) throws on ancient WebKit
              jQuery.merge( nodes, tmp.childNodes );

              // Remember the top-level container
              tmp = fragment.firstChild;

              // Ensure the created nodes are orphaned (#12392)
              tmp.textContent = "";
            }
          }
        }

        // Remove wrapper from fragment
        fragment.textContent = "";

        i = 0;
        while ( (elem = nodes[ i++ ]) ) {

          // #4087 - If origin and destination elements are the same, and this is
          // that element, do not do anything
          if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
            continue;
          }

          contains = jQuery.contains( elem.ownerDocument, elem );

          // Append to fragment
          tmp = getAll( fragment.appendChild( elem ), "script" );

          // Preserve script evaluation history
          if ( contains ) {
            setGlobalEval( tmp );
          }

          // Capture executables
          if ( scripts ) {
            j = 0;
            while ( (elem = tmp[ j++ ]) ) {
              if ( rscriptType.test( elem.type || "" ) ) {
                scripts.push( elem );
              }
            }
          }
        }

        return fragment;
      },

      cleanData: function( elems ) {
        var data, elem, type, key,
          special = jQuery.event.special,
          i = 0;

        for ( ; (elem = elems[ i ]) !== undefined; i++ ) {
          if ( jQuery.acceptData( elem ) ) {
            key = elem[ data_priv.expando ];

            if ( key && (data = data_priv.cache[ key ]) ) {
              if ( data.events ) {
                for ( type in data.events ) {
                  if ( special[ type ] ) {
                    jQuery.event.remove( elem, type );

                    // This is a shortcut to avoid jQuery.event.remove's overhead
                  } else {
                    jQuery.removeEvent( elem, type, data.handle );
                  }
                }
              }
              if ( data_priv.cache[ key ] ) {
                // Discard any remaining `private` data
                delete data_priv.cache[ key ];
              }
            }
          }
          // Discard any remaining `user` data
          delete data_user.cache[ elem[ data_user.expando ] ];
        }
      }
    });

    jQuery.fn.extend({
      text: function( value ) {
        return access( this, function( value ) {
          return value === undefined ?
            jQuery.text( this ) :
            this.empty().each(function() {
              if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
                this.textContent = value;
              }
            });
        }, null, value, arguments.length );
      },

      append: function() {
        return this.domManip( arguments, function( elem ) {
          if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
            var target = manipulationTarget( this, elem );
            target.appendChild( elem );
          }
        });
      },

      prepend: function() {
        return this.domManip( arguments, function( elem ) {
          if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
            var target = manipulationTarget( this, elem );
            target.insertBefore( elem, target.firstChild );
          }
        });
      },

      before: function() {
        return this.domManip( arguments, function( elem ) {
          if ( this.parentNode ) {
            this.parentNode.insertBefore( elem, this );
          }
        });
      },

      after: function() {
        return this.domManip( arguments, function( elem ) {
          if ( this.parentNode ) {
            this.parentNode.insertBefore( elem, this.nextSibling );
          }
        });
      },

      remove: function( selector, keepData /* Internal Use Only */ ) {
        var elem,
          elems = selector ? jQuery.filter( selector, this ) : this,
          i = 0;

        for ( ; (elem = elems[i]) != null; i++ ) {
          if ( !keepData && elem.nodeType === 1 ) {
            jQuery.cleanData( getAll( elem ) );
          }

          if ( elem.parentNode ) {
            if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
              setGlobalEval( getAll( elem, "script" ) );
            }
            elem.parentNode.removeChild( elem );
          }
        }

        return this;
      },

      empty: function() {
        var elem,
          i = 0;

        for ( ; (elem = this[i]) != null; i++ ) {
          if ( elem.nodeType === 1 ) {

            // Prevent memory leaks
            jQuery.cleanData( getAll( elem, false ) );

            // Remove any remaining nodes
            elem.textContent = "";
          }
        }

        return this;
      },

      clone: function( dataAndEvents, deepDataAndEvents ) {
        dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
        deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

        return this.map(function() {
          return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
        });
      },

      html: function( value ) {
        return access( this, function( value ) {
          var elem = this[ 0 ] || {},
            i = 0,
            l = this.length;

          if ( value === undefined && elem.nodeType === 1 ) {
            return elem.innerHTML;
          }

          // See if we can take a shortcut and just use innerHTML
          if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
            !wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

            value = value.replace( rxhtmlTag, "<$1></$2>" );

            try {
              for ( ; i < l; i++ ) {
                elem = this[ i ] || {};

                // Remove element nodes and prevent memory leaks
                if ( elem.nodeType === 1 ) {
                  jQuery.cleanData( getAll( elem, false ) );
                  elem.innerHTML = value;
                }
              }

              elem = 0;

              // If using innerHTML throws an exception, use the fallback method
            } catch( e ) {}
          }

          if ( elem ) {
            this.empty().append( value );
          }
        }, null, value, arguments.length );
      },

      replaceWith: function() {
        var arg = arguments[ 0 ];

        // Make the changes, replacing each context element with the new content
        this.domManip( arguments, function( elem ) {
          arg = this.parentNode;

          jQuery.cleanData( getAll( this ) );

          if ( arg ) {
            arg.replaceChild( elem, this );
          }
        });

        // Force removal if there was no new content (e.g., from empty arguments)
        return arg && (arg.length || arg.nodeType) ? this : this.remove();
      },

      detach: function( selector ) {
        return this.remove( selector, true );
      },

      domManip: function( args, callback ) {

        // Flatten any nested arrays
        args = concat.apply( [], args );

        var fragment, first, scripts, hasScripts, node, doc,
          i = 0,
          l = this.length,
          set = this,
          iNoClone = l - 1,
          value = args[ 0 ],
          isFunction = jQuery.isFunction( value );

        // We can't cloneNode fragments that contain checked, in WebKit
        if ( isFunction ||
          ( l > 1 && typeof value === "string" &&
          !support.checkClone && rchecked.test( value ) ) ) {
          return this.each(function( index ) {
            var self = set.eq( index );
            if ( isFunction ) {
              args[ 0 ] = value.call( this, index, self.html() );
            }
            self.domManip( args, callback );
          });
        }

        if ( l ) {
          fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, this );
          first = fragment.firstChild;

          if ( fragment.childNodes.length === 1 ) {
            fragment = first;
          }

          if ( first ) {
            scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
            hasScripts = scripts.length;

            // Use the original fragment for the last item instead of the first because it can end up
            // being emptied incorrectly in certain situations (#8070).
            for ( ; i < l; i++ ) {
              node = fragment;

              if ( i !== iNoClone ) {
                node = jQuery.clone( node, true, true );

                // Keep references to cloned scripts for later restoration
                if ( hasScripts ) {
                  // Support: QtWebKit
                  // jQuery.merge because push.apply(_, arraylike) throws
                  jQuery.merge( scripts, getAll( node, "script" ) );
                }
              }

              callback.call( this[ i ], node, i );
            }

            if ( hasScripts ) {
              doc = scripts[ scripts.length - 1 ].ownerDocument;

              // Reenable scripts
              jQuery.map( scripts, restoreScript );

              // Evaluate executable scripts on first document insertion
              for ( i = 0; i < hasScripts; i++ ) {
                node = scripts[ i ];
                if ( rscriptType.test( node.type || "" ) &&
                  !data_priv.access( node, "globalEval" ) && jQuery.contains( doc, node ) ) {

                  if ( node.src ) {
                    // Optional AJAX dependency, but won't run scripts if not present
                    if ( jQuery._evalUrl ) {
                      jQuery._evalUrl( node.src );
                    }
                  } else {
                    jQuery.globalEval( node.textContent.replace( rcleanScript, "" ) );
                  }
                }
              }
            }
          }
        }

        return this;
      }
    });

    jQuery.each({
      appendTo: "append",
      prependTo: "prepend",
      insertBefore: "before",
      insertAfter: "after",
      replaceAll: "replaceWith"
    }, function( name, original ) {
      jQuery.fn[ name ] = function( selector ) {
        var elems,
          ret = [],
          insert = jQuery( selector ),
          last = insert.length - 1,
          i = 0;

        for ( ; i <= last; i++ ) {
          elems = i === last ? this : this.clone( true );
          jQuery( insert[ i ] )[ original ]( elems );

          // Support: QtWebKit
          // .get() because push.apply(_, arraylike) throws
          push.apply( ret, elems.get() );
        }

        return this.pushStack( ret );
      };
    });


    var iframe,
      elemdisplay = {};

    /**
     * Retrieve the actual display of a element
     * @param {String} name nodeName of the element
     * @param {Object} doc Document object
     */
    // Called only from within defaultDisplay
    function actualDisplay( name, doc ) {
      var style,
        elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

      // getDefaultComputedStyle might be reliably used only on attached element
        display = window.getDefaultComputedStyle && ( style = window.getDefaultComputedStyle( elem[ 0 ] ) ) ?

          // Use of this method is a temporary fix (more like optimization) until something better comes along,
          // since it was removed from specification and supported only in FF
          style.display : jQuery.css( elem[ 0 ], "display" );

      // We don't have any data stored on the element,
      // so use "detach" method as fast way to get rid of the element
      elem.detach();

      return display;
    }

    /**
     * Try to determine the default display value of an element
     * @param {String} nodeName
     */
    function defaultDisplay( nodeName ) {
      var doc = document,
        display = elemdisplay[ nodeName ];

      if ( !display ) {
        display = actualDisplay( nodeName, doc );

        // If the simple way fails, read from inside an iframe
        if ( display === "none" || !display ) {

          // Use the already-created iframe if possible
          iframe = (iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" )).appendTo( doc.documentElement );

          // Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
          doc = iframe[ 0 ].contentDocument;

          // Support: IE
          doc.write();
          doc.close();

          display = actualDisplay( nodeName, doc );
          iframe.detach();
        }

        // Store the correct default display
        elemdisplay[ nodeName ] = display;
      }

      return display;
    }
    var rmargin = (/^margin/);

    var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

    var getStyles = function( elem ) {
      // Support: IE<=11+, Firefox<=30+ (#15098, #14150)
      // IE throws on elements created in popups
      // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
      if ( elem.ownerDocument.defaultView.opener ) {
        return elem.ownerDocument.defaultView.getComputedStyle( elem, null );
      }

      return window.getComputedStyle( elem, null );
    };



    function curCSS( elem, name, computed ) {
      var width, minWidth, maxWidth, ret,
        style = elem.style;

      computed = computed || getStyles( elem );

      // Support: IE9
      // getPropertyValue is only needed for .css('filter') (#12537)
      if ( computed ) {
        ret = computed.getPropertyValue( name ) || computed[ name ];
      }

      if ( computed ) {

        if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
          ret = jQuery.style( elem, name );
        }

        // Support: iOS < 6
        // A tribute to the "awesome hack by Dean Edwards"
        // iOS < 6 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
        // this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
        if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

          // Remember the original values
          width = style.width;
          minWidth = style.minWidth;
          maxWidth = style.maxWidth;

          // Put in the new values to get a computed value out
          style.minWidth = style.maxWidth = style.width = ret;
          ret = computed.width;

          // Revert the changed values
          style.width = width;
          style.minWidth = minWidth;
          style.maxWidth = maxWidth;
        }
      }

      return ret !== undefined ?
        // Support: IE
        // IE returns zIndex value as an integer.
      ret + "" :
        ret;
    }


    function addGetHookIf( conditionFn, hookFn ) {
      // Define the hook, we'll check on the first run if it's really needed.
      return {
        get: function() {
          if ( conditionFn() ) {
            // Hook not needed (or it's not possible to use it due
            // to missing dependency), remove it.
            delete this.get;
            return;
          }

          // Hook needed; redefine it so that the support test is not executed again.
          return (this.get = hookFn).apply( this, arguments );
        }
      };
    }


    (function() {
      var pixelPositionVal, boxSizingReliableVal,
        docElem = document.documentElement,
        container = document.createElement( "div" ),
        div = document.createElement( "div" );

      if ( !div.style ) {
        return;
      }

      // Support: IE9-11+
      // Style of cloned element affects source element cloned (#8908)
      div.style.backgroundClip = "content-box";
      div.cloneNode( true ).style.backgroundClip = "";
      support.clearCloneStyle = div.style.backgroundClip === "content-box";

      container.style.cssText = "border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;" +
        "position:absolute";
      container.appendChild( div );

      // Executing both pixelPosition & boxSizingReliable tests require only one layout
      // so they're executed at the same time to save the second computation.
      function computePixelPositionAndBoxSizingReliable() {
        div.style.cssText =
          // Support: Firefox<29, Android 2.3
          // Vendor-prefix box-sizing
          "-webkit-box-sizing:border-box;-moz-box-sizing:border-box;" +
          "box-sizing:border-box;display:block;margin-top:1%;top:1%;" +
          "border:1px;padding:1px;width:4px;position:absolute";
        div.innerHTML = "";
        docElem.appendChild( container );

        var divStyle = window.getComputedStyle( div, null );
        pixelPositionVal = divStyle.top !== "1%";
        boxSizingReliableVal = divStyle.width === "4px";

        docElem.removeChild( container );
      }

      // Support: node.js jsdom
      // Don't assume that getComputedStyle is a property of the global object
      if ( window.getComputedStyle ) {
        jQuery.extend( support, {
          pixelPosition: function() {

            // This test is executed only once but we still do memoizing
            // since we can use the boxSizingReliable pre-computing.
            // No need to check if the test was already performed, though.
            computePixelPositionAndBoxSizingReliable();
            return pixelPositionVal;
          },
          boxSizingReliable: function() {
            if ( boxSizingReliableVal == null ) {
              computePixelPositionAndBoxSizingReliable();
            }
            return boxSizingReliableVal;
          },
          reliableMarginRight: function() {

            // Support: Android 2.3
            // Check if div with explicit width and no margin-right incorrectly
            // gets computed margin-right based on width of container. (#3333)
            // WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
            // This support function is only executed once so no memoizing is needed.
            var ret,
              marginDiv = div.appendChild( document.createElement( "div" ) );

            // Reset CSS: box-sizing; display; margin; border; padding
            marginDiv.style.cssText = div.style.cssText =
              // Support: Firefox<29, Android 2.3
              // Vendor-prefix box-sizing
              "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
              "box-sizing:content-box;display:block;margin:0;border:0;padding:0";
            marginDiv.style.marginRight = marginDiv.style.width = "0";
            div.style.width = "1px";
            docElem.appendChild( container );

            ret = !parseFloat( window.getComputedStyle( marginDiv, null ).marginRight );

            docElem.removeChild( container );
            div.removeChild( marginDiv );

            return ret;
          }
        });
      }
    })();


    // A method for quickly swapping in/out CSS properties to get correct calculations.
    jQuery.swap = function( elem, options, callback, args ) {
      var ret, name,
        old = {};

      // Remember the old values, and insert the new ones
      for ( name in options ) {
        old[ name ] = elem.style[ name ];
        elem.style[ name ] = options[ name ];
      }

      ret = callback.apply( elem, args || [] );

      // Revert the old values
      for ( name in options ) {
        elem.style[ name ] = old[ name ];
      }

      return ret;
    };


    var
    // Swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
    // See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
      rdisplayswap = /^(none|table(?!-c[ea]).+)/,
      rnumsplit = new RegExp( "^(" + pnum + ")(.*)$", "i" ),
      rrelNum = new RegExp( "^([+-])=(" + pnum + ")", "i" ),

      cssShow = { position: "absolute", visibility: "hidden", display: "block" },
      cssNormalTransform = {
        letterSpacing: "0",
        fontWeight: "400"
      },

      cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];

    // Return a css property mapped to a potentially vendor prefixed property
    function vendorPropName( style, name ) {

      // Shortcut for names that are not vendor prefixed
      if ( name in style ) {
        return name;
      }

      // Check for vendor prefixed names
      var capName = name[0].toUpperCase() + name.slice(1),
        origName = name,
        i = cssPrefixes.length;

      while ( i-- ) {
        name = cssPrefixes[ i ] + capName;
        if ( name in style ) {
          return name;
        }
      }

      return origName;
    }

    function setPositiveNumber( elem, value, subtract ) {
      var matches = rnumsplit.exec( value );
      return matches ?
        // Guard against undefined "subtract", e.g., when used as in cssHooks
      Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
        value;
    }

    function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
      var i = extra === ( isBorderBox ? "border" : "content" ) ?
          // If we already have the right measurement, avoid augmentation
          4 :
          // Otherwise initialize for horizontal or vertical properties
          name === "width" ? 1 : 0,

        val = 0;

      for ( ; i < 4; i += 2 ) {
        // Both box models exclude margin, so add it if we want it
        if ( extra === "margin" ) {
          val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
        }

        if ( isBorderBox ) {
          // border-box includes padding, so remove it if we want content
          if ( extra === "content" ) {
            val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
          }

          // At this point, extra isn't border nor margin, so remove border
          if ( extra !== "margin" ) {
            val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
          }
        } else {
          // At this point, extra isn't content, so add padding
          val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

          // At this point, extra isn't content nor padding, so add border
          if ( extra !== "padding" ) {
            val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
          }
        }
      }

      return val;
    }

    function getWidthOrHeight( elem, name, extra ) {

      // Start with offset property, which is equivalent to the border-box value
      var valueIsBorderBox = true,
        val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
        styles = getStyles( elem ),
        isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

      // Some non-html elements return undefined for offsetWidth, so check for null/undefined
      // svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
      // MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
      if ( val <= 0 || val == null ) {
        // Fall back to computed then uncomputed css if necessary
        val = curCSS( elem, name, styles );
        if ( val < 0 || val == null ) {
          val = elem.style[ name ];
        }

        // Computed unit is not pixels. Stop here and return.
        if ( rnumnonpx.test(val) ) {
          return val;
        }

        // Check for style in case a browser which returns unreliable values
        // for getComputedStyle silently falls back to the reliable elem.style
        valueIsBorderBox = isBorderBox &&
          ( support.boxSizingReliable() || val === elem.style[ name ] );

        // Normalize "", auto, and prepare for extra
        val = parseFloat( val ) || 0;
      }

      // Use the active box-sizing model to add/subtract irrelevant styles
      return ( val +
          augmentWidthOrHeight(
            elem,
            name,
            extra || ( isBorderBox ? "border" : "content" ),
            valueIsBorderBox,
            styles
          )
        ) + "px";
    }

    function showHide( elements, show ) {
      var display, elem, hidden,
        values = [],
        index = 0,
        length = elements.length;

      for ( ; index < length; index++ ) {
        elem = elements[ index ];
        if ( !elem.style ) {
          continue;
        }

        values[ index ] = data_priv.get( elem, "olddisplay" );
        display = elem.style.display;
        if ( show ) {
          // Reset the inline display of this element to learn if it is
          // being hidden by cascaded rules or not
          if ( !values[ index ] && display === "none" ) {
            elem.style.display = "";
          }

          // Set elements which have been overridden with display: none
          // in a stylesheet to whatever the default browser style is
          // for such an element
          if ( elem.style.display === "" && isHidden( elem ) ) {
            values[ index ] = data_priv.access( elem, "olddisplay", defaultDisplay(elem.nodeName) );
          }
        } else {
          hidden = isHidden( elem );

          if ( display !== "none" || !hidden ) {
            data_priv.set( elem, "olddisplay", hidden ? display : jQuery.css( elem, "display" ) );
          }
        }
      }

      // Set the display of most of the elements in a second loop
      // to avoid the constant reflow
      for ( index = 0; index < length; index++ ) {
        elem = elements[ index ];
        if ( !elem.style ) {
          continue;
        }
        if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
          elem.style.display = show ? values[ index ] || "" : "none";
        }
      }

      return elements;
    }

    jQuery.extend({

      // Add in style property hooks for overriding the default
      // behavior of getting and setting a style property
      cssHooks: {
        opacity: {
          get: function( elem, computed ) {
            if ( computed ) {

              // We should always get a number back from opacity
              var ret = curCSS( elem, "opacity" );
              return ret === "" ? "1" : ret;
            }
          }
        }
      },

      // Don't automatically add "px" to these possibly-unitless properties
      cssNumber: {
        "columnCount": true,
        "fillOpacity": true,
        "flexGrow": true,
        "flexShrink": true,
        "fontWeight": true,
        "lineHeight": true,
        "opacity": true,
        "order": true,
        "orphans": true,
        "widows": true,
        "zIndex": true,
        "zoom": true
      },

      // Add in properties whose names you wish to fix before
      // setting or getting the value
      cssProps: {
        "float": "cssFloat"
      },

      // Get and set the style property on a DOM Node
      style: function( elem, name, value, extra ) {

        // Don't set styles on text and comment nodes
        if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
          return;
        }

        // Make sure that we're working with the right name
        var ret, type, hooks,
          origName = jQuery.camelCase( name ),
          style = elem.style;

        name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

        // Gets hook for the prefixed version, then unprefixed version
        hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

        // Check if we're setting a value
        if ( value !== undefined ) {
          type = typeof value;

          // Convert "+=" or "-=" to relative numbers (#7345)
          if ( type === "string" && (ret = rrelNum.exec( value )) ) {
            value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
            // Fixes bug #9237
            type = "number";
          }

          // Make sure that null and NaN values aren't set (#7116)
          if ( value == null || value !== value ) {
            return;
          }

          // If a number, add 'px' to the (except for certain CSS properties)
          if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
            value += "px";
          }

          // Support: IE9-11+
          // background-* props affect original clone's values
          if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
            style[ name ] = "inherit";
          }

          // If a hook was provided, use that value, otherwise just set the specified value
          if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {
            style[ name ] = value;
          }

        } else {
          // If a hook was provided get the non-computed value from there
          if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
            return ret;
          }

          // Otherwise just get the value from the style object
          return style[ name ];
        }
      },

      css: function( elem, name, extra, styles ) {
        var val, num, hooks,
          origName = jQuery.camelCase( name );

        // Make sure that we're working with the right name
        name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

        // Try prefixed name followed by the unprefixed name
        hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

        // If a hook was provided get the computed value from there
        if ( hooks && "get" in hooks ) {
          val = hooks.get( elem, true, extra );
        }

        // Otherwise, if a way to get the computed value exists, use that
        if ( val === undefined ) {
          val = curCSS( elem, name, styles );
        }

        // Convert "normal" to computed value
        if ( val === "normal" && name in cssNormalTransform ) {
          val = cssNormalTransform[ name ];
        }

        // Make numeric if forced or a qualifier was provided and val looks numeric
        if ( extra === "" || extra ) {
          num = parseFloat( val );
          return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
        }
        return val;
      }
    });

    jQuery.each([ "height", "width" ], function( i, name ) {
      jQuery.cssHooks[ name ] = {
        get: function( elem, computed, extra ) {
          if ( computed ) {

            // Certain elements can have dimension info if we invisibly show them
            // but it must have a current display style that would benefit
            return rdisplayswap.test( jQuery.css( elem, "display" ) ) && elem.offsetWidth === 0 ?
              jQuery.swap( elem, cssShow, function() {
                return getWidthOrHeight( elem, name, extra );
              }) :
              getWidthOrHeight( elem, name, extra );
          }
        },

        set: function( elem, value, extra ) {
          var styles = extra && getStyles( elem );
          return setPositiveNumber( elem, value, extra ?
            augmentWidthOrHeight(
              elem,
              name,
              extra,
              jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
              styles
            ) : 0
          );
        }
      };
    });

    // Support: Android 2.3
    jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
      function( elem, computed ) {
        if ( computed ) {
          return jQuery.swap( elem, { "display": "inline-block" },
            curCSS, [ elem, "marginRight" ] );
        }
      }
    );

    // These hooks are used by animate to expand properties
    jQuery.each({
      margin: "",
      padding: "",
      border: "Width"
    }, function( prefix, suffix ) {
      jQuery.cssHooks[ prefix + suffix ] = {
        expand: function( value ) {
          var i = 0,
            expanded = {},

          // Assumes a single number if not a string
            parts = typeof value === "string" ? value.split(" ") : [ value ];

          for ( ; i < 4; i++ ) {
            expanded[ prefix + cssExpand[ i ] + suffix ] =
              parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
          }

          return expanded;
        }
      };

      if ( !rmargin.test( prefix ) ) {
        jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
      }
    });

    jQuery.fn.extend({
      css: function( name, value ) {
        return access( this, function( elem, name, value ) {
          var styles, len,
            map = {},
            i = 0;

          if ( jQuery.isArray( name ) ) {
            styles = getStyles( elem );
            len = name.length;

            for ( ; i < len; i++ ) {
              map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
            }

            return map;
          }

          return value !== undefined ?
            jQuery.style( elem, name, value ) :
            jQuery.css( elem, name );
        }, name, value, arguments.length > 1 );
      },
      show: function() {
        return showHide( this, true );
      },
      hide: function() {
        return showHide( this );
      },
      toggle: function( state ) {
        if ( typeof state === "boolean" ) {
          return state ? this.show() : this.hide();
        }

        return this.each(function() {
          if ( isHidden( this ) ) {
            jQuery( this ).show();
          } else {
            jQuery( this ).hide();
          }
        });
      }
    });


    function Tween( elem, options, prop, end, easing ) {
      return new Tween.prototype.init( elem, options, prop, end, easing );
    }
    jQuery.Tween = Tween;

    Tween.prototype = {
      constructor: Tween,
      init: function( elem, options, prop, end, easing, unit ) {
        this.elem = elem;
        this.prop = prop;
        this.easing = easing || "swing";
        this.options = options;
        this.start = this.now = this.cur();
        this.end = end;
        this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
      },
      cur: function() {
        var hooks = Tween.propHooks[ this.prop ];

        return hooks && hooks.get ?
          hooks.get( this ) :
          Tween.propHooks._default.get( this );
      },
      run: function( percent ) {
        var eased,
          hooks = Tween.propHooks[ this.prop ];

        if ( this.options.duration ) {
          this.pos = eased = jQuery.easing[ this.easing ](
            percent, this.options.duration * percent, 0, 1, this.options.duration
          );
        } else {
          this.pos = eased = percent;
        }
        this.now = ( this.end - this.start ) * eased + this.start;

        if ( this.options.step ) {
          this.options.step.call( this.elem, this.now, this );
        }

        if ( hooks && hooks.set ) {
          hooks.set( this );
        } else {
          Tween.propHooks._default.set( this );
        }
        return this;
      }
    };

    Tween.prototype.init.prototype = Tween.prototype;

    Tween.propHooks = {
      _default: {
        get: function( tween ) {
          var result;

          if ( tween.elem[ tween.prop ] != null &&
            (!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
            return tween.elem[ tween.prop ];
          }

          // Passing an empty string as a 3rd parameter to .css will automatically
          // attempt a parseFloat and fallback to a string if the parse fails.
          // Simple values such as "10px" are parsed to Float;
          // complex values such as "rotate(1rad)" are returned as-is.
          result = jQuery.css( tween.elem, tween.prop, "" );
          // Empty strings, null, undefined and "auto" are converted to 0.
          return !result || result === "auto" ? 0 : result;
        },
        set: function( tween ) {
          // Use step hook for back compat.
          // Use cssHook if its there.
          // Use .style if available and use plain properties where available.
          if ( jQuery.fx.step[ tween.prop ] ) {
            jQuery.fx.step[ tween.prop ]( tween );
          } else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
            jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
          } else {
            tween.elem[ tween.prop ] = tween.now;
          }
        }
      }
    };

    // Support: IE9
    // Panic based approach to setting things on disconnected nodes
    Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
      set: function( tween ) {
        if ( tween.elem.nodeType && tween.elem.parentNode ) {
          tween.elem[ tween.prop ] = tween.now;
        }
      }
    };

    jQuery.easing = {
      linear: function( p ) {
        return p;
      },
      swing: function( p ) {
        return 0.5 - Math.cos( p * Math.PI ) / 2;
      }
    };

    jQuery.fx = Tween.prototype.init;

    // Back Compat <1.8 extension point
    jQuery.fx.step = {};




    var
      fxNow, timerId,
      rfxtypes = /^(?:toggle|show|hide)$/,
      rfxnum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" ),
      rrun = /queueHooks$/,
      animationPrefilters = [ defaultPrefilter ],
      tweeners = {
        "*": [ function( prop, value ) {
          var tween = this.createTween( prop, value ),
            target = tween.cur(),
            parts = rfxnum.exec( value ),
            unit = parts && parts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

          // Starting value computation is required for potential unit mismatches
            start = ( jQuery.cssNumber[ prop ] || unit !== "px" && +target ) &&
              rfxnum.exec( jQuery.css( tween.elem, prop ) ),
            scale = 1,
            maxIterations = 20;

          if ( start && start[ 3 ] !== unit ) {
            // Trust units reported by jQuery.css
            unit = unit || start[ 3 ];

            // Make sure we update the tween properties later on
            parts = parts || [];

            // Iteratively approximate from a nonzero starting point
            start = +target || 1;

            do {
              // If previous iteration zeroed out, double until we get *something*.
              // Use string for doubling so we don't accidentally see scale as unchanged below
              scale = scale || ".5";

              // Adjust and apply
              start = start / scale;
              jQuery.style( tween.elem, prop, start + unit );

              // Update scale, tolerating zero or NaN from tween.cur(),
              // break the loop if scale is unchanged or perfect, or if we've just had enough
            } while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
          }

          // Update tween properties
          if ( parts ) {
            start = tween.start = +start || +target || 0;
            tween.unit = unit;
            // If a +=/-= token was provided, we're doing a relative animation
            tween.end = parts[ 1 ] ?
            start + ( parts[ 1 ] + 1 ) * parts[ 2 ] :
              +parts[ 2 ];
          }

          return tween;
        } ]
      };

    // Animations created synchronously will run synchronously
    function createFxNow() {
      setTimeout(function() {
        fxNow = undefined;
      });
      return ( fxNow = jQuery.now() );
    }

    // Generate parameters to create a standard animation
    function genFx( type, includeWidth ) {
      var which,
        i = 0,
        attrs = { height: type };

      // If we include width, step value is 1 to do all cssExpand values,
      // otherwise step value is 2 to skip over Left and Right
      includeWidth = includeWidth ? 1 : 0;
      for ( ; i < 4 ; i += 2 - includeWidth ) {
        which = cssExpand[ i ];
        attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
      }

      if ( includeWidth ) {
        attrs.opacity = attrs.width = type;
      }

      return attrs;
    }

    function createTween( value, prop, animation ) {
      var tween,
        collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
        index = 0,
        length = collection.length;
      for ( ; index < length; index++ ) {
        if ( (tween = collection[ index ].call( animation, prop, value )) ) {

          // We're done with this property
          return tween;
        }
      }
    }

    function defaultPrefilter( elem, props, opts ) {
      /* jshint validthis: true */
      var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
        anim = this,
        orig = {},
        style = elem.style,
        hidden = elem.nodeType && isHidden( elem ),
        dataShow = data_priv.get( elem, "fxshow" );

      // Handle queue: false promises
      if ( !opts.queue ) {
        hooks = jQuery._queueHooks( elem, "fx" );
        if ( hooks.unqueued == null ) {
          hooks.unqueued = 0;
          oldfire = hooks.empty.fire;
          hooks.empty.fire = function() {
            if ( !hooks.unqueued ) {
              oldfire();
            }
          };
        }
        hooks.unqueued++;

        anim.always(function() {
          // Ensure the complete handler is called before this completes
          anim.always(function() {
            hooks.unqueued--;
            if ( !jQuery.queue( elem, "fx" ).length ) {
              hooks.empty.fire();
            }
          });
        });
      }

      // Height/width overflow pass
      if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
        // Make sure that nothing sneaks out
        // Record all 3 overflow attributes because IE9-10 do not
        // change the overflow attribute when overflowX and
        // overflowY are set to the same value
        opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

        // Set display property to inline-block for height/width
        // animations on inline elements that are having width/height animated
        display = jQuery.css( elem, "display" );

        // Test default display if display is currently "none"
        checkDisplay = display === "none" ?
        data_priv.get( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;

        if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {
          style.display = "inline-block";
        }
      }

      if ( opts.overflow ) {
        style.overflow = "hidden";
        anim.always(function() {
          style.overflow = opts.overflow[ 0 ];
          style.overflowX = opts.overflow[ 1 ];
          style.overflowY = opts.overflow[ 2 ];
        });
      }

      // show/hide pass
      for ( prop in props ) {
        value = props[ prop ];
        if ( rfxtypes.exec( value ) ) {
          delete props[ prop ];
          toggle = toggle || value === "toggle";
          if ( value === ( hidden ? "hide" : "show" ) ) {

            // If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
            if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
              hidden = true;
            } else {
              continue;
            }
          }
          orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );

          // Any non-fx value stops us from restoring the original display value
        } else {
          display = undefined;
        }
      }

      if ( !jQuery.isEmptyObject( orig ) ) {
        if ( dataShow ) {
          if ( "hidden" in dataShow ) {
            hidden = dataShow.hidden;
          }
        } else {
          dataShow = data_priv.access( elem, "fxshow", {} );
        }

        // Store state if its toggle - enables .stop().toggle() to "reverse"
        if ( toggle ) {
          dataShow.hidden = !hidden;
        }
        if ( hidden ) {
          jQuery( elem ).show();
        } else {
          anim.done(function() {
            jQuery( elem ).hide();
          });
        }
        anim.done(function() {
          var prop;

          data_priv.remove( elem, "fxshow" );
          for ( prop in orig ) {
            jQuery.style( elem, prop, orig[ prop ] );
          }
        });
        for ( prop in orig ) {
          tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

          if ( !( prop in dataShow ) ) {
            dataShow[ prop ] = tween.start;
            if ( hidden ) {
              tween.end = tween.start;
              tween.start = prop === "width" || prop === "height" ? 1 : 0;
            }
          }
        }

        // If this is a noop like .hide().hide(), restore an overwritten display value
      } else if ( (display === "none" ? defaultDisplay( elem.nodeName ) : display) === "inline" ) {
        style.display = display;
      }
    }

    function propFilter( props, specialEasing ) {
      var index, name, easing, value, hooks;

      // camelCase, specialEasing and expand cssHook pass
      for ( index in props ) {
        name = jQuery.camelCase( index );
        easing = specialEasing[ name ];
        value = props[ index ];
        if ( jQuery.isArray( value ) ) {
          easing = value[ 1 ];
          value = props[ index ] = value[ 0 ];
        }

        if ( index !== name ) {
          props[ name ] = value;
          delete props[ index ];
        }

        hooks = jQuery.cssHooks[ name ];
        if ( hooks && "expand" in hooks ) {
          value = hooks.expand( value );
          delete props[ name ];

          // Not quite $.extend, this won't overwrite existing keys.
          // Reusing 'index' because we have the correct "name"
          for ( index in value ) {
            if ( !( index in props ) ) {
              props[ index ] = value[ index ];
              specialEasing[ index ] = easing;
            }
          }
        } else {
          specialEasing[ name ] = easing;
        }
      }
    }

    function Animation( elem, properties, options ) {
      var result,
        stopped,
        index = 0,
        length = animationPrefilters.length,
        deferred = jQuery.Deferred().always( function() {
          // Don't match elem in the :animated selector
          delete tick.elem;
        }),
        tick = function() {
          if ( stopped ) {
            return false;
          }
          var currentTime = fxNow || createFxNow(),
            remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
          // Support: Android 2.3
          // Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
            temp = remaining / animation.duration || 0,
            percent = 1 - temp,
            index = 0,
            length = animation.tweens.length;

          for ( ; index < length ; index++ ) {
            animation.tweens[ index ].run( percent );
          }

          deferred.notifyWith( elem, [ animation, percent, remaining ]);

          if ( percent < 1 && length ) {
            return remaining;
          } else {
            deferred.resolveWith( elem, [ animation ] );
            return false;
          }
        },
        animation = deferred.promise({
          elem: elem,
          props: jQuery.extend( {}, properties ),
          opts: jQuery.extend( true, { specialEasing: {} }, options ),
          originalProperties: properties,
          originalOptions: options,
          startTime: fxNow || createFxNow(),
          duration: options.duration,
          tweens: [],
          createTween: function( prop, end ) {
            var tween = jQuery.Tween( elem, animation.opts, prop, end,
              animation.opts.specialEasing[ prop ] || animation.opts.easing );
            animation.tweens.push( tween );
            return tween;
          },
          stop: function( gotoEnd ) {
            var index = 0,
            // If we are going to the end, we want to run all the tweens
            // otherwise we skip this part
              length = gotoEnd ? animation.tweens.length : 0;
            if ( stopped ) {
              return this;
            }
            stopped = true;
            for ( ; index < length ; index++ ) {
              animation.tweens[ index ].run( 1 );
            }

            // Resolve when we played the last frame; otherwise, reject
            if ( gotoEnd ) {
              deferred.resolveWith( elem, [ animation, gotoEnd ] );
            } else {
              deferred.rejectWith( elem, [ animation, gotoEnd ] );
            }
            return this;
          }
        }),
        props = animation.props;

      propFilter( props, animation.opts.specialEasing );

      for ( ; index < length ; index++ ) {
        result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
        if ( result ) {
          return result;
        }
      }

      jQuery.map( props, createTween, animation );

      if ( jQuery.isFunction( animation.opts.start ) ) {
        animation.opts.start.call( elem, animation );
      }

      jQuery.fx.timer(
        jQuery.extend( tick, {
          elem: elem,
          anim: animation,
          queue: animation.opts.queue
        })
      );

      // attach callbacks from options
      return animation.progress( animation.opts.progress )
        .done( animation.opts.done, animation.opts.complete )
        .fail( animation.opts.fail )
        .always( animation.opts.always );
    }

    jQuery.Animation = jQuery.extend( Animation, {

      tweener: function( props, callback ) {
        if ( jQuery.isFunction( props ) ) {
          callback = props;
          props = [ "*" ];
        } else {
          props = props.split(" ");
        }

        var prop,
          index = 0,
          length = props.length;

        for ( ; index < length ; index++ ) {
          prop = props[ index ];
          tweeners[ prop ] = tweeners[ prop ] || [];
          tweeners[ prop ].unshift( callback );
        }
      },

      prefilter: function( callback, prepend ) {
        if ( prepend ) {
          animationPrefilters.unshift( callback );
        } else {
          animationPrefilters.push( callback );
        }
      }
    });

    jQuery.speed = function( speed, easing, fn ) {
      var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
        complete: fn || !fn && easing ||
        jQuery.isFunction( speed ) && speed,
        duration: speed,
        easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
      };

      opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
        opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

      // Normalize opt.queue - true/undefined/null -> "fx"
      if ( opt.queue == null || opt.queue === true ) {
        opt.queue = "fx";
      }

      // Queueing
      opt.old = opt.complete;

      opt.complete = function() {
        if ( jQuery.isFunction( opt.old ) ) {
          opt.old.call( this );
        }

        if ( opt.queue ) {
          jQuery.dequeue( this, opt.queue );
        }
      };

      return opt;
    };

    jQuery.fn.extend({
      fadeTo: function( speed, to, easing, callback ) {

        // Show any hidden elements after setting opacity to 0
        return this.filter( isHidden ).css( "opacity", 0 ).show()

          // Animate to the value specified
          .end().animate({ opacity: to }, speed, easing, callback );
      },
      animate: function( prop, speed, easing, callback ) {
        var empty = jQuery.isEmptyObject( prop ),
          optall = jQuery.speed( speed, easing, callback ),
          doAnimation = function() {
            // Operate on a copy of prop so per-property easing won't be lost
            var anim = Animation( this, jQuery.extend( {}, prop ), optall );

            // Empty animations, or finishing resolves immediately
            if ( empty || data_priv.get( this, "finish" ) ) {
              anim.stop( true );
            }
          };
        doAnimation.finish = doAnimation;

        return empty || optall.queue === false ?
          this.each( doAnimation ) :
          this.queue( optall.queue, doAnimation );
      },
      stop: function( type, clearQueue, gotoEnd ) {
        var stopQueue = function( hooks ) {
          var stop = hooks.stop;
          delete hooks.stop;
          stop( gotoEnd );
        };

        if ( typeof type !== "string" ) {
          gotoEnd = clearQueue;
          clearQueue = type;
          type = undefined;
        }
        if ( clearQueue && type !== false ) {
          this.queue( type || "fx", [] );
        }

        return this.each(function() {
          var dequeue = true,
            index = type != null && type + "queueHooks",
            timers = jQuery.timers,
            data = data_priv.get( this );

          if ( index ) {
            if ( data[ index ] && data[ index ].stop ) {
              stopQueue( data[ index ] );
            }
          } else {
            for ( index in data ) {
              if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
                stopQueue( data[ index ] );
              }
            }
          }

          for ( index = timers.length; index--; ) {
            if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
              timers[ index ].anim.stop( gotoEnd );
              dequeue = false;
              timers.splice( index, 1 );
            }
          }

          // Start the next in the queue if the last step wasn't forced.
          // Timers currently will call their complete callbacks, which
          // will dequeue but only if they were gotoEnd.
          if ( dequeue || !gotoEnd ) {
            jQuery.dequeue( this, type );
          }
        });
      },
      finish: function( type ) {
        if ( type !== false ) {
          type = type || "fx";
        }
        return this.each(function() {
          var index,
            data = data_priv.get( this ),
            queue = data[ type + "queue" ],
            hooks = data[ type + "queueHooks" ],
            timers = jQuery.timers,
            length = queue ? queue.length : 0;

          // Enable finishing flag on private data
          data.finish = true;

          // Empty the queue first
          jQuery.queue( this, type, [] );

          if ( hooks && hooks.stop ) {
            hooks.stop.call( this, true );
          }

          // Look for any active animations, and finish them
          for ( index = timers.length; index--; ) {
            if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
              timers[ index ].anim.stop( true );
              timers.splice( index, 1 );
            }
          }

          // Look for any animations in the old queue and finish them
          for ( index = 0; index < length; index++ ) {
            if ( queue[ index ] && queue[ index ].finish ) {
              queue[ index ].finish.call( this );
            }
          }

          // Turn off finishing flag
          delete data.finish;
        });
      }
    });

    jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
      var cssFn = jQuery.fn[ name ];
      jQuery.fn[ name ] = function( speed, easing, callback ) {
        return speed == null || typeof speed === "boolean" ?
          cssFn.apply( this, arguments ) :
          this.animate( genFx( name, true ), speed, easing, callback );
      };
    });

    // Generate shortcuts for custom animations
    jQuery.each({
      slideDown: genFx("show"),
      slideUp: genFx("hide"),
      slideToggle: genFx("toggle"),
      fadeIn: { opacity: "show" },
      fadeOut: { opacity: "hide" },
      fadeToggle: { opacity: "toggle" }
    }, function( name, props ) {
      jQuery.fn[ name ] = function( speed, easing, callback ) {
        return this.animate( props, speed, easing, callback );
      };
    });

    jQuery.timers = [];
    jQuery.fx.tick = function() {
      var timer,
        i = 0,
        timers = jQuery.timers;

      fxNow = jQuery.now();

      for ( ; i < timers.length; i++ ) {
        timer = timers[ i ];
        // Checks the timer has not already been removed
        if ( !timer() && timers[ i ] === timer ) {
          timers.splice( i--, 1 );
        }
      }

      if ( !timers.length ) {
        jQuery.fx.stop();
      }
      fxNow = undefined;
    };

    jQuery.fx.timer = function( timer ) {
      jQuery.timers.push( timer );
      if ( timer() ) {
        jQuery.fx.start();
      } else {
        jQuery.timers.pop();
      }
    };

    jQuery.fx.interval = 13;

    jQuery.fx.start = function() {
      if ( !timerId ) {
        timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
      }
    };

    jQuery.fx.stop = function() {
      clearInterval( timerId );
      timerId = null;
    };

    jQuery.fx.speeds = {
      slow: 600,
      fast: 200,
      // Default speed
      _default: 400
    };


    // Based off of the plugin by Clint Helfers, with permission.
    // http://blindsignals.com/index.php/2009/07/jquery-delay/
    jQuery.fn.delay = function( time, type ) {
      time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
      type = type || "fx";

      return this.queue( type, function( next, hooks ) {
        var timeout = setTimeout( next, time );
        hooks.stop = function() {
          clearTimeout( timeout );
        };
      });
    };


    (function() {
      var input = document.createElement( "input" ),
        select = document.createElement( "select" ),
        opt = select.appendChild( document.createElement( "option" ) );

      input.type = "checkbox";

      // Support: iOS<=5.1, Android<=4.2+
      // Default value for a checkbox should be "on"
      support.checkOn = input.value !== "";

      // Support: IE<=11+
      // Must access selectedIndex to make default options select
      support.optSelected = opt.selected;

      // Support: Android<=2.3
      // Options inside disabled selects are incorrectly marked as disabled
      select.disabled = true;
      support.optDisabled = !opt.disabled;

      // Support: IE<=11+
      // An input loses its value after becoming a radio
      input = document.createElement( "input" );
      input.value = "t";
      input.type = "radio";
      support.radioValue = input.value === "t";
    })();


    var nodeHook, boolHook,
      attrHandle = jQuery.expr.attrHandle;

    jQuery.fn.extend({
      attr: function( name, value ) {
        return access( this, jQuery.attr, name, value, arguments.length > 1 );
      },

      removeAttr: function( name ) {
        return this.each(function() {
          jQuery.removeAttr( this, name );
        });
      }
    });

    jQuery.extend({
      attr: function( elem, name, value ) {
        var hooks, ret,
          nType = elem.nodeType;

        // don't get/set attributes on text, comment and attribute nodes
        if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
          return;
        }

        // Fallback to prop when attributes are not supported
        if ( typeof elem.getAttribute === strundefined ) {
          return jQuery.prop( elem, name, value );
        }

        // All attributes are lowercase
        // Grab necessary hook if one is defined
        if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
          name = name.toLowerCase();
          hooks = jQuery.attrHooks[ name ] ||
            ( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
        }

        if ( value !== undefined ) {

          if ( value === null ) {
            jQuery.removeAttr( elem, name );

          } else if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
            return ret;

          } else {
            elem.setAttribute( name, value + "" );
            return value;
          }

        } else if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
          return ret;

        } else {
          ret = jQuery.find.attr( elem, name );

          // Non-existent attributes return null, we normalize to undefined
          return ret == null ?
            undefined :
            ret;
        }
      },

      removeAttr: function( elem, value ) {
        var name, propName,
          i = 0,
          attrNames = value && value.match( rnotwhite );

        if ( attrNames && elem.nodeType === 1 ) {
          while ( (name = attrNames[i++]) ) {
            propName = jQuery.propFix[ name ] || name;

            // Boolean attributes get special treatment (#10870)
            if ( jQuery.expr.match.bool.test( name ) ) {
              // Set corresponding property to false
              elem[ propName ] = false;
            }

            elem.removeAttribute( name );
          }
        }
      },

      attrHooks: {
        type: {
          set: function( elem, value ) {
            if ( !support.radioValue && value === "radio" &&
              jQuery.nodeName( elem, "input" ) ) {
              var val = elem.value;
              elem.setAttribute( "type", value );
              if ( val ) {
                elem.value = val;
              }
              return value;
            }
          }
        }
      }
    });

    // Hooks for boolean attributes
    boolHook = {
      set: function( elem, value, name ) {
        if ( value === false ) {
          // Remove boolean attributes when set to false
          jQuery.removeAttr( elem, name );
        } else {
          elem.setAttribute( name, name );
        }
        return name;
      }
    };
    jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
      var getter = attrHandle[ name ] || jQuery.find.attr;

      attrHandle[ name ] = function( elem, name, isXML ) {
        var ret, handle;
        if ( !isXML ) {
          // Avoid an infinite loop by temporarily removing this function from the getter
          handle = attrHandle[ name ];
          attrHandle[ name ] = ret;
          ret = getter( elem, name, isXML ) != null ?
            name.toLowerCase() :
            null;
          attrHandle[ name ] = handle;
        }
        return ret;
      };
    });




    var rfocusable = /^(?:input|select|textarea|button)$/i;

    jQuery.fn.extend({
      prop: function( name, value ) {
        return access( this, jQuery.prop, name, value, arguments.length > 1 );
      },

      removeProp: function( name ) {
        return this.each(function() {
          delete this[ jQuery.propFix[ name ] || name ];
        });
      }
    });

    jQuery.extend({
      propFix: {
        "for": "htmlFor",
        "class": "className"
      },

      prop: function( elem, name, value ) {
        var ret, hooks, notxml,
          nType = elem.nodeType;

        // Don't get/set properties on text, comment and attribute nodes
        if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
          return;
        }

        notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

        if ( notxml ) {
          // Fix name and attach hooks
          name = jQuery.propFix[ name ] || name;
          hooks = jQuery.propHooks[ name ];
        }

        if ( value !== undefined ) {
          return hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ?
            ret :
            ( elem[ name ] = value );

        } else {
          return hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ?
            ret :
            elem[ name ];
        }
      },

      propHooks: {
        tabIndex: {
          get: function( elem ) {
            return elem.hasAttribute( "tabindex" ) || rfocusable.test( elem.nodeName ) || elem.href ?
              elem.tabIndex :
              -1;
          }
        }
      }
    });

    if ( !support.optSelected ) {
      jQuery.propHooks.selected = {
        get: function( elem ) {
          var parent = elem.parentNode;
          if ( parent && parent.parentNode ) {
            parent.parentNode.selectedIndex;
          }
          return null;
        }
      };
    }

    jQuery.each([
      "tabIndex",
      "readOnly",
      "maxLength",
      "cellSpacing",
      "cellPadding",
      "rowSpan",
      "colSpan",
      "useMap",
      "frameBorder",
      "contentEditable"
    ], function() {
      jQuery.propFix[ this.toLowerCase() ] = this;
    });




    var rclass = /[\t\r\n\f]/g;

    jQuery.fn.extend({
      addClass: function( value ) {
        var classes, elem, cur, clazz, j, finalValue,
          proceed = typeof value === "string" && value,
          i = 0,
          len = this.length;

        if ( jQuery.isFunction( value ) ) {
          return this.each(function( j ) {
            jQuery( this ).addClass( value.call( this, j, this.className ) );
          });
        }

        if ( proceed ) {
          // The disjunction here is for better compressibility (see removeClass)
          classes = ( value || "" ).match( rnotwhite ) || [];

          for ( ; i < len; i++ ) {
            elem = this[ i ];
            cur = elem.nodeType === 1 && ( elem.className ?
                  ( " " + elem.className + " " ).replace( rclass, " " ) :
                  " "
              );

            if ( cur ) {
              j = 0;
              while ( (clazz = classes[j++]) ) {
                if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
                  cur += clazz + " ";
                }
              }

              // only assign if different to avoid unneeded rendering.
              finalValue = jQuery.trim( cur );
              if ( elem.className !== finalValue ) {
                elem.className = finalValue;
              }
            }
          }
        }

        return this;
      },

      removeClass: function( value ) {
        var classes, elem, cur, clazz, j, finalValue,
          proceed = arguments.length === 0 || typeof value === "string" && value,
          i = 0,
          len = this.length;

        if ( jQuery.isFunction( value ) ) {
          return this.each(function( j ) {
            jQuery( this ).removeClass( value.call( this, j, this.className ) );
          });
        }
        if ( proceed ) {
          classes = ( value || "" ).match( rnotwhite ) || [];

          for ( ; i < len; i++ ) {
            elem = this[ i ];
            // This expression is here for better compressibility (see addClass)
            cur = elem.nodeType === 1 && ( elem.className ?
                  ( " " + elem.className + " " ).replace( rclass, " " ) :
                  ""
              );

            if ( cur ) {
              j = 0;
              while ( (clazz = classes[j++]) ) {
                // Remove *all* instances
                while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
                  cur = cur.replace( " " + clazz + " ", " " );
                }
              }

              // Only assign if different to avoid unneeded rendering.
              finalValue = value ? jQuery.trim( cur ) : "";
              if ( elem.className !== finalValue ) {
                elem.className = finalValue;
              }
            }
          }
        }

        return this;
      },

      toggleClass: function( value, stateVal ) {
        var type = typeof value;

        if ( typeof stateVal === "boolean" && type === "string" ) {
          return stateVal ? this.addClass( value ) : this.removeClass( value );
        }

        if ( jQuery.isFunction( value ) ) {
          return this.each(function( i ) {
            jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
          });
        }

        return this.each(function() {
          if ( type === "string" ) {
            // Toggle individual class names
            var className,
              i = 0,
              self = jQuery( this ),
              classNames = value.match( rnotwhite ) || [];

            while ( (className = classNames[ i++ ]) ) {
              // Check each className given, space separated list
              if ( self.hasClass( className ) ) {
                self.removeClass( className );
              } else {
                self.addClass( className );
              }
            }

            // Toggle whole class name
          } else if ( type === strundefined || type === "boolean" ) {
            if ( this.className ) {
              // store className if set
              data_priv.set( this, "__className__", this.className );
            }

            // If the element has a class name or if we're passed `false`,
            // then remove the whole classname (if there was one, the above saved it).
            // Otherwise bring back whatever was previously saved (if anything),
            // falling back to the empty string if nothing was stored.
            this.className = this.className || value === false ? "" : data_priv.get( this, "__className__" ) || "";
          }
        });
      },

      hasClass: function( selector ) {
        var className = " " + selector + " ",
          i = 0,
          l = this.length;
        for ( ; i < l; i++ ) {
          if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
            return true;
          }
        }

        return false;
      }
    });




    var rreturn = /\r/g;

    jQuery.fn.extend({
      val: function( value ) {
        var hooks, ret, isFunction,
          elem = this[0];

        if ( !arguments.length ) {
          if ( elem ) {
            hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

            if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
              return ret;
            }

            ret = elem.value;

            return typeof ret === "string" ?
              // Handle most common string cases
              ret.replace(rreturn, "") :
              // Handle cases where value is null/undef or number
              ret == null ? "" : ret;
          }

          return;
        }

        isFunction = jQuery.isFunction( value );

        return this.each(function( i ) {
          var val;

          if ( this.nodeType !== 1 ) {
            return;
          }

          if ( isFunction ) {
            val = value.call( this, i, jQuery( this ).val() );
          } else {
            val = value;
          }

          // Treat null/undefined as ""; convert numbers to string
          if ( val == null ) {
            val = "";

          } else if ( typeof val === "number" ) {
            val += "";

          } else if ( jQuery.isArray( val ) ) {
            val = jQuery.map( val, function( value ) {
              return value == null ? "" : value + "";
            });
          }

          hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

          // If set returns undefined, fall back to normal setting
          if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
            this.value = val;
          }
        });
      }
    });

    jQuery.extend({
      valHooks: {
        option: {
          get: function( elem ) {
            var val = jQuery.find.attr( elem, "value" );
            return val != null ?
              val :
              // Support: IE10-11+
              // option.text throws exceptions (#14686, #14858)
              jQuery.trim( jQuery.text( elem ) );
          }
        },
        select: {
          get: function( elem ) {
            var value, option,
              options = elem.options,
              index = elem.selectedIndex,
              one = elem.type === "select-one" || index < 0,
              values = one ? null : [],
              max = one ? index + 1 : options.length,
              i = index < 0 ?
                max :
                one ? index : 0;

            // Loop through all the selected options
            for ( ; i < max; i++ ) {
              option = options[ i ];

              // IE6-9 doesn't update selected after form reset (#2551)
              if ( ( option.selected || i === index ) &&
                // Don't return options that are disabled or in a disabled optgroup
                ( support.optDisabled ? !option.disabled : option.getAttribute( "disabled" ) === null ) &&
                ( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

                // Get the specific value for the option
                value = jQuery( option ).val();

                // We don't need an array for one selects
                if ( one ) {
                  return value;
                }

                // Multi-Selects return an array
                values.push( value );
              }
            }

            return values;
          },

          set: function( elem, value ) {
            var optionSet, option,
              options = elem.options,
              values = jQuery.makeArray( value ),
              i = options.length;

            while ( i-- ) {
              option = options[ i ];
              if ( (option.selected = jQuery.inArray( option.value, values ) >= 0) ) {
                optionSet = true;
              }
            }

            // Force browsers to behave consistently when non-matching value is set
            if ( !optionSet ) {
              elem.selectedIndex = -1;
            }
            return values;
          }
        }
      }
    });

    // Radios and checkboxes getter/setter
    jQuery.each([ "radio", "checkbox" ], function() {
      jQuery.valHooks[ this ] = {
        set: function( elem, value ) {
          if ( jQuery.isArray( value ) ) {
            return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
          }
        }
      };
      if ( !support.checkOn ) {
        jQuery.valHooks[ this ].get = function( elem ) {
          return elem.getAttribute("value") === null ? "on" : elem.value;
        };
      }
    });




    // Return jQuery for attributes-only inclusion


    jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
    "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
    "change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

      // Handle event binding
      jQuery.fn[ name ] = function( data, fn ) {
        return arguments.length > 0 ?
          this.on( name, null, data, fn ) :
          this.trigger( name );
      };
    });

    jQuery.fn.extend({
      hover: function( fnOver, fnOut ) {
        return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
      },

      bind: function( types, data, fn ) {
        return this.on( types, null, data, fn );
      },
      unbind: function( types, fn ) {
        return this.off( types, null, fn );
      },

      delegate: function( selector, types, data, fn ) {
        return this.on( types, selector, data, fn );
      },
      undelegate: function( selector, types, fn ) {
        // ( namespace ) or ( selector, types [, fn] )
        return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
      }
    });


    var nonce = jQuery.now();

    var rquery = (/\?/);



    // Support: Android 2.3
    // Workaround failure to string-cast null input
    jQuery.parseJSON = function( data ) {
      return JSON.parse( data + "" );
    };


    // Cross-browser xml parsing
    jQuery.parseXML = function( data ) {
      var xml, tmp;
      if ( !data || typeof data !== "string" ) {
        return null;
      }

      // Support: IE9
      try {
        tmp = new DOMParser();
        xml = tmp.parseFromString( data, "text/xml" );
      } catch ( e ) {
        xml = undefined;
      }

      if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
        jQuery.error( "Invalid XML: " + data );
      }
      return xml;
    };


    var
      rhash = /#.*$/,
      rts = /([?&])_=[^&]*/,
      rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
    // #7653, #8125, #8152: local protocol detection
      rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
      rnoContent = /^(?:GET|HEAD)$/,
      rprotocol = /^\/\//,
      rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,

    /* Prefilters
     * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
     * 2) These are called:
     *    - BEFORE asking for a transport
     *    - AFTER param serialization (s.data is a string if s.processData is true)
     * 3) key is the dataType
     * 4) the catchall symbol "*" can be used
     * 5) execution will start with transport dataType and THEN continue down to "*" if needed
     */
      prefilters = {},

    /* Transports bindings
     * 1) key is the dataType
     * 2) the catchall symbol "*" can be used
     * 3) selection will start with transport dataType and THEN go to "*" if needed
     */
      transports = {},

    // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
      allTypes = "*/".concat( "*" ),

    // Document location
      ajaxLocation = window.location.href,

    // Segment location into parts
      ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

    // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
    function addToPrefiltersOrTransports( structure ) {

      // dataTypeExpression is optional and defaults to "*"
      return function( dataTypeExpression, func ) {

        if ( typeof dataTypeExpression !== "string" ) {
          func = dataTypeExpression;
          dataTypeExpression = "*";
        }

        var dataType,
          i = 0,
          dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

        if ( jQuery.isFunction( func ) ) {
          // For each dataType in the dataTypeExpression
          while ( (dataType = dataTypes[i++]) ) {
            // Prepend if requested
            if ( dataType[0] === "+" ) {
              dataType = dataType.slice( 1 ) || "*";
              (structure[ dataType ] = structure[ dataType ] || []).unshift( func );

              // Otherwise append
            } else {
              (structure[ dataType ] = structure[ dataType ] || []).push( func );
            }
          }
        }
      };
    }

    // Base inspection function for prefilters and transports
    function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

      var inspected = {},
        seekingTransport = ( structure === transports );

      function inspect( dataType ) {
        var selected;
        inspected[ dataType ] = true;
        jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
          var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
          if ( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
            options.dataTypes.unshift( dataTypeOrTransport );
            inspect( dataTypeOrTransport );
            return false;
          } else if ( seekingTransport ) {
            return !( selected = dataTypeOrTransport );
          }
        });
        return selected;
      }

      return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
    }

    // A special extend for ajax options
    // that takes "flat" options (not to be deep extended)
    // Fixes #9887
    function ajaxExtend( target, src ) {
      var key, deep,
        flatOptions = jQuery.ajaxSettings.flatOptions || {};

      for ( key in src ) {
        if ( src[ key ] !== undefined ) {
          ( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
        }
      }
      if ( deep ) {
        jQuery.extend( true, target, deep );
      }

      return target;
    }

    /* Handles responses to an ajax request:
     * - finds the right dataType (mediates between content-type and expected dataType)
     * - returns the corresponding response
     */
    function ajaxHandleResponses( s, jqXHR, responses ) {

      var ct, type, finalDataType, firstDataType,
        contents = s.contents,
        dataTypes = s.dataTypes;

      // Remove auto dataType and get content-type in the process
      while ( dataTypes[ 0 ] === "*" ) {
        dataTypes.shift();
        if ( ct === undefined ) {
          ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
        }
      }

      // Check if we're dealing with a known content-type
      if ( ct ) {
        for ( type in contents ) {
          if ( contents[ type ] && contents[ type ].test( ct ) ) {
            dataTypes.unshift( type );
            break;
          }
        }
      }

      // Check to see if we have a response for the expected dataType
      if ( dataTypes[ 0 ] in responses ) {
        finalDataType = dataTypes[ 0 ];
      } else {
        // Try convertible dataTypes
        for ( type in responses ) {
          if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
            finalDataType = type;
            break;
          }
          if ( !firstDataType ) {
            firstDataType = type;
          }
        }
        // Or just use first one
        finalDataType = finalDataType || firstDataType;
      }

      // If we found a dataType
      // We add the dataType to the list if needed
      // and return the corresponding response
      if ( finalDataType ) {
        if ( finalDataType !== dataTypes[ 0 ] ) {
          dataTypes.unshift( finalDataType );
        }
        return responses[ finalDataType ];
      }
    }

    /* Chain conversions given the request and the original response
     * Also sets the responseXXX fields on the jqXHR instance
     */
    function ajaxConvert( s, response, jqXHR, isSuccess ) {
      var conv2, current, conv, tmp, prev,
        converters = {},
      // Work with a copy of dataTypes in case we need to modify it for conversion
        dataTypes = s.dataTypes.slice();

      // Create converters map with lowercased keys
      if ( dataTypes[ 1 ] ) {
        for ( conv in s.converters ) {
          converters[ conv.toLowerCase() ] = s.converters[ conv ];
        }
      }

      current = dataTypes.shift();

      // Convert to each sequential dataType
      while ( current ) {

        if ( s.responseFields[ current ] ) {
          jqXHR[ s.responseFields[ current ] ] = response;
        }

        // Apply the dataFilter if provided
        if ( !prev && isSuccess && s.dataFilter ) {
          response = s.dataFilter( response, s.dataType );
        }

        prev = current;
        current = dataTypes.shift();

        if ( current ) {

          // There's only work to do if current dataType is non-auto
          if ( current === "*" ) {

            current = prev;

            // Convert response if prev dataType is non-auto and differs from current
          } else if ( prev !== "*" && prev !== current ) {

            // Seek a direct converter
            conv = converters[ prev + " " + current ] || converters[ "* " + current ];

            // If none found, seek a pair
            if ( !conv ) {
              for ( conv2 in converters ) {

                // If conv2 outputs current
                tmp = conv2.split( " " );
                if ( tmp[ 1 ] === current ) {

                  // If prev can be converted to accepted input
                  conv = converters[ prev + " " + tmp[ 0 ] ] ||
                    converters[ "* " + tmp[ 0 ] ];
                  if ( conv ) {
                    // Condense equivalence converters
                    if ( conv === true ) {
                      conv = converters[ conv2 ];

                      // Otherwise, insert the intermediate dataType
                    } else if ( converters[ conv2 ] !== true ) {
                      current = tmp[ 0 ];
                      dataTypes.unshift( tmp[ 1 ] );
                    }
                    break;
                  }
                }
              }
            }

            // Apply converter (if not an equivalence)
            if ( conv !== true ) {

              // Unless errors are allowed to bubble, catch and return them
              if ( conv && s[ "throws" ] ) {
                response = conv( response );
              } else {
                try {
                  response = conv( response );
                } catch ( e ) {
                  return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
                }
              }
            }
          }
        }
      }

      return { state: "success", data: response };
    }

    jQuery.extend({

      // Counter for holding the number of active queries
      active: 0,

      // Last-Modified header cache for next request
      lastModified: {},
      etag: {},

      ajaxSettings: {
        url: ajaxLocation,
        type: "GET",
        isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
        global: true,
        processData: true,
        async: true,
        contentType: "application/x-www-form-urlencoded; charset=UTF-8",
        /*
         timeout: 0,
         data: null,
         dataType: null,
         username: null,
         password: null,
         cache: null,
         throws: false,
         traditional: false,
         headers: {},
         */

        accepts: {
          "*": allTypes,
          text: "text/plain",
          html: "text/html",
          xml: "application/xml, text/xml",
          json: "application/json, text/javascript"
        },

        contents: {
          xml: /xml/,
          html: /html/,
          json: /json/
        },

        responseFields: {
          xml: "responseXML",
          text: "responseText",
          json: "responseJSON"
        },

        // Data converters
        // Keys separate source (or catchall "*") and destination types with a single space
        converters: {

          // Convert anything to text
          "* text": String,

          // Text to html (true = no transformation)
          "text html": true,

          // Evaluate text as a json expression
          "text json": jQuery.parseJSON,

          // Parse text as xml
          "text xml": jQuery.parseXML
        },

        // For options that shouldn't be deep extended:
        // you can add your own custom options here if
        // and when you create one that shouldn't be
        // deep extended (see ajaxExtend)
        flatOptions: {
          url: true,
          context: true
        }
      },

      // Creates a full fledged settings object into target
      // with both ajaxSettings and settings fields.
      // If target is omitted, writes into ajaxSettings.
      ajaxSetup: function( target, settings ) {
        return settings ?

          // Building a settings object
          ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

          // Extending ajaxSettings
          ajaxExtend( jQuery.ajaxSettings, target );
      },

      ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
      ajaxTransport: addToPrefiltersOrTransports( transports ),

      // Main method
      ajax: function( url, options ) {

        // If url is an object, simulate pre-1.5 signature
        if ( typeof url === "object" ) {
          options = url;
          url = undefined;
        }

        // Force options to be an object
        options = options || {};

        var transport,
        // URL without anti-cache param
          cacheURL,
        // Response headers
          responseHeadersString,
          responseHeaders,
        // timeout handle
          timeoutTimer,
        // Cross-domain detection vars
          parts,
        // To know if global events are to be dispatched
          fireGlobals,
        // Loop variable
          i,
        // Create the final options object
          s = jQuery.ajaxSetup( {}, options ),
        // Callbacks context
          callbackContext = s.context || s,
        // Context for global events is callbackContext if it is a DOM node or jQuery collection
          globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
            jQuery( callbackContext ) :
            jQuery.event,
        // Deferreds
          deferred = jQuery.Deferred(),
          completeDeferred = jQuery.Callbacks("once memory"),
        // Status-dependent callbacks
          statusCode = s.statusCode || {},
        // Headers (they are sent all at once)
          requestHeaders = {},
          requestHeadersNames = {},
        // The jqXHR state
          state = 0,
        // Default abort message
          strAbort = "canceled",
        // Fake xhr
          jqXHR = {
            readyState: 0,

            // Builds headers hashtable if needed
            getResponseHeader: function( key ) {
              var match;
              if ( state === 2 ) {
                if ( !responseHeaders ) {
                  responseHeaders = {};
                  while ( (match = rheaders.exec( responseHeadersString )) ) {
                    responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
                  }
                }
                match = responseHeaders[ key.toLowerCase() ];
              }
              return match == null ? null : match;
            },

            // Raw string
            getAllResponseHeaders: function() {
              return state === 2 ? responseHeadersString : null;
            },

            // Caches the header
            setRequestHeader: function( name, value ) {
              var lname = name.toLowerCase();
              if ( !state ) {
                name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
                requestHeaders[ name ] = value;
              }
              return this;
            },

            // Overrides response content-type header
            overrideMimeType: function( type ) {
              if ( !state ) {
                s.mimeType = type;
              }
              return this;
            },

            // Status-dependent callbacks
            statusCode: function( map ) {
              var code;
              if ( map ) {
                if ( state < 2 ) {
                  for ( code in map ) {
                    // Lazy-add the new callback in a way that preserves old ones
                    statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
                  }
                } else {
                  // Execute the appropriate callbacks
                  jqXHR.always( map[ jqXHR.status ] );
                }
              }
              return this;
            },

            // Cancel the request
            abort: function( statusText ) {
              var finalText = statusText || strAbort;
              if ( transport ) {
                transport.abort( finalText );
              }
              done( 0, finalText );
              return this;
            }
          };

        // Attach deferreds
        deferred.promise( jqXHR ).complete = completeDeferred.add;
        jqXHR.success = jqXHR.done;
        jqXHR.error = jqXHR.fail;

        // Remove hash character (#7531: and string promotion)
        // Add protocol if not provided (prefilters might expect it)
        // Handle falsy url in the settings object (#10093: consistency with old signature)
        // We also use the url parameter if available
        s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" )
          .replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

        // Alias method option to type as per ticket #12004
        s.type = options.method || options.type || s.method || s.type;

        // Extract dataTypes list
        s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

        // A cross-domain request is in order when we have a protocol:host:port mismatch
        if ( s.crossDomain == null ) {
          parts = rurl.exec( s.url.toLowerCase() );
          s.crossDomain = !!( parts &&
            ( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
            ( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
            ( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
          );
        }

        // Convert data if not already a string
        if ( s.data && s.processData && typeof s.data !== "string" ) {
          s.data = jQuery.param( s.data, s.traditional );
        }

        // Apply prefilters
        inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

        // If request was aborted inside a prefilter, stop there
        if ( state === 2 ) {
          return jqXHR;
        }

        // We can fire global events as of now if asked to
        // Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
        fireGlobals = jQuery.event && s.global;

        // Watch for a new set of requests
        if ( fireGlobals && jQuery.active++ === 0 ) {
          jQuery.event.trigger("ajaxStart");
        }

        // Uppercase the type
        s.type = s.type.toUpperCase();

        // Determine if request has content
        s.hasContent = !rnoContent.test( s.type );

        // Save the URL in case we're toying with the If-Modified-Since
        // and/or If-None-Match header later on
        cacheURL = s.url;

        // More options handling for requests with no content
        if ( !s.hasContent ) {

          // If data is available, append data to url
          if ( s.data ) {
            cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
            // #9682: remove data so that it's not used in an eventual retry
            delete s.data;
          }

          // Add anti-cache in url if needed
          if ( s.cache === false ) {
            s.url = rts.test( cacheURL ) ?

              // If there is already a '_' parameter, set its value
              cacheURL.replace( rts, "$1_=" + nonce++ ) :

              // Otherwise add one to the end
            cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
          }
        }

        // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
        if ( s.ifModified ) {
          if ( jQuery.lastModified[ cacheURL ] ) {
            jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
          }
          if ( jQuery.etag[ cacheURL ] ) {
            jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
          }
        }

        // Set the correct header, if data is being sent
        if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
          jqXHR.setRequestHeader( "Content-Type", s.contentType );
        }

        // Set the Accepts header for the server, depending on the dataType
        jqXHR.setRequestHeader(
          "Accept",
          s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
          s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
            s.accepts[ "*" ]
        );

        // Check for headers option
        for ( i in s.headers ) {
          jqXHR.setRequestHeader( i, s.headers[ i ] );
        }

        // Allow custom headers/mimetypes and early abort
        if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
          // Abort if not done already and return
          return jqXHR.abort();
        }

        // Aborting is no longer a cancellation
        strAbort = "abort";

        // Install callbacks on deferreds
        for ( i in { success: 1, error: 1, complete: 1 } ) {
          jqXHR[ i ]( s[ i ] );
        }

        // Get transport
        transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

        // If no transport, we auto-abort
        if ( !transport ) {
          done( -1, "No Transport" );
        } else {
          jqXHR.readyState = 1;

          // Send global event
          if ( fireGlobals ) {
            globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
          }
          // Timeout
          if ( s.async && s.timeout > 0 ) {
            timeoutTimer = setTimeout(function() {
              jqXHR.abort("timeout");
            }, s.timeout );
          }

          try {
            state = 1;
            transport.send( requestHeaders, done );
          } catch ( e ) {
            // Propagate exception as error if not done
            if ( state < 2 ) {
              done( -1, e );
              // Simply rethrow otherwise
            } else {
              throw e;
            }
          }
        }

        // Callback for when everything is done
        function done( status, nativeStatusText, responses, headers ) {
          var isSuccess, success, error, response, modified,
            statusText = nativeStatusText;

          // Called once
          if ( state === 2 ) {
            return;
          }

          // State is "done" now
          state = 2;

          // Clear timeout if it exists
          if ( timeoutTimer ) {
            clearTimeout( timeoutTimer );
          }

          // Dereference transport for early garbage collection
          // (no matter how long the jqXHR object will be used)
          transport = undefined;

          // Cache response headers
          responseHeadersString = headers || "";

          // Set readyState
          jqXHR.readyState = status > 0 ? 4 : 0;

          // Determine if successful
          isSuccess = status >= 200 && status < 300 || status === 304;

          // Get response data
          if ( responses ) {
            response = ajaxHandleResponses( s, jqXHR, responses );
          }

          // Convert no matter what (that way responseXXX fields are always set)
          response = ajaxConvert( s, response, jqXHR, isSuccess );

          // If successful, handle type chaining
          if ( isSuccess ) {

            // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
            if ( s.ifModified ) {
              modified = jqXHR.getResponseHeader("Last-Modified");
              if ( modified ) {
                jQuery.lastModified[ cacheURL ] = modified;
              }
              modified = jqXHR.getResponseHeader("etag");
              if ( modified ) {
                jQuery.etag[ cacheURL ] = modified;
              }
            }

            // if no content
            if ( status === 204 || s.type === "HEAD" ) {
              statusText = "nocontent";

              // if not modified
            } else if ( status === 304 ) {
              statusText = "notmodified";

              // If we have data, let's convert it
            } else {
              statusText = response.state;
              success = response.data;
              error = response.error;
              isSuccess = !error;
            }
          } else {
            // Extract error from statusText and normalize for non-aborts
            error = statusText;
            if ( status || !statusText ) {
              statusText = "error";
              if ( status < 0 ) {
                status = 0;
              }
            }
          }

          // Set data for the fake xhr object
          jqXHR.status = status;
          jqXHR.statusText = ( nativeStatusText || statusText ) + "";

          // Success/Error
          if ( isSuccess ) {
            deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
          } else {
            deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
          }

          // Status-dependent callbacks
          jqXHR.statusCode( statusCode );
          statusCode = undefined;

          if ( fireGlobals ) {
            globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
              [ jqXHR, s, isSuccess ? success : error ] );
          }

          // Complete
          completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

          if ( fireGlobals ) {
            globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
            // Handle the global AJAX counter
            if ( !( --jQuery.active ) ) {
              jQuery.event.trigger("ajaxStop");
            }
          }
        }

        return jqXHR;
      },

      getJSON: function( url, data, callback ) {
        return jQuery.get( url, data, callback, "json" );
      },

      getScript: function( url, callback ) {
        return jQuery.get( url, undefined, callback, "script" );
      }
    });

    jQuery.each( [ "get", "post" ], function( i, method ) {
      jQuery[ method ] = function( url, data, callback, type ) {
        // Shift arguments if data argument was omitted
        if ( jQuery.isFunction( data ) ) {
          type = type || callback;
          callback = data;
          data = undefined;
        }

        return jQuery.ajax({
          url: url,
          type: method,
          dataType: type,
          data: data,
          success: callback
        });
      };
    });


    jQuery._evalUrl = function( url ) {
      return jQuery.ajax({
        url: url,
        type: "GET",
        dataType: "script",
        async: false,
        global: false,
        "throws": true
      });
    };


    jQuery.fn.extend({
      wrapAll: function( html ) {
        var wrap;

        if ( jQuery.isFunction( html ) ) {
          return this.each(function( i ) {
            jQuery( this ).wrapAll( html.call(this, i) );
          });
        }

        if ( this[ 0 ] ) {

          // The elements to wrap the target around
          wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

          if ( this[ 0 ].parentNode ) {
            wrap.insertBefore( this[ 0 ] );
          }

          wrap.map(function() {
            var elem = this;

            while ( elem.firstElementChild ) {
              elem = elem.firstElementChild;
            }

            return elem;
          }).append( this );
        }

        return this;
      },

      wrapInner: function( html ) {
        if ( jQuery.isFunction( html ) ) {
          return this.each(function( i ) {
            jQuery( this ).wrapInner( html.call(this, i) );
          });
        }

        return this.each(function() {
          var self = jQuery( this ),
            contents = self.contents();

          if ( contents.length ) {
            contents.wrapAll( html );

          } else {
            self.append( html );
          }
        });
      },

      wrap: function( html ) {
        var isFunction = jQuery.isFunction( html );

        return this.each(function( i ) {
          jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
        });
      },

      unwrap: function() {
        return this.parent().each(function() {
          if ( !jQuery.nodeName( this, "body" ) ) {
            jQuery( this ).replaceWith( this.childNodes );
          }
        }).end();
      }
    });


    jQuery.expr.filters.hidden = function( elem ) {
      // Support: Opera <= 12.12
      // Opera reports offsetWidths and offsetHeights less than zero on some elements
      return elem.offsetWidth <= 0 && elem.offsetHeight <= 0;
    };
    jQuery.expr.filters.visible = function( elem ) {
      return !jQuery.expr.filters.hidden( elem );
    };




    var r20 = /%20/g,
      rbracket = /\[\]$/,
      rCRLF = /\r?\n/g,
      rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
      rsubmittable = /^(?:input|select|textarea|keygen)/i;

    function buildParams( prefix, obj, traditional, add ) {
      var name;

      if ( jQuery.isArray( obj ) ) {
        // Serialize array item.
        jQuery.each( obj, function( i, v ) {
          if ( traditional || rbracket.test( prefix ) ) {
            // Treat each array item as a scalar.
            add( prefix, v );

          } else {
            // Item is non-scalar (array or object), encode its numeric index.
            buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
          }
        });

      } else if ( !traditional && jQuery.type( obj ) === "object" ) {
        // Serialize object item.
        for ( name in obj ) {
          buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
        }

      } else {
        // Serialize scalar item.
        add( prefix, obj );
      }
    }

    // Serialize an array of form elements or a set of
    // key/values into a query string
    jQuery.param = function( a, traditional ) {
      var prefix,
        s = [],
        add = function( key, value ) {
          // If value is a function, invoke it and return its value
          value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
          s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
        };

      // Set traditional to true for jQuery <= 1.3.2 behavior.
      if ( traditional === undefined ) {
        traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
      }

      // If an array was passed in, assume that it is an array of form elements.
      if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
        // Serialize the form elements
        jQuery.each( a, function() {
          add( this.name, this.value );
        });

      } else {
        // If traditional, encode the "old" way (the way 1.3.2 or older
        // did it), otherwise encode params recursively.
        for ( prefix in a ) {
          buildParams( prefix, a[ prefix ], traditional, add );
        }
      }

      // Return the resulting serialization
      return s.join( "&" ).replace( r20, "+" );
    };

    jQuery.fn.extend({
      serialize: function() {
        return jQuery.param( this.serializeArray() );
      },
      serializeArray: function() {
        return this.map(function() {
            // Can add propHook for "elements" to filter or add form elements
            var elements = jQuery.prop( this, "elements" );
            return elements ? jQuery.makeArray( elements ) : this;
          })
          .filter(function() {
            var type = this.type;

            // Use .is( ":disabled" ) so that fieldset[disabled] works
            return this.name && !jQuery( this ).is( ":disabled" ) &&
              rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
              ( this.checked || !rcheckableType.test( type ) );
          })
          .map(function( i, elem ) {
            var val = jQuery( this ).val();

            return val == null ?
              null :
              jQuery.isArray( val ) ?
                jQuery.map( val, function( val ) {
                  return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
                }) :
              { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
          }).get();
      }
    });


    jQuery.ajaxSettings.xhr = function() {
      try {
        return new XMLHttpRequest();
      } catch( e ) {}
    };

    var xhrId = 0,
      xhrCallbacks = {},
      xhrSuccessStatus = {
        // file protocol always yields status code 0, assume 200
        0: 200,
        // Support: IE9
        // #1450: sometimes IE returns 1223 when it should be 204
        1223: 204
      },
      xhrSupported = jQuery.ajaxSettings.xhr();

    // Support: IE9
    // Open requests must be manually aborted on unload (#5280)
    // See https://support.microsoft.com/kb/2856746 for more info
    if ( window.attachEvent ) {
      window.attachEvent( "onunload", function() {
        for ( var key in xhrCallbacks ) {
          xhrCallbacks[ key ]();
        }
      });
    }

    support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
    support.ajax = xhrSupported = !!xhrSupported;

    jQuery.ajaxTransport(function( options ) {
      var callback;

      // Cross domain only allowed if supported through XMLHttpRequest
      if ( support.cors || xhrSupported && !options.crossDomain ) {
        return {
          send: function( headers, complete ) {
            var i,
              xhr = options.xhr(),
              id = ++xhrId;

            xhr.open( options.type, options.url, options.async, options.username, options.password );

            // Apply custom fields if provided
            if ( options.xhrFields ) {
              for ( i in options.xhrFields ) {
                xhr[ i ] = options.xhrFields[ i ];
              }
            }

            // Override mime type if needed
            if ( options.mimeType && xhr.overrideMimeType ) {
              xhr.overrideMimeType( options.mimeType );
            }

            // X-Requested-With header
            // For cross-domain requests, seeing as conditions for a preflight are
            // akin to a jigsaw puzzle, we simply never set it to be sure.
            // (it can always be set on a per-request basis or even using ajaxSetup)
            // For same-domain requests, won't change header if already provided.
            if ( !options.crossDomain && !headers["X-Requested-With"] ) {
              headers["X-Requested-With"] = "XMLHttpRequest";
            }

            // Set headers
            for ( i in headers ) {
              xhr.setRequestHeader( i, headers[ i ] );
            }

            // Callback
            callback = function( type ) {
              return function() {
                if ( callback ) {
                  delete xhrCallbacks[ id ];
                  callback = xhr.onload = xhr.onerror = null;

                  if ( type === "abort" ) {
                    xhr.abort();
                  } else if ( type === "error" ) {
                    complete(
                      // file: protocol always yields status 0; see #8605, #14207
                      xhr.status,
                      xhr.statusText
                    );
                  } else {
                    complete(
                      xhrSuccessStatus[ xhr.status ] || xhr.status,
                      xhr.statusText,
                      // Support: IE9
                      // Accessing binary-data responseText throws an exception
                      // (#11426)
                      typeof xhr.responseText === "string" ? {
                        text: xhr.responseText
                      } : undefined,
                      xhr.getAllResponseHeaders()
                    );
                  }
                }
              };
            };

            // Listen to events
            xhr.onload = callback();
            xhr.onerror = callback("error");

            // Create the abort callback
            callback = xhrCallbacks[ id ] = callback("abort");

            try {
              // Do send the request (this may raise an exception)
              xhr.send( options.hasContent && options.data || null );
            } catch ( e ) {
              // #14683: Only rethrow if this hasn't been notified as an error yet
              if ( callback ) {
                throw e;
              }
            }
          },

          abort: function() {
            if ( callback ) {
              callback();
            }
          }
        };
      }
    });




    // Install script dataType
    jQuery.ajaxSetup({
      accepts: {
        script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
      },
      contents: {
        script: /(?:java|ecma)script/
      },
      converters: {
        "text script": function( text ) {
          jQuery.globalEval( text );
          return text;
        }
      }
    });

    // Handle cache's special case and crossDomain
    jQuery.ajaxPrefilter( "script", function( s ) {
      if ( s.cache === undefined ) {
        s.cache = false;
      }
      if ( s.crossDomain ) {
        s.type = "GET";
      }
    });

    // Bind script tag hack transport
    jQuery.ajaxTransport( "script", function( s ) {
      // This transport only deals with cross domain requests
      if ( s.crossDomain ) {
        var script, callback;
        return {
          send: function( _, complete ) {
            script = jQuery("<script>").prop({
              async: true,
              charset: s.scriptCharset,
              src: s.url
            }).on(
              "load error",
              callback = function( evt ) {
                script.remove();
                callback = null;
                if ( evt ) {
                  complete( evt.type === "error" ? 404 : 200, evt.type );
                }
              }
            );
            document.head.appendChild( script[ 0 ] );
          },
          abort: function() {
            if ( callback ) {
              callback();
            }
          }
        };
      }
    });




    var oldCallbacks = [],
      rjsonp = /(=)\?(?=&|$)|\?\?/;

    // Default jsonp settings
    jQuery.ajaxSetup({
      jsonp: "callback",
      jsonpCallback: function() {
        var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
        this[ callback ] = true;
        return callback;
      }
    });

    // Detect, normalize options and install callbacks for jsonp requests
    jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

      var callbackName, overwritten, responseContainer,
        jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
              "url" :
            typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
          );

      // Handle iff the expected data type is "jsonp" or we have a parameter to set
      if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

        // Get callback name, remembering preexisting value associated with it
        callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
          s.jsonpCallback() :
          s.jsonpCallback;

        // Insert callback into url or form data
        if ( jsonProp ) {
          s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
        } else if ( s.jsonp !== false ) {
          s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
        }

        // Use data converter to retrieve json after script execution
        s.converters["script json"] = function() {
          if ( !responseContainer ) {
            jQuery.error( callbackName + " was not called" );
          }
          return responseContainer[ 0 ];
        };

        // force json dataType
        s.dataTypes[ 0 ] = "json";

        // Install callback
        overwritten = window[ callbackName ];
        window[ callbackName ] = function() {
          responseContainer = arguments;
        };

        // Clean-up function (fires after converters)
        jqXHR.always(function() {
          // Restore preexisting value
          window[ callbackName ] = overwritten;

          // Save back as free
          if ( s[ callbackName ] ) {
            // make sure that re-using the options doesn't screw things around
            s.jsonpCallback = originalSettings.jsonpCallback;

            // save the callback name for future use
            oldCallbacks.push( callbackName );
          }

          // Call if it was a function and we have a response
          if ( responseContainer && jQuery.isFunction( overwritten ) ) {
            overwritten( responseContainer[ 0 ] );
          }

          responseContainer = overwritten = undefined;
        });

        // Delegate to script
        return "script";
      }
    });




    // data: string of html
    // context (optional): If specified, the fragment will be created in this context, defaults to document
    // keepScripts (optional): If true, will include scripts passed in the html string
    jQuery.parseHTML = function( data, context, keepScripts ) {
      if ( !data || typeof data !== "string" ) {
        return null;
      }
      if ( typeof context === "boolean" ) {
        keepScripts = context;
        context = false;
      }
      context = context || document;

      var parsed = rsingleTag.exec( data ),
        scripts = !keepScripts && [];

      // Single tag
      if ( parsed ) {
        return [ context.createElement( parsed[1] ) ];
      }

      parsed = jQuery.buildFragment( [ data ], context, scripts );

      if ( scripts && scripts.length ) {
        jQuery( scripts ).remove();
      }

      return jQuery.merge( [], parsed.childNodes );
    };


    // Keep a copy of the old load method
    var _load = jQuery.fn.load;

    /**
     * Load a url into a page
     */
    jQuery.fn.load = function( url, params, callback ) {
      if ( typeof url !== "string" && _load ) {
        return _load.apply( this, arguments );
      }

      var selector, type, response,
        self = this,
        off = url.indexOf(" ");

      if ( off >= 0 ) {
        selector = jQuery.trim( url.slice( off ) );
        url = url.slice( 0, off );
      }

      // If it's a function
      if ( jQuery.isFunction( params ) ) {

        // We assume that it's the callback
        callback = params;
        params = undefined;

        // Otherwise, build a param string
      } else if ( params && typeof params === "object" ) {
        type = "POST";
      }

      // If we have elements to modify, make the request
      if ( self.length > 0 ) {
        jQuery.ajax({
          url: url,

          // if "type" variable is undefined, then "GET" method will be used
          type: type,
          dataType: "html",
          data: params
        }).done(function( responseText ) {

          // Save response for use in complete callback
          response = arguments;

          self.html( selector ?

            // If a selector was specified, locate the right elements in a dummy div
            // Exclude scripts to avoid IE 'Permission Denied' errors
            jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :

            // Otherwise use the full result
            responseText );

        }).complete( callback && function( jqXHR, status ) {
            self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
          });
      }

      return this;
    };




    // Attach a bunch of functions for handling common AJAX events
    jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ) {
      jQuery.fn[ type ] = function( fn ) {
        return this.on( type, fn );
      };
    });




    jQuery.expr.filters.animated = function( elem ) {
      return jQuery.grep(jQuery.timers, function( fn ) {
        return elem === fn.elem;
      }).length;
    };




    var docElem = window.document.documentElement;

    /**
     * Gets a window from an element
     */
    function getWindow( elem ) {
      return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
    }

    jQuery.offset = {
      setOffset: function( elem, options, i ) {
        var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
          position = jQuery.css( elem, "position" ),
          curElem = jQuery( elem ),
          props = {};

        // Set position first, in-case top/left are set even on static elem
        if ( position === "static" ) {
          elem.style.position = "relative";
        }

        curOffset = curElem.offset();
        curCSSTop = jQuery.css( elem, "top" );
        curCSSLeft = jQuery.css( elem, "left" );
        calculatePosition = ( position === "absolute" || position === "fixed" ) &&
          ( curCSSTop + curCSSLeft ).indexOf("auto") > -1;

        // Need to be able to calculate position if either
        // top or left is auto and position is either absolute or fixed
        if ( calculatePosition ) {
          curPosition = curElem.position();
          curTop = curPosition.top;
          curLeft = curPosition.left;

        } else {
          curTop = parseFloat( curCSSTop ) || 0;
          curLeft = parseFloat( curCSSLeft ) || 0;
        }

        if ( jQuery.isFunction( options ) ) {
          options = options.call( elem, i, curOffset );
        }

        if ( options.top != null ) {
          props.top = ( options.top - curOffset.top ) + curTop;
        }
        if ( options.left != null ) {
          props.left = ( options.left - curOffset.left ) + curLeft;
        }

        if ( "using" in options ) {
          options.using.call( elem, props );

        } else {
          curElem.css( props );
        }
      }
    };

    jQuery.fn.extend({
      offset: function( options ) {
        if ( arguments.length ) {
          return options === undefined ?
            this :
            this.each(function( i ) {
              jQuery.offset.setOffset( this, options, i );
            });
        }

        var docElem, win,
          elem = this[ 0 ],
          box = { top: 0, left: 0 },
          doc = elem && elem.ownerDocument;

        if ( !doc ) {
          return;
        }

        docElem = doc.documentElement;

        // Make sure it's not a disconnected DOM node
        if ( !jQuery.contains( docElem, elem ) ) {
          return box;
        }

        // Support: BlackBerry 5, iOS 3 (original iPhone)
        // If we don't have gBCR, just use 0,0 rather than error
        if ( typeof elem.getBoundingClientRect !== strundefined ) {
          box = elem.getBoundingClientRect();
        }
        win = getWindow( doc );
        return {
          top: box.top + win.pageYOffset - docElem.clientTop,
          left: box.left + win.pageXOffset - docElem.clientLeft
        };
      },

      position: function() {
        if ( !this[ 0 ] ) {
          return;
        }

        var offsetParent, offset,
          elem = this[ 0 ],
          parentOffset = { top: 0, left: 0 };

        // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent
        if ( jQuery.css( elem, "position" ) === "fixed" ) {
          // Assume getBoundingClientRect is there when computed position is fixed
          offset = elem.getBoundingClientRect();

        } else {
          // Get *real* offsetParent
          offsetParent = this.offsetParent();

          // Get correct offsets
          offset = this.offset();
          if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
            parentOffset = offsetParent.offset();
          }

          // Add offsetParent borders
          parentOffset.top += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
          parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
        }

        // Subtract parent offsets and element margins
        return {
          top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
          left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
        };
      },

      offsetParent: function() {
        return this.map(function() {
          var offsetParent = this.offsetParent || docElem;

          while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position" ) === "static" ) ) {
            offsetParent = offsetParent.offsetParent;
          }

          return offsetParent || docElem;
        });
      }
    });

    // Create scrollLeft and scrollTop methods
    jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
      var top = "pageYOffset" === prop;

      jQuery.fn[ method ] = function( val ) {
        return access( this, function( elem, method, val ) {
          var win = getWindow( elem );

          if ( val === undefined ) {
            return win ? win[ prop ] : elem[ method ];
          }

          if ( win ) {
            win.scrollTo(
              !top ? val : window.pageXOffset,
              top ? val : window.pageYOffset
            );

          } else {
            elem[ method ] = val;
          }
        }, method, val, arguments.length, null );
      };
    });

    // Support: Safari<7+, Chrome<37+
    // Add the top/left cssHooks using jQuery.fn.position
    // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
    // Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280
    // getComputedStyle returns percent when specified for top/left/bottom/right;
    // rather than make the css module depend on the offset module, just check for it here
    jQuery.each( [ "top", "left" ], function( i, prop ) {
      jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
        function( elem, computed ) {
          if ( computed ) {
            computed = curCSS( elem, prop );
            // If curCSS returns percentage, fallback to offset
            return rnumnonpx.test( computed ) ?
            jQuery( elem ).position()[ prop ] + "px" :
              computed;
          }
        }
      );
    });


    // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
    jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
      jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
        // Margin is only for outerHeight, outerWidth
        jQuery.fn[ funcName ] = function( margin, value ) {
          var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
            extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

          return access( this, function( elem, type, value ) {
            var doc;

            if ( jQuery.isWindow( elem ) ) {
              // As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
              // isn't a whole lot we can do. See pull request at this URL for discussion:
              // https://github.com/jquery/jquery/pull/764
              return elem.document.documentElement[ "client" + name ];
            }

            // Get document width or height
            if ( elem.nodeType === 9 ) {
              doc = elem.documentElement;

              // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
              // whichever is greatest
              return Math.max(
                elem.body[ "scroll" + name ], doc[ "scroll" + name ],
                elem.body[ "offset" + name ], doc[ "offset" + name ],
                doc[ "client" + name ]
              );
            }

            return value === undefined ?
              // Get width or height on the element, requesting but not forcing parseFloat
              jQuery.css( elem, type, extra ) :

              // Set width or height on the element
              jQuery.style( elem, type, value, extra );
          }, type, chainable ? margin : undefined, chainable, null );
        };
      });
    });


    // The number of elements contained in the matched element set
    jQuery.fn.size = function() {
      return this.length;
    };

    jQuery.fn.andSelf = jQuery.fn.addBack;




    // Register as a named AMD module, since jQuery can be concatenated with other
    // files that may use define, but not via a proper concatenation script that
    // understands anonymous AMD modules. A named AMD is safest and most robust
    // way to register. Lowercase jquery is used because AMD module names are
    // derived from file names, and jQuery is normally delivered in a lowercase
    // file name. Do this after creating the global so that if an AMD module wants
    // to call noConflict to hide this version of jQuery, it will work.

    // Note that for maximum portability, libraries that are not jQuery should
    // declare themselves as anonymous modules, and avoid setting a global if an
    // AMD loader is present. jQuery is a special case. For more information, see
    // https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

    if ( typeof define === "function" && define.amd ) {
      define( "jquery", [], function() {
        return jQuery;
      });
    }




    var
    // Map over jQuery in case of overwrite
      _jQuery = window.jQuery,

    // Map over the $ in case of overwrite
      _$ = window.$;

    jQuery.noConflict = function( deep ) {
      if ( window.$ === jQuery ) {
        window.$ = _$;
      }

      if ( deep && window.jQuery === jQuery ) {
        window.jQuery = _jQuery;
      }

      return jQuery;
    };

    // Expose jQuery and $ identifiers, even in AMD
    // (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
    // and CommonJS for browser emulators (#13566)
    if ( typeof noGlobal === strundefined ) {
      window.jQuery = window.$ = jQuery;
    }




    return jQuery;

  }));

},{}],48:[function(require,module,exports){
  /**
   * Copyright 2013-2014 Facebook, Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *
   */

  "use strict";

  /**
   * Constructs an enumeration with keys equal to their value.
   *
   * For example:
   *
   *   var COLORS = keyMirror({blue: null, red: null});
   *   var myColor = COLORS.blue;
   *   var isColorValid = !!COLORS[myColor];
   *
   * The last line could not be performed if the values of the generated enum were
   * not equal to their keys.
   *
   *   Input:  {key1: val1, key2: val2}
   *   Output: {key1: key1, key2: key2}
   *
   * @param {object} obj
   * @return {object}
   */
  var keyMirror = function(obj) {
    var ret = {};
    var key;
    if (!(obj instanceof Object && !Array.isArray(obj))) {
      throw new Error('keyMirror(...): Argument must be an object.');
    }
    for (key in obj) {
      if (!obj.hasOwnProperty(key)) {
        continue;
      }
      ret[key] = key;
    }
    return ret;
  };

  module.exports = keyMirror;

},{}],49:[function(require,module,exports){
  /**
   * Gets the last element of `array`.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array to query.
   * @returns {*} Returns the last element of `array`.
   * @example
   *
   * _.last([1, 2, 3]);
   * // => 3
   */
  function last(array) {
    var length = array ? array.length : 0;
    return length ? array[length - 1] : undefined;
  }

  module.exports = last;

},{}],50:[function(require,module,exports){
  var baseEach = require('../internal/baseEach'),
    createFind = require('../internal/createFind');

  /**
   * Iterates over elements of `collection`, returning the first element
   * `predicate` returns truthy for. The predicate is bound to `thisArg` and
   * invoked with three arguments: (value, index|key, collection).
   *
   * If a property name is provided for `predicate` the created `_.property`
   * style callback returns the property value of the given element.
   *
   * If a value is also provided for `thisArg` the created `_.matchesProperty`
   * style callback returns `true` for elements that have a matching property
   * value, else `false`.
   *
   * If an object is provided for `predicate` the created `_.matches` style
   * callback returns `true` for elements that have the properties of the given
   * object, else `false`.
   *
   * @static
   * @memberOf _
   * @alias detect
   * @category Collection
   * @param {Array|Object|string} collection The collection to search.
   * @param {Function|Object|string} [predicate=_.identity] The function invoked
   *  per iteration.
   * @param {*} [thisArg] The `this` binding of `predicate`.
   * @returns {*} Returns the matched element, else `undefined`.
   * @example
   *
   * var users = [
   *   { 'user': 'barney',  'age': 36, 'active': true },
   *   { 'user': 'fred',    'age': 40, 'active': false },
   *   { 'user': 'pebbles', 'age': 1,  'active': true }
   * ];
   *
   * _.result(_.find(users, function(chr) {
 *   return chr.age < 40;
 * }), 'user');
   * // => 'barney'
   *
   * // using the `_.matches` callback shorthand
   * _.result(_.find(users, { 'age': 1, 'active': true }), 'user');
   * // => 'pebbles'
   *
   * // using the `_.matchesProperty` callback shorthand
   * _.result(_.find(users, 'active', false), 'user');
   * // => 'fred'
   *
   * // using the `_.property` callback shorthand
   * _.result(_.find(users, 'active'), 'user');
   * // => 'barney'
   */
  var find = createFind(baseEach);

  module.exports = find;

},{"../internal/baseEach":59,"../internal/createFind":83}],51:[function(require,module,exports){
  /** Used as the `TypeError` message for "Functions" methods. */
  var FUNC_ERROR_TEXT = 'Expected a function';

  /* Native method references for those with the same name as other `lodash` methods. */
  var nativeMax = Math.max;

  /**
   * Creates a function that invokes `func` with the `this` binding of the
   * created function and arguments from `start` and beyond provided as an array.
   *
   * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/Web/JavaScript/Reference/Functions/rest_parameters).
   *
   * @static
   * @memberOf _
   * @category Function
   * @param {Function} func The function to apply a rest parameter to.
   * @param {number} [start=func.length-1] The start position of the rest parameter.
   * @returns {Function} Returns the new function.
   * @example
   *
   * var say = _.restParam(function(what, names) {
 *   return what + ' ' + _.initial(names).join(', ') +
 *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
 * });
   *
   * say('hello', 'fred', 'barney', 'pebbles');
   * // => 'hello fred, barney, & pebbles'
   */
  function restParam(func, start) {
    if (typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);
    return function() {
      var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        rest = Array(length);

      while (++index < length) {
        rest[index] = args[start + index];
      }
      switch (start) {
        case 0: return func.call(this, rest);
        case 1: return func.call(this, args[0], rest);
        case 2: return func.call(this, args[0], args[1], rest);
      }
      var otherArgs = Array(start + 1);
      index = -1;
      while (++index < start) {
        otherArgs[index] = args[index];
      }
      otherArgs[start] = rest;
      return func.apply(this, otherArgs);
    };
  }

  module.exports = restParam;

},{}],52:[function(require,module,exports){
  (function (global){
    /**
     * @license
     * lodash 3.10.1 (Custom Build) <https://lodash.com/>
     * Build: `lodash modern -d -o ./index.js`
     * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
     * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
     * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
     * Available under MIT license <https://lodash.com/license>
     */
    ;(function() {

      /** Used as a safe reference for `undefined` in pre-ES5 environments. */
      var undefined;

      /** Used as the semantic version number. */
      var VERSION = '3.10.1';

      /** Used to compose bitmasks for wrapper metadata. */
      var BIND_FLAG = 1,
        BIND_KEY_FLAG = 2,
        CURRY_BOUND_FLAG = 4,
        CURRY_FLAG = 8,
        CURRY_RIGHT_FLAG = 16,
        PARTIAL_FLAG = 32,
        PARTIAL_RIGHT_FLAG = 64,
        ARY_FLAG = 128,
        REARG_FLAG = 256;

      /** Used as default options for `_.trunc`. */
      var DEFAULT_TRUNC_LENGTH = 30,
        DEFAULT_TRUNC_OMISSION = '...';

      /** Used to detect when a function becomes hot. */
      var HOT_COUNT = 150,
        HOT_SPAN = 16;

      /** Used as the size to enable large array optimizations. */
      var LARGE_ARRAY_SIZE = 200;

      /** Used to indicate the type of lazy iteratees. */
      var LAZY_FILTER_FLAG = 1,
        LAZY_MAP_FLAG = 2;

      /** Used as the `TypeError` message for "Functions" methods. */
      var FUNC_ERROR_TEXT = 'Expected a function';

      /** Used as the internal argument placeholder. */
      var PLACEHOLDER = '__lodash_placeholder__';

      /** `Object#toString` result references. */
      var argsTag = '[object Arguments]',
        arrayTag = '[object Array]',
        boolTag = '[object Boolean]',
        dateTag = '[object Date]',
        errorTag = '[object Error]',
        funcTag = '[object Function]',
        mapTag = '[object Map]',
        numberTag = '[object Number]',
        objectTag = '[object Object]',
        regexpTag = '[object RegExp]',
        setTag = '[object Set]',
        stringTag = '[object String]',
        weakMapTag = '[object WeakMap]';

      var arrayBufferTag = '[object ArrayBuffer]',
        float32Tag = '[object Float32Array]',
        float64Tag = '[object Float64Array]',
        int8Tag = '[object Int8Array]',
        int16Tag = '[object Int16Array]',
        int32Tag = '[object Int32Array]',
        uint8Tag = '[object Uint8Array]',
        uint8ClampedTag = '[object Uint8ClampedArray]',
        uint16Tag = '[object Uint16Array]',
        uint32Tag = '[object Uint32Array]';

      /** Used to match empty string literals in compiled template source. */
      var reEmptyStringLeading = /\b__p \+= '';/g,
        reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
        reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

      /** Used to match HTML entities and HTML characters. */
      var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,
        reUnescapedHtml = /[&<>"'`]/g,
        reHasEscapedHtml = RegExp(reEscapedHtml.source),
        reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

      /** Used to match template delimiters. */
      var reEscape = /<%-([\s\S]+?)%>/g,
        reEvaluate = /<%([\s\S]+?)%>/g,
        reInterpolate = /<%=([\s\S]+?)%>/g;

      /** Used to match property names within property paths. */
      var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\n\\]|\\.)*?\1)\]/,
        reIsPlainProp = /^\w*$/,
        rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g;

      /**
       * Used to match `RegExp` [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns)
       * and those outlined by [`EscapeRegExpPattern`](http://ecma-international.org/ecma-262/6.0/#sec-escaperegexppattern).
       */
      var reRegExpChars = /^[:!,]|[\\^$.*+?()[\]{}|\/]|(^[0-9a-fA-Fnrtuvx])|([\n\r\u2028\u2029])/g,
        reHasRegExpChars = RegExp(reRegExpChars.source);

      /** Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks). */
      var reComboMark = /[\u0300-\u036f\ufe20-\ufe23]/g;

      /** Used to match backslashes in property paths. */
      var reEscapeChar = /\\(\\)?/g;

      /** Used to match [ES template delimiters](http://ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components). */
      var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

      /** Used to match `RegExp` flags from their coerced string values. */
      var reFlags = /\w*$/;

      /** Used to detect hexadecimal string values. */
      var reHasHexPrefix = /^0[xX]/;

      /** Used to detect host constructors (Safari > 5). */
      var reIsHostCtor = /^\[object .+?Constructor\]$/;

      /** Used to detect unsigned integer values. */
      var reIsUint = /^\d+$/;

      /** Used to match latin-1 supplementary letters (excluding mathematical operators). */
      var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;

      /** Used to ensure capturing order of template delimiters. */
      var reNoMatch = /($^)/;

      /** Used to match unescaped characters in compiled string literals. */
      var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

      /** Used to match words to create compound words. */
      var reWords = (function() {
        var upper = '[A-Z\\xc0-\\xd6\\xd8-\\xde]',
          lower = '[a-z\\xdf-\\xf6\\xf8-\\xff]+';

        return RegExp(upper + '+(?=' + upper + lower + ')|' + upper + '?' + lower + '|' + upper + '+|[0-9]+', 'g');
      }());

      /** Used to assign default `context` object properties. */
      var contextProps = [
        'Array', 'ArrayBuffer', 'Date', 'Error', 'Float32Array', 'Float64Array',
        'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Math', 'Number',
        'Object', 'RegExp', 'Set', 'String', '_', 'clearTimeout', 'isFinite',
        'parseFloat', 'parseInt', 'setTimeout', 'TypeError', 'Uint8Array',
        'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap'
      ];

      /** Used to make template sourceURLs easier to identify. */
      var templateCounter = -1;

      /** Used to identify `toStringTag` values of typed arrays. */
      var typedArrayTags = {};
      typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
        typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
          typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
            typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
              typedArrayTags[uint32Tag] = true;
      typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
        typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
          typedArrayTags[dateTag] = typedArrayTags[errorTag] =
            typedArrayTags[funcTag] = typedArrayTags[mapTag] =
              typedArrayTags[numberTag] = typedArrayTags[objectTag] =
                typedArrayTags[regexpTag] = typedArrayTags[setTag] =
                  typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

      /** Used to identify `toStringTag` values supported by `_.clone`. */
      var cloneableTags = {};
      cloneableTags[argsTag] = cloneableTags[arrayTag] =
        cloneableTags[arrayBufferTag] = cloneableTags[boolTag] =
          cloneableTags[dateTag] = cloneableTags[float32Tag] =
            cloneableTags[float64Tag] = cloneableTags[int8Tag] =
              cloneableTags[int16Tag] = cloneableTags[int32Tag] =
                cloneableTags[numberTag] = cloneableTags[objectTag] =
                  cloneableTags[regexpTag] = cloneableTags[stringTag] =
                    cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
                      cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
      cloneableTags[errorTag] = cloneableTags[funcTag] =
        cloneableTags[mapTag] = cloneableTags[setTag] =
          cloneableTags[weakMapTag] = false;

      /** Used to map latin-1 supplementary letters to basic latin letters. */
      var deburredLetters = {
        '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
        '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
        '\xc7': 'C',  '\xe7': 'c',
        '\xd0': 'D',  '\xf0': 'd',
        '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
        '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
        '\xcC': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
        '\xeC': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
        '\xd1': 'N',  '\xf1': 'n',
        '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
        '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
        '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
        '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
        '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
        '\xc6': 'Ae', '\xe6': 'ae',
        '\xde': 'Th', '\xfe': 'th',
        '\xdf': 'ss'
      };

      /** Used to map characters to HTML entities. */
      var htmlEscapes = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#39;',
        '`': '&#96;'
      };

      /** Used to map HTML entities to characters. */
      var htmlUnescapes = {
        '&amp;': '&',
        '&lt;': '<',
        '&gt;': '>',
        '&quot;': '"',
        '&#39;': "'",
        '&#96;': '`'
      };

      /** Used to determine if values are of the language type `Object`. */
      var objectTypes = {
        'function': true,
        'object': true
      };

      /** Used to escape characters for inclusion in compiled regexes. */
      var regexpEscapes = {
        '0': 'x30', '1': 'x31', '2': 'x32', '3': 'x33', '4': 'x34',
        '5': 'x35', '6': 'x36', '7': 'x37', '8': 'x38', '9': 'x39',
        'A': 'x41', 'B': 'x42', 'C': 'x43', 'D': 'x44', 'E': 'x45', 'F': 'x46',
        'a': 'x61', 'b': 'x62', 'c': 'x63', 'd': 'x64', 'e': 'x65', 'f': 'x66',
        'n': 'x6e', 'r': 'x72', 't': 'x74', 'u': 'x75', 'v': 'x76', 'x': 'x78'
      };

      /** Used to escape characters for inclusion in compiled string literals. */
      var stringEscapes = {
        '\\': '\\',
        "'": "'",
        '\n': 'n',
        '\r': 'r',
        '\u2028': 'u2028',
        '\u2029': 'u2029'
      };

      /** Detect free variable `exports`. */
      var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

      /** Detect free variable `module`. */
      var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

      /** Detect free variable `global` from Node.js. */
      var freeGlobal = freeExports && freeModule && typeof global == 'object' && global && global.Object && global;

      /** Detect free variable `self`. */
      var freeSelf = objectTypes[typeof self] && self && self.Object && self;

      /** Detect free variable `window`. */
      var freeWindow = objectTypes[typeof window] && window && window.Object && window;

      /** Detect the popular CommonJS extension `module.exports`. */
      var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;

      /**
       * Used as a reference to the global object.
       *
       * The `this` value is used if it's the global object to avoid Greasemonkey's
       * restricted `window` object, otherwise the `window` object is used.
       */
      var root = freeGlobal || ((freeWindow !== (this && this.window)) && freeWindow) || freeSelf || this;

      /*--------------------------------------------------------------------------*/

      /**
       * The base implementation of `compareAscending` which compares values and
       * sorts them in ascending order without guaranteeing a stable sort.
       *
       * @private
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {number} Returns the sort order indicator for `value`.
       */
      function baseCompareAscending(value, other) {
        if (value !== other) {
          var valIsNull = value === null,
            valIsUndef = value === undefined,
            valIsReflexive = value === value;

          var othIsNull = other === null,
            othIsUndef = other === undefined,
            othIsReflexive = other === other;

          if ((value > other && !othIsNull) || !valIsReflexive ||
            (valIsNull && !othIsUndef && othIsReflexive) ||
            (valIsUndef && othIsReflexive)) {
            return 1;
          }
          if ((value < other && !valIsNull) || !othIsReflexive ||
            (othIsNull && !valIsUndef && valIsReflexive) ||
            (othIsUndef && valIsReflexive)) {
            return -1;
          }
        }
        return 0;
      }

      /**
       * The base implementation of `_.findIndex` and `_.findLastIndex` without
       * support for callback shorthands and `this` binding.
       *
       * @private
       * @param {Array} array The array to search.
       * @param {Function} predicate The function invoked per iteration.
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {number} Returns the index of the matched value, else `-1`.
       */
      function baseFindIndex(array, predicate, fromRight) {
        var length = array.length,
          index = fromRight ? length : -1;

        while ((fromRight ? index-- : ++index < length)) {
          if (predicate(array[index], index, array)) {
            return index;
          }
        }
        return -1;
      }

      /**
       * The base implementation of `_.indexOf` without support for binary searches.
       *
       * @private
       * @param {Array} array The array to search.
       * @param {*} value The value to search for.
       * @param {number} fromIndex The index to search from.
       * @returns {number} Returns the index of the matched value, else `-1`.
       */
      function baseIndexOf(array, value, fromIndex) {
        if (value !== value) {
          return indexOfNaN(array, fromIndex);
        }
        var index = fromIndex - 1,
          length = array.length;

        while (++index < length) {
          if (array[index] === value) {
            return index;
          }
        }
        return -1;
      }

      /**
       * The base implementation of `_.isFunction` without support for environments
       * with incorrect `typeof` results.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
       */
      function baseIsFunction(value) {
        // Avoid a Chakra JIT bug in compatibility modes of IE 11.
        // See https://github.com/jashkenas/underscore/issues/1621 for more details.
        return typeof value == 'function' || false;
      }

      /**
       * Converts `value` to a string if it's not one. An empty string is returned
       * for `null` or `undefined` values.
       *
       * @private
       * @param {*} value The value to process.
       * @returns {string} Returns the string.
       */
      function baseToString(value) {
        return value == null ? '' : (value + '');
      }

      /**
       * Used by `_.trim` and `_.trimLeft` to get the index of the first character
       * of `string` that is not found in `chars`.
       *
       * @private
       * @param {string} string The string to inspect.
       * @param {string} chars The characters to find.
       * @returns {number} Returns the index of the first character not found in `chars`.
       */
      function charsLeftIndex(string, chars) {
        var index = -1,
          length = string.length;

        while (++index < length && chars.indexOf(string.charAt(index)) > -1) {}
        return index;
      }

      /**
       * Used by `_.trim` and `_.trimRight` to get the index of the last character
       * of `string` that is not found in `chars`.
       *
       * @private
       * @param {string} string The string to inspect.
       * @param {string} chars The characters to find.
       * @returns {number} Returns the index of the last character not found in `chars`.
       */
      function charsRightIndex(string, chars) {
        var index = string.length;

        while (index-- && chars.indexOf(string.charAt(index)) > -1) {}
        return index;
      }

      /**
       * Used by `_.sortBy` to compare transformed elements of a collection and stable
       * sort them in ascending order.
       *
       * @private
       * @param {Object} object The object to compare.
       * @param {Object} other The other object to compare.
       * @returns {number} Returns the sort order indicator for `object`.
       */
      function compareAscending(object, other) {
        return baseCompareAscending(object.criteria, other.criteria) || (object.index - other.index);
      }

      /**
       * Used by `_.sortByOrder` to compare multiple properties of a value to another
       * and stable sort them.
       *
       * If `orders` is unspecified, all valuess are sorted in ascending order. Otherwise,
       * a value is sorted in ascending order if its corresponding order is "asc", and
       * descending if "desc".
       *
       * @private
       * @param {Object} object The object to compare.
       * @param {Object} other The other object to compare.
       * @param {boolean[]} orders The order to sort by for each property.
       * @returns {number} Returns the sort order indicator for `object`.
       */
      function compareMultiple(object, other, orders) {
        var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

        while (++index < length) {
          var result = baseCompareAscending(objCriteria[index], othCriteria[index]);
          if (result) {
            if (index >= ordersLength) {
              return result;
            }
            var order = orders[index];
            return result * ((order === 'asc' || order === true) ? 1 : -1);
          }
        }
        // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
        // that causes it, under certain circumstances, to provide the same value for
        // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
        // for more details.
        //
        // This also ensures a stable sort in V8 and other engines.
        // See https://code.google.com/p/v8/issues/detail?id=90 for more details.
        return object.index - other.index;
      }

      /**
       * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.
       *
       * @private
       * @param {string} letter The matched letter to deburr.
       * @returns {string} Returns the deburred letter.
       */
      function deburrLetter(letter) {
        return deburredLetters[letter];
      }

      /**
       * Used by `_.escape` to convert characters to HTML entities.
       *
       * @private
       * @param {string} chr The matched character to escape.
       * @returns {string} Returns the escaped character.
       */
      function escapeHtmlChar(chr) {
        return htmlEscapes[chr];
      }

      /**
       * Used by `_.escapeRegExp` to escape characters for inclusion in compiled regexes.
       *
       * @private
       * @param {string} chr The matched character to escape.
       * @param {string} leadingChar The capture group for a leading character.
       * @param {string} whitespaceChar The capture group for a whitespace character.
       * @returns {string} Returns the escaped character.
       */
      function escapeRegExpChar(chr, leadingChar, whitespaceChar) {
        if (leadingChar) {
          chr = regexpEscapes[chr];
        } else if (whitespaceChar) {
          chr = stringEscapes[chr];
        }
        return '\\' + chr;
      }

      /**
       * Used by `_.template` to escape characters for inclusion in compiled string literals.
       *
       * @private
       * @param {string} chr The matched character to escape.
       * @returns {string} Returns the escaped character.
       */
      function escapeStringChar(chr) {
        return '\\' + stringEscapes[chr];
      }

      /**
       * Gets the index at which the first occurrence of `NaN` is found in `array`.
       *
       * @private
       * @param {Array} array The array to search.
       * @param {number} fromIndex The index to search from.
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {number} Returns the index of the matched `NaN`, else `-1`.
       */
      function indexOfNaN(array, fromIndex, fromRight) {
        var length = array.length,
          index = fromIndex + (fromRight ? 0 : -1);

        while ((fromRight ? index-- : ++index < length)) {
          var other = array[index];
          if (other !== other) {
            return index;
          }
        }
        return -1;
      }

      /**
       * Checks if `value` is object-like.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
       */
      function isObjectLike(value) {
        return !!value && typeof value == 'object';
      }

      /**
       * Used by `trimmedLeftIndex` and `trimmedRightIndex` to determine if a
       * character code is whitespace.
       *
       * @private
       * @param {number} charCode The character code to inspect.
       * @returns {boolean} Returns `true` if `charCode` is whitespace, else `false`.
       */
      function isSpace(charCode) {
        return ((charCode <= 160 && (charCode >= 9 && charCode <= 13) || charCode == 32 || charCode == 160) || charCode == 5760 || charCode == 6158 ||
        (charCode >= 8192 && (charCode <= 8202 || charCode == 8232 || charCode == 8233 || charCode == 8239 || charCode == 8287 || charCode == 12288 || charCode == 65279)));
      }

      /**
       * Replaces all `placeholder` elements in `array` with an internal placeholder
       * and returns an array of their indexes.
       *
       * @private
       * @param {Array} array The array to modify.
       * @param {*} placeholder The placeholder to replace.
       * @returns {Array} Returns the new array of placeholder indexes.
       */
      function replaceHolders(array, placeholder) {
        var index = -1,
          length = array.length,
          resIndex = -1,
          result = [];

        while (++index < length) {
          if (array[index] === placeholder) {
            array[index] = PLACEHOLDER;
            result[++resIndex] = index;
          }
        }
        return result;
      }

      /**
       * An implementation of `_.uniq` optimized for sorted arrays without support
       * for callback shorthands and `this` binding.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {Function} [iteratee] The function invoked per iteration.
       * @returns {Array} Returns the new duplicate-value-free array.
       */
      function sortedUniq(array, iteratee) {
        var seen,
          index = -1,
          length = array.length,
          resIndex = -1,
          result = [];

        while (++index < length) {
          var value = array[index],
            computed = iteratee ? iteratee(value, index, array) : value;

          if (!index || seen !== computed) {
            seen = computed;
            result[++resIndex] = value;
          }
        }
        return result;
      }

      /**
       * Used by `_.trim` and `_.trimLeft` to get the index of the first non-whitespace
       * character of `string`.
       *
       * @private
       * @param {string} string The string to inspect.
       * @returns {number} Returns the index of the first non-whitespace character.
       */
      function trimmedLeftIndex(string) {
        var index = -1,
          length = string.length;

        while (++index < length && isSpace(string.charCodeAt(index))) {}
        return index;
      }

      /**
       * Used by `_.trim` and `_.trimRight` to get the index of the last non-whitespace
       * character of `string`.
       *
       * @private
       * @param {string} string The string to inspect.
       * @returns {number} Returns the index of the last non-whitespace character.
       */
      function trimmedRightIndex(string) {
        var index = string.length;

        while (index-- && isSpace(string.charCodeAt(index))) {}
        return index;
      }

      /**
       * Used by `_.unescape` to convert HTML entities to characters.
       *
       * @private
       * @param {string} chr The matched character to unescape.
       * @returns {string} Returns the unescaped character.
       */
      function unescapeHtmlChar(chr) {
        return htmlUnescapes[chr];
      }

      /*--------------------------------------------------------------------------*/

      /**
       * Create a new pristine `lodash` function using the given `context` object.
       *
       * @static
       * @memberOf _
       * @category Utility
       * @param {Object} [context=root] The context object.
       * @returns {Function} Returns a new `lodash` function.
       * @example
       *
       * _.mixin({ 'foo': _.constant('foo') });
       *
       * var lodash = _.runInContext();
       * lodash.mixin({ 'bar': lodash.constant('bar') });
       *
       * _.isFunction(_.foo);
       * // => true
       * _.isFunction(_.bar);
       * // => false
       *
       * lodash.isFunction(lodash.foo);
       * // => false
       * lodash.isFunction(lodash.bar);
       * // => true
       *
       * // using `context` to mock `Date#getTime` use in `_.now`
       * var mock = _.runInContext({
   *   'Date': function() {
   *     return { 'getTime': getTimeMock };
   *   }
   * });
       *
       * // or creating a suped-up `defer` in Node.js
       * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
       */
      function runInContext(context) {
        // Avoid issues with some ES3 environments that attempt to use values, named
        // after built-in constructors like `Object`, for the creation of literals.
        // ES5 clears this up by stating that literals must use built-in constructors.
        // See https://es5.github.io/#x11.1.5 for more details.
        context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;

        /** Native constructor references. */
        var Array = context.Array,
          Date = context.Date,
          Error = context.Error,
          Function = context.Function,
          Math = context.Math,
          Number = context.Number,
          Object = context.Object,
          RegExp = context.RegExp,
          String = context.String,
          TypeError = context.TypeError;

        /** Used for native method references. */
        var arrayProto = Array.prototype,
          objectProto = Object.prototype,
          stringProto = String.prototype;

        /** Used to resolve the decompiled source of functions. */
        var fnToString = Function.prototype.toString;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /** Used to generate unique IDs. */
        var idCounter = 0;

        /**
         * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
         * of values.
         */
        var objToString = objectProto.toString;

        /** Used to restore the original `_` reference in `_.noConflict`. */
        var oldDash = root._;

        /** Used to detect if a method is native. */
        var reIsNative = RegExp('^' +
          fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
            .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
        );

        /** Native method references. */
        var ArrayBuffer = context.ArrayBuffer,
          clearTimeout = context.clearTimeout,
          parseFloat = context.parseFloat,
          pow = Math.pow,
          propertyIsEnumerable = objectProto.propertyIsEnumerable,
          Set = getNative(context, 'Set'),
          setTimeout = context.setTimeout,
          splice = arrayProto.splice,
          Uint8Array = context.Uint8Array,
          WeakMap = getNative(context, 'WeakMap');

        /* Native method references for those with the same name as other `lodash` methods. */
        var nativeCeil = Math.ceil,
          nativeCreate = getNative(Object, 'create'),
          nativeFloor = Math.floor,
          nativeIsArray = getNative(Array, 'isArray'),
          nativeIsFinite = context.isFinite,
          nativeKeys = getNative(Object, 'keys'),
          nativeMax = Math.max,
          nativeMin = Math.min,
          nativeNow = getNative(Date, 'now'),
          nativeParseInt = context.parseInt,
          nativeRandom = Math.random;

        /** Used as references for `-Infinity` and `Infinity`. */
        var NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY,
          POSITIVE_INFINITY = Number.POSITIVE_INFINITY;

        /** Used as references for the maximum length and index of an array. */
        var MAX_ARRAY_LENGTH = 4294967295,
          MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
          HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

        /**
         * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
         * of an array-like value.
         */
        var MAX_SAFE_INTEGER = 9007199254740991;

        /** Used to store function metadata. */
        var metaMap = WeakMap && new WeakMap;

        /** Used to lookup unminified function names. */
        var realNames = {};

        /*------------------------------------------------------------------------*/

        /**
         * Creates a `lodash` object which wraps `value` to enable implicit chaining.
         * Methods that operate on and return arrays, collections, and functions can
         * be chained together. Methods that retrieve a single value or may return a
         * primitive value will automatically end the chain returning the unwrapped
         * value. Explicit chaining may be enabled using `_.chain`. The execution of
         * chained methods is lazy, that is, execution is deferred until `_#value`
         * is implicitly or explicitly called.
         *
         * Lazy evaluation allows several methods to support shortcut fusion. Shortcut
         * fusion is an optimization strategy which merge iteratee calls; this can help
         * to avoid the creation of intermediate data structures and greatly reduce the
         * number of iteratee executions.
         *
         * Chaining is supported in custom builds as long as the `_#value` method is
         * directly or indirectly included in the build.
         *
         * In addition to lodash methods, wrappers have `Array` and `String` methods.
         *
         * The wrapper `Array` methods are:
         * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`,
         * `splice`, and `unshift`
         *
         * The wrapper `String` methods are:
         * `replace` and `split`
         *
         * The wrapper methods that support shortcut fusion are:
         * `compact`, `drop`, `dropRight`, `dropRightWhile`, `dropWhile`, `filter`,
         * `first`, `initial`, `last`, `map`, `pluck`, `reject`, `rest`, `reverse`,
         * `slice`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, `toArray`,
         * and `where`
         *
         * The chainable wrapper methods are:
         * `after`, `ary`, `assign`, `at`, `before`, `bind`, `bindAll`, `bindKey`,
         * `callback`, `chain`, `chunk`, `commit`, `compact`, `concat`, `constant`,
         * `countBy`, `create`, `curry`, `debounce`, `defaults`, `defaultsDeep`,
         * `defer`, `delay`, `difference`, `drop`, `dropRight`, `dropRightWhile`,
         * `dropWhile`, `fill`, `filter`, `flatten`, `flattenDeep`, `flow`, `flowRight`,
         * `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`,
         * `functions`, `groupBy`, `indexBy`, `initial`, `intersection`, `invert`,
         * `invoke`, `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`,
         * `matchesProperty`, `memoize`, `merge`, `method`, `methodOf`, `mixin`,
         * `modArgs`, `negate`, `omit`, `once`, `pairs`, `partial`, `partialRight`,
         * `partition`, `pick`, `plant`, `pluck`, `property`, `propertyOf`, `pull`,
         * `pullAt`, `push`, `range`, `rearg`, `reject`, `remove`, `rest`, `restParam`,
         * `reverse`, `set`, `shuffle`, `slice`, `sort`, `sortBy`, `sortByAll`,
         * `sortByOrder`, `splice`, `spread`, `take`, `takeRight`, `takeRightWhile`,
         * `takeWhile`, `tap`, `throttle`, `thru`, `times`, `toArray`, `toPlainObject`,
         * `transform`, `union`, `uniq`, `unshift`, `unzip`, `unzipWith`, `values`,
         * `valuesIn`, `where`, `without`, `wrap`, `xor`, `zip`, `zipObject`, `zipWith`
         *
         * The wrapper methods that are **not** chainable by default are:
         * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clone`, `cloneDeep`,
         * `deburr`, `endsWith`, `escape`, `escapeRegExp`, `every`, `find`, `findIndex`,
         * `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `findWhere`, `first`,
         * `floor`, `get`, `gt`, `gte`, `has`, `identity`, `includes`, `indexOf`,
         * `inRange`, `isArguments`, `isArray`, `isBoolean`, `isDate`, `isElement`,
         * `isEmpty`, `isEqual`, `isError`, `isFinite` `isFunction`, `isMatch`,
         * `isNative`, `isNaN`, `isNull`, `isNumber`, `isObject`, `isPlainObject`,
         * `isRegExp`, `isString`, `isUndefined`, `isTypedArray`, `join`, `kebabCase`,
         * `last`, `lastIndexOf`, `lt`, `lte`, `max`, `min`, `noConflict`, `noop`,
         * `now`, `pad`, `padLeft`, `padRight`, `parseInt`, `pop`, `random`, `reduce`,
         * `reduceRight`, `repeat`, `result`, `round`, `runInContext`, `shift`, `size`,
         * `snakeCase`, `some`, `sortedIndex`, `sortedLastIndex`, `startCase`,
         * `startsWith`, `sum`, `template`, `trim`, `trimLeft`, `trimRight`, `trunc`,
         * `unescape`, `uniqueId`, `value`, and `words`
         *
         * The wrapper method `sample` will return a wrapped value when `n` is provided,
         * otherwise an unwrapped value is returned.
         *
         * @name _
         * @constructor
         * @category Chain
         * @param {*} value The value to wrap in a `lodash` instance.
         * @returns {Object} Returns the new `lodash` wrapper instance.
         * @example
         *
         * var wrapped = _([1, 2, 3]);
         *
         * // returns an unwrapped value
         * wrapped.reduce(function(total, n) {
     *   return total + n;
     * });
         * // => 6
         *
         * // returns a wrapped value
         * var squares = wrapped.map(function(n) {
     *   return n * n;
     * });
         *
         * _.isArray(squares);
         * // => false
         *
         * _.isArray(squares.value());
         * // => true
         */
        function lodash(value) {
          if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
            if (value instanceof LodashWrapper) {
              return value;
            }
            if (hasOwnProperty.call(value, '__chain__') && hasOwnProperty.call(value, '__wrapped__')) {
              return wrapperClone(value);
            }
          }
          return new LodashWrapper(value);
        }

        /**
         * The function whose prototype all chaining wrappers inherit from.
         *
         * @private
         */
        function baseLodash() {
          // No operation performed.
        }

        /**
         * The base constructor for creating `lodash` wrapper objects.
         *
         * @private
         * @param {*} value The value to wrap.
         * @param {boolean} [chainAll] Enable chaining for all wrapper methods.
         * @param {Array} [actions=[]] Actions to peform to resolve the unwrapped value.
         */
        function LodashWrapper(value, chainAll, actions) {
          this.__wrapped__ = value;
          this.__actions__ = actions || [];
          this.__chain__ = !!chainAll;
        }

        /**
         * An object environment feature flags.
         *
         * @static
         * @memberOf _
         * @type Object
         */
        var support = lodash.support = {};

        /**
         * By default, the template delimiters used by lodash are like those in
         * embedded Ruby (ERB). Change the following template settings to use
         * alternative delimiters.
         *
         * @static
         * @memberOf _
         * @type Object
         */
        lodash.templateSettings = {

          /**
           * Used to detect `data` property values to be HTML-escaped.
           *
           * @memberOf _.templateSettings
           * @type RegExp
           */
          'escape': reEscape,

          /**
           * Used to detect code to be evaluated.
           *
           * @memberOf _.templateSettings
           * @type RegExp
           */
          'evaluate': reEvaluate,

          /**
           * Used to detect `data` property values to inject.
           *
           * @memberOf _.templateSettings
           * @type RegExp
           */
          'interpolate': reInterpolate,

          /**
           * Used to reference the data object in the template text.
           *
           * @memberOf _.templateSettings
           * @type string
           */
          'variable': '',

          /**
           * Used to import variables into the compiled template.
           *
           * @memberOf _.templateSettings
           * @type Object
           */
          'imports': {

            /**
             * A reference to the `lodash` function.
             *
             * @memberOf _.templateSettings.imports
             * @type Function
             */
            '_': lodash
          }
        };

        /*------------------------------------------------------------------------*/

        /**
         * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
         *
         * @private
         * @param {*} value The value to wrap.
         */
        function LazyWrapper(value) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__dir__ = 1;
          this.__filtered__ = false;
          this.__iteratees__ = [];
          this.__takeCount__ = POSITIVE_INFINITY;
          this.__views__ = [];
        }

        /**
         * Creates a clone of the lazy wrapper object.
         *
         * @private
         * @name clone
         * @memberOf LazyWrapper
         * @returns {Object} Returns the cloned `LazyWrapper` object.
         */
        function lazyClone() {
          var result = new LazyWrapper(this.__wrapped__);
          result.__actions__ = arrayCopy(this.__actions__);
          result.__dir__ = this.__dir__;
          result.__filtered__ = this.__filtered__;
          result.__iteratees__ = arrayCopy(this.__iteratees__);
          result.__takeCount__ = this.__takeCount__;
          result.__views__ = arrayCopy(this.__views__);
          return result;
        }

        /**
         * Reverses the direction of lazy iteration.
         *
         * @private
         * @name reverse
         * @memberOf LazyWrapper
         * @returns {Object} Returns the new reversed `LazyWrapper` object.
         */
        function lazyReverse() {
          if (this.__filtered__) {
            var result = new LazyWrapper(this);
            result.__dir__ = -1;
            result.__filtered__ = true;
          } else {
            result = this.clone();
            result.__dir__ *= -1;
          }
          return result;
        }

        /**
         * Extracts the unwrapped value from its lazy wrapper.
         *
         * @private
         * @name value
         * @memberOf LazyWrapper
         * @returns {*} Returns the unwrapped value.
         */
        function lazyValue() {
          var array = this.__wrapped__.value(),
            dir = this.__dir__,
            isArr = isArray(array),
            isRight = dir < 0,
            arrLength = isArr ? array.length : 0,
            view = getView(0, arrLength, this.__views__),
            start = view.start,
            end = view.end,
            length = end - start,
            index = isRight ? end : (start - 1),
            iteratees = this.__iteratees__,
            iterLength = iteratees.length,
            resIndex = 0,
            takeCount = nativeMin(length, this.__takeCount__);

          if (!isArr || arrLength < LARGE_ARRAY_SIZE || (arrLength == length && takeCount == length)) {
            return baseWrapperValue((isRight && isArr) ? array.reverse() : array, this.__actions__);
          }
          var result = [];

          outer:
            while (length-- && resIndex < takeCount) {
              index += dir;

              var iterIndex = -1,
                value = array[index];

              while (++iterIndex < iterLength) {
                var data = iteratees[iterIndex],
                  iteratee = data.iteratee,
                  type = data.type,
                  computed = iteratee(value);

                if (type == LAZY_MAP_FLAG) {
                  value = computed;
                } else if (!computed) {
                  if (type == LAZY_FILTER_FLAG) {
                    continue outer;
                  } else {
                    break outer;
                  }
                }
              }
              result[resIndex++] = value;
            }
          return result;
        }

        /*------------------------------------------------------------------------*/

        /**
         * Creates a cache object to store key/value pairs.
         *
         * @private
         * @static
         * @name Cache
         * @memberOf _.memoize
         */
        function MapCache() {
          this.__data__ = {};
        }

        /**
         * Removes `key` and its value from the cache.
         *
         * @private
         * @name delete
         * @memberOf _.memoize.Cache
         * @param {string} key The key of the value to remove.
         * @returns {boolean} Returns `true` if the entry was removed successfully, else `false`.
         */
        function mapDelete(key) {
          return this.has(key) && delete this.__data__[key];
        }

        /**
         * Gets the cached value for `key`.
         *
         * @private
         * @name get
         * @memberOf _.memoize.Cache
         * @param {string} key The key of the value to get.
         * @returns {*} Returns the cached value.
         */
        function mapGet(key) {
          return key == '__proto__' ? undefined : this.__data__[key];
        }

        /**
         * Checks if a cached value for `key` exists.
         *
         * @private
         * @name has
         * @memberOf _.memoize.Cache
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */
        function mapHas(key) {
          return key != '__proto__' && hasOwnProperty.call(this.__data__, key);
        }

        /**
         * Sets `value` to `key` of the cache.
         *
         * @private
         * @name set
         * @memberOf _.memoize.Cache
         * @param {string} key The key of the value to cache.
         * @param {*} value The value to cache.
         * @returns {Object} Returns the cache object.
         */
        function mapSet(key, value) {
          if (key != '__proto__') {
            this.__data__[key] = value;
          }
          return this;
        }

        /*------------------------------------------------------------------------*/

        /**
         *
         * Creates a cache object to store unique values.
         *
         * @private
         * @param {Array} [values] The values to cache.
         */
        function SetCache(values) {
          var length = values ? values.length : 0;

          this.data = { 'hash': nativeCreate(null), 'set': new Set };
          while (length--) {
            this.push(values[length]);
          }
        }

        /**
         * Checks if `value` is in `cache` mimicking the return signature of
         * `_.indexOf` by returning `0` if the value is found, else `-1`.
         *
         * @private
         * @param {Object} cache The cache to search.
         * @param {*} value The value to search for.
         * @returns {number} Returns `0` if `value` is found, else `-1`.
         */
        function cacheIndexOf(cache, value) {
          var data = cache.data,
            result = (typeof value == 'string' || isObject(value)) ? data.set.has(value) : data.hash[value];

          return result ? 0 : -1;
        }

        /**
         * Adds `value` to the cache.
         *
         * @private
         * @name push
         * @memberOf SetCache
         * @param {*} value The value to cache.
         */
        function cachePush(value) {
          var data = this.data;
          if (typeof value == 'string' || isObject(value)) {
            data.set.add(value);
          } else {
            data.hash[value] = true;
          }
        }

        /*------------------------------------------------------------------------*/

        /**
         * Creates a new array joining `array` with `other`.
         *
         * @private
         * @param {Array} array The array to join.
         * @param {Array} other The other array to join.
         * @returns {Array} Returns the new concatenated array.
         */
        function arrayConcat(array, other) {
          var index = -1,
            length = array.length,
            othIndex = -1,
            othLength = other.length,
            result = Array(length + othLength);

          while (++index < length) {
            result[index] = array[index];
          }
          while (++othIndex < othLength) {
            result[index++] = other[othIndex];
          }
          return result;
        }

        /**
         * Copies the values of `source` to `array`.
         *
         * @private
         * @param {Array} source The array to copy values from.
         * @param {Array} [array=[]] The array to copy values to.
         * @returns {Array} Returns `array`.
         */
        function arrayCopy(source, array) {
          var index = -1,
            length = source.length;

          array || (array = Array(length));
          while (++index < length) {
            array[index] = source[index];
          }
          return array;
        }

        /**
         * A specialized version of `_.forEach` for arrays without support for callback
         * shorthands and `this` binding.
         *
         * @private
         * @param {Array} array The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array} Returns `array`.
         */
        function arrayEach(array, iteratee) {
          var index = -1,
            length = array.length;

          while (++index < length) {
            if (iteratee(array[index], index, array) === false) {
              break;
            }
          }
          return array;
        }

        /**
         * A specialized version of `_.forEachRight` for arrays without support for
         * callback shorthands and `this` binding.
         *
         * @private
         * @param {Array} array The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array} Returns `array`.
         */
        function arrayEachRight(array, iteratee) {
          var length = array.length;

          while (length--) {
            if (iteratee(array[length], length, array) === false) {
              break;
            }
          }
          return array;
        }

        /**
         * A specialized version of `_.every` for arrays without support for callback
         * shorthands and `this` binding.
         *
         * @private
         * @param {Array} array The array to iterate over.
         * @param {Function} predicate The function invoked per iteration.
         * @returns {boolean} Returns `true` if all elements pass the predicate check,
         *  else `false`.
         */
        function arrayEvery(array, predicate) {
          var index = -1,
            length = array.length;

          while (++index < length) {
            if (!predicate(array[index], index, array)) {
              return false;
            }
          }
          return true;
        }

        /**
         * A specialized version of `baseExtremum` for arrays which invokes `iteratee`
         * with one argument: (value).
         *
         * @private
         * @param {Array} array The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @param {Function} comparator The function used to compare values.
         * @param {*} exValue The initial extremum value.
         * @returns {*} Returns the extremum value.
         */
        function arrayExtremum(array, iteratee, comparator, exValue) {
          var index = -1,
            length = array.length,
            computed = exValue,
            result = computed;

          while (++index < length) {
            var value = array[index],
              current = +iteratee(value);

            if (comparator(current, computed)) {
              computed = current;
              result = value;
            }
          }
          return result;
        }

        /**
         * A specialized version of `_.filter` for arrays without support for callback
         * shorthands and `this` binding.
         *
         * @private
         * @param {Array} array The array to iterate over.
         * @param {Function} predicate The function invoked per iteration.
         * @returns {Array} Returns the new filtered array.
         */
        function arrayFilter(array, predicate) {
          var index = -1,
            length = array.length,
            resIndex = -1,
            result = [];

          while (++index < length) {
            var value = array[index];
            if (predicate(value, index, array)) {
              result[++resIndex] = value;
            }
          }
          return result;
        }

        /**
         * A specialized version of `_.map` for arrays without support for callback
         * shorthands and `this` binding.
         *
         * @private
         * @param {Array} array The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array} Returns the new mapped array.
         */
        function arrayMap(array, iteratee) {
          var index = -1,
            length = array.length,
            result = Array(length);

          while (++index < length) {
            result[index] = iteratee(array[index], index, array);
          }
          return result;
        }

        /**
         * Appends the elements of `values` to `array`.
         *
         * @private
         * @param {Array} array The array to modify.
         * @param {Array} values The values to append.
         * @returns {Array} Returns `array`.
         */
        function arrayPush(array, values) {
          var index = -1,
            length = values.length,
            offset = array.length;

          while (++index < length) {
            array[offset + index] = values[index];
          }
          return array;
        }

        /**
         * A specialized version of `_.reduce` for arrays without support for callback
         * shorthands and `this` binding.
         *
         * @private
         * @param {Array} array The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @param {*} [accumulator] The initial value.
         * @param {boolean} [initFromArray] Specify using the first element of `array`
         *  as the initial value.
         * @returns {*} Returns the accumulated value.
         */
        function arrayReduce(array, iteratee, accumulator, initFromArray) {
          var index = -1,
            length = array.length;

          if (initFromArray && length) {
            accumulator = array[++index];
          }
          while (++index < length) {
            accumulator = iteratee(accumulator, array[index], index, array);
          }
          return accumulator;
        }

        /**
         * A specialized version of `_.reduceRight` for arrays without support for
         * callback shorthands and `this` binding.
         *
         * @private
         * @param {Array} array The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @param {*} [accumulator] The initial value.
         * @param {boolean} [initFromArray] Specify using the last element of `array`
         *  as the initial value.
         * @returns {*} Returns the accumulated value.
         */
        function arrayReduceRight(array, iteratee, accumulator, initFromArray) {
          var length = array.length;
          if (initFromArray && length) {
            accumulator = array[--length];
          }
          while (length--) {
            accumulator = iteratee(accumulator, array[length], length, array);
          }
          return accumulator;
        }

        /**
         * A specialized version of `_.some` for arrays without support for callback
         * shorthands and `this` binding.
         *
         * @private
         * @param {Array} array The array to iterate over.
         * @param {Function} predicate The function invoked per iteration.
         * @returns {boolean} Returns `true` if any element passes the predicate check,
         *  else `false`.
         */
        function arraySome(array, predicate) {
          var index = -1,
            length = array.length;

          while (++index < length) {
            if (predicate(array[index], index, array)) {
              return true;
            }
          }
          return false;
        }

        /**
         * A specialized version of `_.sum` for arrays without support for callback
         * shorthands and `this` binding..
         *
         * @private
         * @param {Array} array The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {number} Returns the sum.
         */
        function arraySum(array, iteratee) {
          var length = array.length,
            result = 0;

          while (length--) {
            result += +iteratee(array[length]) || 0;
          }
          return result;
        }

        /**
         * Used by `_.defaults` to customize its `_.assign` use.
         *
         * @private
         * @param {*} objectValue The destination object property value.
         * @param {*} sourceValue The source object property value.
         * @returns {*} Returns the value to assign to the destination object.
         */
        function assignDefaults(objectValue, sourceValue) {
          return objectValue === undefined ? sourceValue : objectValue;
        }

        /**
         * Used by `_.template` to customize its `_.assign` use.
         *
         * **Note:** This function is like `assignDefaults` except that it ignores
         * inherited property values when checking if a property is `undefined`.
         *
         * @private
         * @param {*} objectValue The destination object property value.
         * @param {*} sourceValue The source object property value.
         * @param {string} key The key associated with the object and source values.
         * @param {Object} object The destination object.
         * @returns {*} Returns the value to assign to the destination object.
         */
        function assignOwnDefaults(objectValue, sourceValue, key, object) {
          return (objectValue === undefined || !hasOwnProperty.call(object, key))
            ? sourceValue
            : objectValue;
        }

        /**
         * A specialized version of `_.assign` for customizing assigned values without
         * support for argument juggling, multiple sources, and `this` binding `customizer`
         * functions.
         *
         * @private
         * @param {Object} object The destination object.
         * @param {Object} source The source object.
         * @param {Function} customizer The function to customize assigned values.
         * @returns {Object} Returns `object`.
         */
        function assignWith(object, source, customizer) {
          var index = -1,
            props = keys(source),
            length = props.length;

          while (++index < length) {
            var key = props[index],
              value = object[key],
              result = customizer(value, source[key], key, object, source);

            if ((result === result ? (result !== value) : (value === value)) ||
              (value === undefined && !(key in object))) {
              object[key] = result;
            }
          }
          return object;
        }

        /**
         * The base implementation of `_.assign` without support for argument juggling,
         * multiple sources, and `customizer` functions.
         *
         * @private
         * @param {Object} object The destination object.
         * @param {Object} source The source object.
         * @returns {Object} Returns `object`.
         */
        function baseAssign(object, source) {
          return source == null
            ? object
            : baseCopy(source, keys(source), object);
        }

        /**
         * The base implementation of `_.at` without support for string collections
         * and individual key arguments.
         *
         * @private
         * @param {Array|Object} collection The collection to iterate over.
         * @param {number[]|string[]} props The property names or indexes of elements to pick.
         * @returns {Array} Returns the new array of picked elements.
         */
        function baseAt(collection, props) {
          var index = -1,
            isNil = collection == null,
            isArr = !isNil && isArrayLike(collection),
            length = isArr ? collection.length : 0,
            propsLength = props.length,
            result = Array(propsLength);

          while(++index < propsLength) {
            var key = props[index];
            if (isArr) {
              result[index] = isIndex(key, length) ? collection[key] : undefined;
            } else {
              result[index] = isNil ? undefined : collection[key];
            }
          }
          return result;
        }

        /**
         * Copies properties of `source` to `object`.
         *
         * @private
         * @param {Object} source The object to copy properties from.
         * @param {Array} props The property names to copy.
         * @param {Object} [object={}] The object to copy properties to.
         * @returns {Object} Returns `object`.
         */
        function baseCopy(source, props, object) {
          object || (object = {});

          var index = -1,
            length = props.length;

          while (++index < length) {
            var key = props[index];
            object[key] = source[key];
          }
          return object;
        }

        /**
         * The base implementation of `_.callback` which supports specifying the
         * number of arguments to provide to `func`.
         *
         * @private
         * @param {*} [func=_.identity] The value to convert to a callback.
         * @param {*} [thisArg] The `this` binding of `func`.
         * @param {number} [argCount] The number of arguments to provide to `func`.
         * @returns {Function} Returns the callback.
         */
        function baseCallback(func, thisArg, argCount) {
          var type = typeof func;
          if (type == 'function') {
            return thisArg === undefined
              ? func
              : bindCallback(func, thisArg, argCount);
          }
          if (func == null) {
            return identity;
          }
          if (type == 'object') {
            return baseMatches(func);
          }
          return thisArg === undefined
            ? property(func)
            : baseMatchesProperty(func, thisArg);
        }

        /**
         * The base implementation of `_.clone` without support for argument juggling
         * and `this` binding `customizer` functions.
         *
         * @private
         * @param {*} value The value to clone.
         * @param {boolean} [isDeep] Specify a deep clone.
         * @param {Function} [customizer] The function to customize cloning values.
         * @param {string} [key] The key of `value`.
         * @param {Object} [object] The object `value` belongs to.
         * @param {Array} [stackA=[]] Tracks traversed source objects.
         * @param {Array} [stackB=[]] Associates clones with source counterparts.
         * @returns {*} Returns the cloned value.
         */
        function baseClone(value, isDeep, customizer, key, object, stackA, stackB) {
          var result;
          if (customizer) {
            result = object ? customizer(value, key, object) : customizer(value);
          }
          if (result !== undefined) {
            return result;
          }
          if (!isObject(value)) {
            return value;
          }
          var isArr = isArray(value);
          if (isArr) {
            result = initCloneArray(value);
            if (!isDeep) {
              return arrayCopy(value, result);
            }
          } else {
            var tag = objToString.call(value),
              isFunc = tag == funcTag;

            if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
              result = initCloneObject(isFunc ? {} : value);
              if (!isDeep) {
                return baseAssign(result, value);
              }
            } else {
              return cloneableTags[tag]
                ? initCloneByTag(value, tag, isDeep)
                : (object ? value : {});
            }
          }
          // Check for circular references and return its corresponding clone.
          stackA || (stackA = []);
          stackB || (stackB = []);

          var length = stackA.length;
          while (length--) {
            if (stackA[length] == value) {
              return stackB[length];
            }
          }
          // Add the source value to the stack of traversed objects and associate it with its clone.
          stackA.push(value);
          stackB.push(result);

          // Recursively populate clone (susceptible to call stack limits).
          (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {
            result[key] = baseClone(subValue, isDeep, customizer, key, value, stackA, stackB);
          });
          return result;
        }

        /**
         * The base implementation of `_.create` without support for assigning
         * properties to the created object.
         *
         * @private
         * @param {Object} prototype The object to inherit from.
         * @returns {Object} Returns the new object.
         */
        var baseCreate = (function() {
          function object() {}
          return function(prototype) {
            if (isObject(prototype)) {
              object.prototype = prototype;
              var result = new object;
              object.prototype = undefined;
            }
            return result || {};
          };
        }());

        /**
         * The base implementation of `_.delay` and `_.defer` which accepts an index
         * of where to slice the arguments to provide to `func`.
         *
         * @private
         * @param {Function} func The function to delay.
         * @param {number} wait The number of milliseconds to delay invocation.
         * @param {Object} args The arguments provide to `func`.
         * @returns {number} Returns the timer id.
         */
        function baseDelay(func, wait, args) {
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          return setTimeout(function() { func.apply(undefined, args); }, wait);
        }

        /**
         * The base implementation of `_.difference` which accepts a single array
         * of values to exclude.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {Array} values The values to exclude.
         * @returns {Array} Returns the new array of filtered values.
         */
        function baseDifference(array, values) {
          var length = array ? array.length : 0,
            result = [];

          if (!length) {
            return result;
          }
          var index = -1,
            indexOf = getIndexOf(),
            isCommon = indexOf == baseIndexOf,
            cache = (isCommon && values.length >= LARGE_ARRAY_SIZE) ? createCache(values) : null,
            valuesLength = values.length;

          if (cache) {
            indexOf = cacheIndexOf;
            isCommon = false;
            values = cache;
          }
          outer:
            while (++index < length) {
              var value = array[index];

              if (isCommon && value === value) {
                var valuesIndex = valuesLength;
                while (valuesIndex--) {
                  if (values[valuesIndex] === value) {
                    continue outer;
                  }
                }
                result.push(value);
              }
              else if (indexOf(values, value, 0) < 0) {
                result.push(value);
              }
            }
          return result;
        }

        /**
         * The base implementation of `_.forEach` without support for callback
         * shorthands and `this` binding.
         *
         * @private
         * @param {Array|Object|string} collection The collection to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array|Object|string} Returns `collection`.
         */
        var baseEach = createBaseEach(baseForOwn);

        /**
         * The base implementation of `_.forEachRight` without support for callback
         * shorthands and `this` binding.
         *
         * @private
         * @param {Array|Object|string} collection The collection to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array|Object|string} Returns `collection`.
         */
        var baseEachRight = createBaseEach(baseForOwnRight, true);

        /**
         * The base implementation of `_.every` without support for callback
         * shorthands and `this` binding.
         *
         * @private
         * @param {Array|Object|string} collection The collection to iterate over.
         * @param {Function} predicate The function invoked per iteration.
         * @returns {boolean} Returns `true` if all elements pass the predicate check,
         *  else `false`
         */
        function baseEvery(collection, predicate) {
          var result = true;
          baseEach(collection, function(value, index, collection) {
            result = !!predicate(value, index, collection);
            return result;
          });
          return result;
        }

        /**
         * Gets the extremum value of `collection` invoking `iteratee` for each value
         * in `collection` to generate the criterion by which the value is ranked.
         * The `iteratee` is invoked with three arguments: (value, index|key, collection).
         *
         * @private
         * @param {Array|Object|string} collection The collection to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @param {Function} comparator The function used to compare values.
         * @param {*} exValue The initial extremum value.
         * @returns {*} Returns the extremum value.
         */
        function baseExtremum(collection, iteratee, comparator, exValue) {
          var computed = exValue,
            result = computed;

          baseEach(collection, function(value, index, collection) {
            var current = +iteratee(value, index, collection);
            if (comparator(current, computed) || (current === exValue && current === result)) {
              computed = current;
              result = value;
            }
          });
          return result;
        }

        /**
         * The base implementation of `_.fill` without an iteratee call guard.
         *
         * @private
         * @param {Array} array The array to fill.
         * @param {*} value The value to fill `array` with.
         * @param {number} [start=0] The start position.
         * @param {number} [end=array.length] The end position.
         * @returns {Array} Returns `array`.
         */
        function baseFill(array, value, start, end) {
          var length = array.length;

          start = start == null ? 0 : (+start || 0);
          if (start < 0) {
            start = -start > length ? 0 : (length + start);
          }
          end = (end === undefined || end > length) ? length : (+end || 0);
          if (end < 0) {
            end += length;
          }
          length = start > end ? 0 : (end >>> 0);
          start >>>= 0;

          while (start < length) {
            array[start++] = value;
          }
          return array;
        }

        /**
         * The base implementation of `_.filter` without support for callback
         * shorthands and `this` binding.
         *
         * @private
         * @param {Array|Object|string} collection The collection to iterate over.
         * @param {Function} predicate The function invoked per iteration.
         * @returns {Array} Returns the new filtered array.
         */
        function baseFilter(collection, predicate) {
          var result = [];
          baseEach(collection, function(value, index, collection) {
            if (predicate(value, index, collection)) {
              result.push(value);
            }
          });
          return result;
        }

        /**
         * The base implementation of `_.find`, `_.findLast`, `_.findKey`, and `_.findLastKey`,
         * without support for callback shorthands and `this` binding, which iterates
         * over `collection` using the provided `eachFunc`.
         *
         * @private
         * @param {Array|Object|string} collection The collection to search.
         * @param {Function} predicate The function invoked per iteration.
         * @param {Function} eachFunc The function to iterate over `collection`.
         * @param {boolean} [retKey] Specify returning the key of the found element
         *  instead of the element itself.
         * @returns {*} Returns the found element or its key, else `undefined`.
         */
        function baseFind(collection, predicate, eachFunc, retKey) {
          var result;
          eachFunc(collection, function(value, key, collection) {
            if (predicate(value, key, collection)) {
              result = retKey ? key : value;
              return false;
            }
          });
          return result;
        }

        /**
         * The base implementation of `_.flatten` with added support for restricting
         * flattening and specifying the start index.
         *
         * @private
         * @param {Array} array The array to flatten.
         * @param {boolean} [isDeep] Specify a deep flatten.
         * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.
         * @param {Array} [result=[]] The initial result value.
         * @returns {Array} Returns the new flattened array.
         */
        function baseFlatten(array, isDeep, isStrict, result) {
          result || (result = []);

          var index = -1,
            length = array.length;

          while (++index < length) {
            var value = array[index];
            if (isObjectLike(value) && isArrayLike(value) &&
              (isStrict || isArray(value) || isArguments(value))) {
              if (isDeep) {
                // Recursively flatten arrays (susceptible to call stack limits).
                baseFlatten(value, isDeep, isStrict, result);
              } else {
                arrayPush(result, value);
              }
            } else if (!isStrict) {
              result[result.length] = value;
            }
          }
          return result;
        }

        /**
         * The base implementation of `baseForIn` and `baseForOwn` which iterates
         * over `object` properties returned by `keysFunc` invoking `iteratee` for
         * each property. Iteratee functions may exit iteration early by explicitly
         * returning `false`.
         *
         * @private
         * @param {Object} object The object to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @param {Function} keysFunc The function to get the keys of `object`.
         * @returns {Object} Returns `object`.
         */
        var baseFor = createBaseFor();

        /**
         * This function is like `baseFor` except that it iterates over properties
         * in the opposite order.
         *
         * @private
         * @param {Object} object The object to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @param {Function} keysFunc The function to get the keys of `object`.
         * @returns {Object} Returns `object`.
         */
        var baseForRight = createBaseFor(true);

        /**
         * The base implementation of `_.forIn` without support for callback
         * shorthands and `this` binding.
         *
         * @private
         * @param {Object} object The object to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Object} Returns `object`.
         */
        function baseForIn(object, iteratee) {
          return baseFor(object, iteratee, keysIn);
        }

        /**
         * The base implementation of `_.forOwn` without support for callback
         * shorthands and `this` binding.
         *
         * @private
         * @param {Object} object The object to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Object} Returns `object`.
         */
        function baseForOwn(object, iteratee) {
          return baseFor(object, iteratee, keys);
        }

        /**
         * The base implementation of `_.forOwnRight` without support for callback
         * shorthands and `this` binding.
         *
         * @private
         * @param {Object} object The object to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Object} Returns `object`.
         */
        function baseForOwnRight(object, iteratee) {
          return baseForRight(object, iteratee, keys);
        }

        /**
         * The base implementation of `_.functions` which creates an array of
         * `object` function property names filtered from those provided.
         *
         * @private
         * @param {Object} object The object to inspect.
         * @param {Array} props The property names to filter.
         * @returns {Array} Returns the new array of filtered property names.
         */
        function baseFunctions(object, props) {
          var index = -1,
            length = props.length,
            resIndex = -1,
            result = [];

          while (++index < length) {
            var key = props[index];
            if (isFunction(object[key])) {
              result[++resIndex] = key;
            }
          }
          return result;
        }

        /**
         * The base implementation of `get` without support for string paths
         * and default values.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Array} path The path of the property to get.
         * @param {string} [pathKey] The key representation of path.
         * @returns {*} Returns the resolved value.
         */
        function baseGet(object, path, pathKey) {
          if (object == null) {
            return;
          }
          if (pathKey !== undefined && pathKey in toObject(object)) {
            path = [pathKey];
          }
          var index = 0,
            length = path.length;

          while (object != null && index < length) {
            object = object[path[index++]];
          }
          return (index && index == length) ? object : undefined;
        }

        /**
         * The base implementation of `_.isEqual` without support for `this` binding
         * `customizer` functions.
         *
         * @private
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @param {Function} [customizer] The function to customize comparing values.
         * @param {boolean} [isLoose] Specify performing partial comparisons.
         * @param {Array} [stackA] Tracks traversed `value` objects.
         * @param {Array} [stackB] Tracks traversed `other` objects.
         * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
         */
        function baseIsEqual(value, other, customizer, isLoose, stackA, stackB) {
          if (value === other) {
            return true;
          }
          if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
            return value !== value && other !== other;
          }
          return baseIsEqualDeep(value, other, baseIsEqual, customizer, isLoose, stackA, stackB);
        }

        /**
         * A specialized version of `baseIsEqual` for arrays and objects which performs
         * deep comparisons and tracks traversed objects enabling objects with circular
         * references to be compared.
         *
         * @private
         * @param {Object} object The object to compare.
         * @param {Object} other The other object to compare.
         * @param {Function} equalFunc The function to determine equivalents of values.
         * @param {Function} [customizer] The function to customize comparing objects.
         * @param {boolean} [isLoose] Specify performing partial comparisons.
         * @param {Array} [stackA=[]] Tracks traversed `value` objects.
         * @param {Array} [stackB=[]] Tracks traversed `other` objects.
         * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
         */
        function baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
          var objIsArr = isArray(object),
            othIsArr = isArray(other),
            objTag = arrayTag,
            othTag = arrayTag;

          if (!objIsArr) {
            objTag = objToString.call(object);
            if (objTag == argsTag) {
              objTag = objectTag;
            } else if (objTag != objectTag) {
              objIsArr = isTypedArray(object);
            }
          }
          if (!othIsArr) {
            othTag = objToString.call(other);
            if (othTag == argsTag) {
              othTag = objectTag;
            } else if (othTag != objectTag) {
              othIsArr = isTypedArray(other);
            }
          }
          var objIsObj = objTag == objectTag,
            othIsObj = othTag == objectTag,
            isSameTag = objTag == othTag;

          if (isSameTag && !(objIsArr || objIsObj)) {
            return equalByTag(object, other, objTag);
          }
          if (!isLoose) {
            var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
              othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

            if (objIsWrapped || othIsWrapped) {
              return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, isLoose, stackA, stackB);
            }
          }
          if (!isSameTag) {
            return false;
          }
          // Assume cyclic values are equal.
          // For more information on detecting circular references see https://es5.github.io/#JO.
          stackA || (stackA = []);
          stackB || (stackB = []);

          var length = stackA.length;
          while (length--) {
            if (stackA[length] == object) {
              return stackB[length] == other;
            }
          }
          // Add `object` and `other` to the stack of traversed objects.
          stackA.push(object);
          stackB.push(other);

          var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isLoose, stackA, stackB);

          stackA.pop();
          stackB.pop();

          return result;
        }

        /**
         * The base implementation of `_.isMatch` without support for callback
         * shorthands and `this` binding.
         *
         * @private
         * @param {Object} object The object to inspect.
         * @param {Array} matchData The propery names, values, and compare flags to match.
         * @param {Function} [customizer] The function to customize comparing objects.
         * @returns {boolean} Returns `true` if `object` is a match, else `false`.
         */
        function baseIsMatch(object, matchData, customizer) {
          var index = matchData.length,
            length = index,
            noCustomizer = !customizer;

          if (object == null) {
            return !length;
          }
          object = toObject(object);
          while (index--) {
            var data = matchData[index];
            if ((noCustomizer && data[2])
                ? data[1] !== object[data[0]]
                : !(data[0] in object)
            ) {
              return false;
            }
          }
          while (++index < length) {
            data = matchData[index];
            var key = data[0],
              objValue = object[key],
              srcValue = data[1];

            if (noCustomizer && data[2]) {
              if (objValue === undefined && !(key in object)) {
                return false;
              }
            } else {
              var result = customizer ? customizer(objValue, srcValue, key) : undefined;
              if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, true) : result)) {
                return false;
              }
            }
          }
          return true;
        }

        /**
         * The base implementation of `_.map` without support for callback shorthands
         * and `this` binding.
         *
         * @private
         * @param {Array|Object|string} collection The collection to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array} Returns the new mapped array.
         */
        function baseMap(collection, iteratee) {
          var index = -1,
            result = isArrayLike(collection) ? Array(collection.length) : [];

          baseEach(collection, function(value, key, collection) {
            result[++index] = iteratee(value, key, collection);
          });
          return result;
        }

        /**
         * The base implementation of `_.matches` which does not clone `source`.
         *
         * @private
         * @param {Object} source The object of property values to match.
         * @returns {Function} Returns the new function.
         */
        function baseMatches(source) {
          var matchData = getMatchData(source);
          if (matchData.length == 1 && matchData[0][2]) {
            var key = matchData[0][0],
              value = matchData[0][1];

            return function(object) {
              if (object == null) {
                return false;
              }
              return object[key] === value && (value !== undefined || (key in toObject(object)));
            };
          }
          return function(object) {
            return baseIsMatch(object, matchData);
          };
        }

        /**
         * The base implementation of `_.matchesProperty` which does not clone `srcValue`.
         *
         * @private
         * @param {string} path The path of the property to get.
         * @param {*} srcValue The value to compare.
         * @returns {Function} Returns the new function.
         */
        function baseMatchesProperty(path, srcValue) {
          var isArr = isArray(path),
            isCommon = isKey(path) && isStrictComparable(srcValue),
            pathKey = (path + '');

          path = toPath(path);
          return function(object) {
            if (object == null) {
              return false;
            }
            var key = pathKey;
            object = toObject(object);
            if ((isArr || !isCommon) && !(key in object)) {
              object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
              if (object == null) {
                return false;
              }
              key = last(path);
              object = toObject(object);
            }
            return object[key] === srcValue
              ? (srcValue !== undefined || (key in object))
              : baseIsEqual(srcValue, object[key], undefined, true);
          };
        }

        /**
         * The base implementation of `_.merge` without support for argument juggling,
         * multiple sources, and `this` binding `customizer` functions.
         *
         * @private
         * @param {Object} object The destination object.
         * @param {Object} source The source object.
         * @param {Function} [customizer] The function to customize merged values.
         * @param {Array} [stackA=[]] Tracks traversed source objects.
         * @param {Array} [stackB=[]] Associates values with source counterparts.
         * @returns {Object} Returns `object`.
         */
        function baseMerge(object, source, customizer, stackA, stackB) {
          if (!isObject(object)) {
            return object;
          }
          var isSrcArr = isArrayLike(source) && (isArray(source) || isTypedArray(source)),
            props = isSrcArr ? undefined : keys(source);

          arrayEach(props || source, function(srcValue, key) {
            if (props) {
              key = srcValue;
              srcValue = source[key];
            }
            if (isObjectLike(srcValue)) {
              stackA || (stackA = []);
              stackB || (stackB = []);
              baseMergeDeep(object, source, key, baseMerge, customizer, stackA, stackB);
            }
            else {
              var value = object[key],
                result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
                isCommon = result === undefined;

              if (isCommon) {
                result = srcValue;
              }
              if ((result !== undefined || (isSrcArr && !(key in object))) &&
                (isCommon || (result === result ? (result !== value) : (value === value)))) {
                object[key] = result;
              }
            }
          });
          return object;
        }

        /**
         * A specialized version of `baseMerge` for arrays and objects which performs
         * deep merges and tracks traversed objects enabling objects with circular
         * references to be merged.
         *
         * @private
         * @param {Object} object The destination object.
         * @param {Object} source The source object.
         * @param {string} key The key of the value to merge.
         * @param {Function} mergeFunc The function to merge values.
         * @param {Function} [customizer] The function to customize merged values.
         * @param {Array} [stackA=[]] Tracks traversed source objects.
         * @param {Array} [stackB=[]] Associates values with source counterparts.
         * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
         */
        function baseMergeDeep(object, source, key, mergeFunc, customizer, stackA, stackB) {
          var length = stackA.length,
            srcValue = source[key];

          while (length--) {
            if (stackA[length] == srcValue) {
              object[key] = stackB[length];
              return;
            }
          }
          var value = object[key],
            result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
            isCommon = result === undefined;

          if (isCommon) {
            result = srcValue;
            if (isArrayLike(srcValue) && (isArray(srcValue) || isTypedArray(srcValue))) {
              result = isArray(value)
                ? value
                : (isArrayLike(value) ? arrayCopy(value) : []);
            }
            else if (isPlainObject(srcValue) || isArguments(srcValue)) {
              result = isArguments(value)
                ? toPlainObject(value)
                : (isPlainObject(value) ? value : {});
            }
            else {
              isCommon = false;
            }
          }
          // Add the source value to the stack of traversed objects and associate
          // it with its merged value.
          stackA.push(srcValue);
          stackB.push(result);

          if (isCommon) {
            // Recursively merge objects and arrays (susceptible to call stack limits).
            object[key] = mergeFunc(result, srcValue, customizer, stackA, stackB);
          } else if (result === result ? (result !== value) : (value === value)) {
            object[key] = result;
          }
        }

        /**
         * The base implementation of `_.property` without support for deep paths.
         *
         * @private
         * @param {string} key The key of the property to get.
         * @returns {Function} Returns the new function.
         */
        function baseProperty(key) {
          return function(object) {
            return object == null ? undefined : object[key];
          };
        }

        /**
         * A specialized version of `baseProperty` which supports deep paths.
         *
         * @private
         * @param {Array|string} path The path of the property to get.
         * @returns {Function} Returns the new function.
         */
        function basePropertyDeep(path) {
          var pathKey = (path + '');
          path = toPath(path);
          return function(object) {
            return baseGet(object, path, pathKey);
          };
        }

        /**
         * The base implementation of `_.pullAt` without support for individual
         * index arguments and capturing the removed elements.
         *
         * @private
         * @param {Array} array The array to modify.
         * @param {number[]} indexes The indexes of elements to remove.
         * @returns {Array} Returns `array`.
         */
        function basePullAt(array, indexes) {
          var length = array ? indexes.length : 0;
          while (length--) {
            var index = indexes[length];
            if (index != previous && isIndex(index)) {
              var previous = index;
              splice.call(array, index, 1);
            }
          }
          return array;
        }

        /**
         * The base implementation of `_.random` without support for argument juggling
         * and returning floating-point numbers.
         *
         * @private
         * @param {number} min The minimum possible value.
         * @param {number} max The maximum possible value.
         * @returns {number} Returns the random number.
         */
        function baseRandom(min, max) {
          return min + nativeFloor(nativeRandom() * (max - min + 1));
        }

        /**
         * The base implementation of `_.reduce` and `_.reduceRight` without support
         * for callback shorthands and `this` binding, which iterates over `collection`
         * using the provided `eachFunc`.
         *
         * @private
         * @param {Array|Object|string} collection The collection to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @param {*} accumulator The initial value.
         * @param {boolean} initFromCollection Specify using the first or last element
         *  of `collection` as the initial value.
         * @param {Function} eachFunc The function to iterate over `collection`.
         * @returns {*} Returns the accumulated value.
         */
        function baseReduce(collection, iteratee, accumulator, initFromCollection, eachFunc) {
          eachFunc(collection, function(value, index, collection) {
            accumulator = initFromCollection
              ? (initFromCollection = false, value)
              : iteratee(accumulator, value, index, collection);
          });
          return accumulator;
        }

        /**
         * The base implementation of `setData` without support for hot loop detection.
         *
         * @private
         * @param {Function} func The function to associate metadata with.
         * @param {*} data The metadata.
         * @returns {Function} Returns `func`.
         */
        var baseSetData = !metaMap ? identity : function(func, data) {
          metaMap.set(func, data);
          return func;
        };

        /**
         * The base implementation of `_.slice` without an iteratee call guard.
         *
         * @private
         * @param {Array} array The array to slice.
         * @param {number} [start=0] The start position.
         * @param {number} [end=array.length] The end position.
         * @returns {Array} Returns the slice of `array`.
         */
        function baseSlice(array, start, end) {
          var index = -1,
            length = array.length;

          start = start == null ? 0 : (+start || 0);
          if (start < 0) {
            start = -start > length ? 0 : (length + start);
          }
          end = (end === undefined || end > length) ? length : (+end || 0);
          if (end < 0) {
            end += length;
          }
          length = start > end ? 0 : ((end - start) >>> 0);
          start >>>= 0;

          var result = Array(length);
          while (++index < length) {
            result[index] = array[index + start];
          }
          return result;
        }

        /**
         * The base implementation of `_.some` without support for callback shorthands
         * and `this` binding.
         *
         * @private
         * @param {Array|Object|string} collection The collection to iterate over.
         * @param {Function} predicate The function invoked per iteration.
         * @returns {boolean} Returns `true` if any element passes the predicate check,
         *  else `false`.
         */
        function baseSome(collection, predicate) {
          var result;

          baseEach(collection, function(value, index, collection) {
            result = predicate(value, index, collection);
            return !result;
          });
          return !!result;
        }

        /**
         * The base implementation of `_.sortBy` which uses `comparer` to define
         * the sort order of `array` and replaces criteria objects with their
         * corresponding values.
         *
         * @private
         * @param {Array} array The array to sort.
         * @param {Function} comparer The function to define sort order.
         * @returns {Array} Returns `array`.
         */
        function baseSortBy(array, comparer) {
          var length = array.length;

          array.sort(comparer);
          while (length--) {
            array[length] = array[length].value;
          }
          return array;
        }

        /**
         * The base implementation of `_.sortByOrder` without param guards.
         *
         * @private
         * @param {Array|Object|string} collection The collection to iterate over.
         * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
         * @param {boolean[]} orders The sort orders of `iteratees`.
         * @returns {Array} Returns the new sorted array.
         */
        function baseSortByOrder(collection, iteratees, orders) {
          var callback = getCallback(),
            index = -1;

          iteratees = arrayMap(iteratees, function(iteratee) { return callback(iteratee); });

          var result = baseMap(collection, function(value) {
            var criteria = arrayMap(iteratees, function(iteratee) { return iteratee(value); });
            return { 'criteria': criteria, 'index': ++index, 'value': value };
          });

          return baseSortBy(result, function(object, other) {
            return compareMultiple(object, other, orders);
          });
        }

        /**
         * The base implementation of `_.sum` without support for callback shorthands
         * and `this` binding.
         *
         * @private
         * @param {Array|Object|string} collection The collection to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {number} Returns the sum.
         */
        function baseSum(collection, iteratee) {
          var result = 0;
          baseEach(collection, function(value, index, collection) {
            result += +iteratee(value, index, collection) || 0;
          });
          return result;
        }

        /**
         * The base implementation of `_.uniq` without support for callback shorthands
         * and `this` binding.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {Function} [iteratee] The function invoked per iteration.
         * @returns {Array} Returns the new duplicate-value-free array.
         */
        function baseUniq(array, iteratee) {
          var index = -1,
            indexOf = getIndexOf(),
            length = array.length,
            isCommon = indexOf == baseIndexOf,
            isLarge = isCommon && length >= LARGE_ARRAY_SIZE,
            seen = isLarge ? createCache() : null,
            result = [];

          if (seen) {
            indexOf = cacheIndexOf;
            isCommon = false;
          } else {
            isLarge = false;
            seen = iteratee ? [] : result;
          }
          outer:
            while (++index < length) {
              var value = array[index],
                computed = iteratee ? iteratee(value, index, array) : value;

              if (isCommon && value === value) {
                var seenIndex = seen.length;
                while (seenIndex--) {
                  if (seen[seenIndex] === computed) {
                    continue outer;
                  }
                }
                if (iteratee) {
                  seen.push(computed);
                }
                result.push(value);
              }
              else if (indexOf(seen, computed, 0) < 0) {
                if (iteratee || isLarge) {
                  seen.push(computed);
                }
                result.push(value);
              }
            }
          return result;
        }

        /**
         * The base implementation of `_.values` and `_.valuesIn` which creates an
         * array of `object` property values corresponding to the property names
         * of `props`.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Array} props The property names to get values for.
         * @returns {Object} Returns the array of property values.
         */
        function baseValues(object, props) {
          var index = -1,
            length = props.length,
            result = Array(length);

          while (++index < length) {
            result[index] = object[props[index]];
          }
          return result;
        }

        /**
         * The base implementation of `_.dropRightWhile`, `_.dropWhile`, `_.takeRightWhile`,
         * and `_.takeWhile` without support for callback shorthands and `this` binding.
         *
         * @private
         * @param {Array} array The array to query.
         * @param {Function} predicate The function invoked per iteration.
         * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {Array} Returns the slice of `array`.
         */
        function baseWhile(array, predicate, isDrop, fromRight) {
          var length = array.length,
            index = fromRight ? length : -1;

          while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}
          return isDrop
            ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
            : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
        }

        /**
         * The base implementation of `wrapperValue` which returns the result of
         * performing a sequence of actions on the unwrapped `value`, where each
         * successive action is supplied the return value of the previous.
         *
         * @private
         * @param {*} value The unwrapped value.
         * @param {Array} actions Actions to peform to resolve the unwrapped value.
         * @returns {*} Returns the resolved value.
         */
        function baseWrapperValue(value, actions) {
          var result = value;
          if (result instanceof LazyWrapper) {
            result = result.value();
          }
          var index = -1,
            length = actions.length;

          while (++index < length) {
            var action = actions[index];
            result = action.func.apply(action.thisArg, arrayPush([result], action.args));
          }
          return result;
        }

        /**
         * Performs a binary search of `array` to determine the index at which `value`
         * should be inserted into `array` in order to maintain its sort order.
         *
         * @private
         * @param {Array} array The sorted array to inspect.
         * @param {*} value The value to evaluate.
         * @param {boolean} [retHighest] Specify returning the highest qualified index.
         * @returns {number} Returns the index at which `value` should be inserted
         *  into `array`.
         */
        function binaryIndex(array, value, retHighest) {
          var low = 0,
            high = array ? array.length : low;

          if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
            while (low < high) {
              var mid = (low + high) >>> 1,
                computed = array[mid];

              if ((retHighest ? (computed <= value) : (computed < value)) && computed !== null) {
                low = mid + 1;
              } else {
                high = mid;
              }
            }
            return high;
          }
          return binaryIndexBy(array, value, identity, retHighest);
        }

        /**
         * This function is like `binaryIndex` except that it invokes `iteratee` for
         * `value` and each element of `array` to compute their sort ranking. The
         * iteratee is invoked with one argument; (value).
         *
         * @private
         * @param {Array} array The sorted array to inspect.
         * @param {*} value The value to evaluate.
         * @param {Function} iteratee The function invoked per iteration.
         * @param {boolean} [retHighest] Specify returning the highest qualified index.
         * @returns {number} Returns the index at which `value` should be inserted
         *  into `array`.
         */
        function binaryIndexBy(array, value, iteratee, retHighest) {
          value = iteratee(value);

          var low = 0,
            high = array ? array.length : 0,
            valIsNaN = value !== value,
            valIsNull = value === null,
            valIsUndef = value === undefined;

          while (low < high) {
            var mid = nativeFloor((low + high) / 2),
              computed = iteratee(array[mid]),
              isDef = computed !== undefined,
              isReflexive = computed === computed;

            if (valIsNaN) {
              var setLow = isReflexive || retHighest;
            } else if (valIsNull) {
              setLow = isReflexive && isDef && (retHighest || computed != null);
            } else if (valIsUndef) {
              setLow = isReflexive && (retHighest || isDef);
            } else if (computed == null) {
              setLow = false;
            } else {
              setLow = retHighest ? (computed <= value) : (computed < value);
            }
            if (setLow) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }
          return nativeMin(high, MAX_ARRAY_INDEX);
        }

        /**
         * A specialized version of `baseCallback` which only supports `this` binding
         * and specifying the number of arguments to provide to `func`.
         *
         * @private
         * @param {Function} func The function to bind.
         * @param {*} thisArg The `this` binding of `func`.
         * @param {number} [argCount] The number of arguments to provide to `func`.
         * @returns {Function} Returns the callback.
         */
        function bindCallback(func, thisArg, argCount) {
          if (typeof func != 'function') {
            return identity;
          }
          if (thisArg === undefined) {
            return func;
          }
          switch (argCount) {
            case 1: return function(value) {
              return func.call(thisArg, value);
            };
            case 3: return function(value, index, collection) {
              return func.call(thisArg, value, index, collection);
            };
            case 4: return function(accumulator, value, index, collection) {
              return func.call(thisArg, accumulator, value, index, collection);
            };
            case 5: return function(value, other, key, object, source) {
              return func.call(thisArg, value, other, key, object, source);
            };
          }
          return function() {
            return func.apply(thisArg, arguments);
          };
        }

        /**
         * Creates a clone of the given array buffer.
         *
         * @private
         * @param {ArrayBuffer} buffer The array buffer to clone.
         * @returns {ArrayBuffer} Returns the cloned array buffer.
         */
        function bufferClone(buffer) {
          var result = new ArrayBuffer(buffer.byteLength),
            view = new Uint8Array(result);

          view.set(new Uint8Array(buffer));
          return result;
        }

        /**
         * Creates an array that is the composition of partially applied arguments,
         * placeholders, and provided arguments into a single array of arguments.
         *
         * @private
         * @param {Array|Object} args The provided arguments.
         * @param {Array} partials The arguments to prepend to those provided.
         * @param {Array} holders The `partials` placeholder indexes.
         * @returns {Array} Returns the new array of composed arguments.
         */
        function composeArgs(args, partials, holders) {
          var holdersLength = holders.length,
            argsIndex = -1,
            argsLength = nativeMax(args.length - holdersLength, 0),
            leftIndex = -1,
            leftLength = partials.length,
            result = Array(leftLength + argsLength);

          while (++leftIndex < leftLength) {
            result[leftIndex] = partials[leftIndex];
          }
          while (++argsIndex < holdersLength) {
            result[holders[argsIndex]] = args[argsIndex];
          }
          while (argsLength--) {
            result[leftIndex++] = args[argsIndex++];
          }
          return result;
        }

        /**
         * This function is like `composeArgs` except that the arguments composition
         * is tailored for `_.partialRight`.
         *
         * @private
         * @param {Array|Object} args The provided arguments.
         * @param {Array} partials The arguments to append to those provided.
         * @param {Array} holders The `partials` placeholder indexes.
         * @returns {Array} Returns the new array of composed arguments.
         */
        function composeArgsRight(args, partials, holders) {
          var holdersIndex = -1,
            holdersLength = holders.length,
            argsIndex = -1,
            argsLength = nativeMax(args.length - holdersLength, 0),
            rightIndex = -1,
            rightLength = partials.length,
            result = Array(argsLength + rightLength);

          while (++argsIndex < argsLength) {
            result[argsIndex] = args[argsIndex];
          }
          var offset = argsIndex;
          while (++rightIndex < rightLength) {
            result[offset + rightIndex] = partials[rightIndex];
          }
          while (++holdersIndex < holdersLength) {
            result[offset + holders[holdersIndex]] = args[argsIndex++];
          }
          return result;
        }

        /**
         * Creates a `_.countBy`, `_.groupBy`, `_.indexBy`, or `_.partition` function.
         *
         * @private
         * @param {Function} setter The function to set keys and values of the accumulator object.
         * @param {Function} [initializer] The function to initialize the accumulator object.
         * @returns {Function} Returns the new aggregator function.
         */
        function createAggregator(setter, initializer) {
          return function(collection, iteratee, thisArg) {
            var result = initializer ? initializer() : {};
            iteratee = getCallback(iteratee, thisArg, 3);

            if (isArray(collection)) {
              var index = -1,
                length = collection.length;

              while (++index < length) {
                var value = collection[index];
                setter(result, value, iteratee(value, index, collection), collection);
              }
            } else {
              baseEach(collection, function(value, key, collection) {
                setter(result, value, iteratee(value, key, collection), collection);
              });
            }
            return result;
          };
        }

        /**
         * Creates a `_.assign`, `_.defaults`, or `_.merge` function.
         *
         * @private
         * @param {Function} assigner The function to assign values.
         * @returns {Function} Returns the new assigner function.
         */
        function createAssigner(assigner) {
          return restParam(function(object, sources) {
            var index = -1,
              length = object == null ? 0 : sources.length,
              customizer = length > 2 ? sources[length - 2] : undefined,
              guard = length > 2 ? sources[2] : undefined,
              thisArg = length > 1 ? sources[length - 1] : undefined;

            if (typeof customizer == 'function') {
              customizer = bindCallback(customizer, thisArg, 5);
              length -= 2;
            } else {
              customizer = typeof thisArg == 'function' ? thisArg : undefined;
              length -= (customizer ? 1 : 0);
            }
            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
              customizer = length < 3 ? undefined : customizer;
              length = 1;
            }
            while (++index < length) {
              var source = sources[index];
              if (source) {
                assigner(object, source, customizer);
              }
            }
            return object;
          });
        }

        /**
         * Creates a `baseEach` or `baseEachRight` function.
         *
         * @private
         * @param {Function} eachFunc The function to iterate over a collection.
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {Function} Returns the new base function.
         */
        function createBaseEach(eachFunc, fromRight) {
          return function(collection, iteratee) {
            var length = collection ? getLength(collection) : 0;
            if (!isLength(length)) {
              return eachFunc(collection, iteratee);
            }
            var index = fromRight ? length : -1,
              iterable = toObject(collection);

            while ((fromRight ? index-- : ++index < length)) {
              if (iteratee(iterable[index], index, iterable) === false) {
                break;
              }
            }
            return collection;
          };
        }

        /**
         * Creates a base function for `_.forIn` or `_.forInRight`.
         *
         * @private
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {Function} Returns the new base function.
         */
        function createBaseFor(fromRight) {
          return function(object, iteratee, keysFunc) {
            var iterable = toObject(object),
              props = keysFunc(object),
              length = props.length,
              index = fromRight ? length : -1;

            while ((fromRight ? index-- : ++index < length)) {
              var key = props[index];
              if (iteratee(iterable[key], key, iterable) === false) {
                break;
              }
            }
            return object;
          };
        }

        /**
         * Creates a function that wraps `func` and invokes it with the `this`
         * binding of `thisArg`.
         *
         * @private
         * @param {Function} func The function to bind.
         * @param {*} [thisArg] The `this` binding of `func`.
         * @returns {Function} Returns the new bound function.
         */
        function createBindWrapper(func, thisArg) {
          var Ctor = createCtorWrapper(func);

          function wrapper() {
            var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
            return fn.apply(thisArg, arguments);
          }
          return wrapper;
        }

        /**
         * Creates a `Set` cache object to optimize linear searches of large arrays.
         *
         * @private
         * @param {Array} [values] The values to cache.
         * @returns {null|Object} Returns the new cache object if `Set` is supported, else `null`.
         */
        function createCache(values) {
          return (nativeCreate && Set) ? new SetCache(values) : null;
        }

        /**
         * Creates a function that produces compound words out of the words in a
         * given string.
         *
         * @private
         * @param {Function} callback The function to combine each word.
         * @returns {Function} Returns the new compounder function.
         */
        function createCompounder(callback) {
          return function(string) {
            var index = -1,
              array = words(deburr(string)),
              length = array.length,
              result = '';

            while (++index < length) {
              result = callback(result, array[index], index);
            }
            return result;
          };
        }

        /**
         * Creates a function that produces an instance of `Ctor` regardless of
         * whether it was invoked as part of a `new` expression or by `call` or `apply`.
         *
         * @private
         * @param {Function} Ctor The constructor to wrap.
         * @returns {Function} Returns the new wrapped function.
         */
        function createCtorWrapper(Ctor) {
          return function() {
            // Use a `switch` statement to work with class constructors.
            // See http://ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
            // for more details.
            var args = arguments;
            switch (args.length) {
              case 0: return new Ctor;
              case 1: return new Ctor(args[0]);
              case 2: return new Ctor(args[0], args[1]);
              case 3: return new Ctor(args[0], args[1], args[2]);
              case 4: return new Ctor(args[0], args[1], args[2], args[3]);
              case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
              case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
              case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
            }
            var thisBinding = baseCreate(Ctor.prototype),
              result = Ctor.apply(thisBinding, args);

            // Mimic the constructor's `return` behavior.
            // See https://es5.github.io/#x13.2.2 for more details.
            return isObject(result) ? result : thisBinding;
          };
        }

        /**
         * Creates a `_.curry` or `_.curryRight` function.
         *
         * @private
         * @param {boolean} flag The curry bit flag.
         * @returns {Function} Returns the new curry function.
         */
        function createCurry(flag) {
          function curryFunc(func, arity, guard) {
            if (guard && isIterateeCall(func, arity, guard)) {
              arity = undefined;
            }
            var result = createWrapper(func, flag, undefined, undefined, undefined, undefined, undefined, arity);
            result.placeholder = curryFunc.placeholder;
            return result;
          }
          return curryFunc;
        }

        /**
         * Creates a `_.defaults` or `_.defaultsDeep` function.
         *
         * @private
         * @param {Function} assigner The function to assign values.
         * @param {Function} customizer The function to customize assigned values.
         * @returns {Function} Returns the new defaults function.
         */
        function createDefaults(assigner, customizer) {
          return restParam(function(args) {
            var object = args[0];
            if (object == null) {
              return object;
            }
            args.push(customizer);
            return assigner.apply(undefined, args);
          });
        }

        /**
         * Creates a `_.max` or `_.min` function.
         *
         * @private
         * @param {Function} comparator The function used to compare values.
         * @param {*} exValue The initial extremum value.
         * @returns {Function} Returns the new extremum function.
         */
        function createExtremum(comparator, exValue) {
          return function(collection, iteratee, thisArg) {
            if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
              iteratee = undefined;
            }
            iteratee = getCallback(iteratee, thisArg, 3);
            if (iteratee.length == 1) {
              collection = isArray(collection) ? collection : toIterable(collection);
              var result = arrayExtremum(collection, iteratee, comparator, exValue);
              if (!(collection.length && result === exValue)) {
                return result;
              }
            }
            return baseExtremum(collection, iteratee, comparator, exValue);
          };
        }

        /**
         * Creates a `_.find` or `_.findLast` function.
         *
         * @private
         * @param {Function} eachFunc The function to iterate over a collection.
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {Function} Returns the new find function.
         */
        function createFind(eachFunc, fromRight) {
          return function(collection, predicate, thisArg) {
            predicate = getCallback(predicate, thisArg, 3);
            if (isArray(collection)) {
              var index = baseFindIndex(collection, predicate, fromRight);
              return index > -1 ? collection[index] : undefined;
            }
            return baseFind(collection, predicate, eachFunc);
          };
        }

        /**
         * Creates a `_.findIndex` or `_.findLastIndex` function.
         *
         * @private
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {Function} Returns the new find function.
         */
        function createFindIndex(fromRight) {
          return function(array, predicate, thisArg) {
            if (!(array && array.length)) {
              return -1;
            }
            predicate = getCallback(predicate, thisArg, 3);
            return baseFindIndex(array, predicate, fromRight);
          };
        }

        /**
         * Creates a `_.findKey` or `_.findLastKey` function.
         *
         * @private
         * @param {Function} objectFunc The function to iterate over an object.
         * @returns {Function} Returns the new find function.
         */
        function createFindKey(objectFunc) {
          return function(object, predicate, thisArg) {
            predicate = getCallback(predicate, thisArg, 3);
            return baseFind(object, predicate, objectFunc, true);
          };
        }

        /**
         * Creates a `_.flow` or `_.flowRight` function.
         *
         * @private
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {Function} Returns the new flow function.
         */
        function createFlow(fromRight) {
          return function() {
            var wrapper,
              length = arguments.length,
              index = fromRight ? length : -1,
              leftIndex = 0,
              funcs = Array(length);

            while ((fromRight ? index-- : ++index < length)) {
              var func = funcs[leftIndex++] = arguments[index];
              if (typeof func != 'function') {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              if (!wrapper && LodashWrapper.prototype.thru && getFuncName(func) == 'wrapper') {
                wrapper = new LodashWrapper([], true);
              }
            }
            index = wrapper ? -1 : length;
            while (++index < length) {
              func = funcs[index];

              var funcName = getFuncName(func),
                data = funcName == 'wrapper' ? getData(func) : undefined;

              if (data && isLaziable(data[0]) && data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) && !data[4].length && data[9] == 1) {
                wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
              } else {
                wrapper = (func.length == 1 && isLaziable(func)) ? wrapper[funcName]() : wrapper.thru(func);
              }
            }
            return function() {
              var args = arguments,
                value = args[0];

              if (wrapper && args.length == 1 && isArray(value) && value.length >= LARGE_ARRAY_SIZE) {
                return wrapper.plant(value).value();
              }
              var index = 0,
                result = length ? funcs[index].apply(this, args) : value;

              while (++index < length) {
                result = funcs[index].call(this, result);
              }
              return result;
            };
          };
        }

        /**
         * Creates a function for `_.forEach` or `_.forEachRight`.
         *
         * @private
         * @param {Function} arrayFunc The function to iterate over an array.
         * @param {Function} eachFunc The function to iterate over a collection.
         * @returns {Function} Returns the new each function.
         */
        function createForEach(arrayFunc, eachFunc) {
          return function(collection, iteratee, thisArg) {
            return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))
              ? arrayFunc(collection, iteratee)
              : eachFunc(collection, bindCallback(iteratee, thisArg, 3));
          };
        }

        /**
         * Creates a function for `_.forIn` or `_.forInRight`.
         *
         * @private
         * @param {Function} objectFunc The function to iterate over an object.
         * @returns {Function} Returns the new each function.
         */
        function createForIn(objectFunc) {
          return function(object, iteratee, thisArg) {
            if (typeof iteratee != 'function' || thisArg !== undefined) {
              iteratee = bindCallback(iteratee, thisArg, 3);
            }
            return objectFunc(object, iteratee, keysIn);
          };
        }

        /**
         * Creates a function for `_.forOwn` or `_.forOwnRight`.
         *
         * @private
         * @param {Function} objectFunc The function to iterate over an object.
         * @returns {Function} Returns the new each function.
         */
        function createForOwn(objectFunc) {
          return function(object, iteratee, thisArg) {
            if (typeof iteratee != 'function' || thisArg !== undefined) {
              iteratee = bindCallback(iteratee, thisArg, 3);
            }
            return objectFunc(object, iteratee);
          };
        }

        /**
         * Creates a function for `_.mapKeys` or `_.mapValues`.
         *
         * @private
         * @param {boolean} [isMapKeys] Specify mapping keys instead of values.
         * @returns {Function} Returns the new map function.
         */
        function createObjectMapper(isMapKeys) {
          return function(object, iteratee, thisArg) {
            var result = {};
            iteratee = getCallback(iteratee, thisArg, 3);

            baseForOwn(object, function(value, key, object) {
              var mapped = iteratee(value, key, object);
              key = isMapKeys ? mapped : key;
              value = isMapKeys ? value : mapped;
              result[key] = value;
            });
            return result;
          };
        }

        /**
         * Creates a function for `_.padLeft` or `_.padRight`.
         *
         * @private
         * @param {boolean} [fromRight] Specify padding from the right.
         * @returns {Function} Returns the new pad function.
         */
        function createPadDir(fromRight) {
          return function(string, length, chars) {
            string = baseToString(string);
            return (fromRight ? string : '') + createPadding(string, length, chars) + (fromRight ? '' : string);
          };
        }

        /**
         * Creates a `_.partial` or `_.partialRight` function.
         *
         * @private
         * @param {boolean} flag The partial bit flag.
         * @returns {Function} Returns the new partial function.
         */
        function createPartial(flag) {
          var partialFunc = restParam(function(func, partials) {
            var holders = replaceHolders(partials, partialFunc.placeholder);
            return createWrapper(func, flag, undefined, partials, holders);
          });
          return partialFunc;
        }

        /**
         * Creates a function for `_.reduce` or `_.reduceRight`.
         *
         * @private
         * @param {Function} arrayFunc The function to iterate over an array.
         * @param {Function} eachFunc The function to iterate over a collection.
         * @returns {Function} Returns the new each function.
         */
        function createReduce(arrayFunc, eachFunc) {
          return function(collection, iteratee, accumulator, thisArg) {
            var initFromArray = arguments.length < 3;
            return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))
              ? arrayFunc(collection, iteratee, accumulator, initFromArray)
              : baseReduce(collection, getCallback(iteratee, thisArg, 4), accumulator, initFromArray, eachFunc);
          };
        }

        /**
         * Creates a function that wraps `func` and invokes it with optional `this`
         * binding of, partial application, and currying.
         *
         * @private
         * @param {Function|string} func The function or method name to reference.
         * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
         * @param {*} [thisArg] The `this` binding of `func`.
         * @param {Array} [partials] The arguments to prepend to those provided to the new function.
         * @param {Array} [holders] The `partials` placeholder indexes.
         * @param {Array} [partialsRight] The arguments to append to those provided to the new function.
         * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
         * @param {Array} [argPos] The argument positions of the new function.
         * @param {number} [ary] The arity cap of `func`.
         * @param {number} [arity] The arity of `func`.
         * @returns {Function} Returns the new wrapped function.
         */
        function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
          var isAry = bitmask & ARY_FLAG,
            isBind = bitmask & BIND_FLAG,
            isBindKey = bitmask & BIND_KEY_FLAG,
            isCurry = bitmask & CURRY_FLAG,
            isCurryBound = bitmask & CURRY_BOUND_FLAG,
            isCurryRight = bitmask & CURRY_RIGHT_FLAG,
            Ctor = isBindKey ? undefined : createCtorWrapper(func);

          function wrapper() {
            // Avoid `arguments` object use disqualifying optimizations by
            // converting it to an array before providing it to other functions.
            var length = arguments.length,
              index = length,
              args = Array(length);

            while (index--) {
              args[index] = arguments[index];
            }
            if (partials) {
              args = composeArgs(args, partials, holders);
            }
            if (partialsRight) {
              args = composeArgsRight(args, partialsRight, holdersRight);
            }
            if (isCurry || isCurryRight) {
              var placeholder = wrapper.placeholder,
                argsHolders = replaceHolders(args, placeholder);

              length -= argsHolders.length;
              if (length < arity) {
                var newArgPos = argPos ? arrayCopy(argPos) : undefined,
                  newArity = nativeMax(arity - length, 0),
                  newsHolders = isCurry ? argsHolders : undefined,
                  newHoldersRight = isCurry ? undefined : argsHolders,
                  newPartials = isCurry ? args : undefined,
                  newPartialsRight = isCurry ? undefined : args;

                bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);
                bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);

                if (!isCurryBound) {
                  bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
                }
                var newData = [func, bitmask, thisArg, newPartials, newsHolders, newPartialsRight, newHoldersRight, newArgPos, ary, newArity],
                  result = createHybridWrapper.apply(undefined, newData);

                if (isLaziable(func)) {
                  setData(result, newData);
                }
                result.placeholder = placeholder;
                return result;
              }
            }
            var thisBinding = isBind ? thisArg : this,
              fn = isBindKey ? thisBinding[func] : func;

            if (argPos) {
              args = reorder(args, argPos);
            }
            if (isAry && ary < args.length) {
              args.length = ary;
            }
            if (this && this !== root && this instanceof wrapper) {
              fn = Ctor || createCtorWrapper(func);
            }
            return fn.apply(thisBinding, args);
          }
          return wrapper;
        }

        /**
         * Creates the padding required for `string` based on the given `length`.
         * The `chars` string is truncated if the number of characters exceeds `length`.
         *
         * @private
         * @param {string} string The string to create padding for.
         * @param {number} [length=0] The padding length.
         * @param {string} [chars=' '] The string used as padding.
         * @returns {string} Returns the pad for `string`.
         */
        function createPadding(string, length, chars) {
          var strLength = string.length;
          length = +length;

          if (strLength >= length || !nativeIsFinite(length)) {
            return '';
          }
          var padLength = length - strLength;
          chars = chars == null ? ' ' : (chars + '');
          return repeat(chars, nativeCeil(padLength / chars.length)).slice(0, padLength);
        }

        /**
         * Creates a function that wraps `func` and invokes it with the optional `this`
         * binding of `thisArg` and the `partials` prepended to those provided to
         * the wrapper.
         *
         * @private
         * @param {Function} func The function to partially apply arguments to.
         * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
         * @param {*} thisArg The `this` binding of `func`.
         * @param {Array} partials The arguments to prepend to those provided to the new function.
         * @returns {Function} Returns the new bound function.
         */
        function createPartialWrapper(func, bitmask, thisArg, partials) {
          var isBind = bitmask & BIND_FLAG,
            Ctor = createCtorWrapper(func);

          function wrapper() {
            // Avoid `arguments` object use disqualifying optimizations by
            // converting it to an array before providing it `func`.
            var argsIndex = -1,
              argsLength = arguments.length,
              leftIndex = -1,
              leftLength = partials.length,
              args = Array(leftLength + argsLength);

            while (++leftIndex < leftLength) {
              args[leftIndex] = partials[leftIndex];
            }
            while (argsLength--) {
              args[leftIndex++] = arguments[++argsIndex];
            }
            var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
            return fn.apply(isBind ? thisArg : this, args);
          }
          return wrapper;
        }

        /**
         * Creates a `_.ceil`, `_.floor`, or `_.round` function.
         *
         * @private
         * @param {string} methodName The name of the `Math` method to use when rounding.
         * @returns {Function} Returns the new round function.
         */
        function createRound(methodName) {
          var func = Math[methodName];
          return function(number, precision) {
            precision = precision === undefined ? 0 : (+precision || 0);
            if (precision) {
              precision = pow(10, precision);
              return func(number * precision) / precision;
            }
            return func(number);
          };
        }

        /**
         * Creates a `_.sortedIndex` or `_.sortedLastIndex` function.
         *
         * @private
         * @param {boolean} [retHighest] Specify returning the highest qualified index.
         * @returns {Function} Returns the new index function.
         */
        function createSortedIndex(retHighest) {
          return function(array, value, iteratee, thisArg) {
            var callback = getCallback(iteratee);
            return (iteratee == null && callback === baseCallback)
              ? binaryIndex(array, value, retHighest)
              : binaryIndexBy(array, value, callback(iteratee, thisArg, 1), retHighest);
          };
        }

        /**
         * Creates a function that either curries or invokes `func` with optional
         * `this` binding and partially applied arguments.
         *
         * @private
         * @param {Function|string} func The function or method name to reference.
         * @param {number} bitmask The bitmask of flags.
         *  The bitmask may be composed of the following flags:
         *     1 - `_.bind`
         *     2 - `_.bindKey`
         *     4 - `_.curry` or `_.curryRight` of a bound function
         *     8 - `_.curry`
         *    16 - `_.curryRight`
         *    32 - `_.partial`
         *    64 - `_.partialRight`
         *   128 - `_.rearg`
         *   256 - `_.ary`
         * @param {*} [thisArg] The `this` binding of `func`.
         * @param {Array} [partials] The arguments to be partially applied.
         * @param {Array} [holders] The `partials` placeholder indexes.
         * @param {Array} [argPos] The argument positions of the new function.
         * @param {number} [ary] The arity cap of `func`.
         * @param {number} [arity] The arity of `func`.
         * @returns {Function} Returns the new wrapped function.
         */
        function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
          var isBindKey = bitmask & BIND_KEY_FLAG;
          if (!isBindKey && typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          var length = partials ? partials.length : 0;
          if (!length) {
            bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
            partials = holders = undefined;
          }
          length -= (holders ? holders.length : 0);
          if (bitmask & PARTIAL_RIGHT_FLAG) {
            var partialsRight = partials,
              holdersRight = holders;

            partials = holders = undefined;
          }
          var data = isBindKey ? undefined : getData(func),
            newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];

          if (data) {
            mergeData(newData, data);
            bitmask = newData[1];
            arity = newData[9];
          }
          newData[9] = arity == null
            ? (isBindKey ? 0 : func.length)
            : (nativeMax(arity - length, 0) || 0);

          if (bitmask == BIND_FLAG) {
            var result = createBindWrapper(newData[0], newData[2]);
          } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !newData[4].length) {
            result = createPartialWrapper.apply(undefined, newData);
          } else {
            result = createHybridWrapper.apply(undefined, newData);
          }
          var setter = data ? baseSetData : setData;
          return setter(result, newData);
        }

        /**
         * A specialized version of `baseIsEqualDeep` for arrays with support for
         * partial deep comparisons.
         *
         * @private
         * @param {Array} array The array to compare.
         * @param {Array} other The other array to compare.
         * @param {Function} equalFunc The function to determine equivalents of values.
         * @param {Function} [customizer] The function to customize comparing arrays.
         * @param {boolean} [isLoose] Specify performing partial comparisons.
         * @param {Array} [stackA] Tracks traversed `value` objects.
         * @param {Array} [stackB] Tracks traversed `other` objects.
         * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
         */
        function equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {
          var index = -1,
            arrLength = array.length,
            othLength = other.length;

          if (arrLength != othLength && !(isLoose && othLength > arrLength)) {
            return false;
          }
          // Ignore non-index properties.
          while (++index < arrLength) {
            var arrValue = array[index],
              othValue = other[index],
              result = customizer ? customizer(isLoose ? othValue : arrValue, isLoose ? arrValue : othValue, index) : undefined;

            if (result !== undefined) {
              if (result) {
                continue;
              }
              return false;
            }
            // Recursively compare arrays (susceptible to call stack limits).
            if (isLoose) {
              if (!arraySome(other, function(othValue) {
                  return arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);
                })) {
                return false;
              }
            } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB))) {
              return false;
            }
          }
          return true;
        }

        /**
         * A specialized version of `baseIsEqualDeep` for comparing objects of
         * the same `toStringTag`.
         *
         * **Note:** This function only supports comparing values with tags of
         * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
         *
         * @private
         * @param {Object} object The object to compare.
         * @param {Object} other The other object to compare.
         * @param {string} tag The `toStringTag` of the objects to compare.
         * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
         */
        function equalByTag(object, other, tag) {
          switch (tag) {
            case boolTag:
            case dateTag:
              // Coerce dates and booleans to numbers, dates to milliseconds and booleans
              // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.
              return +object == +other;

            case errorTag:
              return object.name == other.name && object.message == other.message;

            case numberTag:
              // Treat `NaN` vs. `NaN` as equal.
              return (object != +object)
                ? other != +other
                : object == +other;

            case regexpTag:
            case stringTag:
              // Coerce regexes to strings and treat strings primitives and string
              // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.
              return object == (other + '');
          }
          return false;
        }

        /**
         * A specialized version of `baseIsEqualDeep` for objects with support for
         * partial deep comparisons.
         *
         * @private
         * @param {Object} object The object to compare.
         * @param {Object} other The other object to compare.
         * @param {Function} equalFunc The function to determine equivalents of values.
         * @param {Function} [customizer] The function to customize comparing values.
         * @param {boolean} [isLoose] Specify performing partial comparisons.
         * @param {Array} [stackA] Tracks traversed `value` objects.
         * @param {Array} [stackB] Tracks traversed `other` objects.
         * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
         */
        function equalObjects(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
          var objProps = keys(object),
            objLength = objProps.length,
            othProps = keys(other),
            othLength = othProps.length;

          if (objLength != othLength && !isLoose) {
            return false;
          }
          var index = objLength;
          while (index--) {
            var key = objProps[index];
            if (!(isLoose ? key in other : hasOwnProperty.call(other, key))) {
              return false;
            }
          }
          var skipCtor = isLoose;
          while (++index < objLength) {
            key = objProps[index];
            var objValue = object[key],
              othValue = other[key],
              result = customizer ? customizer(isLoose ? othValue : objValue, isLoose? objValue : othValue, key) : undefined;

            // Recursively compare objects (susceptible to call stack limits).
            if (!(result === undefined ? equalFunc(objValue, othValue, customizer, isLoose, stackA, stackB) : result)) {
              return false;
            }
            skipCtor || (skipCtor = key == 'constructor');
          }
          if (!skipCtor) {
            var objCtor = object.constructor,
              othCtor = other.constructor;

            // Non `Object` object instances with different constructors are not equal.
            if (objCtor != othCtor &&
              ('constructor' in object && 'constructor' in other) &&
              !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
              return false;
            }
          }
          return true;
        }

        /**
         * Gets the appropriate "callback" function. If the `_.callback` method is
         * customized this function returns the custom method, otherwise it returns
         * the `baseCallback` function. If arguments are provided the chosen function
         * is invoked with them and its result is returned.
         *
         * @private
         * @returns {Function} Returns the chosen function or its result.
         */
        function getCallback(func, thisArg, argCount) {
          var result = lodash.callback || callback;
          result = result === callback ? baseCallback : result;
          return argCount ? result(func, thisArg, argCount) : result;
        }

        /**
         * Gets metadata for `func`.
         *
         * @private
         * @param {Function} func The function to query.
         * @returns {*} Returns the metadata for `func`.
         */
        var getData = !metaMap ? noop : function(func) {
          return metaMap.get(func);
        };

        /**
         * Gets the name of `func`.
         *
         * @private
         * @param {Function} func The function to query.
         * @returns {string} Returns the function name.
         */
        function getFuncName(func) {
          var result = func.name,
            array = realNames[result],
            length = array ? array.length : 0;

          while (length--) {
            var data = array[length],
              otherFunc = data.func;
            if (otherFunc == null || otherFunc == func) {
              return data.name;
            }
          }
          return result;
        }

        /**
         * Gets the appropriate "indexOf" function. If the `_.indexOf` method is
         * customized this function returns the custom method, otherwise it returns
         * the `baseIndexOf` function. If arguments are provided the chosen function
         * is invoked with them and its result is returned.
         *
         * @private
         * @returns {Function|number} Returns the chosen function or its result.
         */
        function getIndexOf(collection, target, fromIndex) {
          var result = lodash.indexOf || indexOf;
          result = result === indexOf ? baseIndexOf : result;
          return collection ? result(collection, target, fromIndex) : result;
        }

        /**
         * Gets the "length" property value of `object`.
         *
         * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
         * that affects Safari on at least iOS 8.1-8.3 ARM64.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {*} Returns the "length" value.
         */
        var getLength = baseProperty('length');

        /**
         * Gets the propery names, values, and compare flags of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the match data of `object`.
         */
        function getMatchData(object) {
          var result = pairs(object),
            length = result.length;

          while (length--) {
            result[length][2] = isStrictComparable(result[length][1]);
          }
          return result;
        }

        /**
         * Gets the native function at `key` of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {string} key The key of the method to get.
         * @returns {*} Returns the function if it's native, else `undefined`.
         */
        function getNative(object, key) {
          var value = object == null ? undefined : object[key];
          return isNative(value) ? value : undefined;
        }

        /**
         * Gets the view, applying any `transforms` to the `start` and `end` positions.
         *
         * @private
         * @param {number} start The start of the view.
         * @param {number} end The end of the view.
         * @param {Array} transforms The transformations to apply to the view.
         * @returns {Object} Returns an object containing the `start` and `end`
         *  positions of the view.
         */
        function getView(start, end, transforms) {
          var index = -1,
            length = transforms.length;

          while (++index < length) {
            var data = transforms[index],
              size = data.size;

            switch (data.type) {
              case 'drop':      start += size; break;
              case 'dropRight': end -= size; break;
              case 'take':      end = nativeMin(end, start + size); break;
              case 'takeRight': start = nativeMax(start, end - size); break;
            }
          }
          return { 'start': start, 'end': end };
        }

        /**
         * Initializes an array clone.
         *
         * @private
         * @param {Array} array The array to clone.
         * @returns {Array} Returns the initialized clone.
         */
        function initCloneArray(array) {
          var length = array.length,
            result = new array.constructor(length);

          // Add array properties assigned by `RegExp#exec`.
          if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
            result.index = array.index;
            result.input = array.input;
          }
          return result;
        }

        /**
         * Initializes an object clone.
         *
         * @private
         * @param {Object} object The object to clone.
         * @returns {Object} Returns the initialized clone.
         */
        function initCloneObject(object) {
          var Ctor = object.constructor;
          if (!(typeof Ctor == 'function' && Ctor instanceof Ctor)) {
            Ctor = Object;
          }
          return new Ctor;
        }

        /**
         * Initializes an object clone based on its `toStringTag`.
         *
         * **Note:** This function only supports cloning values with tags of
         * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
         *
         * @private
         * @param {Object} object The object to clone.
         * @param {string} tag The `toStringTag` of the object to clone.
         * @param {boolean} [isDeep] Specify a deep clone.
         * @returns {Object} Returns the initialized clone.
         */
        function initCloneByTag(object, tag, isDeep) {
          var Ctor = object.constructor;
          switch (tag) {
            case arrayBufferTag:
              return bufferClone(object);

            case boolTag:
            case dateTag:
              return new Ctor(+object);

            case float32Tag: case float64Tag:
            case int8Tag: case int16Tag: case int32Tag:
            case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
            var buffer = object.buffer;
            return new Ctor(isDeep ? bufferClone(buffer) : buffer, object.byteOffset, object.length);

            case numberTag:
            case stringTag:
              return new Ctor(object);

            case regexpTag:
              var result = new Ctor(object.source, reFlags.exec(object));
              result.lastIndex = object.lastIndex;
          }
          return result;
        }

        /**
         * Invokes the method at `path` on `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Array|string} path The path of the method to invoke.
         * @param {Array} args The arguments to invoke the method with.
         * @returns {*} Returns the result of the invoked method.
         */
        function invokePath(object, path, args) {
          if (object != null && !isKey(path, object)) {
            path = toPath(path);
            object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
            path = last(path);
          }
          var func = object == null ? object : object[path];
          return func == null ? undefined : func.apply(object, args);
        }

        /**
         * Checks if `value` is array-like.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
         */
        function isArrayLike(value) {
          return value != null && isLength(getLength(value));
        }

        /**
         * Checks if `value` is a valid array-like index.
         *
         * @private
         * @param {*} value The value to check.
         * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
         * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
         */
        function isIndex(value, length) {
          value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
          length = length == null ? MAX_SAFE_INTEGER : length;
          return value > -1 && value % 1 == 0 && value < length;
        }

        /**
         * Checks if the provided arguments are from an iteratee call.
         *
         * @private
         * @param {*} value The potential iteratee value argument.
         * @param {*} index The potential iteratee index or key argument.
         * @param {*} object The potential iteratee object argument.
         * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.
         */
        function isIterateeCall(value, index, object) {
          if (!isObject(object)) {
            return false;
          }
          var type = typeof index;
          if (type == 'number'
              ? (isArrayLike(object) && isIndex(index, object.length))
              : (type == 'string' && index in object)) {
            var other = object[index];
            return value === value ? (value === other) : (other !== other);
          }
          return false;
        }

        /**
         * Checks if `value` is a property name and not a property path.
         *
         * @private
         * @param {*} value The value to check.
         * @param {Object} [object] The object to query keys on.
         * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
         */
        function isKey(value, object) {
          var type = typeof value;
          if ((type == 'string' && reIsPlainProp.test(value)) || type == 'number') {
            return true;
          }
          if (isArray(value)) {
            return false;
          }
          var result = !reIsDeepProp.test(value);
          return result || (object != null && value in toObject(object));
        }

        /**
         * Checks if `func` has a lazy counterpart.
         *
         * @private
         * @param {Function} func The function to check.
         * @returns {boolean} Returns `true` if `func` has a lazy counterpart, else `false`.
         */
        function isLaziable(func) {
          var funcName = getFuncName(func);
          if (!(funcName in LazyWrapper.prototype)) {
            return false;
          }
          var other = lodash[funcName];
          if (func === other) {
            return true;
          }
          var data = getData(other);
          return !!data && func === data[0];
        }

        /**
         * Checks if `value` is a valid array-like length.
         *
         * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
         */
        function isLength(value) {
          return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
        }

        /**
         * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` if suitable for strict
         *  equality comparisons, else `false`.
         */
        function isStrictComparable(value) {
          return value === value && !isObject(value);
        }

        /**
         * Merges the function metadata of `source` into `data`.
         *
         * Merging metadata reduces the number of wrappers required to invoke a function.
         * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
         * may be applied regardless of execution order. Methods like `_.ary` and `_.rearg`
         * augment function arguments, making the order in which they are executed important,
         * preventing the merging of metadata. However, we make an exception for a safe
         * common case where curried functions have `_.ary` and or `_.rearg` applied.
         *
         * @private
         * @param {Array} data The destination metadata.
         * @param {Array} source The source metadata.
         * @returns {Array} Returns `data`.
         */
        function mergeData(data, source) {
          var bitmask = data[1],
            srcBitmask = source[1],
            newBitmask = bitmask | srcBitmask,
            isCommon = newBitmask < ARY_FLAG;

          var isCombo =
            (srcBitmask == ARY_FLAG && bitmask == CURRY_FLAG) ||
            (srcBitmask == ARY_FLAG && bitmask == REARG_FLAG && data[7].length <= source[8]) ||
            (srcBitmask == (ARY_FLAG | REARG_FLAG) && bitmask == CURRY_FLAG);

          // Exit early if metadata can't be merged.
          if (!(isCommon || isCombo)) {
            return data;
          }
          // Use source `thisArg` if available.
          if (srcBitmask & BIND_FLAG) {
            data[2] = source[2];
            // Set when currying a bound function.
            newBitmask |= (bitmask & BIND_FLAG) ? 0 : CURRY_BOUND_FLAG;
          }
          // Compose partial arguments.
          var value = source[3];
          if (value) {
            var partials = data[3];
            data[3] = partials ? composeArgs(partials, value, source[4]) : arrayCopy(value);
            data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : arrayCopy(source[4]);
          }
          // Compose partial right arguments.
          value = source[5];
          if (value) {
            partials = data[5];
            data[5] = partials ? composeArgsRight(partials, value, source[6]) : arrayCopy(value);
            data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : arrayCopy(source[6]);
          }
          // Use source `argPos` if available.
          value = source[7];
          if (value) {
            data[7] = arrayCopy(value);
          }
          // Use source `ary` if it's smaller.
          if (srcBitmask & ARY_FLAG) {
            data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
          }
          // Use source `arity` if one is not provided.
          if (data[9] == null) {
            data[9] = source[9];
          }
          // Use source `func` and merge bitmasks.
          data[0] = source[0];
          data[1] = newBitmask;

          return data;
        }

        /**
         * Used by `_.defaultsDeep` to customize its `_.merge` use.
         *
         * @private
         * @param {*} objectValue The destination object property value.
         * @param {*} sourceValue The source object property value.
         * @returns {*} Returns the value to assign to the destination object.
         */
        function mergeDefaults(objectValue, sourceValue) {
          return objectValue === undefined ? sourceValue : merge(objectValue, sourceValue, mergeDefaults);
        }

        /**
         * A specialized version of `_.pick` which picks `object` properties specified
         * by `props`.
         *
         * @private
         * @param {Object} object The source object.
         * @param {string[]} props The property names to pick.
         * @returns {Object} Returns the new object.
         */
        function pickByArray(object, props) {
          object = toObject(object);

          var index = -1,
            length = props.length,
            result = {};

          while (++index < length) {
            var key = props[index];
            if (key in object) {
              result[key] = object[key];
            }
          }
          return result;
        }

        /**
         * A specialized version of `_.pick` which picks `object` properties `predicate`
         * returns truthy for.
         *
         * @private
         * @param {Object} object The source object.
         * @param {Function} predicate The function invoked per iteration.
         * @returns {Object} Returns the new object.
         */
        function pickByCallback(object, predicate) {
          var result = {};
          baseForIn(object, function(value, key, object) {
            if (predicate(value, key, object)) {
              result[key] = value;
            }
          });
          return result;
        }

        /**
         * Reorder `array` according to the specified indexes where the element at
         * the first index is assigned as the first element, the element at
         * the second index is assigned as the second element, and so on.
         *
         * @private
         * @param {Array} array The array to reorder.
         * @param {Array} indexes The arranged array indexes.
         * @returns {Array} Returns `array`.
         */
        function reorder(array, indexes) {
          var arrLength = array.length,
            length = nativeMin(indexes.length, arrLength),
            oldArray = arrayCopy(array);

          while (length--) {
            var index = indexes[length];
            array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
          }
          return array;
        }

        /**
         * Sets metadata for `func`.
         *
         * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
         * period of time, it will trip its breaker and transition to an identity function
         * to avoid garbage collection pauses in V8. See [V8 issue 2070](https://code.google.com/p/v8/issues/detail?id=2070)
         * for more details.
         *
         * @private
         * @param {Function} func The function to associate metadata with.
         * @param {*} data The metadata.
         * @returns {Function} Returns `func`.
         */
        var setData = (function() {
          var count = 0,
            lastCalled = 0;

          return function(key, value) {
            var stamp = now(),
              remaining = HOT_SPAN - (stamp - lastCalled);

            lastCalled = stamp;
            if (remaining > 0) {
              if (++count >= HOT_COUNT) {
                return key;
              }
            } else {
              count = 0;
            }
            return baseSetData(key, value);
          };
        }());

        /**
         * A fallback implementation of `Object.keys` which creates an array of the
         * own enumerable property names of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         */
        function shimKeys(object) {
          var props = keysIn(object),
            propsLength = props.length,
            length = propsLength && object.length;

          var allowIndexes = !!length && isLength(length) &&
            (isArray(object) || isArguments(object));

          var index = -1,
            result = [];

          while (++index < propsLength) {
            var key = props[index];
            if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {
              result.push(key);
            }
          }
          return result;
        }

        /**
         * Converts `value` to an array-like object if it's not one.
         *
         * @private
         * @param {*} value The value to process.
         * @returns {Array|Object} Returns the array-like object.
         */
        function toIterable(value) {
          if (value == null) {
            return [];
          }
          if (!isArrayLike(value)) {
            return values(value);
          }
          return isObject(value) ? value : Object(value);
        }

        /**
         * Converts `value` to an object if it's not one.
         *
         * @private
         * @param {*} value The value to process.
         * @returns {Object} Returns the object.
         */
        function toObject(value) {
          return isObject(value) ? value : Object(value);
        }

        /**
         * Converts `value` to property path array if it's not one.
         *
         * @private
         * @param {*} value The value to process.
         * @returns {Array} Returns the property path array.
         */
        function toPath(value) {
          if (isArray(value)) {
            return value;
          }
          var result = [];
          baseToString(value).replace(rePropName, function(match, number, quote, string) {
            result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
          });
          return result;
        }

        /**
         * Creates a clone of `wrapper`.
         *
         * @private
         * @param {Object} wrapper The wrapper to clone.
         * @returns {Object} Returns the cloned wrapper.
         */
        function wrapperClone(wrapper) {
          return wrapper instanceof LazyWrapper
            ? wrapper.clone()
            : new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__, arrayCopy(wrapper.__actions__));
        }

        /*------------------------------------------------------------------------*/

        /**
         * Creates an array of elements split into groups the length of `size`.
         * If `collection` can't be split evenly, the final chunk will be the remaining
         * elements.
         *
         * @static
         * @memberOf _
         * @category Array
         * @param {Array} array The array to process.
         * @param {number} [size=1] The length of each chunk.
         * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
         * @returns {Array} Returns the new array containing chunks.
         * @example
         *
         * _.chunk(['a', 'b', 'c', 'd'], 2);
         * // => [['a', 'b'], ['c', 'd']]
         *
         * _.chunk(['a', 'b', 'c', 'd'], 3);
         * // => [['a', 'b', 'c'], ['d']]
         */
        function chunk(array, size, guard) {
          if (guard ? isIterateeCall(array, size, guard) : size == null) {
            size = 1;
          } else {
            size = nativeMax(nativeFloor(size) || 1, 1);
          }
          var index = 0,
            length = array ? array.length : 0,
            resIndex = -1,
            result = Array(nativeCeil(length / size));

          while (index < length) {
            result[++resIndex] = baseSlice(array, index, (index += size));
          }
          return result;
        }

        /**
         * Creates an array with all falsey values removed. The values `false`, `null`,
         * `0`, `""`, `undefined`, and `NaN` are falsey.
         *
         * @static
         * @memberOf _
         * @category Array
         * @param {Array} array The array to compact.
         * @returns {Array} Returns the new array of filtered values.
         * @example
         *
         * _.compact([0, 1, false, 2, '', 3]);
         * // => [1, 2, 3]
         */
        function compact(array) {
          var index = -1,
            length = array ? array.length : 0,
            resIndex = -1,
            result = [];

          while (++index < length) {
            var value = array[index];
            if (value) {
              result[++resIndex] = value;
            }
          }
          return result;
        }

        /**
         * Creates an array of unique `array` values not included in the other
         * provided arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
         * for equality comparisons.
         *
         * @static
         * @memberOf _
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {...Array} [values] The arrays of values to exclude.
         * @returns {Array} Returns the new array of filtered values.
         * @example
         *
         * _.difference([1, 2, 3], [4, 2]);
         * // => [1, 3]
         */
        var difference = restParam(function(array, values) {
          return (isObjectLike(array) && isArrayLike(array))
            ? baseDifference(array, baseFlatten(values, false, true))
            : [];
        });

        /**
         * Creates a slice of `array` with `n` elements dropped from the beginning.
         *
         * @static
         * @memberOf _
         * @category Array
         * @param {Array} array The array to query.
         * @param {number} [n=1] The number of elements to drop.
         * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * _.drop([1, 2, 3]);
         * // => [2, 3]
         *
         * _.drop([1, 2, 3], 2);
         * // => [3]
         *
         * _.drop([1, 2, 3], 5);
         * // => []
         *
         * _.drop([1, 2, 3], 0);
         * // => [1, 2, 3]
         */
        function drop(array, n, guard) {
          var length = array ? array.length : 0;
          if (!length) {
            return [];
          }
          if (guard ? isIterateeCall(array, n, guard) : n == null) {
            n = 1;
          }
          return baseSlice(array, n < 0 ? 0 : n);
        }

        /**
         * Creates a slice of `array` with `n` elements dropped from the end.
         *
         * @static
         * @memberOf _
         * @category Array
         * @param {Array} array The array to query.
         * @param {number} [n=1] The number of elements to drop.
         * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * _.dropRight([1, 2, 3]);
         * // => [1, 2]
         *
         * _.dropRight([1, 2, 3], 2);
         * // => [1]
         *
         * _.dropRight([1, 2, 3], 5);
         * // => []
         *
         * _.dropRight([1, 2, 3], 0);
         * // => [1, 2, 3]
         */
        function dropRight(array, n, guard) {
          var length = array ? array.length : 0;
          if (!length) {
            return [];
          }
          if (guard ? isIterateeCall(array, n, guard) : n == null) {
            n = 1;
          }
          n = length - (+n || 0);
          return baseSlice(array, 0, n < 0 ? 0 : n);
        }

        /**
         * Creates a slice of `array` excluding elements dropped from the end.
         * Elements are dropped until `predicate` returns falsey. The predicate is
         * bound to `thisArg` and invoked with three arguments: (value, index, array).
         *
         * If a property name is provided for `predicate` the created `_.property`
         * style callback returns the property value of the given element.
         *
         * If a value is also provided for `thisArg` the created `_.matchesProperty`
         * style callback returns `true` for elements that have a matching property
         * value, else `false`.
         *
         * If an object is provided for `predicate` the created `_.matches` style
         * callback returns `true` for elements that match the properties of the given
         * object, else `false`.
         *
         * @static
         * @memberOf _
         * @category Array
         * @param {Array} array The array to query.
         * @param {Function|Object|string} [predicate=_.identity] The function invoked
         *  per iteration.
         * @param {*} [thisArg] The `this` binding of `predicate`.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * _.dropRightWhile([1, 2, 3], function(n) {
     *   return n > 1;
     * });
         * // => [1]
         *
         * var users = [
         *   { 'user': 'barney',  'active': true },
         *   { 'user': 'fred',    'active': false },
         *   { 'user': 'pebbles', 'active': false }
         * ];
         *
         * // using the `_.matches` callback shorthand
         * _.pluck(_.dropRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
         * // => ['barney', 'fred']
         *
         * // using the `_.matchesProperty` callback shorthand
         * _.pluck(_.dropRightWhile(users, 'active', false), 'user');
         * // => ['barney']
         *
         * // using the `_.property` callback shorthand
         * _.pluck(_.dropRightWhile(users, 'active'), 'user');
         * // => ['barney', 'fred', 'pebbles']
         */
        function dropRightWhile(array, predicate, thisArg) {
          return (array && array.length)
            ? baseWhile(array, getCallback(predicate, thisArg, 3), true, true)
            : [];
        }

        /**
         * Creates a slice of `array` excluding elements dropped from the beginning.
         * Elements are dropped until `predicate` returns falsey. The predicate is
         * bound to `thisArg` and invoked with three arguments: (value, index, array).
         *
         * If a property name is provided for `predicate` the created `_.property`
         * style callback returns the property value of the given element.
         *
         * If a value is also provided for `thisArg` the created `_.matchesProperty`
         * style callback returns `true` for elements that have a matching property
         * value, else `false`.
         *
         * If an object is provided for `predicate` the created `_.matches` style
         * callback returns `true` for elements that have the properties of the given
         * object, else `false`.
         *
         * @static
         * @memberOf _
         * @category Array
         * @param {Array} array The array to query.
         * @param {Function|Object|string} [predicate=_.identity] The function invoked
         *  per iteration.
         * @param {*} [thisArg] The `this` binding of `predicate`.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * _.dropWhile([1, 2, 3], function(n) {
     *   return n < 3;
     * });
         * // => [3]
         *
         * var users = [
         *   { 'user': 'barney',  'active': false },
         *   { 'user': 'fred',    'active': false },
         *   { 'user': 'pebbles', 'active': true }
         * ];
         *
         * // using the `_.matches` callback shorthand
         * _.pluck(_.dropWhile(users, { 'user': 'barney', 'active': false }), 'user');
         * // => ['fred', 'pebbles']
         *
         * // using the `_.matchesProperty` callback shorthand
         * _.pluck(_.dropWhile(users, 'active', false), 'user');
         * // => ['pebbles']
         *
         * // using the `_.property` callback shorthand
         * _.pluck(_.dropWhile(users, 'active'), 'user');
         * // => ['barney', 'fred', 'pebbles']
         */
        function dropWhile(array, predicate, thisArg) {
          return (array && array.length)
            ? baseWhile(array, getCallback(predicate, thisArg, 3), true)
            : [];
        }

        /**
         * Fills elements of `array` with `value` from `start` up to, but not
         * including, `end`.
         *
         * **Note:** This method mutates `array`.
         *
         * @static
         * @memberOf _
         * @category Array
         * @param {Array} array The array to fill.
         * @param {*} value The value to fill `array` with.
         * @param {number} [start=0] The start position.
         * @param {number} [end=array.length] The end position.
         * @returns {Array} Returns `array`.
         * @example
         *
         * var array = [1, 2, 3];
         *
         * _.fill(array, 'a');
         * console.log(array);
         * // => ['a', 'a', 'a']
         *
         * _.fill(Array(3), 2);
         * // => [2, 2, 2]
         *
         * _.fill([4, 6, 8], '*', 1, 2);
         * // => [4, '*', 8]
         */
        function fill(array, value, start, end) {
          var length = array ? array.length : 0;
          if (!length) {
            return [];
          }
          if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
            start = 0;
            end = length;
          }
          return baseFill(array, value, start, end);
        }

        /**
         * This method is like `_.find` except that it returns the index of the first
         * element `predicate` returns truthy for instead of the element itself.
         *
         * If a property name is provided for `predicate` the created `_.property`
         * style callback returns the property value of the given element.
         *
         * If a value is also provided for `thisArg` the created `_.matchesProperty`
         * style callback returns `true` for elements that have a matching property
         * value, else `false`.
         *
         * If an object is provided for `predicate` the created `_.matches` style
         * callback returns `true` for elements that have the properties of the given
         * object, else `false`.
         *
         * @static
         * @memberOf _
         * @category Array
         * @param {Array} array The array to search.
         * @param {Function|Object|string} [predicate=_.identity] The function invoked
         *  per iteration.
         * @param {*} [thisArg] The `this` binding of `predicate`.
         * @returns {number} Returns the index of the found element, else `-1`.
         * @example
         *
         * var users = [
         *   { 'user': 'barney',  'active': false },
         *   { 'user': 'fred',    'active': false },
         *   { 'user': 'pebbles', 'active': true }
         * ];
         *
         * _.findIndex(users, function(chr) {
     *   return chr.user == 'barney';
     * });
         * // => 0
         *
         * // using the `_.matches` callback shorthand
         * _.findIndex(users, { 'user': 'fred', 'active': false });
         * // => 1
         *
         * // using the `_.matchesProperty` callback shorthand
         * _.findIndex(users, 'active', false);
         * // => 0
         *
         * // using the `_.property` callback shorthand
         * _.findIndex(users, 'active');
         * // => 2
         */
        var findIndex = createFindIndex();

        /**
         * This method is like `_.findIndex` except that it iterates over elements
         * of `collection` from right to left.
         *
         * If a property name is provided for `predicate` the created `_.property`
         * style callback returns the property value of the given element.
         *
         * If a value is also provided for `thisArg` the created `_.matchesProperty`
         * style callback returns `true` for elements that have a matching property
         * value, else `false`.
         *
         * If an object is provided for `predicate` the created `_.matches` style
         * callback returns `true` for elements that have the properties of the given
         * object, else `false`.
         *
         * @static
         * @memberOf _
         * @category Array
         * @param {Array} array The array to search.
         * @param {Function|Object|string} [predicate=_.identity] The function invoked
         *  per iteration.
         * @param {*} [thisArg] The `this` binding of `predicate`.
         * @returns {number} Returns the index of the found element, else `-1`.
         * @example
         *
         * var users = [
         *   { 'user': 'barney',  'active': true },
         *   { 'user': 'fred',    'active': false },
         *   { 'user': 'pebbles', 'active': false }
         * ];
         *
         * _.findLastIndex(users, function(chr) {
     *   return chr.user == 'pebbles';
     * });
         * // => 2
         *
         * // using the `_.matches` callback shorthand
         * _.findLastIndex(users, { 'user': 'barney', 'active': true });
         * // => 0
         *
         * // using the `_.matchesProperty` callback shorthand
         * _.findLastIndex(users, 'active', false);
         * // => 2
         *
         * // using the `_.property` callback shorthand
         * _.findLastIndex(users, 'active');
         * // => 0
         */
        var findLastIndex = createFindIndex(true);

        /**
         * Gets the first element of `array`.
         *
         * @static
         * @memberOf _
         * @alias head
         * @category Array
         * @param {Array} array The array to query.
         * @returns {*} Returns the first element of `array`.
         * @example
         *
         * _.first([1, 2, 3]);
         * // => 1
         *
         * _.first([]);
         * // => undefined
         */
        function first(array) {
          return array ? array[0] : undefined;
        }

        /**
         * Flattens a nested array. If `isDeep` is `true` the array is recursively
         * flattened, otherwise it is only flattened a single level.
         *
         * @static
         * @memberOf _
         * @category Array
         * @param {Array} array The array to flatten.
         * @param {boolean} [isDeep] Specify a deep flatten.
         * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
         * @returns {Array} Returns the new flattened array.
         * @example
         *
         * _.flatten([1, [2, 3, [4]]]);
         * // => [1, 2, 3, [4]]
         *
         * // using `isDeep`
         * _.flatten([1, [2, 3, [4]]], true);
         * // => [1, 2, 3, 4]
         */
        function flatten(array, isDeep, guard) {
          var length = array ? array.length : 0;
          if (guard && isIterateeCall(array, isDeep, guard)) {
            isDeep = false;
          }
          return length ? baseFlatten(array, isDeep) : [];
        }

        /**
         * Recursively flattens a nested array.
         *
         * @static
         * @memberOf _
         * @category Array
         * @param {Array} array The array to recursively flatten.
         * @returns {Array} Returns the new flattened array.
         * @example
         *
         * _.flattenDeep([1, [2, 3, [4]]]);
         * // => [1, 2, 3, 4]
         */
        function flattenDeep(array) {
          var length = array ? array.length : 0;
          return length ? baseFlatten(array, true) : [];
        }

        /**
         * Gets the index at which the first occurrence of `value` is found in `array`
         * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
         * for equality comparisons. If `fromIndex` is negative, it is used as the offset
         * from the end of `array`. If `array` is sorted providing `true` for `fromIndex`
         * performs a faster binary search.
         *
         * @static
         * @memberOf _
         * @category Array
         * @param {Array} array The array to search.
         * @param {*} value The value to search for.
         * @param {boolean|number} [fromIndex=0] The index to search from or `true`
         *  to perform a binary search on a sorted array.
         * @returns {number} Returns the index of the matched value, else `-1`.
         * @example
         *
         * _.indexOf([1, 2, 1, 2], 2);
         * // => 1
         *
         * // using `fromIndex`
         * _.indexOf([1, 2, 1, 2], 2, 2);
         * // => 3
         *
         * // performing a binary search
         * _.indexOf([1, 1, 2, 2], 2, true);
         * // => 2
         */
        function indexOf(array, value, fromIndex) {
          var length = array ? array.length : 0;
          if (!length) {
            return -1;
          }
          if (typeof fromIndex == 'number') {
            fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : fromIndex;
          } else if (fromIndex) {
            var index = binaryIndex(array, value);
            if (index < length &&
              (value === value ? (value === array[index]) : (array[index] !== array[index]))) {
              return index;
            }
            return -1;
          }
          return baseIndexOf(array, value, fromIndex || 0);
        }

        /**
         * Gets all but the last element of `array`.
         *
         * @static
         * @memberOf _
         * @category Array
         * @param {Array} array The array to query.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * _.initial([1, 2, 3]);
         * // => [1, 2]
         */
        function initial(array) {
          return dropRight(array, 1);
        }

        /**
         * Creates an array of unique values that are included in all of the provided
         * arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
         * for equality comparisons.
         *
         * @static
         * @memberOf _
         * @category Array
         * @param {...Array} [arrays] The arrays to inspect.
         * @returns {Array} Returns the new array of shared values.
         * @example
         * _.intersection([1, 2], [4, 2], [2, 1]);
         * // => [2]
         */
        var intersection = restParam(function(arrays) {
          var othLength = arrays.length,
            othIndex = othLength,
            caches = Array(length),
            indexOf = getIndexOf(),
            isCommon = indexOf == baseIndexOf,
            result = [];

          while (othIndex--) {
            var value = arrays[othIndex] = isArrayLike(value = arrays[othIndex]) ? value : [];
            caches[othIndex] = (isCommon && value.length >= 120) ? createCache(othIndex && value) : null;
          }
          var array = arrays[0],
            index = -1,
            length = array ? array.length : 0,
            seen = caches[0];

          outer:
            while (++index < length) {
              value = array[index];
              if ((seen ? cacheIndexOf(seen, value) : indexOf(result, value, 0)) < 0) {
                var othIndex = othLength;
                while (--othIndex) {
                  var cache = caches[othIndex];
                  if ((cache ? cacheIndexOf(cache, value) : indexOf(arrays[othIndex], value, 0)) < 0) {
                    continue outer;
                  }
                }
                if (seen) {
                  seen.push(value);
                }
                result.push(value);
              }
            }
          return result;
        });

        /**
         * Gets the last element of `array`.
         *
         * @static
         * @memberOf _
         * @category Array
         * @param {Array} array The array to query.
         * @returns {*} Returns the last element of `array`.
         * @example
         *
         * _.last([1, 2, 3]);
         * // => 3
         */
        function last(array) {
          var length = array ? array.length : 0;
          return length ? array[length - 1] : undefined;
        }

        /**
         * This method is like `_.indexOf` except that it iterates over elements of
         * `array` from right to left.
         *
         * @static
         * @memberOf _
         * @category Array
         * @param {Array} array The array to search.
         * @param {*} value The value to search for.
         * @param {boolean|number} [fromIndex=array.length-1] The index to search from
         *  or `true` to perform a binary search on a sorted array.
         * @returns {number} Returns the index of the matched value, else `-1`.
         * @example
         *
         * _.lastIndexOf([1, 2, 1, 2], 2);
         * // => 3
         *
         * // using `fromIndex`
         * _.lastIndexOf([1, 2, 1, 2], 2, 2);
         * // => 1
         *
         * // performing a binary search
         * _.lastIndexOf([1, 1, 2, 2], 2, true);
         * // => 3
         */
        function lastIndexOf(array, value, fromIndex) {
          var length = array ? array.length : 0;
          if (!length) {
            return -1;
          }
          var index = length;
          if (typeof fromIndex == 'number') {
            index = (fromIndex < 0 ? nativeMax(length + fromIndex, 0) : nativeMin(fromIndex || 0, length - 1)) + 1;
          } else if (fromIndex) {
            index = binaryIndex(array, value, true) - 1;
            var other = array[index];
            if (value === value ? (value === other) : (other !== other)) {
              return index;
            }
            return -1;
          }
          if (value !== value) {
            return indexOfNaN(array, index, true);
          }
          while (index--) {
            if (array[index] === value) {
              return index;
            }
          }
          return -1;
        }

        /**
         * Removes all provided values from `array` using
         * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
         * for equality comparisons.
         *
         * **Note:** Unlike `_.without`, this method mutates `array`.
         *
         * @static
         * @memberOf _
         * @category Array
         * @param {Array} array The array to modify.
         * @param {...*} [values] The values to remove.
         * @returns {Array} Returns `array`.
         * @example
         *
         * var array = [1, 2, 3, 1, 2, 3];
         *
         * _.pull(array, 2, 3);
         * console.log(array);
         * // => [1, 1]
         */
        function pull() {
          var args = arguments,
            array = args[0];

          if (!(array && array.length)) {
            return array;
          }
          var index = 0,
            indexOf = getIndexOf(),
            length = args.length;

          while (++index < length) {
            var fromIndex = 0,
              value = args[index];

            while ((fromIndex = indexOf(array, value, fromIndex)) > -1) {
              splice.call(array, fromIndex, 1);
            }
          }
          return array;
        }

        /**
         * Removes elements from `array` corresponding to the given indexes and returns
         * an array of the removed elements. Indexes may be specified as an array of
         * indexes or as individual arguments.
         *
         * **Note:** Unlike `_.at`, this method mutates `array`.
         *
         * @static
         * @memberOf _
         * @category Array
         * @param {Array} array The array to modify.
         * @param {...(number|number[])} [indexes] The indexes of elements to remove,
         *  specified as individual indexes or arrays of indexes.
         * @returns {Array} Returns the new array of removed elements.
         * @example
         *
         * var array = [5, 10, 15, 20];
         * var evens = _.pullAt(array, 1, 3);
         *
         * console.log(array);
         * // => [5, 15]
         *
         * console.log(evens);
         * // => [10, 20]
         */
        var pullAt = restParam(function(array, indexes) {
          indexes = baseFlatten(indexes);

          var result = baseAt(array, indexes);
          basePullAt(array, indexes.sort(baseCompareAscending));
          return result;
        });

        /**
         * Removes all elements from `array` that `predicate` returns truthy for
         * and returns an array of the removed elements. The predicate is bound to
         * `thisArg` and invoked with three arguments: (value, index, array).
         *
         * If a property name is provided for `predicate` the created `_.property`
         * style callback returns the property value of the given element.
         *
         * If a value is also provided for `thisArg` the created `_.matchesProperty`
         * style callback returns `true` for elements that have a matching property
         * value, else `false`.
         *
         * If an object is provided for `predicate` the created `_.matches` style
         * callback returns `true` for elements that have the properties of the given
         * object, else `false`.
         *
         * **Note:** Unlike `_.filter`, this method mutates `array`.
         *
         * @static
         * @memberOf _
         * @category Array
         * @param {Array} array The array to modify.
         * @param {Function|Object|string} [predicate=_.identity] The function invoked
         *  per iteration.
         * @param {*} [thisArg] The `this` binding of `predicate`.
         * @returns {Array} Returns the new array of removed elements.
         * @example
         *
         * var array = [1, 2, 3, 4];
         * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
         *
         * console.log(array);
         * // => [1, 3]
         *
         * console.log(evens);
         * // => [2, 4]
         */
        function remove(array, predicate, thisArg) {
          var result = [];
          if (!(array && array.length)) {
            return result;
          }
          var index = -1,
            indexes = [],
            length = array.length;

          predicate = getCallback(predicate, thisArg, 3);
          while (++index < length) {
            var value = array[index];
            if (predicate(value, index, array)) {
              result.push(value);
              indexes.push(index);
            }
          }
          basePullAt(array, indexes);
          return result;
        }

        /**
         * Gets all but the first element of `array`.
         *
         * @static
         * @memberOf _
         * @alias tail
         * @category Array
         * @param {Array} array The array to query.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * _.rest([1, 2, 3]);
         * // => [2, 3]
         */
        function rest(array) {
          return drop(array, 1);
        }

        /**
         * Creates a slice of `array` from `start` up to, but not including, `end`.
         *
         * **Note:** This method is used instead of `Array#slice` to support node
         * lists in IE < 9 and to ensure dense arrays are returned.
         *
         * @static
         * @memberOf _
         * @category Array
         * @param {Array} array The array to slice.
         * @param {number} [start=0] The start position.
         * @param {number} [end=array.length] The end position.
         * @returns {Array} Returns the slice of `array`.
         */
        function slice(array, start, end) {
          var length = array ? array.length : 0;
          if (!length) {
            return [];
          }
          if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
            start = 0;
            end = length;
          }
          return baseSlice(array, start, end);
        }

        /**
         * Uses a binary search to determine the lowest index at which `value` should
         * be inserted into `array` in order to maintain its sort order. If an iteratee
         * function is provided it is invoked for `value` and each element of `array`
         * to compute their sort ranking. The iteratee is bound to `thisArg` and
         * invoked with one argument; (value).
         *
         * If a property name is provided for `iteratee` the created `_.property`
         * style callback returns the property value of the given element.
         *
         * If a value is also provided for `thisArg` the created `_.matchesProperty`
         * style callback returns `true` for elements that have a matching property
         * value, else `false`.
         *
         * If an object is provided for `iteratee` the created `_.matches` style
         * callback returns `true` for elements that have the properties of the given
         * object, else `false`.
         *
         * @static
         * @memberOf _
         * @category Array
         * @param {Array} array The sorted array to inspect.
         * @param {*} value The value to evaluate.
         * @param {Function|Object|string} [iteratee=_.identity] The function invoked
         *  per iteration.
         * @param {*} [thisArg] The `this` binding of `iteratee`.
         * @returns {number} Returns the index at which `value` should be inserted
         *  into `array`.
         * @example
         *
         * _.sortedIndex([30, 50], 40);
         * // => 1
         *
         * _.sortedIndex([4, 4, 5, 5], 5);
         * // => 2
         *
         * var dict = { 'data': { 'thirty': 30, 'forty': 40, 'fifty': 50 } };
         *
         * // using an iteratee function
         * _.sortedIndex(['thirty', 'fifty'], 'forty', function(word) {
     *   return this.data[word];
     * }, dict);
         * // => 1
         *
         * // using the `_.property` callback shorthand
         * _.sortedIndex([{ 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');
         * // => 1
         */
        var sortedIndex = createSortedIndex();

        /**
         * This method is like `_.sortedIndex` except that it returns the highest
         * index at which `value` should be inserted into `array` in order to
         * maintain its sort order.
         *
         * @static
         * @memberOf _
         * @category Array
         * @param {Array} array The sorted array to inspect.
         * @param {*} value The value to evaluate.
         * @param {Function|Object|string} [iteratee=_.identity] The function invoked
         *  per iteration.
         * @param {*} [thisArg] The `this` binding of `iteratee`.
         * @returns {number} Returns the index at which `value` should be inserted
         *  into `array`.
         * @example
         *
         * _.sortedLastIndex([4, 4, 5, 5], 5);
         * // => 4
         */
        var sortedLastIndex = createSortedIndex(true);

        /**
         * Creates a slice of `array` with `n` elements taken from the beginning.
         *
         * @static
         * @memberOf _
         * @category Array
         * @param {Array} array The array to query.
         * @param {number} [n=1] The number of elements to take.
         * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * _.take([1, 2, 3]);
         * // => [1]
         *
         * _.take([1, 2, 3], 2);
         * // => [1, 2]
         *
         * _.take([1, 2, 3], 5);
         * // => [1, 2, 3]
         *
         * _.take([1, 2, 3], 0);
         * // => []
         */
        function take(array, n, guard) {
          var length = array ? array.length : 0;
          if (!length) {
            return [];
          }
          if (guard ? isIterateeCall(array, n, guard) : n == null) {
            n = 1;
          }
          return baseSlice(array, 0, n < 0 ? 0 : n);
        }

        /**
         * Creates a slice of `array` with `n` elements taken from the end.
         *
         * @static
         * @memberOf _
         * @category Array
         * @param {Array} array The array to query.
         * @param {number} [n=1] The number of elements to take.
         * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * _.takeRight([1, 2, 3]);
         * // => [3]
         *
         * _.takeRight([1, 2, 3], 2);
         * // => [2, 3]
         *
         * _.takeRight([1, 2, 3], 5);
         * // => [1, 2, 3]
         *
         * _.takeRight([1, 2, 3], 0);
         * // => []
         */
        function takeRight(array, n, guard) {
          var length = array ? array.length : 0;
          if (!length) {
            return [];
          }
          if (guard ? isIterateeCall(array, n, guard) : n == null) {
            n = 1;
          }
          n = length - (+n || 0);
          return baseSlice(array, n < 0 ? 0 : n);
        }

        /**
         * Creates a slice of `array` with elements taken from the end. Elements are
         * taken until `predicate` returns falsey. The predicate is bound to `thisArg`
         * and invoked with three arguments: (value, index, array).
         *
         * If a property name is provided for `predicate` the created `_.property`
         * style callback returns the property value of the given element.
         *
         * If a value is also provided for `thisArg` the created `_.matchesProperty`
         * style callback returns `true` for elements that have a matching property
         * value, else `false`.
         *
         * If an object is provided for `predicate` the created `_.matches` style
         * callback returns `true` for elements that have the properties of the given
         * object, else `false`.
         *
         * @static
         * @memberOf _
         * @category Array
         * @param {Array} array The array to query.
         * @param {Function|Object|string} [predicate=_.identity] The function invoked
         *  per iteration.
         * @param {*} [thisArg] The `this` binding of `predicate`.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * _.takeRightWhile([1, 2, 3], function(n) {
     *   return n > 1;
     * });
         * // => [2, 3]
         *
         * var users = [
         *   { 'user': 'barney',  'active': true },
         *   { 'user': 'fred',    'active': false },
         *   { 'user': 'pebbles', 'active': false }
         * ];
         *
         * // using the `_.matches` callback shorthand
         * _.pluck(_.takeRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
         * // => ['pebbles']
         *
         * // using the `_.matchesProperty` callback shorthand
         * _.pluck(_.takeRightWhile(users, 'active', false), 'user');
         * // => ['fred', 'pebbles']
         *
         * // using the `_.property` callback shorthand
         * _.pluck(_.takeRightWhile(users, 'active'), 'user');
         * // => []
         */
        function takeRightWhile(array, predicate, thisArg) {
          return (array && array.length)
            ? baseWhile(array, getCallback(predicate, thisArg, 3), false, true)
            : [];
        }

        /**
         * Creates a slice of `array` with elements taken from the beginning. Elements
         * are taken until `predicate` returns falsey. The predicate is bound to
         * `thisArg` and invoked with three arguments: (value, index, array).
         *
         * If a property name is provided for `predicate` the created `_.property`
         * style callback returns the property value of the given element.
         *
         * If a value is also provided for `thisArg` the created `_.matchesProperty`
         * style callback returns `true` for elements that have a matching property
         * value, else `false`.
         *
         * If an object is provided for `predicate` the created `_.matches` style
         * callback returns `true` for elements that have the properties of the given
         * object, else `false`.
         *
         * @static
         * @memberOf _
         * @category Array
         * @param {Array} array The array to query.
         * @param {Function|Object|string} [predicate=_.identity] The function invoked
         *  per iteration.
         * @param {*} [thisArg] The `this` binding of `predicate`.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * _.takeWhile([1, 2, 3], function(n) {
     *   return n < 3;
     * });
         * // => [1, 2]
         *
         * var users = [
         *   { 'user': 'barney',  'active': false },
         *   { 'user': 'fred',    'active': false},
         *   { 'user': 'pebbles', 'active': true }
         * ];
         *
         * // using the `_.matches` callback shorthand
         * _.pluck(_.takeWhile(users, { 'user': 'barney', 'active': false }), 'user');
         * // => ['barney']
         *
         * // using the `_.matchesProperty` callback shorthand
         * _.pluck(_.takeWhile(users, 'active', false), 'user');
         * // => ['barney', 'fred']
         *
         * // using the `_.property` callback shorthand
         * _.pluck(_.takeWhile(users, 'active'), 'user');
         * // => []
         */
        function takeWhile(array, predicate, thisArg) {
          return (array && array.length)
            ? baseWhile(array, getCallback(predicate, thisArg, 3))
            : [];
        }

        /**
         * Creates an array of unique values, in order, from all of the provided arrays
         * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
         * for equality comparisons.
         *
         * @static
         * @memberOf _
         * @category Array
         * @param {...Array} [arrays] The arrays to inspect.
         * @returns {Array} Returns the new array of combined values.
         * @example
         *
         * _.union([1, 2], [4, 2], [2, 1]);
         * // => [1, 2, 4]
         */
        var union = restParam(function(arrays) {
          return baseUniq(baseFlatten(arrays, false, true));
        });

        /**
         * Creates a duplicate-free version of an array, using
         * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
         * for equality comparisons, in which only the first occurence of each element
         * is kept. Providing `true` for `isSorted` performs a faster search algorithm
         * for sorted arrays. If an iteratee function is provided it is invoked for
         * each element in the array to generate the criterion by which uniqueness
         * is computed. The `iteratee` is bound to `thisArg` and invoked with three
         * arguments: (value, index, array).
         *
         * If a property name is provided for `iteratee` the created `_.property`
         * style callback returns the property value of the given element.
         *
         * If a value is also provided for `thisArg` the created `_.matchesProperty`
         * style callback returns `true` for elements that have a matching property
         * value, else `false`.
         *
         * If an object is provided for `iteratee` the created `_.matches` style
         * callback returns `true` for elements that have the properties of the given
         * object, else `false`.
         *
         * @static
         * @memberOf _
         * @alias unique
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {boolean} [isSorted] Specify the array is sorted.
         * @param {Function|Object|string} [iteratee] The function invoked per iteration.
         * @param {*} [thisArg] The `this` binding of `iteratee`.
         * @returns {Array} Returns the new duplicate-value-free array.
         * @example
         *
         * _.uniq([2, 1, 2]);
         * // => [2, 1]
         *
         * // using `isSorted`
         * _.uniq([1, 1, 2], true);
         * // => [1, 2]
         *
         * // using an iteratee function
         * _.uniq([1, 2.5, 1.5, 2], function(n) {
     *   return this.floor(n);
     * }, Math);
         * // => [1, 2.5]
         *
         * // using the `_.property` callback shorthand
         * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
         * // => [{ 'x': 1 }, { 'x': 2 }]
         */
        function uniq(array, isSorted, iteratee, thisArg) {
          var length = array ? array.length : 0;
          if (!length) {
            return [];
          }
          if (isSorted != null && typeof isSorted != 'boolean') {
            thisArg = iteratee;
            iteratee = isIterateeCall(array, isSorted, thisArg) ? undefined : isSorted;
            isSorted = false;
          }
          var callback = getCallback();
          if (!(iteratee == null && callback === baseCallback)) {
            iteratee = callback(iteratee, thisArg, 3);
          }
          return (isSorted && getIndexOf() == baseIndexOf)
            ? sortedUniq(array, iteratee)
            : baseUniq(array, iteratee);
        }

        /**
         * This method is like `_.zip` except that it accepts an array of grouped
         * elements and creates an array regrouping the elements to their pre-zip
         * configuration.
         *
         * @static
         * @memberOf _
         * @category Array
         * @param {Array} array The array of grouped elements to process.
         * @returns {Array} Returns the new array of regrouped elements.
         * @example
         *
         * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);
         * // => [['fred', 30, true], ['barney', 40, false]]
         *
         * _.unzip(zipped);
         * // => [['fred', 'barney'], [30, 40], [true, false]]
         */
        function unzip(array) {
          if (!(array && array.length)) {
            return [];
          }
          var index = -1,
            length = 0;

          array = arrayFilter(array, function(group) {
            if (isArrayLike(group)) {
              length = nativeMax(group.length, length);
              return true;
            }
          });
          var result = Array(length);
          while (++index < length) {
            result[index] = arrayMap(array, baseProperty(index));
          }
          return result;
        }

        /**
         * This method is like `_.unzip` except that it accepts an iteratee to specify
         * how regrouped values should be combined. The `iteratee` is bound to `thisArg`
         * and invoked with four arguments: (accumulator, value, index, group).
         *
         * @static
         * @memberOf _
         * @category Array
         * @param {Array} array The array of grouped elements to process.
         * @param {Function} [iteratee] The function to combine regrouped values.
         * @param {*} [thisArg] The `this` binding of `iteratee`.
         * @returns {Array} Returns the new array of regrouped elements.
         * @example
         *
         * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
         * // => [[1, 10, 100], [2, 20, 200]]
         *
         * _.unzipWith(zipped, _.add);
         * // => [3, 30, 300]
         */
        function unzipWith(array, iteratee, thisArg) {
          var length = array ? array.length : 0;
          if (!length) {
            return [];
          }
          var result = unzip(array);
          if (iteratee == null) {
            return result;
          }
          iteratee = bindCallback(iteratee, thisArg, 4);
          return arrayMap(result, function(group) {
            return arrayReduce(group, iteratee, undefined, true);
          });
        }

        /**
         * Creates an array excluding all provided values using
         * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
         * for equality comparisons.
         *
         * @static
         * @memberOf _
         * @category Array
         * @param {Array} array The array to filter.
         * @param {...*} [values] The values to exclude.
         * @returns {Array} Returns the new array of filtered values.
         * @example
         *
         * _.without([1, 2, 1, 3], 1, 2);
         * // => [3]
         */
        var without = restParam(function(array, values) {
          return isArrayLike(array)
            ? baseDifference(array, values)
            : [];
        });

        /**
         * Creates an array of unique values that is the [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
         * of the provided arrays.
         *
         * @static
         * @memberOf _
         * @category Array
         * @param {...Array} [arrays] The arrays to inspect.
         * @returns {Array} Returns the new array of values.
         * @example
         *
         * _.xor([1, 2], [4, 2]);
         * // => [1, 4]
         */
        function xor() {
          var index = -1,
            length = arguments.length;

          while (++index < length) {
            var array = arguments[index];
            if (isArrayLike(array)) {
              var result = result
                ? arrayPush(baseDifference(result, array), baseDifference(array, result))
                : array;
            }
          }
          return result ? baseUniq(result) : [];
        }

        /**
         * Creates an array of grouped elements, the first of which contains the first
         * elements of the given arrays, the second of which contains the second elements
         * of the given arrays, and so on.
         *
         * @static
         * @memberOf _
         * @category Array
         * @param {...Array} [arrays] The arrays to process.
         * @returns {Array} Returns the new array of grouped elements.
         * @example
         *
         * _.zip(['fred', 'barney'], [30, 40], [true, false]);
         * // => [['fred', 30, true], ['barney', 40, false]]
         */
        var zip = restParam(unzip);

        /**
         * The inverse of `_.pairs`; this method returns an object composed from arrays
         * of property names and values. Provide either a single two dimensional array,
         * e.g. `[[key1, value1], [key2, value2]]` or two arrays, one of property names
         * and one of corresponding values.
         *
         * @static
         * @memberOf _
         * @alias object
         * @category Array
         * @param {Array} props The property names.
         * @param {Array} [values=[]] The property values.
         * @returns {Object} Returns the new object.
         * @example
         *
         * _.zipObject([['fred', 30], ['barney', 40]]);
         * // => { 'fred': 30, 'barney': 40 }
         *
         * _.zipObject(['fred', 'barney'], [30, 40]);
         * // => { 'fred': 30, 'barney': 40 }
         */
        function zipObject(props, values) {
          var index = -1,
            length = props ? props.length : 0,
            result = {};

          if (length && !values && !isArray(props[0])) {
            values = [];
          }
          while (++index < length) {
            var key = props[index];
            if (values) {
              result[key] = values[index];
            } else if (key) {
              result[key[0]] = key[1];
            }
          }
          return result;
        }

        /**
         * This method is like `_.zip` except that it accepts an iteratee to specify
         * how grouped values should be combined. The `iteratee` is bound to `thisArg`
         * and invoked with four arguments: (accumulator, value, index, group).
         *
         * @static
         * @memberOf _
         * @category Array
         * @param {...Array} [arrays] The arrays to process.
         * @param {Function} [iteratee] The function to combine grouped values.
         * @param {*} [thisArg] The `this` binding of `iteratee`.
         * @returns {Array} Returns the new array of grouped elements.
         * @example
         *
         * _.zipWith([1, 2], [10, 20], [100, 200], _.add);
         * // => [111, 222]
         */
        var zipWith = restParam(function(arrays) {
          var length = arrays.length,
            iteratee = length > 2 ? arrays[length - 2] : undefined,
            thisArg = length > 1 ? arrays[length - 1] : undefined;

          if (length > 2 && typeof iteratee == 'function') {
            length -= 2;
          } else {
            iteratee = (length > 1 && typeof thisArg == 'function') ? (--length, thisArg) : undefined;
            thisArg = undefined;
          }
          arrays.length = length;
          return unzipWith(arrays, iteratee, thisArg);
        });

        /*------------------------------------------------------------------------*/

        /**
         * Creates a `lodash` object that wraps `value` with explicit method
         * chaining enabled.
         *
         * @static
         * @memberOf _
         * @category Chain
         * @param {*} value The value to wrap.
         * @returns {Object} Returns the new `lodash` wrapper instance.
         * @example
         *
         * var users = [
         *   { 'user': 'barney',  'age': 36 },
         *   { 'user': 'fred',    'age': 40 },
         *   { 'user': 'pebbles', 'age': 1 }
         * ];
         *
         * var youngest = _.chain(users)
         *   .sortBy('age')
         *   .map(function(chr) {
     *     return chr.user + ' is ' + chr.age;
     *   })
         *   .first()
         *   .value();
         * // => 'pebbles is 1'
         */
        function chain(value) {
          var result = lodash(value);
          result.__chain__ = true;
          return result;
        }

        /**
         * This method invokes `interceptor` and returns `value`. The interceptor is
         * bound to `thisArg` and invoked with one argument; (value). The purpose of
         * this method is to "tap into" a method chain in order to perform operations
         * on intermediate results within the chain.
         *
         * @static
         * @memberOf _
         * @category Chain
         * @param {*} value The value to provide to `interceptor`.
         * @param {Function} interceptor The function to invoke.
         * @param {*} [thisArg] The `this` binding of `interceptor`.
         * @returns {*} Returns `value`.
         * @example
         *
         * _([1, 2, 3])
         *  .tap(function(array) {
     *    array.pop();
     *  })
         *  .reverse()
         *  .value();
         * // => [2, 1]
         */
        function tap(value, interceptor, thisArg) {
          interceptor.call(thisArg, value);
          return value;
        }

        /**
         * This method is like `_.tap` except that it returns the result of `interceptor`.
         *
         * @static
         * @memberOf _
         * @category Chain
         * @param {*} value The value to provide to `interceptor`.
         * @param {Function} interceptor The function to invoke.
         * @param {*} [thisArg] The `this` binding of `interceptor`.
         * @returns {*} Returns the result of `interceptor`.
         * @example
         *
         * _('  abc  ')
         *  .chain()
         *  .trim()
         *  .thru(function(value) {
     *    return [value];
     *  })
         *  .value();
         * // => ['abc']
         */
        function thru(value, interceptor, thisArg) {
          return interceptor.call(thisArg, value);
        }

        /**
         * Enables explicit method chaining on the wrapper object.
         *
         * @name chain
         * @memberOf _
         * @category Chain
         * @returns {Object} Returns the new `lodash` wrapper instance.
         * @example
         *
         * var users = [
         *   { 'user': 'barney', 'age': 36 },
         *   { 'user': 'fred',   'age': 40 }
         * ];
         *
         * // without explicit chaining
         * _(users).first();
         * // => { 'user': 'barney', 'age': 36 }
         *
         * // with explicit chaining
         * _(users).chain()
         *   .first()
         *   .pick('user')
         *   .value();
         * // => { 'user': 'barney' }
         */
        function wrapperChain() {
          return chain(this);
        }

        /**
         * Executes the chained sequence and returns the wrapped result.
         *
         * @name commit
         * @memberOf _
         * @category Chain
         * @returns {Object} Returns the new `lodash` wrapper instance.
         * @example
         *
         * var array = [1, 2];
         * var wrapped = _(array).push(3);
         *
         * console.log(array);
         * // => [1, 2]
         *
         * wrapped = wrapped.commit();
         * console.log(array);
         * // => [1, 2, 3]
         *
         * wrapped.last();
         * // => 3
         *
         * console.log(array);
         * // => [1, 2, 3]
         */
        function wrapperCommit() {
          return new LodashWrapper(this.value(), this.__chain__);
        }

        /**
         * Creates a new array joining a wrapped array with any additional arrays
         * and/or values.
         *
         * @name concat
         * @memberOf _
         * @category Chain
         * @param {...*} [values] The values to concatenate.
         * @returns {Array} Returns the new concatenated array.
         * @example
         *
         * var array = [1];
         * var wrapped = _(array).concat(2, [3], [[4]]);
         *
         * console.log(wrapped.value());
         * // => [1, 2, 3, [4]]
         *
         * console.log(array);
         * // => [1]
         */
        var wrapperConcat = restParam(function(values) {
          values = baseFlatten(values);
          return this.thru(function(array) {
            return arrayConcat(isArray(array) ? array : [toObject(array)], values);
          });
        });

        /**
         * Creates a clone of the chained sequence planting `value` as the wrapped value.
         *
         * @name plant
         * @memberOf _
         * @category Chain
         * @returns {Object} Returns the new `lodash` wrapper instance.
         * @example
         *
         * var array = [1, 2];
         * var wrapped = _(array).map(function(value) {
     *   return Math.pow(value, 2);
     * });
         *
         * var other = [3, 4];
         * var otherWrapped = wrapped.plant(other);
         *
         * otherWrapped.value();
         * // => [9, 16]
         *
         * wrapped.value();
         * // => [1, 4]
         */
        function wrapperPlant(value) {
          var result,
            parent = this;

          while (parent instanceof baseLodash) {
            var clone = wrapperClone(parent);
            if (result) {
              previous.__wrapped__ = clone;
            } else {
              result = clone;
            }
            var previous = clone;
            parent = parent.__wrapped__;
          }
          previous.__wrapped__ = value;
          return result;
        }

        /**
         * Reverses the wrapped array so the first element becomes the last, the
         * second element becomes the second to last, and so on.
         *
         * **Note:** This method mutates the wrapped array.
         *
         * @name reverse
         * @memberOf _
         * @category Chain
         * @returns {Object} Returns the new reversed `lodash` wrapper instance.
         * @example
         *
         * var array = [1, 2, 3];
         *
         * _(array).reverse().value()
         * // => [3, 2, 1]
         *
         * console.log(array);
         * // => [3, 2, 1]
         */
        function wrapperReverse() {
          var value = this.__wrapped__;

          var interceptor = function(value) {
            return (wrapped && wrapped.__dir__ < 0) ? value : value.reverse();
          };
          if (value instanceof LazyWrapper) {
            var wrapped = value;
            if (this.__actions__.length) {
              wrapped = new LazyWrapper(this);
            }
            wrapped = wrapped.reverse();
            wrapped.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
            return new LodashWrapper(wrapped, this.__chain__);
          }
          return this.thru(interceptor);
        }

        /**
         * Produces the result of coercing the unwrapped value to a string.
         *
         * @name toString
         * @memberOf _
         * @category Chain
         * @returns {string} Returns the coerced string value.
         * @example
         *
         * _([1, 2, 3]).toString();
         * // => '1,2,3'
         */
        function wrapperToString() {
          return (this.value() + '');
        }

        /**
         * Executes the chained sequence to extract the unwrapped value.
         *
         * @name value
         * @memberOf _
         * @alias run, toJSON, valueOf
         * @category Chain
         * @returns {*} Returns the resolved unwrapped value.
         * @example
         *
         * _([1, 2, 3]).value();
         * // => [1, 2, 3]
         */
        function wrapperValue() {
          return baseWrapperValue(this.__wrapped__, this.__actions__);
        }

        /*------------------------------------------------------------------------*/

        /**
         * Creates an array of elements corresponding to the given keys, or indexes,
         * of `collection`. Keys may be specified as individual arguments or as arrays
         * of keys.
         *
         * @static
         * @memberOf _
         * @category Collection
         * @param {Array|Object|string} collection The collection to iterate over.
         * @param {...(number|number[]|string|string[])} [props] The property names
         *  or indexes of elements to pick, specified individually or in arrays.
         * @returns {Array} Returns the new array of picked elements.
         * @example
         *
         * _.at(['a', 'b', 'c'], [0, 2]);
         * // => ['a', 'c']
         *
         * _.at(['barney', 'fred', 'pebbles'], 0, 2);
         * // => ['barney', 'pebbles']
         */
        var at = restParam(function(collection, props) {
          return baseAt(collection, baseFlatten(props));
        });

        /**
         * Creates an object composed of keys generated from the results of running
         * each element of `collection` through `iteratee`. The corresponding value
         * of each key is the number of times the key was returned by `iteratee`.
         * The `iteratee` is bound to `thisArg` and invoked with three arguments:
         * (value, index|key, collection).
         *
         * If a property name is provided for `iteratee` the created `_.property`
         * style callback returns the property value of the given element.
         *
         * If a value is also provided for `thisArg` the created `_.matchesProperty`
         * style callback returns `true` for elements that have a matching property
         * value, else `false`.
         *
         * If an object is provided for `iteratee` the created `_.matches` style
         * callback returns `true` for elements that have the properties of the given
         * object, else `false`.
         *
         * @static
         * @memberOf _
         * @category Collection
         * @param {Array|Object|string} collection The collection to iterate over.
         * @param {Function|Object|string} [iteratee=_.identity] The function invoked
         *  per iteration.
         * @param {*} [thisArg] The `this` binding of `iteratee`.
         * @returns {Object} Returns the composed aggregate object.
         * @example
         *
         * _.countBy([4.3, 6.1, 6.4], function(n) {
     *   return Math.floor(n);
     * });
         * // => { '4': 1, '6': 2 }
         *
         * _.countBy([4.3, 6.1, 6.4], function(n) {
     *   return this.floor(n);
     * }, Math);
         * // => { '4': 1, '6': 2 }
         *
         * _.countBy(['one', 'two', 'three'], 'length');
         * // => { '3': 2, '5': 1 }
         */
        var countBy = createAggregator(function(result, value, key) {
          hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);
        });

        /**
         * Checks if `predicate` returns truthy for **all** elements of `collection`.
         * The predicate is bound to `thisArg` and invoked with three arguments:
         * (value, index|key, collection).
         *
         * If a property name is provided for `predicate` the created `_.property`
         * style callback returns the property value of the given element.
         *
         * If a value is also provided for `thisArg` the created `_.matchesProperty`
         * style callback returns `true` for elements that have a matching property
         * value, else `false`.
         *
         * If an object is provided for `predicate` the created `_.matches` style
         * callback returns `true` for elements that have the properties of the given
         * object, else `false`.
         *
         * @static
         * @memberOf _
         * @alias all
         * @category Collection
         * @param {Array|Object|string} collection The collection to iterate over.
         * @param {Function|Object|string} [predicate=_.identity] The function invoked
         *  per iteration.
         * @param {*} [thisArg] The `this` binding of `predicate`.
         * @returns {boolean} Returns `true` if all elements pass the predicate check,
         *  else `false`.
         * @example
         *
         * _.every([true, 1, null, 'yes'], Boolean);
         * // => false
         *
         * var users = [
         *   { 'user': 'barney', 'active': false },
         *   { 'user': 'fred',   'active': false }
         * ];
         *
         * // using the `_.matches` callback shorthand
         * _.every(users, { 'user': 'barney', 'active': false });
         * // => false
         *
         * // using the `_.matchesProperty` callback shorthand
         * _.every(users, 'active', false);
         * // => true
         *
         * // using the `_.property` callback shorthand
         * _.every(users, 'active');
         * // => false
         */
        function every(collection, predicate, thisArg) {
          var func = isArray(collection) ? arrayEvery : baseEvery;
          if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
            predicate = undefined;
          }
          if (typeof predicate != 'function' || thisArg !== undefined) {
            predicate = getCallback(predicate, thisArg, 3);
          }
          return func(collection, predicate);
        }

        /**
         * Iterates over elements of `collection`, returning an array of all elements
         * `predicate` returns truthy for. The predicate is bound to `thisArg` and
         * invoked with three arguments: (value, index|key, collection).
         *
         * If a property name is provided for `predicate` the created `_.property`
         * style callback returns the property value of the given element.
         *
         * If a value is also provided for `thisArg` the created `_.matchesProperty`
         * style callback returns `true` for elements that have a matching property
         * value, else `false`.
         *
         * If an object is provided for `predicate` the created `_.matches` style
         * callback returns `true` for elements that have the properties of the given
         * object, else `false`.
         *
         * @static
         * @memberOf _
         * @alias select
         * @category Collection
         * @param {Array|Object|string} collection The collection to iterate over.
         * @param {Function|Object|string} [predicate=_.identity] The function invoked
         *  per iteration.
         * @param {*} [thisArg] The `this` binding of `predicate`.
         * @returns {Array} Returns the new filtered array.
         * @example
         *
         * _.filter([4, 5, 6], function(n) {
     *   return n % 2 == 0;
     * });
         * // => [4, 6]
         *
         * var users = [
         *   { 'user': 'barney', 'age': 36, 'active': true },
         *   { 'user': 'fred',   'age': 40, 'active': false }
         * ];
         *
         * // using the `_.matches` callback shorthand
         * _.pluck(_.filter(users, { 'age': 36, 'active': true }), 'user');
         * // => ['barney']
         *
         * // using the `_.matchesProperty` callback shorthand
         * _.pluck(_.filter(users, 'active', false), 'user');
         * // => ['fred']
         *
         * // using the `_.property` callback shorthand
         * _.pluck(_.filter(users, 'active'), 'user');
         * // => ['barney']
         */
        function filter(collection, predicate, thisArg) {
          var func = isArray(collection) ? arrayFilter : baseFilter;
          predicate = getCallback(predicate, thisArg, 3);
          return func(collection, predicate);
        }

        /**
         * Iterates over elements of `collection`, returning the first element
         * `predicate` returns truthy for. The predicate is bound to `thisArg` and
         * invoked with three arguments: (value, index|key, collection).
         *
         * If a property name is provided for `predicate` the created `_.property`
         * style callback returns the property value of the given element.
         *
         * If a value is also provided for `thisArg` the created `_.matchesProperty`
         * style callback returns `true` for elements that have a matching property
         * value, else `false`.
         *
         * If an object is provided for `predicate` the created `_.matches` style
         * callback returns `true` for elements that have the properties of the given
         * object, else `false`.
         *
         * @static
         * @memberOf _
         * @alias detect
         * @category Collection
         * @param {Array|Object|string} collection The collection to search.
         * @param {Function|Object|string} [predicate=_.identity] The function invoked
         *  per iteration.
         * @param {*} [thisArg] The `this` binding of `predicate`.
         * @returns {*} Returns the matched element, else `undefined`.
         * @example
         *
         * var users = [
         *   { 'user': 'barney',  'age': 36, 'active': true },
         *   { 'user': 'fred',    'age': 40, 'active': false },
         *   { 'user': 'pebbles', 'age': 1,  'active': true }
         * ];
         *
         * _.result(_.find(users, function(chr) {
     *   return chr.age < 40;
     * }), 'user');
         * // => 'barney'
         *
         * // using the `_.matches` callback shorthand
         * _.result(_.find(users, { 'age': 1, 'active': true }), 'user');
         * // => 'pebbles'
         *
         * // using the `_.matchesProperty` callback shorthand
         * _.result(_.find(users, 'active', false), 'user');
         * // => 'fred'
         *
         * // using the `_.property` callback shorthand
         * _.result(_.find(users, 'active'), 'user');
         * // => 'barney'
         */
        var find = createFind(baseEach);

        /**
         * This method is like `_.find` except that it iterates over elements of
         * `collection` from right to left.
         *
         * @static
         * @memberOf _
         * @category Collection
         * @param {Array|Object|string} collection The collection to search.
         * @param {Function|Object|string} [predicate=_.identity] The function invoked
         *  per iteration.
         * @param {*} [thisArg] The `this` binding of `predicate`.
         * @returns {*} Returns the matched element, else `undefined`.
         * @example
         *
         * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
         * // => 3
         */
        var findLast = createFind(baseEachRight, true);

        /**
         * Performs a deep comparison between each element in `collection` and the
         * source object, returning the first element that has equivalent property
         * values.
         *
         * **Note:** This method supports comparing arrays, booleans, `Date` objects,
         * numbers, `Object` objects, regexes, and strings. Objects are compared by
         * their own, not inherited, enumerable properties. For comparing a single
         * own or inherited property value see `_.matchesProperty`.
         *
         * @static
         * @memberOf _
         * @category Collection
         * @param {Array|Object|string} collection The collection to search.
         * @param {Object} source The object of property values to match.
         * @returns {*} Returns the matched element, else `undefined`.
         * @example
         *
         * var users = [
         *   { 'user': 'barney', 'age': 36, 'active': true },
         *   { 'user': 'fred',   'age': 40, 'active': false }
         * ];
         *
         * _.result(_.findWhere(users, { 'age': 36, 'active': true }), 'user');
         * // => 'barney'
         *
         * _.result(_.findWhere(users, { 'age': 40, 'active': false }), 'user');
         * // => 'fred'
         */
        function findWhere(collection, source) {
          return find(collection, baseMatches(source));
        }

        /**
         * Iterates over elements of `collection` invoking `iteratee` for each element.
         * The `iteratee` is bound to `thisArg` and invoked with three arguments:
         * (value, index|key, collection). Iteratee functions may exit iteration early
         * by explicitly returning `false`.
         *
         * **Note:** As with other "Collections" methods, objects with a "length" property
         * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`
         * may be used for object iteration.
         *
         * @static
         * @memberOf _
         * @alias each
         * @category Collection
         * @param {Array|Object|string} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @param {*} [thisArg] The `this` binding of `iteratee`.
         * @returns {Array|Object|string} Returns `collection`.
         * @example
         *
         * _([1, 2]).forEach(function(n) {
     *   console.log(n);
     * }).value();
         * // => logs each value from left to right and returns the array
         *
         * _.forEach({ 'a': 1, 'b': 2 }, function(n, key) {
     *   console.log(n, key);
     * });
         * // => logs each value-key pair and returns the object (iteration order is not guaranteed)
         */
        var forEach = createForEach(arrayEach, baseEach);

        /**
         * This method is like `_.forEach` except that it iterates over elements of
         * `collection` from right to left.
         *
         * @static
         * @memberOf _
         * @alias eachRight
         * @category Collection
         * @param {Array|Object|string} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @param {*} [thisArg] The `this` binding of `iteratee`.
         * @returns {Array|Object|string} Returns `collection`.
         * @example
         *
         * _([1, 2]).forEachRight(function(n) {
     *   console.log(n);
     * }).value();
         * // => logs each value from right to left and returns the array
         */
        var forEachRight = createForEach(arrayEachRight, baseEachRight);

        /**
         * Creates an object composed of keys generated from the results of running
         * each element of `collection` through `iteratee`. The corresponding value
         * of each key is an array of the elements responsible for generating the key.
         * The `iteratee` is bound to `thisArg` and invoked with three arguments:
         * (value, index|key, collection).
         *
         * If a property name is provided for `iteratee` the created `_.property`
         * style callback returns the property value of the given element.
         *
         * If a value is also provided for `thisArg` the created `_.matchesProperty`
         * style callback returns `true` for elements that have a matching property
         * value, else `false`.
         *
         * If an object is provided for `iteratee` the created `_.matches` style
         * callback returns `true` for elements that have the properties of the given
         * object, else `false`.
         *
         * @static
         * @memberOf _
         * @category Collection
         * @param {Array|Object|string} collection The collection to iterate over.
         * @param {Function|Object|string} [iteratee=_.identity] The function invoked
         *  per iteration.
         * @param {*} [thisArg] The `this` binding of `iteratee`.
         * @returns {Object} Returns the composed aggregate object.
         * @example
         *
         * _.groupBy([4.2, 6.1, 6.4], function(n) {
     *   return Math.floor(n);
     * });
         * // => { '4': [4.2], '6': [6.1, 6.4] }
         *
         * _.groupBy([4.2, 6.1, 6.4], function(n) {
     *   return this.floor(n);
     * }, Math);
         * // => { '4': [4.2], '6': [6.1, 6.4] }
         *
         * // using the `_.property` callback shorthand
         * _.groupBy(['one', 'two', 'three'], 'length');
         * // => { '3': ['one', 'two'], '5': ['three'] }
         */
        var groupBy = createAggregator(function(result, value, key) {
          if (hasOwnProperty.call(result, key)) {
            result[key].push(value);
          } else {
            result[key] = [value];
          }
        });

        /**
         * Checks if `value` is in `collection` using
         * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
         * for equality comparisons. If `fromIndex` is negative, it is used as the offset
         * from the end of `collection`.
         *
         * @static
         * @memberOf _
         * @alias contains, include
         * @category Collection
         * @param {Array|Object|string} collection The collection to search.
         * @param {*} target The value to search for.
         * @param {number} [fromIndex=0] The index to search from.
         * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
         * @returns {boolean} Returns `true` if a matching element is found, else `false`.
         * @example
         *
         * _.includes([1, 2, 3], 1);
         * // => true
         *
         * _.includes([1, 2, 3], 1, 2);
         * // => false
         *
         * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');
         * // => true
         *
         * _.includes('pebbles', 'eb');
         * // => true
         */
        function includes(collection, target, fromIndex, guard) {
          var length = collection ? getLength(collection) : 0;
          if (!isLength(length)) {
            collection = values(collection);
            length = collection.length;
          }
          if (typeof fromIndex != 'number' || (guard && isIterateeCall(target, fromIndex, guard))) {
            fromIndex = 0;
          } else {
            fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : (fromIndex || 0);
          }
          return (typeof collection == 'string' || !isArray(collection) && isString(collection))
            ? (fromIndex <= length && collection.indexOf(target, fromIndex) > -1)
            : (!!length && getIndexOf(collection, target, fromIndex) > -1);
        }

        /**
         * Creates an object composed of keys generated from the results of running
         * each element of `collection` through `iteratee`. The corresponding value
         * of each key is the last element responsible for generating the key. The
         * iteratee function is bound to `thisArg` and invoked with three arguments:
         * (value, index|key, collection).
         *
         * If a property name is provided for `iteratee` the created `_.property`
         * style callback returns the property value of the given element.
         *
         * If a value is also provided for `thisArg` the created `_.matchesProperty`
         * style callback returns `true` for elements that have a matching property
         * value, else `false`.
         *
         * If an object is provided for `iteratee` the created `_.matches` style
         * callback returns `true` for elements that have the properties of the given
         * object, else `false`.
         *
         * @static
         * @memberOf _
         * @category Collection
         * @param {Array|Object|string} collection The collection to iterate over.
         * @param {Function|Object|string} [iteratee=_.identity] The function invoked
         *  per iteration.
         * @param {*} [thisArg] The `this` binding of `iteratee`.
         * @returns {Object} Returns the composed aggregate object.
         * @example
         *
         * var keyData = [
         *   { 'dir': 'left', 'code': 97 },
         *   { 'dir': 'right', 'code': 100 }
         * ];
         *
         * _.indexBy(keyData, 'dir');
         * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
         *
         * _.indexBy(keyData, function(object) {
     *   return String.fromCharCode(object.code);
     * });
         * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
         *
         * _.indexBy(keyData, function(object) {
     *   return this.fromCharCode(object.code);
     * }, String);
         * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
         */
        var indexBy = createAggregator(function(result, value, key) {
          result[key] = value;
        });

        /**
         * Invokes the method at `path` of each element in `collection`, returning
         * an array of the results of each invoked method. Any additional arguments
         * are provided to each invoked method. If `methodName` is a function it is
         * invoked for, and `this` bound to, each element in `collection`.
         *
         * @static
         * @memberOf _
         * @category Collection
         * @param {Array|Object|string} collection The collection to iterate over.
         * @param {Array|Function|string} path The path of the method to invoke or
         *  the function invoked per iteration.
         * @param {...*} [args] The arguments to invoke the method with.
         * @returns {Array} Returns the array of results.
         * @example
         *
         * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');
         * // => [[1, 5, 7], [1, 2, 3]]
         *
         * _.invoke([123, 456], String.prototype.split, '');
         * // => [['1', '2', '3'], ['4', '5', '6']]
         */
        var invoke = restParam(function(collection, path, args) {
          var index = -1,
            isFunc = typeof path == 'function',
            isProp = isKey(path),
            result = isArrayLike(collection) ? Array(collection.length) : [];

          baseEach(collection, function(value) {
            var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined);
            result[++index] = func ? func.apply(value, args) : invokePath(value, path, args);
          });
          return result;
        });

        /**
         * Creates an array of values by running each element in `collection` through
         * `iteratee`. The `iteratee` is bound to `thisArg` and invoked with three
         * arguments: (value, index|key, collection).
         *
         * If a property name is provided for `iteratee` the created `_.property`
         * style callback returns the property value of the given element.
         *
         * If a value is also provided for `thisArg` the created `_.matchesProperty`
         * style callback returns `true` for elements that have a matching property
         * value, else `false`.
         *
         * If an object is provided for `iteratee` the created `_.matches` style
         * callback returns `true` for elements that have the properties of the given
         * object, else `false`.
         *
         * Many lodash methods are guarded to work as iteratees for methods like
         * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
         *
         * The guarded methods are:
         * `ary`, `callback`, `chunk`, `clone`, `create`, `curry`, `curryRight`,
         * `drop`, `dropRight`, `every`, `fill`, `flatten`, `invert`, `max`, `min`,
         * `parseInt`, `slice`, `sortBy`, `take`, `takeRight`, `template`, `trim`,
         * `trimLeft`, `trimRight`, `trunc`, `random`, `range`, `sample`, `some`,
         * `sum`, `uniq`, and `words`
         *
         * @static
         * @memberOf _
         * @alias collect
         * @category Collection
         * @param {Array|Object|string} collection The collection to iterate over.
         * @param {Function|Object|string} [iteratee=_.identity] The function invoked
         *  per iteration.
         * @param {*} [thisArg] The `this` binding of `iteratee`.
         * @returns {Array} Returns the new mapped array.
         * @example
         *
         * function timesThree(n) {
     *   return n * 3;
     * }
         *
         * _.map([1, 2], timesThree);
         * // => [3, 6]
         *
         * _.map({ 'a': 1, 'b': 2 }, timesThree);
         * // => [3, 6] (iteration order is not guaranteed)
         *
         * var users = [
         *   { 'user': 'barney' },
         *   { 'user': 'fred' }
         * ];
         *
         * // using the `_.property` callback shorthand
         * _.map(users, 'user');
         * // => ['barney', 'fred']
         */
        function map(collection, iteratee, thisArg) {
          var func = isArray(collection) ? arrayMap : baseMap;
          iteratee = getCallback(iteratee, thisArg, 3);
          return func(collection, iteratee);
        }

        /**
         * Creates an array of elements split into two groups, the first of which
         * contains elements `predicate` returns truthy for, while the second of which
         * contains elements `predicate` returns falsey for. The predicate is bound
         * to `thisArg` and invoked with three arguments: (value, index|key, collection).
         *
         * If a property name is provided for `predicate` the created `_.property`
         * style callback returns the property value of the given element.
         *
         * If a value is also provided for `thisArg` the created `_.matchesProperty`
         * style callback returns `true` for elements that have a matching property
         * value, else `false`.
         *
         * If an object is provided for `predicate` the created `_.matches` style
         * callback returns `true` for elements that have the properties of the given
         * object, else `false`.
         *
         * @static
         * @memberOf _
         * @category Collection
         * @param {Array|Object|string} collection The collection to iterate over.
         * @param {Function|Object|string} [predicate=_.identity] The function invoked
         *  per iteration.
         * @param {*} [thisArg] The `this` binding of `predicate`.
         * @returns {Array} Returns the array of grouped elements.
         * @example
         *
         * _.partition([1, 2, 3], function(n) {
     *   return n % 2;
     * });
         * // => [[1, 3], [2]]
         *
         * _.partition([1.2, 2.3, 3.4], function(n) {
     *   return this.floor(n) % 2;
     * }, Math);
         * // => [[1.2, 3.4], [2.3]]
         *
         * var users = [
         *   { 'user': 'barney',  'age': 36, 'active': false },
         *   { 'user': 'fred',    'age': 40, 'active': true },
         *   { 'user': 'pebbles', 'age': 1,  'active': false }
         * ];
         *
         * var mapper = function(array) {
     *   return _.pluck(array, 'user');
     * };
         *
         * // using the `_.matches` callback shorthand
         * _.map(_.partition(users, { 'age': 1, 'active': false }), mapper);
         * // => [['pebbles'], ['barney', 'fred']]
         *
         * // using the `_.matchesProperty` callback shorthand
         * _.map(_.partition(users, 'active', false), mapper);
         * // => [['barney', 'pebbles'], ['fred']]
         *
         * // using the `_.property` callback shorthand
         * _.map(_.partition(users, 'active'), mapper);
         * // => [['fred'], ['barney', 'pebbles']]
         */
        var partition = createAggregator(function(result, value, key) {
          result[key ? 0 : 1].push(value);
        }, function() { return [[], []]; });

        /**
         * Gets the property value of `path` from all elements in `collection`.
         *
         * @static
         * @memberOf _
         * @category Collection
         * @param {Array|Object|string} collection The collection to iterate over.
         * @param {Array|string} path The path of the property to pluck.
         * @returns {Array} Returns the property values.
         * @example
         *
         * var users = [
         *   { 'user': 'barney', 'age': 36 },
         *   { 'user': 'fred',   'age': 40 }
         * ];
         *
         * _.pluck(users, 'user');
         * // => ['barney', 'fred']
         *
         * var userIndex = _.indexBy(users, 'user');
         * _.pluck(userIndex, 'age');
         * // => [36, 40] (iteration order is not guaranteed)
         */
        function pluck(collection, path) {
          return map(collection, property(path));
        }

        /**
         * Reduces `collection` to a value which is the accumulated result of running
         * each element in `collection` through `iteratee`, where each successive
         * invocation is supplied the return value of the previous. If `accumulator`
         * is not provided the first element of `collection` is used as the initial
         * value. The `iteratee` is bound to `thisArg` and invoked with four arguments:
         * (accumulator, value, index|key, collection).
         *
         * Many lodash methods are guarded to work as iteratees for methods like
         * `_.reduce`, `_.reduceRight`, and `_.transform`.
         *
         * The guarded methods are:
         * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `sortByAll`,
         * and `sortByOrder`
         *
         * @static
         * @memberOf _
         * @alias foldl, inject
         * @category Collection
         * @param {Array|Object|string} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @param {*} [accumulator] The initial value.
         * @param {*} [thisArg] The `this` binding of `iteratee`.
         * @returns {*} Returns the accumulated value.
         * @example
         *
         * _.reduce([1, 2], function(total, n) {
     *   return total + n;
     * });
         * // => 3
         *
         * _.reduce({ 'a': 1, 'b': 2 }, function(result, n, key) {
     *   result[key] = n * 3;
     *   return result;
     * }, {});
         * // => { 'a': 3, 'b': 6 } (iteration order is not guaranteed)
         */
        var reduce = createReduce(arrayReduce, baseEach);

        /**
         * This method is like `_.reduce` except that it iterates over elements of
         * `collection` from right to left.
         *
         * @static
         * @memberOf _
         * @alias foldr
         * @category Collection
         * @param {Array|Object|string} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @param {*} [accumulator] The initial value.
         * @param {*} [thisArg] The `this` binding of `iteratee`.
         * @returns {*} Returns the accumulated value.
         * @example
         *
         * var array = [[0, 1], [2, 3], [4, 5]];
         *
         * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
         * // => [4, 5, 2, 3, 0, 1]
         */
        var reduceRight = createReduce(arrayReduceRight, baseEachRight);

        /**
         * The opposite of `_.filter`; this method returns the elements of `collection`
         * that `predicate` does **not** return truthy for.
         *
         * @static
         * @memberOf _
         * @category Collection
         * @param {Array|Object|string} collection The collection to iterate over.
         * @param {Function|Object|string} [predicate=_.identity] The function invoked
         *  per iteration.
         * @param {*} [thisArg] The `this` binding of `predicate`.
         * @returns {Array} Returns the new filtered array.
         * @example
         *
         * _.reject([1, 2, 3, 4], function(n) {
     *   return n % 2 == 0;
     * });
         * // => [1, 3]
         *
         * var users = [
         *   { 'user': 'barney', 'age': 36, 'active': false },
         *   { 'user': 'fred',   'age': 40, 'active': true }
         * ];
         *
         * // using the `_.matches` callback shorthand
         * _.pluck(_.reject(users, { 'age': 40, 'active': true }), 'user');
         * // => ['barney']
         *
         * // using the `_.matchesProperty` callback shorthand
         * _.pluck(_.reject(users, 'active', false), 'user');
         * // => ['fred']
         *
         * // using the `_.property` callback shorthand
         * _.pluck(_.reject(users, 'active'), 'user');
         * // => ['barney']
         */
        function reject(collection, predicate, thisArg) {
          var func = isArray(collection) ? arrayFilter : baseFilter;
          predicate = getCallback(predicate, thisArg, 3);
          return func(collection, function(value, index, collection) {
            return !predicate(value, index, collection);
          });
        }

        /**
         * Gets a random element or `n` random elements from a collection.
         *
         * @static
         * @memberOf _
         * @category Collection
         * @param {Array|Object|string} collection The collection to sample.
         * @param {number} [n] The number of elements to sample.
         * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
         * @returns {*} Returns the random sample(s).
         * @example
         *
         * _.sample([1, 2, 3, 4]);
         * // => 2
         *
         * _.sample([1, 2, 3, 4], 2);
         * // => [3, 1]
         */
        function sample(collection, n, guard) {
          if (guard ? isIterateeCall(collection, n, guard) : n == null) {
            collection = toIterable(collection);
            var length = collection.length;
            return length > 0 ? collection[baseRandom(0, length - 1)] : undefined;
          }
          var index = -1,
            result = toArray(collection),
            length = result.length,
            lastIndex = length - 1;

          n = nativeMin(n < 0 ? 0 : (+n || 0), length);
          while (++index < n) {
            var rand = baseRandom(index, lastIndex),
              value = result[rand];

            result[rand] = result[index];
            result[index] = value;
          }
          result.length = n;
          return result;
        }

        /**
         * Creates an array of shuffled values, using a version of the
         * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
         *
         * @static
         * @memberOf _
         * @category Collection
         * @param {Array|Object|string} collection The collection to shuffle.
         * @returns {Array} Returns the new shuffled array.
         * @example
         *
         * _.shuffle([1, 2, 3, 4]);
         * // => [4, 1, 3, 2]
         */
        function shuffle(collection) {
          return sample(collection, POSITIVE_INFINITY);
        }

        /**
         * Gets the size of `collection` by returning its length for array-like
         * values or the number of own enumerable properties for objects.
         *
         * @static
         * @memberOf _
         * @category Collection
         * @param {Array|Object|string} collection The collection to inspect.
         * @returns {number} Returns the size of `collection`.
         * @example
         *
         * _.size([1, 2, 3]);
         * // => 3
         *
         * _.size({ 'a': 1, 'b': 2 });
         * // => 2
         *
         * _.size('pebbles');
         * // => 7
         */
        function size(collection) {
          var length = collection ? getLength(collection) : 0;
          return isLength(length) ? length : keys(collection).length;
        }

        /**
         * Checks if `predicate` returns truthy for **any** element of `collection`.
         * The function returns as soon as it finds a passing value and does not iterate
         * over the entire collection. The predicate is bound to `thisArg` and invoked
         * with three arguments: (value, index|key, collection).
         *
         * If a property name is provided for `predicate` the created `_.property`
         * style callback returns the property value of the given element.
         *
         * If a value is also provided for `thisArg` the created `_.matchesProperty`
         * style callback returns `true` for elements that have a matching property
         * value, else `false`.
         *
         * If an object is provided for `predicate` the created `_.matches` style
         * callback returns `true` for elements that have the properties of the given
         * object, else `false`.
         *
         * @static
         * @memberOf _
         * @alias any
         * @category Collection
         * @param {Array|Object|string} collection The collection to iterate over.
         * @param {Function|Object|string} [predicate=_.identity] The function invoked
         *  per iteration.
         * @param {*} [thisArg] The `this` binding of `predicate`.
         * @returns {boolean} Returns `true` if any element passes the predicate check,
         *  else `false`.
         * @example
         *
         * _.some([null, 0, 'yes', false], Boolean);
         * // => true
         *
         * var users = [
         *   { 'user': 'barney', 'active': true },
         *   { 'user': 'fred',   'active': false }
         * ];
         *
         * // using the `_.matches` callback shorthand
         * _.some(users, { 'user': 'barney', 'active': false });
         * // => false
         *
         * // using the `_.matchesProperty` callback shorthand
         * _.some(users, 'active', false);
         * // => true
         *
         * // using the `_.property` callback shorthand
         * _.some(users, 'active');
         * // => true
         */
        function some(collection, predicate, thisArg) {
          var func = isArray(collection) ? arraySome : baseSome;
          if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
            predicate = undefined;
          }
          if (typeof predicate != 'function' || thisArg !== undefined) {
            predicate = getCallback(predicate, thisArg, 3);
          }
          return func(collection, predicate);
        }

        /**
         * Creates an array of elements, sorted in ascending order by the results of
         * running each element in a collection through `iteratee`. This method performs
         * a stable sort, that is, it preserves the original sort order of equal elements.
         * The `iteratee` is bound to `thisArg` and invoked with three arguments:
         * (value, index|key, collection).
         *
         * If a property name is provided for `iteratee` the created `_.property`
         * style callback returns the property value of the given element.
         *
         * If a value is also provided for `thisArg` the created `_.matchesProperty`
         * style callback returns `true` for elements that have a matching property
         * value, else `false`.
         *
         * If an object is provided for `iteratee` the created `_.matches` style
         * callback returns `true` for elements that have the properties of the given
         * object, else `false`.
         *
         * @static
         * @memberOf _
         * @category Collection
         * @param {Array|Object|string} collection The collection to iterate over.
         * @param {Function|Object|string} [iteratee=_.identity] The function invoked
         *  per iteration.
         * @param {*} [thisArg] The `this` binding of `iteratee`.
         * @returns {Array} Returns the new sorted array.
         * @example
         *
         * _.sortBy([1, 2, 3], function(n) {
     *   return Math.sin(n);
     * });
         * // => [3, 1, 2]
         *
         * _.sortBy([1, 2, 3], function(n) {
     *   return this.sin(n);
     * }, Math);
         * // => [3, 1, 2]
         *
         * var users = [
         *   { 'user': 'fred' },
         *   { 'user': 'pebbles' },
         *   { 'user': 'barney' }
         * ];
         *
         * // using the `_.property` callback shorthand
         * _.pluck(_.sortBy(users, 'user'), 'user');
         * // => ['barney', 'fred', 'pebbles']
         */
        function sortBy(collection, iteratee, thisArg) {
          if (collection == null) {
            return [];
          }
          if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
            iteratee = undefined;
          }
          var index = -1;
          iteratee = getCallback(iteratee, thisArg, 3);

          var result = baseMap(collection, function(value, key, collection) {
            return { 'criteria': iteratee(value, key, collection), 'index': ++index, 'value': value };
          });
          return baseSortBy(result, compareAscending);
        }

        /**
         * This method is like `_.sortBy` except that it can sort by multiple iteratees
         * or property names.
         *
         * If a property name is provided for an iteratee the created `_.property`
         * style callback returns the property value of the given element.
         *
         * If an object is provided for an iteratee the created `_.matches` style
         * callback returns `true` for elements that have the properties of the given
         * object, else `false`.
         *
         * @static
         * @memberOf _
         * @category Collection
         * @param {Array|Object|string} collection The collection to iterate over.
         * @param {...(Function|Function[]|Object|Object[]|string|string[])} iteratees
         *  The iteratees to sort by, specified as individual values or arrays of values.
         * @returns {Array} Returns the new sorted array.
         * @example
         *
         * var users = [
         *   { 'user': 'fred',   'age': 48 },
         *   { 'user': 'barney', 'age': 36 },
         *   { 'user': 'fred',   'age': 42 },
         *   { 'user': 'barney', 'age': 34 }
         * ];
         *
         * _.map(_.sortByAll(users, ['user', 'age']), _.values);
         * // => [['barney', 34], ['barney', 36], ['fred', 42], ['fred', 48]]
         *
         * _.map(_.sortByAll(users, 'user', function(chr) {
     *   return Math.floor(chr.age / 10);
     * }), _.values);
         * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
         */
        var sortByAll = restParam(function(collection, iteratees) {
          if (collection == null) {
            return [];
          }
          var guard = iteratees[2];
          if (guard && isIterateeCall(iteratees[0], iteratees[1], guard)) {
            iteratees.length = 1;
          }
          return baseSortByOrder(collection, baseFlatten(iteratees), []);
        });

        /**
         * This method is like `_.sortByAll` except that it allows specifying the
         * sort orders of the iteratees to sort by. If `orders` is unspecified, all
         * values are sorted in ascending order. Otherwise, a value is sorted in
         * ascending order if its corresponding order is "asc", and descending if "desc".
         *
         * If a property name is provided for an iteratee the created `_.property`
         * style callback returns the property value of the given element.
         *
         * If an object is provided for an iteratee the created `_.matches` style
         * callback returns `true` for elements that have the properties of the given
         * object, else `false`.
         *
         * @static
         * @memberOf _
         * @category Collection
         * @param {Array|Object|string} collection The collection to iterate over.
         * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
         * @param {boolean[]} [orders] The sort orders of `iteratees`.
         * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
         * @returns {Array} Returns the new sorted array.
         * @example
         *
         * var users = [
         *   { 'user': 'fred',   'age': 48 },
         *   { 'user': 'barney', 'age': 34 },
         *   { 'user': 'fred',   'age': 42 },
         *   { 'user': 'barney', 'age': 36 }
         * ];
         *
         * // sort by `user` in ascending order and by `age` in descending order
         * _.map(_.sortByOrder(users, ['user', 'age'], ['asc', 'desc']), _.values);
         * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
         */
        function sortByOrder(collection, iteratees, orders, guard) {
          if (collection == null) {
            return [];
          }
          if (guard && isIterateeCall(iteratees, orders, guard)) {
            orders = undefined;
          }
          if (!isArray(iteratees)) {
            iteratees = iteratees == null ? [] : [iteratees];
          }
          if (!isArray(orders)) {
            orders = orders == null ? [] : [orders];
          }
          return baseSortByOrder(collection, iteratees, orders);
        }

        /**
         * Performs a deep comparison between each element in `collection` and the
         * source object, returning an array of all elements that have equivalent
         * property values.
         *
         * **Note:** This method supports comparing arrays, booleans, `Date` objects,
         * numbers, `Object` objects, regexes, and strings. Objects are compared by
         * their own, not inherited, enumerable properties. For comparing a single
         * own or inherited property value see `_.matchesProperty`.
         *
         * @static
         * @memberOf _
         * @category Collection
         * @param {Array|Object|string} collection The collection to search.
         * @param {Object} source The object of property values to match.
         * @returns {Array} Returns the new filtered array.
         * @example
         *
         * var users = [
         *   { 'user': 'barney', 'age': 36, 'active': false, 'pets': ['hoppy'] },
         *   { 'user': 'fred',   'age': 40, 'active': true, 'pets': ['baby puss', 'dino'] }
         * ];
         *
         * _.pluck(_.where(users, { 'age': 36, 'active': false }), 'user');
         * // => ['barney']
         *
         * _.pluck(_.where(users, { 'pets': ['dino'] }), 'user');
         * // => ['fred']
         */
        function where(collection, source) {
          return filter(collection, baseMatches(source));
        }

        /*------------------------------------------------------------------------*/

        /**
         * Gets the number of milliseconds that have elapsed since the Unix epoch
         * (1 January 1970 00:00:00 UTC).
         *
         * @static
         * @memberOf _
         * @category Date
         * @example
         *
         * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
         * // => logs the number of milliseconds it took for the deferred function to be invoked
         */
        var now = nativeNow || function() {
            return new Date().getTime();
          };

        /*------------------------------------------------------------------------*/

        /**
         * The opposite of `_.before`; this method creates a function that invokes
         * `func` once it is called `n` or more times.
         *
         * @static
         * @memberOf _
         * @category Function
         * @param {number} n The number of calls before `func` is invoked.
         * @param {Function} func The function to restrict.
         * @returns {Function} Returns the new restricted function.
         * @example
         *
         * var saves = ['profile', 'settings'];
         *
         * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
         *
         * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
         * // => logs 'done saving!' after the two async saves have completed
         */
        function after(n, func) {
          if (typeof func != 'function') {
            if (typeof n == 'function') {
              var temp = n;
              n = func;
              func = temp;
            } else {
              throw new TypeError(FUNC_ERROR_TEXT);
            }
          }
          n = nativeIsFinite(n = +n) ? n : 0;
          return function() {
            if (--n < 1) {
              return func.apply(this, arguments);
            }
          };
        }

        /**
         * Creates a function that accepts up to `n` arguments ignoring any
         * additional arguments.
         *
         * @static
         * @memberOf _
         * @category Function
         * @param {Function} func The function to cap arguments for.
         * @param {number} [n=func.length] The arity cap.
         * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
         * @returns {Function} Returns the new function.
         * @example
         *
         * _.map(['6', '8', '10'], _.ary(parseInt, 1));
         * // => [6, 8, 10]
         */
        function ary(func, n, guard) {
          if (guard && isIterateeCall(func, n, guard)) {
            n = undefined;
          }
          n = (func && n == null) ? func.length : nativeMax(+n || 0, 0);
          return createWrapper(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);
        }

        /**
         * Creates a function that invokes `func`, with the `this` binding and arguments
         * of the created function, while it is called less than `n` times. Subsequent
         * calls to the created function return the result of the last `func` invocation.
         *
         * @static
         * @memberOf _
         * @category Function
         * @param {number} n The number of calls at which `func` is no longer invoked.
         * @param {Function} func The function to restrict.
         * @returns {Function} Returns the new restricted function.
         * @example
         *
         * jQuery('#add').on('click', _.before(5, addContactToList));
         * // => allows adding up to 4 contacts to the list
         */
        function before(n, func) {
          var result;
          if (typeof func != 'function') {
            if (typeof n == 'function') {
              var temp = n;
              n = func;
              func = temp;
            } else {
              throw new TypeError(FUNC_ERROR_TEXT);
            }
          }
          return function() {
            if (--n > 0) {
              result = func.apply(this, arguments);
            }
            if (n <= 1) {
              func = undefined;
            }
            return result;
          };
        }

        /**
         * Creates a function that invokes `func` with the `this` binding of `thisArg`
         * and prepends any additional `_.bind` arguments to those provided to the
         * bound function.
         *
         * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
         * may be used as a placeholder for partially applied arguments.
         *
         * **Note:** Unlike native `Function#bind` this method does not set the "length"
         * property of bound functions.
         *
         * @static
         * @memberOf _
         * @category Function
         * @param {Function} func The function to bind.
         * @param {*} thisArg The `this` binding of `func`.
         * @param {...*} [partials] The arguments to be partially applied.
         * @returns {Function} Returns the new bound function.
         * @example
         *
         * var greet = function(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * };
         *
         * var object = { 'user': 'fred' };
         *
         * var bound = _.bind(greet, object, 'hi');
         * bound('!');
         * // => 'hi fred!'
         *
         * // using placeholders
         * var bound = _.bind(greet, object, _, '!');
         * bound('hi');
         * // => 'hi fred!'
         */
        var bind = restParam(function(func, thisArg, partials) {
          var bitmask = BIND_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, bind.placeholder);
            bitmask |= PARTIAL_FLAG;
          }
          return createWrapper(func, bitmask, thisArg, partials, holders);
        });

        /**
         * Binds methods of an object to the object itself, overwriting the existing
         * method. Method names may be specified as individual arguments or as arrays
         * of method names. If no method names are provided all enumerable function
         * properties, own and inherited, of `object` are bound.
         *
         * **Note:** This method does not set the "length" property of bound functions.
         *
         * @static
         * @memberOf _
         * @category Function
         * @param {Object} object The object to bind and assign the bound methods to.
         * @param {...(string|string[])} [methodNames] The object method names to bind,
         *  specified as individual method names or arrays of method names.
         * @returns {Object} Returns `object`.
         * @example
         *
         * var view = {
     *   'label': 'docs',
     *   'onClick': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
         *
         * _.bindAll(view);
         * jQuery('#docs').on('click', view.onClick);
         * // => logs 'clicked docs' when the element is clicked
         */
        var bindAll = restParam(function(object, methodNames) {
          methodNames = methodNames.length ? baseFlatten(methodNames) : functions(object);

          var index = -1,
            length = methodNames.length;

          while (++index < length) {
            var key = methodNames[index];
            object[key] = createWrapper(object[key], BIND_FLAG, object);
          }
          return object;
        });

        /**
         * Creates a function that invokes the method at `object[key]` and prepends
         * any additional `_.bindKey` arguments to those provided to the bound function.
         *
         * This method differs from `_.bind` by allowing bound functions to reference
         * methods that may be redefined or don't yet exist.
         * See [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
         * for more details.
         *
         * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
         * builds, may be used as a placeholder for partially applied arguments.
         *
         * @static
         * @memberOf _
         * @category Function
         * @param {Object} object The object the method belongs to.
         * @param {string} key The key of the method.
         * @param {...*} [partials] The arguments to be partially applied.
         * @returns {Function} Returns the new bound function.
         * @example
         *
         * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
         *
         * var bound = _.bindKey(object, 'greet', 'hi');
         * bound('!');
         * // => 'hi fred!'
         *
         * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
         *
         * bound('!');
         * // => 'hiya fred!'
         *
         * // using placeholders
         * var bound = _.bindKey(object, 'greet', _, '!');
         * bound('hi');
         * // => 'hiya fred!'
         */
        var bindKey = restParam(function(object, key, partials) {
          var bitmask = BIND_FLAG | BIND_KEY_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, bindKey.placeholder);
            bitmask |= PARTIAL_FLAG;
          }
          return createWrapper(key, bitmask, object, partials, holders);
        });

        /**
         * Creates a function that accepts one or more arguments of `func` that when
         * called either invokes `func` returning its result, if all `func` arguments
         * have been provided, or returns a function that accepts one or more of the
         * remaining `func` arguments, and so on. The arity of `func` may be specified
         * if `func.length` is not sufficient.
         *
         * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
         * may be used as a placeholder for provided arguments.
         *
         * **Note:** This method does not set the "length" property of curried functions.
         *
         * @static
         * @memberOf _
         * @category Function
         * @param {Function} func The function to curry.
         * @param {number} [arity=func.length] The arity of `func`.
         * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
         * @returns {Function} Returns the new curried function.
         * @example
         *
         * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
         *
         * var curried = _.curry(abc);
         *
         * curried(1)(2)(3);
         * // => [1, 2, 3]
         *
         * curried(1, 2)(3);
         * // => [1, 2, 3]
         *
         * curried(1, 2, 3);
         * // => [1, 2, 3]
         *
         * // using placeholders
         * curried(1)(_, 3)(2);
         * // => [1, 2, 3]
         */
        var curry = createCurry(CURRY_FLAG);

        /**
         * This method is like `_.curry` except that arguments are applied to `func`
         * in the manner of `_.partialRight` instead of `_.partial`.
         *
         * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
         * builds, may be used as a placeholder for provided arguments.
         *
         * **Note:** This method does not set the "length" property of curried functions.
         *
         * @static
         * @memberOf _
         * @category Function
         * @param {Function} func The function to curry.
         * @param {number} [arity=func.length] The arity of `func`.
         * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
         * @returns {Function} Returns the new curried function.
         * @example
         *
         * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
         *
         * var curried = _.curryRight(abc);
         *
         * curried(3)(2)(1);
         * // => [1, 2, 3]
         *
         * curried(2, 3)(1);
         * // => [1, 2, 3]
         *
         * curried(1, 2, 3);
         * // => [1, 2, 3]
         *
         * // using placeholders
         * curried(3)(1, _)(2);
         * // => [1, 2, 3]
         */
        var curryRight = createCurry(CURRY_RIGHT_FLAG);

        /**
         * Creates a debounced function that delays invoking `func` until after `wait`
         * milliseconds have elapsed since the last time the debounced function was
         * invoked. The debounced function comes with a `cancel` method to cancel
         * delayed invocations. Provide an options object to indicate that `func`
         * should be invoked on the leading and/or trailing edge of the `wait` timeout.
         * Subsequent calls to the debounced function return the result of the last
         * `func` invocation.
         *
         * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
         * on the trailing edge of the timeout only if the the debounced function is
         * invoked more than once during the `wait` timeout.
         *
         * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
         * for details over the differences between `_.debounce` and `_.throttle`.
         *
         * @static
         * @memberOf _
         * @category Function
         * @param {Function} func The function to debounce.
         * @param {number} [wait=0] The number of milliseconds to delay.
         * @param {Object} [options] The options object.
         * @param {boolean} [options.leading=false] Specify invoking on the leading
         *  edge of the timeout.
         * @param {number} [options.maxWait] The maximum time `func` is allowed to be
         *  delayed before it is invoked.
         * @param {boolean} [options.trailing=true] Specify invoking on the trailing
         *  edge of the timeout.
         * @returns {Function} Returns the new debounced function.
         * @example
         *
         * // avoid costly calculations while the window size is in flux
         * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
         *
         * // invoke `sendMail` when the click event is fired, debouncing subsequent calls
         * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
         *
         * // ensure `batchLog` is invoked once after 1 second of debounced calls
         * var source = new EventSource('/stream');
         * jQuery(source).on('message', _.debounce(batchLog, 250, {
     *   'maxWait': 1000
     * }));
         *
         * // cancel a debounced call
         * var todoChanges = _.debounce(batchLog, 1000);
         * Object.observe(models.todo, todoChanges);
         *
         * Object.observe(models, function(changes) {
     *   if (_.find(changes, { 'user': 'todo', 'type': 'delete'})) {
     *     todoChanges.cancel();
     *   }
     * }, ['delete']);
         *
         * // ...at some point `models.todo` is changed
         * models.todo.completed = true;
         *
         * // ...before 1 second has passed `models.todo` is deleted
         * // which cancels the debounced `todoChanges` call
         * delete models.todo;
         */
        function debounce(func, wait, options) {
          var args,
            maxTimeoutId,
            result,
            stamp,
            thisArg,
            timeoutId,
            trailingCall,
            lastCalled = 0,
            maxWait = false,
            trailing = true;

          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          wait = wait < 0 ? 0 : (+wait || 0);
          if (options === true) {
            var leading = true;
            trailing = false;
          } else if (isObject(options)) {
            leading = !!options.leading;
            maxWait = 'maxWait' in options && nativeMax(+options.maxWait || 0, wait);
            trailing = 'trailing' in options ? !!options.trailing : trailing;
          }

          function cancel() {
            if (timeoutId) {
              clearTimeout(timeoutId);
            }
            if (maxTimeoutId) {
              clearTimeout(maxTimeoutId);
            }
            lastCalled = 0;
            maxTimeoutId = timeoutId = trailingCall = undefined;
          }

          function complete(isCalled, id) {
            if (id) {
              clearTimeout(id);
            }
            maxTimeoutId = timeoutId = trailingCall = undefined;
            if (isCalled) {
              lastCalled = now();
              result = func.apply(thisArg, args);
              if (!timeoutId && !maxTimeoutId) {
                args = thisArg = undefined;
              }
            }
          }

          function delayed() {
            var remaining = wait - (now() - stamp);
            if (remaining <= 0 || remaining > wait) {
              complete(trailingCall, maxTimeoutId);
            } else {
              timeoutId = setTimeout(delayed, remaining);
            }
          }

          function maxDelayed() {
            complete(trailing, timeoutId);
          }

          function debounced() {
            args = arguments;
            stamp = now();
            thisArg = this;
            trailingCall = trailing && (timeoutId || !leading);

            if (maxWait === false) {
              var leadingCall = leading && !timeoutId;
            } else {
              if (!maxTimeoutId && !leading) {
                lastCalled = stamp;
              }
              var remaining = maxWait - (stamp - lastCalled),
                isCalled = remaining <= 0 || remaining > maxWait;

              if (isCalled) {
                if (maxTimeoutId) {
                  maxTimeoutId = clearTimeout(maxTimeoutId);
                }
                lastCalled = stamp;
                result = func.apply(thisArg, args);
              }
              else if (!maxTimeoutId) {
                maxTimeoutId = setTimeout(maxDelayed, remaining);
              }
            }
            if (isCalled && timeoutId) {
              timeoutId = clearTimeout(timeoutId);
            }
            else if (!timeoutId && wait !== maxWait) {
              timeoutId = setTimeout(delayed, wait);
            }
            if (leadingCall) {
              isCalled = true;
              result = func.apply(thisArg, args);
            }
            if (isCalled && !timeoutId && !maxTimeoutId) {
              args = thisArg = undefined;
            }
            return result;
          }
          debounced.cancel = cancel;
          return debounced;
        }

        /**
         * Defers invoking the `func` until the current call stack has cleared. Any
         * additional arguments are provided to `func` when it is invoked.
         *
         * @static
         * @memberOf _
         * @category Function
         * @param {Function} func The function to defer.
         * @param {...*} [args] The arguments to invoke the function with.
         * @returns {number} Returns the timer id.
         * @example
         *
         * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
         * // logs 'deferred' after one or more milliseconds
         */
        var defer = restParam(function(func, args) {
          return baseDelay(func, 1, args);
        });

        /**
         * Invokes `func` after `wait` milliseconds. Any additional arguments are
         * provided to `func` when it is invoked.
         *
         * @static
         * @memberOf _
         * @category Function
         * @param {Function} func The function to delay.
         * @param {number} wait The number of milliseconds to delay invocation.
         * @param {...*} [args] The arguments to invoke the function with.
         * @returns {number} Returns the timer id.
         * @example
         *
         * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
         * // => logs 'later' after one second
         */
        var delay = restParam(function(func, wait, args) {
          return baseDelay(func, wait, args);
        });

        /**
         * Creates a function that returns the result of invoking the provided
         * functions with the `this` binding of the created function, where each
         * successive invocation is supplied the return value of the previous.
         *
         * @static
         * @memberOf _
         * @category Function
         * @param {...Function} [funcs] Functions to invoke.
         * @returns {Function} Returns the new function.
         * @example
         *
         * function square(n) {
     *   return n * n;
     * }
         *
         * var addSquare = _.flow(_.add, square);
         * addSquare(1, 2);
         * // => 9
         */
        var flow = createFlow();

        /**
         * This method is like `_.flow` except that it creates a function that
         * invokes the provided functions from right to left.
         *
         * @static
         * @memberOf _
         * @alias backflow, compose
         * @category Function
         * @param {...Function} [funcs] Functions to invoke.
         * @returns {Function} Returns the new function.
         * @example
         *
         * function square(n) {
     *   return n * n;
     * }
         *
         * var addSquare = _.flowRight(square, _.add);
         * addSquare(1, 2);
         * // => 9
         */
        var flowRight = createFlow(true);

        /**
         * Creates a function that memoizes the result of `func`. If `resolver` is
         * provided it determines the cache key for storing the result based on the
         * arguments provided to the memoized function. By default, the first argument
         * provided to the memoized function is coerced to a string and used as the
         * cache key. The `func` is invoked with the `this` binding of the memoized
         * function.
         *
         * **Note:** The cache is exposed as the `cache` property on the memoized
         * function. Its creation may be customized by replacing the `_.memoize.Cache`
         * constructor with one whose instances implement the [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)
         * method interface of `get`, `has`, and `set`.
         *
         * @static
         * @memberOf _
         * @category Function
         * @param {Function} func The function to have its output memoized.
         * @param {Function} [resolver] The function to resolve the cache key.
         * @returns {Function} Returns the new memoizing function.
         * @example
         *
         * var upperCase = _.memoize(function(string) {
     *   return string.toUpperCase();
     * });
         *
         * upperCase('fred');
         * // => 'FRED'
         *
         * // modifying the result cache
         * upperCase.cache.set('fred', 'BARNEY');
         * upperCase('fred');
         * // => 'BARNEY'
         *
         * // replacing `_.memoize.Cache`
         * var object = { 'user': 'fred' };
         * var other = { 'user': 'barney' };
         * var identity = _.memoize(_.identity);
         *
         * identity(object);
         * // => { 'user': 'fred' }
         * identity(other);
         * // => { 'user': 'fred' }
         *
         * _.memoize.Cache = WeakMap;
         * var identity = _.memoize(_.identity);
         *
         * identity(object);
         * // => { 'user': 'fred' }
         * identity(other);
         * // => { 'user': 'barney' }
         */
        function memoize(func, resolver) {
          if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          var memoized = function() {
            var args = arguments,
              key = resolver ? resolver.apply(this, args) : args[0],
              cache = memoized.cache;

            if (cache.has(key)) {
              return cache.get(key);
            }
            var result = func.apply(this, args);
            memoized.cache = cache.set(key, result);
            return result;
          };
          memoized.cache = new memoize.Cache;
          return memoized;
        }

        /**
         * Creates a function that runs each argument through a corresponding
         * transform function.
         *
         * @static
         * @memberOf _
         * @category Function
         * @param {Function} func The function to wrap.
         * @param {...(Function|Function[])} [transforms] The functions to transform
         * arguments, specified as individual functions or arrays of functions.
         * @returns {Function} Returns the new function.
         * @example
         *
         * function doubled(n) {
     *   return n * 2;
     * }
         *
         * function square(n) {
     *   return n * n;
     * }
         *
         * var modded = _.modArgs(function(x, y) {
     *   return [x, y];
     * }, square, doubled);
         *
         * modded(1, 2);
         * // => [1, 4]
         *
         * modded(5, 10);
         * // => [25, 20]
         */
        var modArgs = restParam(function(func, transforms) {
          transforms = baseFlatten(transforms);
          if (typeof func != 'function' || !arrayEvery(transforms, baseIsFunction)) {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          var length = transforms.length;
          return restParam(function(args) {
            var index = nativeMin(args.length, length);
            while (index--) {
              args[index] = transforms[index](args[index]);
            }
            return func.apply(this, args);
          });
        });

        /**
         * Creates a function that negates the result of the predicate `func`. The
         * `func` predicate is invoked with the `this` binding and arguments of the
         * created function.
         *
         * @static
         * @memberOf _
         * @category Function
         * @param {Function} predicate The predicate to negate.
         * @returns {Function} Returns the new function.
         * @example
         *
         * function isEven(n) {
     *   return n % 2 == 0;
     * }
         *
         * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
         * // => [1, 3, 5]
         */
        function negate(predicate) {
          if (typeof predicate != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          return function() {
            return !predicate.apply(this, arguments);
          };
        }

        /**
         * Creates a function that is restricted to invoking `func` once. Repeat calls
         * to the function return the value of the first call. The `func` is invoked
         * with the `this` binding and arguments of the created function.
         *
         * @static
         * @memberOf _
         * @category Function
         * @param {Function} func The function to restrict.
         * @returns {Function} Returns the new restricted function.
         * @example
         *
         * var initialize = _.once(createApplication);
         * initialize();
         * initialize();
         * // `initialize` invokes `createApplication` once
         */
        function once(func) {
          return before(2, func);
        }

        /**
         * Creates a function that invokes `func` with `partial` arguments prepended
         * to those provided to the new function. This method is like `_.bind` except
         * it does **not** alter the `this` binding.
         *
         * The `_.partial.placeholder` value, which defaults to `_` in monolithic
         * builds, may be used as a placeholder for partially applied arguments.
         *
         * **Note:** This method does not set the "length" property of partially
         * applied functions.
         *
         * @static
         * @memberOf _
         * @category Function
         * @param {Function} func The function to partially apply arguments to.
         * @param {...*} [partials] The arguments to be partially applied.
         * @returns {Function} Returns the new partially applied function.
         * @example
         *
         * var greet = function(greeting, name) {
     *   return greeting + ' ' + name;
     * };
         *
         * var sayHelloTo = _.partial(greet, 'hello');
         * sayHelloTo('fred');
         * // => 'hello fred'
         *
         * // using placeholders
         * var greetFred = _.partial(greet, _, 'fred');
         * greetFred('hi');
         * // => 'hi fred'
         */
        var partial = createPartial(PARTIAL_FLAG);

        /**
         * This method is like `_.partial` except that partially applied arguments
         * are appended to those provided to the new function.
         *
         * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
         * builds, may be used as a placeholder for partially applied arguments.
         *
         * **Note:** This method does not set the "length" property of partially
         * applied functions.
         *
         * @static
         * @memberOf _
         * @category Function
         * @param {Function} func The function to partially apply arguments to.
         * @param {...*} [partials] The arguments to be partially applied.
         * @returns {Function} Returns the new partially applied function.
         * @example
         *
         * var greet = function(greeting, name) {
     *   return greeting + ' ' + name;
     * };
         *
         * var greetFred = _.partialRight(greet, 'fred');
         * greetFred('hi');
         * // => 'hi fred'
         *
         * // using placeholders
         * var sayHelloTo = _.partialRight(greet, 'hello', _);
         * sayHelloTo('fred');
         * // => 'hello fred'
         */
        var partialRight = createPartial(PARTIAL_RIGHT_FLAG);

        /**
         * Creates a function that invokes `func` with arguments arranged according
         * to the specified indexes where the argument value at the first index is
         * provided as the first argument, the argument value at the second index is
         * provided as the second argument, and so on.
         *
         * @static
         * @memberOf _
         * @category Function
         * @param {Function} func The function to rearrange arguments for.
         * @param {...(number|number[])} indexes The arranged argument indexes,
         *  specified as individual indexes or arrays of indexes.
         * @returns {Function} Returns the new function.
         * @example
         *
         * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, 2, 0, 1);
         *
         * rearged('b', 'c', 'a')
         * // => ['a', 'b', 'c']
         *
         * var map = _.rearg(_.map, [1, 0]);
         * map(function(n) {
     *   return n * 3;
     * }, [1, 2, 3]);
         * // => [3, 6, 9]
         */
        var rearg = restParam(function(func, indexes) {
          return createWrapper(func, REARG_FLAG, undefined, undefined, undefined, baseFlatten(indexes));
        });

        /**
         * Creates a function that invokes `func` with the `this` binding of the
         * created function and arguments from `start` and beyond provided as an array.
         *
         * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters).
         *
         * @static
         * @memberOf _
         * @category Function
         * @param {Function} func The function to apply a rest parameter to.
         * @param {number} [start=func.length-1] The start position of the rest parameter.
         * @returns {Function} Returns the new function.
         * @example
         *
         * var say = _.restParam(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
         *
         * say('hello', 'fred', 'barney', 'pebbles');
         * // => 'hello fred, barney, & pebbles'
         */
        function restParam(func, start) {
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);
          return function() {
            var args = arguments,
              index = -1,
              length = nativeMax(args.length - start, 0),
              rest = Array(length);

            while (++index < length) {
              rest[index] = args[start + index];
            }
            switch (start) {
              case 0: return func.call(this, rest);
              case 1: return func.call(this, args[0], rest);
              case 2: return func.call(this, args[0], args[1], rest);
            }
            var otherArgs = Array(start + 1);
            index = -1;
            while (++index < start) {
              otherArgs[index] = args[index];
            }
            otherArgs[start] = rest;
            return func.apply(this, otherArgs);
          };
        }

        /**
         * Creates a function that invokes `func` with the `this` binding of the created
         * function and an array of arguments much like [`Function#apply`](https://es5.github.io/#x15.3.4.3).
         *
         * **Note:** This method is based on the [spread operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator).
         *
         * @static
         * @memberOf _
         * @category Function
         * @param {Function} func The function to spread arguments over.
         * @returns {Function} Returns the new function.
         * @example
         *
         * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
         *
         * say(['fred', 'hello']);
         * // => 'fred says hello'
         *
         * // with a Promise
         * var numbers = Promise.all([
         *   Promise.resolve(40),
         *   Promise.resolve(36)
         * ]);
         *
         * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
         * // => a Promise of 76
         */
        function spread(func) {
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          return function(array) {
            return func.apply(this, array);
          };
        }

        /**
         * Creates a throttled function that only invokes `func` at most once per
         * every `wait` milliseconds. The throttled function comes with a `cancel`
         * method to cancel delayed invocations. Provide an options object to indicate
         * that `func` should be invoked on the leading and/or trailing edge of the
         * `wait` timeout. Subsequent calls to the throttled function return the
         * result of the last `func` call.
         *
         * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
         * on the trailing edge of the timeout only if the the throttled function is
         * invoked more than once during the `wait` timeout.
         *
         * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
         * for details over the differences between `_.throttle` and `_.debounce`.
         *
         * @static
         * @memberOf _
         * @category Function
         * @param {Function} func The function to throttle.
         * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
         * @param {Object} [options] The options object.
         * @param {boolean} [options.leading=true] Specify invoking on the leading
         *  edge of the timeout.
         * @param {boolean} [options.trailing=true] Specify invoking on the trailing
         *  edge of the timeout.
         * @returns {Function} Returns the new throttled function.
         * @example
         *
         * // avoid excessively updating the position while scrolling
         * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
         *
         * // invoke `renewToken` when the click event is fired, but not more than once every 5 minutes
         * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {
     *   'trailing': false
     * }));
         *
         * // cancel a trailing throttled call
         * jQuery(window).on('popstate', throttled.cancel);
         */
        function throttle(func, wait, options) {
          var leading = true,
            trailing = true;

          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (options === false) {
            leading = false;
          } else if (isObject(options)) {
            leading = 'leading' in options ? !!options.leading : leading;
            trailing = 'trailing' in options ? !!options.trailing : trailing;
          }
          return debounce(func, wait, { 'leading': leading, 'maxWait': +wait, 'trailing': trailing });
        }

        /**
         * Creates a function that provides `value` to the wrapper function as its
         * first argument. Any additional arguments provided to the function are
         * appended to those provided to the wrapper function. The wrapper is invoked
         * with the `this` binding of the created function.
         *
         * @static
         * @memberOf _
         * @category Function
         * @param {*} value The value to wrap.
         * @param {Function} wrapper The wrapper function.
         * @returns {Function} Returns the new function.
         * @example
         *
         * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
         *
         * p('fred, barney, & pebbles');
         * // => '<p>fred, barney, &amp; pebbles</p>'
         */
        function wrap(value, wrapper) {
          wrapper = wrapper == null ? identity : wrapper;
          return createWrapper(wrapper, PARTIAL_FLAG, undefined, [value], []);
        }

        /*------------------------------------------------------------------------*/

        /**
         * Creates a clone of `value`. If `isDeep` is `true` nested objects are cloned,
         * otherwise they are assigned by reference. If `customizer` is provided it is
         * invoked to produce the cloned values. If `customizer` returns `undefined`
         * cloning is handled by the method instead. The `customizer` is bound to
         * `thisArg` and invoked with two argument; (value [, index|key, object]).
         *
         * **Note:** This method is loosely based on the
         * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
         * The enumerable properties of `arguments` objects and objects created by
         * constructors other than `Object` are cloned to plain `Object` objects. An
         * empty object is returned for uncloneable values such as functions, DOM nodes,
         * Maps, Sets, and WeakMaps.
         *
         * @static
         * @memberOf _
         * @category Lang
         * @param {*} value The value to clone.
         * @param {boolean} [isDeep] Specify a deep clone.
         * @param {Function} [customizer] The function to customize cloning values.
         * @param {*} [thisArg] The `this` binding of `customizer`.
         * @returns {*} Returns the cloned value.
         * @example
         *
         * var users = [
         *   { 'user': 'barney' },
         *   { 'user': 'fred' }
         * ];
         *
         * var shallow = _.clone(users);
         * shallow[0] === users[0];
         * // => true
         *
         * var deep = _.clone(users, true);
         * deep[0] === users[0];
         * // => false
         *
         * // using a customizer callback
         * var el = _.clone(document.body, function(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * });
         *
         * el === document.body
         * // => false
         * el.nodeName
         * // => BODY
         * el.childNodes.length;
         * // => 0
         */
        function clone(value, isDeep, customizer, thisArg) {
          if (isDeep && typeof isDeep != 'boolean' && isIterateeCall(value, isDeep, customizer)) {
            isDeep = false;
          }
          else if (typeof isDeep == 'function') {
            thisArg = customizer;
            customizer = isDeep;
            isDeep = false;
          }
          return typeof customizer == 'function'
            ? baseClone(value, isDeep, bindCallback(customizer, thisArg, 1))
            : baseClone(value, isDeep);
        }

        /**
         * Creates a deep clone of `value`. If `customizer` is provided it is invoked
         * to produce the cloned values. If `customizer` returns `undefined` cloning
         * is handled by the method instead. The `customizer` is bound to `thisArg`
         * and invoked with two argument; (value [, index|key, object]).
         *
         * **Note:** This method is loosely based on the
         * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
         * The enumerable properties of `arguments` objects and objects created by
         * constructors other than `Object` are cloned to plain `Object` objects. An
         * empty object is returned for uncloneable values such as functions, DOM nodes,
         * Maps, Sets, and WeakMaps.
         *
         * @static
         * @memberOf _
         * @category Lang
         * @param {*} value The value to deep clone.
         * @param {Function} [customizer] The function to customize cloning values.
         * @param {*} [thisArg] The `this` binding of `customizer`.
         * @returns {*} Returns the deep cloned value.
         * @example
         *
         * var users = [
         *   { 'user': 'barney' },
         *   { 'user': 'fred' }
         * ];
         *
         * var deep = _.cloneDeep(users);
         * deep[0] === users[0];
         * // => false
         *
         * // using a customizer callback
         * var el = _.cloneDeep(document.body, function(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * });
         *
         * el === document.body
         * // => false
         * el.nodeName
         * // => BODY
         * el.childNodes.length;
         * // => 20
         */
        function cloneDeep(value, customizer, thisArg) {
          return typeof customizer == 'function'
            ? baseClone(value, true, bindCallback(customizer, thisArg, 1))
            : baseClone(value, true);
        }

        /**
         * Checks if `value` is greater than `other`.
         *
         * @static
         * @memberOf _
         * @category Lang
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @returns {boolean} Returns `true` if `value` is greater than `other`, else `false`.
         * @example
         *
         * _.gt(3, 1);
         * // => true
         *
         * _.gt(3, 3);
         * // => false
         *
         * _.gt(1, 3);
         * // => false
         */
        function gt(value, other) {
          return value > other;
        }

        /**
         * Checks if `value` is greater than or equal to `other`.
         *
         * @static
         * @memberOf _
         * @category Lang
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @returns {boolean} Returns `true` if `value` is greater than or equal to `other`, else `false`.
         * @example
         *
         * _.gte(3, 1);
         * // => true
         *
         * _.gte(3, 3);
         * // => true
         *
         * _.gte(1, 3);
         * // => false
         */
        function gte(value, other) {
          return value >= other;
        }

        /**
         * Checks if `value` is classified as an `arguments` object.
         *
         * @static
         * @memberOf _
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
         * @example
         *
         * _.isArguments(function() { return arguments; }());
         * // => true
         *
         * _.isArguments([1, 2, 3]);
         * // => false
         */
        function isArguments(value) {
          return isObjectLike(value) && isArrayLike(value) &&
            hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
        }

        /**
         * Checks if `value` is classified as an `Array` object.
         *
         * @static
         * @memberOf _
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
         * @example
         *
         * _.isArray([1, 2, 3]);
         * // => true
         *
         * _.isArray(function() { return arguments; }());
         * // => false
         */
        var isArray = nativeIsArray || function(value) {
            return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
          };

        /**
         * Checks if `value` is classified as a boolean primitive or object.
         *
         * @static
         * @memberOf _
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
         * @example
         *
         * _.isBoolean(false);
         * // => true
         *
         * _.isBoolean(null);
         * // => false
         */
        function isBoolean(value) {
          return value === true || value === false || (isObjectLike(value) && objToString.call(value) == boolTag);
        }

        /**
         * Checks if `value` is classified as a `Date` object.
         *
         * @static
         * @memberOf _
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
         * @example
         *
         * _.isDate(new Date);
         * // => true
         *
         * _.isDate('Mon April 23 2012');
         * // => false
         */
        function isDate(value) {
          return isObjectLike(value) && objToString.call(value) == dateTag;
        }

        /**
         * Checks if `value` is a DOM element.
         *
         * @static
         * @memberOf _
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
         * @example
         *
         * _.isElement(document.body);
         * // => true
         *
         * _.isElement('<body>');
         * // => false
         */
        function isElement(value) {
          return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);
        }

        /**
         * Checks if `value` is empty. A value is considered empty unless it is an
         * `arguments` object, array, string, or jQuery-like collection with a length
         * greater than `0` or an object with own enumerable properties.
         *
         * @static
         * @memberOf _
         * @category Lang
         * @param {Array|Object|string} value The value to inspect.
         * @returns {boolean} Returns `true` if `value` is empty, else `false`.
         * @example
         *
         * _.isEmpty(null);
         * // => true
         *
         * _.isEmpty(true);
         * // => true
         *
         * _.isEmpty(1);
         * // => true
         *
         * _.isEmpty([1, 2, 3]);
         * // => false
         *
         * _.isEmpty({ 'a': 1 });
         * // => false
         */
        function isEmpty(value) {
          if (value == null) {
            return true;
          }
          if (isArrayLike(value) && (isArray(value) || isString(value) || isArguments(value) ||
            (isObjectLike(value) && isFunction(value.splice)))) {
            return !value.length;
          }
          return !keys(value).length;
        }

        /**
         * Performs a deep comparison between two values to determine if they are
         * equivalent. If `customizer` is provided it is invoked to compare values.
         * If `customizer` returns `undefined` comparisons are handled by the method
         * instead. The `customizer` is bound to `thisArg` and invoked with three
         * arguments: (value, other [, index|key]).
         *
         * **Note:** This method supports comparing arrays, booleans, `Date` objects,
         * numbers, `Object` objects, regexes, and strings. Objects are compared by
         * their own, not inherited, enumerable properties. Functions and DOM nodes
         * are **not** supported. Provide a customizer function to extend support
         * for comparing other values.
         *
         * @static
         * @memberOf _
         * @alias eq
         * @category Lang
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @param {Function} [customizer] The function to customize value comparisons.
         * @param {*} [thisArg] The `this` binding of `customizer`.
         * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
         * @example
         *
         * var object = { 'user': 'fred' };
         * var other = { 'user': 'fred' };
         *
         * object == other;
         * // => false
         *
         * _.isEqual(object, other);
         * // => true
         *
         * // using a customizer callback
         * var array = ['hello', 'goodbye'];
         * var other = ['hi', 'goodbye'];
         *
         * _.isEqual(array, other, function(value, other) {
     *   if (_.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/)) {
     *     return true;
     *   }
     * });
         * // => true
         */
        function isEqual(value, other, customizer, thisArg) {
          customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;
          var result = customizer ? customizer(value, other) : undefined;
          return  result === undefined ? baseIsEqual(value, other, customizer) : !!result;
        }

        /**
         * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
         * `SyntaxError`, `TypeError`, or `URIError` object.
         *
         * @static
         * @memberOf _
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
         * @example
         *
         * _.isError(new Error);
         * // => true
         *
         * _.isError(Error);
         * // => false
         */
        function isError(value) {
          return isObjectLike(value) && typeof value.message == 'string' && objToString.call(value) == errorTag;
        }

        /**
         * Checks if `value` is a finite primitive number.
         *
         * **Note:** This method is based on [`Number.isFinite`](http://ecma-international.org/ecma-262/6.0/#sec-number.isfinite).
         *
         * @static
         * @memberOf _
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
         * @example
         *
         * _.isFinite(10);
         * // => true
         *
         * _.isFinite('10');
         * // => false
         *
         * _.isFinite(true);
         * // => false
         *
         * _.isFinite(Object(10));
         * // => false
         *
         * _.isFinite(Infinity);
         * // => false
         */
        function isFinite(value) {
          return typeof value == 'number' && nativeIsFinite(value);
        }

        /**
         * Checks if `value` is classified as a `Function` object.
         *
         * @static
         * @memberOf _
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
         * @example
         *
         * _.isFunction(_);
         * // => true
         *
         * _.isFunction(/abc/);
         * // => false
         */
        function isFunction(value) {
          // The use of `Object#toString` avoids issues with the `typeof` operator
          // in older versions of Chrome and Safari which return 'function' for regexes
          // and Safari 8 equivalents which return 'object' for typed array constructors.
          return isObject(value) && objToString.call(value) == funcTag;
        }

        /**
         * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
         * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
         *
         * @static
         * @memberOf _
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an object, else `false`.
         * @example
         *
         * _.isObject({});
         * // => true
         *
         * _.isObject([1, 2, 3]);
         * // => true
         *
         * _.isObject(1);
         * // => false
         */
        function isObject(value) {
          // Avoid a V8 JIT bug in Chrome 19-20.
          // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
          var type = typeof value;
          return !!value && (type == 'object' || type == 'function');
        }

        /**
         * Performs a deep comparison between `object` and `source` to determine if
         * `object` contains equivalent property values. If `customizer` is provided
         * it is invoked to compare values. If `customizer` returns `undefined`
         * comparisons are handled by the method instead. The `customizer` is bound
         * to `thisArg` and invoked with three arguments: (value, other, index|key).
         *
         * **Note:** This method supports comparing properties of arrays, booleans,
         * `Date` objects, numbers, `Object` objects, regexes, and strings. Functions
         * and DOM nodes are **not** supported. Provide a customizer function to extend
         * support for comparing other values.
         *
         * @static
         * @memberOf _
         * @category Lang
         * @param {Object} object The object to inspect.
         * @param {Object} source The object of property values to match.
         * @param {Function} [customizer] The function to customize value comparisons.
         * @param {*} [thisArg] The `this` binding of `customizer`.
         * @returns {boolean} Returns `true` if `object` is a match, else `false`.
         * @example
         *
         * var object = { 'user': 'fred', 'age': 40 };
         *
         * _.isMatch(object, { 'age': 40 });
         * // => true
         *
         * _.isMatch(object, { 'age': 36 });
         * // => false
         *
         * // using a customizer callback
         * var object = { 'greeting': 'hello' };
         * var source = { 'greeting': 'hi' };
         *
         * _.isMatch(object, source, function(value, other) {
     *   return _.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/) || undefined;
     * });
         * // => true
         */
        function isMatch(object, source, customizer, thisArg) {
          customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;
          return baseIsMatch(object, getMatchData(source), customizer);
        }

        /**
         * Checks if `value` is `NaN`.
         *
         * **Note:** This method is not the same as [`isNaN`](https://es5.github.io/#x15.1.2.4)
         * which returns `true` for `undefined` and other non-numeric values.
         *
         * @static
         * @memberOf _
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
         * @example
         *
         * _.isNaN(NaN);
         * // => true
         *
         * _.isNaN(new Number(NaN));
         * // => true
         *
         * isNaN(undefined);
         * // => true
         *
         * _.isNaN(undefined);
         * // => false
         */
        function isNaN(value) {
          // An `NaN` primitive is the only value that is not equal to itself.
          // Perform the `toStringTag` check first to avoid errors with some host objects in IE.
          return isNumber(value) && value != +value;
        }

        /**
         * Checks if `value` is a native function.
         *
         * @static
         * @memberOf _
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
         * @example
         *
         * _.isNative(Array.prototype.push);
         * // => true
         *
         * _.isNative(_);
         * // => false
         */
        function isNative(value) {
          if (value == null) {
            return false;
          }
          if (isFunction(value)) {
            return reIsNative.test(fnToString.call(value));
          }
          return isObjectLike(value) && reIsHostCtor.test(value);
        }

        /**
         * Checks if `value` is `null`.
         *
         * @static
         * @memberOf _
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
         * @example
         *
         * _.isNull(null);
         * // => true
         *
         * _.isNull(void 0);
         * // => false
         */
        function isNull(value) {
          return value === null;
        }

        /**
         * Checks if `value` is classified as a `Number` primitive or object.
         *
         * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified
         * as numbers, use the `_.isFinite` method.
         *
         * @static
         * @memberOf _
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
         * @example
         *
         * _.isNumber(8.4);
         * // => true
         *
         * _.isNumber(NaN);
         * // => true
         *
         * _.isNumber('8.4');
         * // => false
         */
        function isNumber(value) {
          return typeof value == 'number' || (isObjectLike(value) && objToString.call(value) == numberTag);
        }

        /**
         * Checks if `value` is a plain object, that is, an object created by the
         * `Object` constructor or one with a `[[Prototype]]` of `null`.
         *
         * **Note:** This method assumes objects created by the `Object` constructor
         * have no inherited enumerable properties.
         *
         * @static
         * @memberOf _
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
         * @example
         *
         * function Foo() {
     *   this.a = 1;
     * }
         *
         * _.isPlainObject(new Foo);
         * // => false
         *
         * _.isPlainObject([1, 2, 3]);
         * // => false
         *
         * _.isPlainObject({ 'x': 0, 'y': 0 });
         * // => true
         *
         * _.isPlainObject(Object.create(null));
         * // => true
         */
        function isPlainObject(value) {
          var Ctor;

          // Exit early for non `Object` objects.
          if (!(isObjectLike(value) && objToString.call(value) == objectTag && !isArguments(value)) ||
            (!hasOwnProperty.call(value, 'constructor') && (Ctor = value.constructor, typeof Ctor == 'function' && !(Ctor instanceof Ctor)))) {
            return false;
          }
          // IE < 9 iterates inherited properties before own properties. If the first
          // iterated property is an object's own property then there are no inherited
          // enumerable properties.
          var result;
          // In most environments an object's own properties are iterated before
          // its inherited properties. If the last iterated property is an object's
          // own property then there are no inherited enumerable properties.
          baseForIn(value, function(subValue, key) {
            result = key;
          });
          return result === undefined || hasOwnProperty.call(value, result);
        }

        /**
         * Checks if `value` is classified as a `RegExp` object.
         *
         * @static
         * @memberOf _
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
         * @example
         *
         * _.isRegExp(/abc/);
         * // => true
         *
         * _.isRegExp('/abc/');
         * // => false
         */
        function isRegExp(value) {
          return isObject(value) && objToString.call(value) == regexpTag;
        }

        /**
         * Checks if `value` is classified as a `String` primitive or object.
         *
         * @static
         * @memberOf _
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
         * @example
         *
         * _.isString('abc');
         * // => true
         *
         * _.isString(1);
         * // => false
         */
        function isString(value) {
          return typeof value == 'string' || (isObjectLike(value) && objToString.call(value) == stringTag);
        }

        /**
         * Checks if `value` is classified as a typed array.
         *
         * @static
         * @memberOf _
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
         * @example
         *
         * _.isTypedArray(new Uint8Array);
         * // => true
         *
         * _.isTypedArray([]);
         * // => false
         */
        function isTypedArray(value) {
          return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];
        }

        /**
         * Checks if `value` is `undefined`.
         *
         * @static
         * @memberOf _
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
         * @example
         *
         * _.isUndefined(void 0);
         * // => true
         *
         * _.isUndefined(null);
         * // => false
         */
        function isUndefined(value) {
          return value === undefined;
        }

        /**
         * Checks if `value` is less than `other`.
         *
         * @static
         * @memberOf _
         * @category Lang
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @returns {boolean} Returns `true` if `value` is less than `other`, else `false`.
         * @example
         *
         * _.lt(1, 3);
         * // => true
         *
         * _.lt(3, 3);
         * // => false
         *
         * _.lt(3, 1);
         * // => false
         */
        function lt(value, other) {
          return value < other;
        }

        /**
         * Checks if `value` is less than or equal to `other`.
         *
         * @static
         * @memberOf _
         * @category Lang
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @returns {boolean} Returns `true` if `value` is less than or equal to `other`, else `false`.
         * @example
         *
         * _.lte(1, 3);
         * // => true
         *
         * _.lte(3, 3);
         * // => true
         *
         * _.lte(3, 1);
         * // => false
         */
        function lte(value, other) {
          return value <= other;
        }

        /**
         * Converts `value` to an array.
         *
         * @static
         * @memberOf _
         * @category Lang
         * @param {*} value The value to convert.
         * @returns {Array} Returns the converted array.
         * @example
         *
         * (function() {
     *   return _.toArray(arguments).slice(1);
     * }(1, 2, 3));
         * // => [2, 3]
         */
        function toArray(value) {
          var length = value ? getLength(value) : 0;
          if (!isLength(length)) {
            return values(value);
          }
          if (!length) {
            return [];
          }
          return arrayCopy(value);
        }

        /**
         * Converts `value` to a plain object flattening inherited enumerable
         * properties of `value` to own properties of the plain object.
         *
         * @static
         * @memberOf _
         * @category Lang
         * @param {*} value The value to convert.
         * @returns {Object} Returns the converted plain object.
         * @example
         *
         * function Foo() {
     *   this.b = 2;
     * }
         *
         * Foo.prototype.c = 3;
         *
         * _.assign({ 'a': 1 }, new Foo);
         * // => { 'a': 1, 'b': 2 }
         *
         * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
         * // => { 'a': 1, 'b': 2, 'c': 3 }
         */
        function toPlainObject(value) {
          return baseCopy(value, keysIn(value));
        }

        /*------------------------------------------------------------------------*/

        /**
         * Recursively merges own enumerable properties of the source object(s), that
         * don't resolve to `undefined` into the destination object. Subsequent sources
         * overwrite property assignments of previous sources. If `customizer` is
         * provided it is invoked to produce the merged values of the destination and
         * source properties. If `customizer` returns `undefined` merging is handled
         * by the method instead. The `customizer` is bound to `thisArg` and invoked
         * with five arguments: (objectValue, sourceValue, key, object, source).
         *
         * @static
         * @memberOf _
         * @category Object
         * @param {Object} object The destination object.
         * @param {...Object} [sources] The source objects.
         * @param {Function} [customizer] The function to customize assigned values.
         * @param {*} [thisArg] The `this` binding of `customizer`.
         * @returns {Object} Returns `object`.
         * @example
         *
         * var users = {
     *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]
     * };
         *
         * var ages = {
     *   'data': [{ 'age': 36 }, { 'age': 40 }]
     * };
         *
         * _.merge(users, ages);
         * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }
         *
         * // using a customizer callback
         * var object = {
     *   'fruits': ['apple'],
     *   'vegetables': ['beet']
     * };
         *
         * var other = {
     *   'fruits': ['banana'],
     *   'vegetables': ['carrot']
     * };
         *
         * _.merge(object, other, function(a, b) {
     *   if (_.isArray(a)) {
     *     return a.concat(b);
     *   }
     * });
         * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }
         */
        var merge = createAssigner(baseMerge);

        /**
         * Assigns own enumerable properties of source object(s) to the destination
         * object. Subsequent sources overwrite property assignments of previous sources.
         * If `customizer` is provided it is invoked to produce the assigned values.
         * The `customizer` is bound to `thisArg` and invoked with five arguments:
         * (objectValue, sourceValue, key, object, source).
         *
         * **Note:** This method mutates `object` and is based on
         * [`Object.assign`](http://ecma-international.org/ecma-262/6.0/#sec-object.assign).
         *
         * @static
         * @memberOf _
         * @alias extend
         * @category Object
         * @param {Object} object The destination object.
         * @param {...Object} [sources] The source objects.
         * @param {Function} [customizer] The function to customize assigned values.
         * @param {*} [thisArg] The `this` binding of `customizer`.
         * @returns {Object} Returns `object`.
         * @example
         *
         * _.assign({ 'user': 'barney' }, { 'age': 40 }, { 'user': 'fred' });
         * // => { 'user': 'fred', 'age': 40 }
         *
         * // using a customizer callback
         * var defaults = _.partialRight(_.assign, function(value, other) {
     *   return _.isUndefined(value) ? other : value;
     * });
         *
         * defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
         * // => { 'user': 'barney', 'age': 36 }
         */
        var assign = createAssigner(function(object, source, customizer) {
          return customizer
            ? assignWith(object, source, customizer)
            : baseAssign(object, source);
        });

        /**
         * Creates an object that inherits from the given `prototype` object. If a
         * `properties` object is provided its own enumerable properties are assigned
         * to the created object.
         *
         * @static
         * @memberOf _
         * @category Object
         * @param {Object} prototype The object to inherit from.
         * @param {Object} [properties] The properties to assign to the object.
         * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
         * @returns {Object} Returns the new object.
         * @example
         *
         * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
         *
         * function Circle() {
     *   Shape.call(this);
     * }
         *
         * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
         *
         * var circle = new Circle;
         * circle instanceof Circle;
         * // => true
         *
         * circle instanceof Shape;
         * // => true
         */
        function create(prototype, properties, guard) {
          var result = baseCreate(prototype);
          if (guard && isIterateeCall(prototype, properties, guard)) {
            properties = undefined;
          }
          return properties ? baseAssign(result, properties) : result;
        }

        /**
         * Assigns own enumerable properties of source object(s) to the destination
         * object for all destination properties that resolve to `undefined`. Once a
         * property is set, additional values of the same property are ignored.
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @category Object
         * @param {Object} object The destination object.
         * @param {...Object} [sources] The source objects.
         * @returns {Object} Returns `object`.
         * @example
         *
         * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
         * // => { 'user': 'barney', 'age': 36 }
         */
        var defaults = createDefaults(assign, assignDefaults);

        /**
         * This method is like `_.defaults` except that it recursively assigns
         * default properties.
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @category Object
         * @param {Object} object The destination object.
         * @param {...Object} [sources] The source objects.
         * @returns {Object} Returns `object`.
         * @example
         *
         * _.defaultsDeep({ 'user': { 'name': 'barney' } }, { 'user': { 'name': 'fred', 'age': 36 } });
         * // => { 'user': { 'name': 'barney', 'age': 36 } }
         *
         */
        var defaultsDeep = createDefaults(merge, mergeDefaults);

        /**
         * This method is like `_.find` except that it returns the key of the first
         * element `predicate` returns truthy for instead of the element itself.
         *
         * If a property name is provided for `predicate` the created `_.property`
         * style callback returns the property value of the given element.
         *
         * If a value is also provided for `thisArg` the created `_.matchesProperty`
         * style callback returns `true` for elements that have a matching property
         * value, else `false`.
         *
         * If an object is provided for `predicate` the created `_.matches` style
         * callback returns `true` for elements that have the properties of the given
         * object, else `false`.
         *
         * @static
         * @memberOf _
         * @category Object
         * @param {Object} object The object to search.
         * @param {Function|Object|string} [predicate=_.identity] The function invoked
         *  per iteration.
         * @param {*} [thisArg] The `this` binding of `predicate`.
         * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
         * @example
         *
         * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
         *
         * _.findKey(users, function(chr) {
     *   return chr.age < 40;
     * });
         * // => 'barney' (iteration order is not guaranteed)
         *
         * // using the `_.matches` callback shorthand
         * _.findKey(users, { 'age': 1, 'active': true });
         * // => 'pebbles'
         *
         * // using the `_.matchesProperty` callback shorthand
         * _.findKey(users, 'active', false);
         * // => 'fred'
         *
         * // using the `_.property` callback shorthand
         * _.findKey(users, 'active');
         * // => 'barney'
         */
        var findKey = createFindKey(baseForOwn);

        /**
         * This method is like `_.findKey` except that it iterates over elements of
         * a collection in the opposite order.
         *
         * If a property name is provided for `predicate` the created `_.property`
         * style callback returns the property value of the given element.
         *
         * If a value is also provided for `thisArg` the created `_.matchesProperty`
         * style callback returns `true` for elements that have a matching property
         * value, else `false`.
         *
         * If an object is provided for `predicate` the created `_.matches` style
         * callback returns `true` for elements that have the properties of the given
         * object, else `false`.
         *
         * @static
         * @memberOf _
         * @category Object
         * @param {Object} object The object to search.
         * @param {Function|Object|string} [predicate=_.identity] The function invoked
         *  per iteration.
         * @param {*} [thisArg] The `this` binding of `predicate`.
         * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
         * @example
         *
         * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
         *
         * _.findLastKey(users, function(chr) {
     *   return chr.age < 40;
     * });
         * // => returns `pebbles` assuming `_.findKey` returns `barney`
         *
         * // using the `_.matches` callback shorthand
         * _.findLastKey(users, { 'age': 36, 'active': true });
         * // => 'barney'
         *
         * // using the `_.matchesProperty` callback shorthand
         * _.findLastKey(users, 'active', false);
         * // => 'fred'
         *
         * // using the `_.property` callback shorthand
         * _.findLastKey(users, 'active');
         * // => 'pebbles'
         */
        var findLastKey = createFindKey(baseForOwnRight);

        /**
         * Iterates over own and inherited enumerable properties of an object invoking
         * `iteratee` for each property. The `iteratee` is bound to `thisArg` and invoked
         * with three arguments: (value, key, object). Iteratee functions may exit
         * iteration early by explicitly returning `false`.
         *
         * @static
         * @memberOf _
         * @category Object
         * @param {Object} object The object to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @param {*} [thisArg] The `this` binding of `iteratee`.
         * @returns {Object} Returns `object`.
         * @example
         *
         * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
         *
         * Foo.prototype.c = 3;
         *
         * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
         * // => logs 'a', 'b', and 'c' (iteration order is not guaranteed)
         */
        var forIn = createForIn(baseFor);

        /**
         * This method is like `_.forIn` except that it iterates over properties of
         * `object` in the opposite order.
         *
         * @static
         * @memberOf _
         * @category Object
         * @param {Object} object The object to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @param {*} [thisArg] The `this` binding of `iteratee`.
         * @returns {Object} Returns `object`.
         * @example
         *
         * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
         *
         * Foo.prototype.c = 3;
         *
         * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
         * // => logs 'c', 'b', and 'a' assuming `_.forIn ` logs 'a', 'b', and 'c'
         */
        var forInRight = createForIn(baseForRight);

        /**
         * Iterates over own enumerable properties of an object invoking `iteratee`
         * for each property. The `iteratee` is bound to `thisArg` and invoked with
         * three arguments: (value, key, object). Iteratee functions may exit iteration
         * early by explicitly returning `false`.
         *
         * @static
         * @memberOf _
         * @category Object
         * @param {Object} object The object to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @param {*} [thisArg] The `this` binding of `iteratee`.
         * @returns {Object} Returns `object`.
         * @example
         *
         * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
         *
         * Foo.prototype.c = 3;
         *
         * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
         * // => logs 'a' and 'b' (iteration order is not guaranteed)
         */
        var forOwn = createForOwn(baseForOwn);

        /**
         * This method is like `_.forOwn` except that it iterates over properties of
         * `object` in the opposite order.
         *
         * @static
         * @memberOf _
         * @category Object
         * @param {Object} object The object to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @param {*} [thisArg] The `this` binding of `iteratee`.
         * @returns {Object} Returns `object`.
         * @example
         *
         * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
         *
         * Foo.prototype.c = 3;
         *
         * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
         * // => logs 'b' and 'a' assuming `_.forOwn` logs 'a' and 'b'
         */
        var forOwnRight = createForOwn(baseForOwnRight);

        /**
         * Creates an array of function property names from all enumerable properties,
         * own and inherited, of `object`.
         *
         * @static
         * @memberOf _
         * @alias methods
         * @category Object
         * @param {Object} object The object to inspect.
         * @returns {Array} Returns the new array of property names.
         * @example
         *
         * _.functions(_);
         * // => ['after', 'ary', 'assign', ...]
         */
        function functions(object) {
          return baseFunctions(object, keysIn(object));
        }

        /**
         * Gets the property value at `path` of `object`. If the resolved value is
         * `undefined` the `defaultValue` is used in its place.
         *
         * @static
         * @memberOf _
         * @category Object
         * @param {Object} object The object to query.
         * @param {Array|string} path The path of the property to get.
         * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
         * @returns {*} Returns the resolved value.
         * @example
         *
         * var object = { 'a': [{ 'b': { 'c': 3 } }] };
         *
         * _.get(object, 'a[0].b.c');
         * // => 3
         *
         * _.get(object, ['a', '0', 'b', 'c']);
         * // => 3
         *
         * _.get(object, 'a.b.c', 'default');
         * // => 'default'
         */
        function get(object, path, defaultValue) {
          var result = object == null ? undefined : baseGet(object, toPath(path), path + '');
          return result === undefined ? defaultValue : result;
        }

        /**
         * Checks if `path` is a direct property.
         *
         * @static
         * @memberOf _
         * @category Object
         * @param {Object} object The object to query.
         * @param {Array|string} path The path to check.
         * @returns {boolean} Returns `true` if `path` is a direct property, else `false`.
         * @example
         *
         * var object = { 'a': { 'b': { 'c': 3 } } };
         *
         * _.has(object, 'a');
         * // => true
         *
         * _.has(object, 'a.b.c');
         * // => true
         *
         * _.has(object, ['a', 'b', 'c']);
         * // => true
         */
        function has(object, path) {
          if (object == null) {
            return false;
          }
          var result = hasOwnProperty.call(object, path);
          if (!result && !isKey(path)) {
            path = toPath(path);
            object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
            if (object == null) {
              return false;
            }
            path = last(path);
            result = hasOwnProperty.call(object, path);
          }
          return result || (isLength(object.length) && isIndex(path, object.length) &&
            (isArray(object) || isArguments(object)));
        }

        /**
         * Creates an object composed of the inverted keys and values of `object`.
         * If `object` contains duplicate values, subsequent values overwrite property
         * assignments of previous values unless `multiValue` is `true`.
         *
         * @static
         * @memberOf _
         * @category Object
         * @param {Object} object The object to invert.
         * @param {boolean} [multiValue] Allow multiple values per key.
         * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
         * @returns {Object} Returns the new inverted object.
         * @example
         *
         * var object = { 'a': 1, 'b': 2, 'c': 1 };
         *
         * _.invert(object);
         * // => { '1': 'c', '2': 'b' }
         *
         * // with `multiValue`
         * _.invert(object, true);
         * // => { '1': ['a', 'c'], '2': ['b'] }
         */
        function invert(object, multiValue, guard) {
          if (guard && isIterateeCall(object, multiValue, guard)) {
            multiValue = undefined;
          }
          var index = -1,
            props = keys(object),
            length = props.length,
            result = {};

          while (++index < length) {
            var key = props[index],
              value = object[key];

            if (multiValue) {
              if (hasOwnProperty.call(result, value)) {
                result[value].push(key);
              } else {
                result[value] = [key];
              }
            }
            else {
              result[value] = key;
            }
          }
          return result;
        }

        /**
         * Creates an array of the own enumerable property names of `object`.
         *
         * **Note:** Non-object values are coerced to objects. See the
         * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
         * for more details.
         *
         * @static
         * @memberOf _
         * @category Object
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         * @example
         *
         * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
         *
         * Foo.prototype.c = 3;
         *
         * _.keys(new Foo);
         * // => ['a', 'b'] (iteration order is not guaranteed)
         *
         * _.keys('hi');
         * // => ['0', '1']
         */
        var keys = !nativeKeys ? shimKeys : function(object) {
          var Ctor = object == null ? undefined : object.constructor;
          if ((typeof Ctor == 'function' && Ctor.prototype === object) ||
            (typeof object != 'function' && isArrayLike(object))) {
            return shimKeys(object);
          }
          return isObject(object) ? nativeKeys(object) : [];
        };

        /**
         * Creates an array of the own and inherited enumerable property names of `object`.
         *
         * **Note:** Non-object values are coerced to objects.
         *
         * @static
         * @memberOf _
         * @category Object
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         * @example
         *
         * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
         *
         * Foo.prototype.c = 3;
         *
         * _.keysIn(new Foo);
         * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
         */
        function keysIn(object) {
          if (object == null) {
            return [];
          }
          if (!isObject(object)) {
            object = Object(object);
          }
          var length = object.length;
          length = (length && isLength(length) &&
            (isArray(object) || isArguments(object)) && length) || 0;

          var Ctor = object.constructor,
            index = -1,
            isProto = typeof Ctor == 'function' && Ctor.prototype === object,
            result = Array(length),
            skipIndexes = length > 0;

          while (++index < length) {
            result[index] = (index + '');
          }
          for (var key in object) {
            if (!(skipIndexes && isIndex(key, length)) &&
              !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
              result.push(key);
            }
          }
          return result;
        }

        /**
         * The opposite of `_.mapValues`; this method creates an object with the
         * same values as `object` and keys generated by running each own enumerable
         * property of `object` through `iteratee`.
         *
         * @static
         * @memberOf _
         * @category Object
         * @param {Object} object The object to iterate over.
         * @param {Function|Object|string} [iteratee=_.identity] The function invoked
         *  per iteration.
         * @param {*} [thisArg] The `this` binding of `iteratee`.
         * @returns {Object} Returns the new mapped object.
         * @example
         *
         * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
         * // => { 'a1': 1, 'b2': 2 }
         */
        var mapKeys = createObjectMapper(true);

        /**
         * Creates an object with the same keys as `object` and values generated by
         * running each own enumerable property of `object` through `iteratee`. The
         * iteratee function is bound to `thisArg` and invoked with three arguments:
         * (value, key, object).
         *
         * If a property name is provided for `iteratee` the created `_.property`
         * style callback returns the property value of the given element.
         *
         * If a value is also provided for `thisArg` the created `_.matchesProperty`
         * style callback returns `true` for elements that have a matching property
         * value, else `false`.
         *
         * If an object is provided for `iteratee` the created `_.matches` style
         * callback returns `true` for elements that have the properties of the given
         * object, else `false`.
         *
         * @static
         * @memberOf _
         * @category Object
         * @param {Object} object The object to iterate over.
         * @param {Function|Object|string} [iteratee=_.identity] The function invoked
         *  per iteration.
         * @param {*} [thisArg] The `this` binding of `iteratee`.
         * @returns {Object} Returns the new mapped object.
         * @example
         *
         * _.mapValues({ 'a': 1, 'b': 2 }, function(n) {
     *   return n * 3;
     * });
         * // => { 'a': 3, 'b': 6 }
         *
         * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
         *
         * // using the `_.property` callback shorthand
         * _.mapValues(users, 'age');
         * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
         */
        var mapValues = createObjectMapper();

        /**
         * The opposite of `_.pick`; this method creates an object composed of the
         * own and inherited enumerable properties of `object` that are not omitted.
         *
         * @static
         * @memberOf _
         * @category Object
         * @param {Object} object The source object.
         * @param {Function|...(string|string[])} [predicate] The function invoked per
         *  iteration or property names to omit, specified as individual property
         *  names or arrays of property names.
         * @param {*} [thisArg] The `this` binding of `predicate`.
         * @returns {Object} Returns the new object.
         * @example
         *
         * var object = { 'user': 'fred', 'age': 40 };
         *
         * _.omit(object, 'age');
         * // => { 'user': 'fred' }
         *
         * _.omit(object, _.isNumber);
         * // => { 'user': 'fred' }
         */
        var omit = restParam(function(object, props) {
          if (object == null) {
            return {};
          }
          if (typeof props[0] != 'function') {
            var props = arrayMap(baseFlatten(props), String);
            return pickByArray(object, baseDifference(keysIn(object), props));
          }
          var predicate = bindCallback(props[0], props[1], 3);
          return pickByCallback(object, function(value, key, object) {
            return !predicate(value, key, object);
          });
        });

        /**
         * Creates a two dimensional array of the key-value pairs for `object`,
         * e.g. `[[key1, value1], [key2, value2]]`.
         *
         * @static
         * @memberOf _
         * @category Object
         * @param {Object} object The object to query.
         * @returns {Array} Returns the new array of key-value pairs.
         * @example
         *
         * _.pairs({ 'barney': 36, 'fred': 40 });
         * // => [['barney', 36], ['fred', 40]] (iteration order is not guaranteed)
         */
        function pairs(object) {
          object = toObject(object);

          var index = -1,
            props = keys(object),
            length = props.length,
            result = Array(length);

          while (++index < length) {
            var key = props[index];
            result[index] = [key, object[key]];
          }
          return result;
        }

        /**
         * Creates an object composed of the picked `object` properties. Property
         * names may be specified as individual arguments or as arrays of property
         * names. If `predicate` is provided it is invoked for each property of `object`
         * picking the properties `predicate` returns truthy for. The predicate is
         * bound to `thisArg` and invoked with three arguments: (value, key, object).
         *
         * @static
         * @memberOf _
         * @category Object
         * @param {Object} object The source object.
         * @param {Function|...(string|string[])} [predicate] The function invoked per
         *  iteration or property names to pick, specified as individual property
         *  names or arrays of property names.
         * @param {*} [thisArg] The `this` binding of `predicate`.
         * @returns {Object} Returns the new object.
         * @example
         *
         * var object = { 'user': 'fred', 'age': 40 };
         *
         * _.pick(object, 'user');
         * // => { 'user': 'fred' }
         *
         * _.pick(object, _.isString);
         * // => { 'user': 'fred' }
         */
        var pick = restParam(function(object, props) {
          if (object == null) {
            return {};
          }
          return typeof props[0] == 'function'
            ? pickByCallback(object, bindCallback(props[0], props[1], 3))
            : pickByArray(object, baseFlatten(props));
        });

        /**
         * This method is like `_.get` except that if the resolved value is a function
         * it is invoked with the `this` binding of its parent object and its result
         * is returned.
         *
         * @static
         * @memberOf _
         * @category Object
         * @param {Object} object The object to query.
         * @param {Array|string} path The path of the property to resolve.
         * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
         * @returns {*} Returns the resolved value.
         * @example
         *
         * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
         *
         * _.result(object, 'a[0].b.c1');
         * // => 3
         *
         * _.result(object, 'a[0].b.c2');
         * // => 4
         *
         * _.result(object, 'a.b.c', 'default');
         * // => 'default'
         *
         * _.result(object, 'a.b.c', _.constant('default'));
         * // => 'default'
         */
        function result(object, path, defaultValue) {
          var result = object == null ? undefined : object[path];
          if (result === undefined) {
            if (object != null && !isKey(path, object)) {
              path = toPath(path);
              object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
              result = object == null ? undefined : object[last(path)];
            }
            result = result === undefined ? defaultValue : result;
          }
          return isFunction(result) ? result.call(object) : result;
        }

        /**
         * Sets the property value of `path` on `object`. If a portion of `path`
         * does not exist it is created.
         *
         * @static
         * @memberOf _
         * @category Object
         * @param {Object} object The object to augment.
         * @param {Array|string} path The path of the property to set.
         * @param {*} value The value to set.
         * @returns {Object} Returns `object`.
         * @example
         *
         * var object = { 'a': [{ 'b': { 'c': 3 } }] };
         *
         * _.set(object, 'a[0].b.c', 4);
         * console.log(object.a[0].b.c);
         * // => 4
         *
         * _.set(object, 'x[0].y.z', 5);
         * console.log(object.x[0].y.z);
         * // => 5
         */
        function set(object, path, value) {
          if (object == null) {
            return object;
          }
          var pathKey = (path + '');
          path = (object[pathKey] != null || isKey(path, object)) ? [pathKey] : toPath(path);

          var index = -1,
            length = path.length,
            lastIndex = length - 1,
            nested = object;

          while (nested != null && ++index < length) {
            var key = path[index];
            if (isObject(nested)) {
              if (index == lastIndex) {
                nested[key] = value;
              } else if (nested[key] == null) {
                nested[key] = isIndex(path[index + 1]) ? [] : {};
              }
            }
            nested = nested[key];
          }
          return object;
        }

        /**
         * An alternative to `_.reduce`; this method transforms `object` to a new
         * `accumulator` object which is the result of running each of its own enumerable
         * properties through `iteratee`, with each invocation potentially mutating
         * the `accumulator` object. The `iteratee` is bound to `thisArg` and invoked
         * with four arguments: (accumulator, value, key, object). Iteratee functions
         * may exit iteration early by explicitly returning `false`.
         *
         * @static
         * @memberOf _
         * @category Object
         * @param {Array|Object} object The object to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @param {*} [accumulator] The custom accumulator value.
         * @param {*} [thisArg] The `this` binding of `iteratee`.
         * @returns {*} Returns the accumulated value.
         * @example
         *
         * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * });
         * // => [4, 9]
         *
         * _.transform({ 'a': 1, 'b': 2 }, function(result, n, key) {
     *   result[key] = n * 3;
     * });
         * // => { 'a': 3, 'b': 6 }
         */
        function transform(object, iteratee, accumulator, thisArg) {
          var isArr = isArray(object) || isTypedArray(object);
          iteratee = getCallback(iteratee, thisArg, 4);

          if (accumulator == null) {
            if (isArr || isObject(object)) {
              var Ctor = object.constructor;
              if (isArr) {
                accumulator = isArray(object) ? new Ctor : [];
              } else {
                accumulator = baseCreate(isFunction(Ctor) ? Ctor.prototype : undefined);
              }
            } else {
              accumulator = {};
            }
          }
          (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {
            return iteratee(accumulator, value, index, object);
          });
          return accumulator;
        }

        /**
         * Creates an array of the own enumerable property values of `object`.
         *
         * **Note:** Non-object values are coerced to objects.
         *
         * @static
         * @memberOf _
         * @category Object
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property values.
         * @example
         *
         * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
         *
         * Foo.prototype.c = 3;
         *
         * _.values(new Foo);
         * // => [1, 2] (iteration order is not guaranteed)
         *
         * _.values('hi');
         * // => ['h', 'i']
         */
        function values(object) {
          return baseValues(object, keys(object));
        }

        /**
         * Creates an array of the own and inherited enumerable property values
         * of `object`.
         *
         * **Note:** Non-object values are coerced to objects.
         *
         * @static
         * @memberOf _
         * @category Object
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property values.
         * @example
         *
         * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
         *
         * Foo.prototype.c = 3;
         *
         * _.valuesIn(new Foo);
         * // => [1, 2, 3] (iteration order is not guaranteed)
         */
        function valuesIn(object) {
          return baseValues(object, keysIn(object));
        }

        /*------------------------------------------------------------------------*/

        /**
         * Checks if `n` is between `start` and up to but not including, `end`. If
         * `end` is not specified it is set to `start` with `start` then set to `0`.
         *
         * @static
         * @memberOf _
         * @category Number
         * @param {number} n The number to check.
         * @param {number} [start=0] The start of the range.
         * @param {number} end The end of the range.
         * @returns {boolean} Returns `true` if `n` is in the range, else `false`.
         * @example
         *
         * _.inRange(3, 2, 4);
         * // => true
         *
         * _.inRange(4, 8);
         * // => true
         *
         * _.inRange(4, 2);
         * // => false
         *
         * _.inRange(2, 2);
         * // => false
         *
         * _.inRange(1.2, 2);
         * // => true
         *
         * _.inRange(5.2, 4);
         * // => false
         */
        function inRange(value, start, end) {
          start = +start || 0;
          if (end === undefined) {
            end = start;
            start = 0;
          } else {
            end = +end || 0;
          }
          return value >= nativeMin(start, end) && value < nativeMax(start, end);
        }

        /**
         * Produces a random number between `min` and `max` (inclusive). If only one
         * argument is provided a number between `0` and the given number is returned.
         * If `floating` is `true`, or either `min` or `max` are floats, a floating-point
         * number is returned instead of an integer.
         *
         * @static
         * @memberOf _
         * @category Number
         * @param {number} [min=0] The minimum possible value.
         * @param {number} [max=1] The maximum possible value.
         * @param {boolean} [floating] Specify returning a floating-point number.
         * @returns {number} Returns the random number.
         * @example
         *
         * _.random(0, 5);
         * // => an integer between 0 and 5
         *
         * _.random(5);
         * // => also an integer between 0 and 5
         *
         * _.random(5, true);
         * // => a floating-point number between 0 and 5
         *
         * _.random(1.2, 5.2);
         * // => a floating-point number between 1.2 and 5.2
         */
        function random(min, max, floating) {
          if (floating && isIterateeCall(min, max, floating)) {
            max = floating = undefined;
          }
          var noMin = min == null,
            noMax = max == null;

          if (floating == null) {
            if (noMax && typeof min == 'boolean') {
              floating = min;
              min = 1;
            }
            else if (typeof max == 'boolean') {
              floating = max;
              noMax = true;
            }
          }
          if (noMin && noMax) {
            max = 1;
            noMax = false;
          }
          min = +min || 0;
          if (noMax) {
            max = min;
            min = 0;
          } else {
            max = +max || 0;
          }
          if (floating || min % 1 || max % 1) {
            var rand = nativeRandom();
            return nativeMin(min + (rand * (max - min + parseFloat('1e-' + ((rand + '').length - 1)))), max);
          }
          return baseRandom(min, max);
        }

        /*------------------------------------------------------------------------*/

        /**
         * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
         *
         * @static
         * @memberOf _
         * @category String
         * @param {string} [string=''] The string to convert.
         * @returns {string} Returns the camel cased string.
         * @example
         *
         * _.camelCase('Foo Bar');
         * // => 'fooBar'
         *
         * _.camelCase('--foo-bar');
         * // => 'fooBar'
         *
         * _.camelCase('__foo_bar__');
         * // => 'fooBar'
         */
        var camelCase = createCompounder(function(result, word, index) {
          word = word.toLowerCase();
          return result + (index ? (word.charAt(0).toUpperCase() + word.slice(1)) : word);
        });

        /**
         * Capitalizes the first character of `string`.
         *
         * @static
         * @memberOf _
         * @category String
         * @param {string} [string=''] The string to capitalize.
         * @returns {string} Returns the capitalized string.
         * @example
         *
         * _.capitalize('fred');
         * // => 'Fred'
         */
        function capitalize(string) {
          string = baseToString(string);
          return string && (string.charAt(0).toUpperCase() + string.slice(1));
        }

        /**
         * Deburrs `string` by converting [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
         * to basic latin letters and removing [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
         *
         * @static
         * @memberOf _
         * @category String
         * @param {string} [string=''] The string to deburr.
         * @returns {string} Returns the deburred string.
         * @example
         *
         * _.deburr('déjà vu');
         * // => 'deja vu'
         */
        function deburr(string) {
          string = baseToString(string);
          return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');
        }

        /**
         * Checks if `string` ends with the given target string.
         *
         * @static
         * @memberOf _
         * @category String
         * @param {string} [string=''] The string to search.
         * @param {string} [target] The string to search for.
         * @param {number} [position=string.length] The position to search from.
         * @returns {boolean} Returns `true` if `string` ends with `target`, else `false`.
         * @example
         *
         * _.endsWith('abc', 'c');
         * // => true
         *
         * _.endsWith('abc', 'b');
         * // => false
         *
         * _.endsWith('abc', 'b', 2);
         * // => true
         */
        function endsWith(string, target, position) {
          string = baseToString(string);
          target = (target + '');

          var length = string.length;
          position = position === undefined
            ? length
            : nativeMin(position < 0 ? 0 : (+position || 0), length);

          position -= target.length;
          return position >= 0 && string.indexOf(target, position) == position;
        }

        /**
         * Converts the characters "&", "<", ">", '"', "'", and "\`", in `string` to
         * their corresponding HTML entities.
         *
         * **Note:** No other characters are escaped. To escape additional characters
         * use a third-party library like [_he_](https://mths.be/he).
         *
         * Though the ">" character is escaped for symmetry, characters like
         * ">" and "/" don't need escaping in HTML and have no special meaning
         * unless they're part of a tag or unquoted attribute value.
         * See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
         * (under "semi-related fun fact") for more details.
         *
         * Backticks are escaped because in Internet Explorer < 9, they can break out
         * of attribute values or HTML comments. See [#59](https://html5sec.org/#59),
         * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and
         * [#133](https://html5sec.org/#133) of the [HTML5 Security Cheatsheet](https://html5sec.org/)
         * for more details.
         *
         * When working with HTML you should always [quote attribute values](http://wonko.com/post/html-escaping)
         * to reduce XSS vectors.
         *
         * @static
         * @memberOf _
         * @category String
         * @param {string} [string=''] The string to escape.
         * @returns {string} Returns the escaped string.
         * @example
         *
         * _.escape('fred, barney, & pebbles');
         * // => 'fred, barney, &amp; pebbles'
         */
        function escape(string) {
          // Reset `lastIndex` because in IE < 9 `String#replace` does not.
          string = baseToString(string);
          return (string && reHasUnescapedHtml.test(string))
            ? string.replace(reUnescapedHtml, escapeHtmlChar)
            : string;
        }

        /**
         * Escapes the `RegExp` special characters "\", "/", "^", "$", ".", "|", "?",
         * "*", "+", "(", ")", "[", "]", "{" and "}" in `string`.
         *
         * @static
         * @memberOf _
         * @category String
         * @param {string} [string=''] The string to escape.
         * @returns {string} Returns the escaped string.
         * @example
         *
         * _.escapeRegExp('[lodash](https://lodash.com/)');
         * // => '\[lodash\]\(https:\/\/lodash\.com\/\)'
         */
        function escapeRegExp(string) {
          string = baseToString(string);
          return (string && reHasRegExpChars.test(string))
            ? string.replace(reRegExpChars, escapeRegExpChar)
            : (string || '(?:)');
        }

        /**
         * Converts `string` to [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
         *
         * @static
         * @memberOf _
         * @category String
         * @param {string} [string=''] The string to convert.
         * @returns {string} Returns the kebab cased string.
         * @example
         *
         * _.kebabCase('Foo Bar');
         * // => 'foo-bar'
         *
         * _.kebabCase('fooBar');
         * // => 'foo-bar'
         *
         * _.kebabCase('__foo_bar__');
         * // => 'foo-bar'
         */
        var kebabCase = createCompounder(function(result, word, index) {
          return result + (index ? '-' : '') + word.toLowerCase();
        });

        /**
         * Pads `string` on the left and right sides if it's shorter than `length`.
         * Padding characters are truncated if they can't be evenly divided by `length`.
         *
         * @static
         * @memberOf _
         * @category String
         * @param {string} [string=''] The string to pad.
         * @param {number} [length=0] The padding length.
         * @param {string} [chars=' '] The string used as padding.
         * @returns {string} Returns the padded string.
         * @example
         *
         * _.pad('abc', 8);
         * // => '  abc   '
         *
         * _.pad('abc', 8, '_-');
         * // => '_-abc_-_'
         *
         * _.pad('abc', 3);
         * // => 'abc'
         */
        function pad(string, length, chars) {
          string = baseToString(string);
          length = +length;

          var strLength = string.length;
          if (strLength >= length || !nativeIsFinite(length)) {
            return string;
          }
          var mid = (length - strLength) / 2,
            leftLength = nativeFloor(mid),
            rightLength = nativeCeil(mid);

          chars = createPadding('', rightLength, chars);
          return chars.slice(0, leftLength) + string + chars;
        }

        /**
         * Pads `string` on the left side if it's shorter than `length`. Padding
         * characters are truncated if they exceed `length`.
         *
         * @static
         * @memberOf _
         * @category String
         * @param {string} [string=''] The string to pad.
         * @param {number} [length=0] The padding length.
         * @param {string} [chars=' '] The string used as padding.
         * @returns {string} Returns the padded string.
         * @example
         *
         * _.padLeft('abc', 6);
         * // => '   abc'
         *
         * _.padLeft('abc', 6, '_-');
         * // => '_-_abc'
         *
         * _.padLeft('abc', 3);
         * // => 'abc'
         */
        var padLeft = createPadDir();

        /**
         * Pads `string` on the right side if it's shorter than `length`. Padding
         * characters are truncated if they exceed `length`.
         *
         * @static
         * @memberOf _
         * @category String
         * @param {string} [string=''] The string to pad.
         * @param {number} [length=0] The padding length.
         * @param {string} [chars=' '] The string used as padding.
         * @returns {string} Returns the padded string.
         * @example
         *
         * _.padRight('abc', 6);
         * // => 'abc   '
         *
         * _.padRight('abc', 6, '_-');
         * // => 'abc_-_'
         *
         * _.padRight('abc', 3);
         * // => 'abc'
         */
        var padRight = createPadDir(true);

        /**
         * Converts `string` to an integer of the specified radix. If `radix` is
         * `undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal,
         * in which case a `radix` of `16` is used.
         *
         * **Note:** This method aligns with the [ES5 implementation](https://es5.github.io/#E)
         * of `parseInt`.
         *
         * @static
         * @memberOf _
         * @category String
         * @param {string} string The string to convert.
         * @param {number} [radix] The radix to interpret `value` by.
         * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
         * @returns {number} Returns the converted integer.
         * @example
         *
         * _.parseInt('08');
         * // => 8
         *
         * _.map(['6', '08', '10'], _.parseInt);
         * // => [6, 8, 10]
         */
        function parseInt(string, radix, guard) {
          // Firefox < 21 and Opera < 15 follow ES3 for `parseInt`.
          // Chrome fails to trim leading <BOM> whitespace characters.
          // See https://code.google.com/p/v8/issues/detail?id=3109 for more details.
          if (guard ? isIterateeCall(string, radix, guard) : radix == null) {
            radix = 0;
          } else if (radix) {
            radix = +radix;
          }
          string = trim(string);
          return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));
        }

        /**
         * Repeats the given string `n` times.
         *
         * @static
         * @memberOf _
         * @category String
         * @param {string} [string=''] The string to repeat.
         * @param {number} [n=0] The number of times to repeat the string.
         * @returns {string} Returns the repeated string.
         * @example
         *
         * _.repeat('*', 3);
         * // => '***'
         *
         * _.repeat('abc', 2);
         * // => 'abcabc'
         *
         * _.repeat('abc', 0);
         * // => ''
         */
        function repeat(string, n) {
          var result = '';
          string = baseToString(string);
          n = +n;
          if (n < 1 || !string || !nativeIsFinite(n)) {
            return result;
          }
          // Leverage the exponentiation by squaring algorithm for a faster repeat.
          // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
          do {
            if (n % 2) {
              result += string;
            }
            n = nativeFloor(n / 2);
            string += string;
          } while (n);

          return result;
        }

        /**
         * Converts `string` to [snake case](https://en.wikipedia.org/wiki/Snake_case).
         *
         * @static
         * @memberOf _
         * @category String
         * @param {string} [string=''] The string to convert.
         * @returns {string} Returns the snake cased string.
         * @example
         *
         * _.snakeCase('Foo Bar');
         * // => 'foo_bar'
         *
         * _.snakeCase('fooBar');
         * // => 'foo_bar'
         *
         * _.snakeCase('--foo-bar');
         * // => 'foo_bar'
         */
        var snakeCase = createCompounder(function(result, word, index) {
          return result + (index ? '_' : '') + word.toLowerCase();
        });

        /**
         * Converts `string` to [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
         *
         * @static
         * @memberOf _
         * @category String
         * @param {string} [string=''] The string to convert.
         * @returns {string} Returns the start cased string.
         * @example
         *
         * _.startCase('--foo-bar');
         * // => 'Foo Bar'
         *
         * _.startCase('fooBar');
         * // => 'Foo Bar'
         *
         * _.startCase('__foo_bar__');
         * // => 'Foo Bar'
         */
        var startCase = createCompounder(function(result, word, index) {
          return result + (index ? ' ' : '') + (word.charAt(0).toUpperCase() + word.slice(1));
        });

        /**
         * Checks if `string` starts with the given target string.
         *
         * @static
         * @memberOf _
         * @category String
         * @param {string} [string=''] The string to search.
         * @param {string} [target] The string to search for.
         * @param {number} [position=0] The position to search from.
         * @returns {boolean} Returns `true` if `string` starts with `target`, else `false`.
         * @example
         *
         * _.startsWith('abc', 'a');
         * // => true
         *
         * _.startsWith('abc', 'b');
         * // => false
         *
         * _.startsWith('abc', 'b', 1);
         * // => true
         */
        function startsWith(string, target, position) {
          string = baseToString(string);
          position = position == null
            ? 0
            : nativeMin(position < 0 ? 0 : (+position || 0), string.length);

          return string.lastIndexOf(target, position) == position;
        }

        /**
         * Creates a compiled template function that can interpolate data properties
         * in "interpolate" delimiters, HTML-escape interpolated data properties in
         * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
         * properties may be accessed as free variables in the template. If a setting
         * object is provided it takes precedence over `_.templateSettings` values.
         *
         * **Note:** In the development build `_.template` utilizes
         * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
         * for easier debugging.
         *
         * For more information on precompiling templates see
         * [lodash's custom builds documentation](https://lodash.com/custom-builds).
         *
         * For more information on Chrome extension sandboxes see
         * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
         *
         * @static
         * @memberOf _
         * @category String
         * @param {string} [string=''] The template string.
         * @param {Object} [options] The options object.
         * @param {RegExp} [options.escape] The HTML "escape" delimiter.
         * @param {RegExp} [options.evaluate] The "evaluate" delimiter.
         * @param {Object} [options.imports] An object to import into the template as free variables.
         * @param {RegExp} [options.interpolate] The "interpolate" delimiter.
         * @param {string} [options.sourceURL] The sourceURL of the template's compiled source.
         * @param {string} [options.variable] The data object variable name.
         * @param- {Object} [otherOptions] Enables the legacy `options` param signature.
         * @returns {Function} Returns the compiled template function.
         * @example
         *
         * // using the "interpolate" delimiter to create a compiled template
         * var compiled = _.template('hello <%= user %>!');
         * compiled({ 'user': 'fred' });
         * // => 'hello fred!'
         *
         * // using the HTML "escape" delimiter to escape data property values
         * var compiled = _.template('<b><%- value %></b>');
         * compiled({ 'value': '<script>' });
         * // => '<b>&lt;script&gt;</b>'
         *
         * // using the "evaluate" delimiter to execute JavaScript and generate HTML
         * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
         * compiled({ 'users': ['fred', 'barney'] });
         * // => '<li>fred</li><li>barney</li>'
         *
         * // using the internal `print` function in "evaluate" delimiters
         * var compiled = _.template('<% print("hello " + user); %>!');
         * compiled({ 'user': 'barney' });
         * // => 'hello barney!'
         *
         * // using the ES delimiter as an alternative to the default "interpolate" delimiter
         * var compiled = _.template('hello ${ user }!');
         * compiled({ 'user': 'pebbles' });
         * // => 'hello pebbles!'
         *
         * // using custom template delimiters
         * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
         * var compiled = _.template('hello {{ user }}!');
         * compiled({ 'user': 'mustache' });
         * // => 'hello mustache!'
         *
         * // using backslashes to treat delimiters as plain text
         * var compiled = _.template('<%= "\\<%- value %\\>" %>');
         * compiled({ 'value': 'ignored' });
         * // => '<%- value %>'
         *
         * // using the `imports` option to import `jQuery` as `jq`
         * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
         * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
         * compiled({ 'users': ['fred', 'barney'] });
         * // => '<li>fred</li><li>barney</li>'
         *
         * // using the `sourceURL` option to specify a custom sourceURL for the template
         * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
         * compiled(data);
         * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector
         *
         * // using the `variable` option to ensure a with-statement isn't used in the compiled template
         * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
         * compiled.source;
         * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
         *
         * // using the `source` property to inline compiled templates for meaningful
         * // line numbers in error messages and a stack trace
         * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
         *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
         * ');
         */
        function template(string, options, otherOptions) {
          // Based on John Resig's `tmpl` implementation (http://ejohn.org/blog/javascript-micro-templating/)
          // and Laura Doktorova's doT.js (https://github.com/olado/doT).
          var settings = lodash.templateSettings;

          if (otherOptions && isIterateeCall(string, options, otherOptions)) {
            options = otherOptions = undefined;
          }
          string = baseToString(string);
          options = assignWith(baseAssign({}, otherOptions || options), settings, assignOwnDefaults);

          var imports = assignWith(baseAssign({}, options.imports), settings.imports, assignOwnDefaults),
            importsKeys = keys(imports),
            importsValues = baseValues(imports, importsKeys);

          var isEscaping,
            isEvaluating,
            index = 0,
            interpolate = options.interpolate || reNoMatch,
            source = "__p += '";

          // Compile the regexp to match each delimiter.
          var reDelimiters = RegExp(
            (options.escape || reNoMatch).source + '|' +
            interpolate.source + '|' +
            (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
            (options.evaluate || reNoMatch).source + '|$'
            , 'g');

          // Use a sourceURL for easier debugging.
          var sourceURL = '//# sourceURL=' +
            ('sourceURL' in options
                ? options.sourceURL
                : ('lodash.templateSources[' + (++templateCounter) + ']')
            ) + '\n';

          string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
            interpolateValue || (interpolateValue = esTemplateValue);

            // Escape characters that can't be included in string literals.
            source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

            // Replace delimiters with snippets.
            if (escapeValue) {
              isEscaping = true;
              source += "' +\n__e(" + escapeValue + ") +\n'";
            }
            if (evaluateValue) {
              isEvaluating = true;
              source += "';\n" + evaluateValue + ";\n__p += '";
            }
            if (interpolateValue) {
              source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
            }
            index = offset + match.length;

            // The JS engine embedded in Adobe products requires returning the `match`
            // string in order to produce the correct `offset` value.
            return match;
          });

          source += "';\n";

          // If `variable` is not specified wrap a with-statement around the generated
          // code to add the data object to the top of the scope chain.
          var variable = options.variable;
          if (!variable) {
            source = 'with (obj) {\n' + source + '\n}\n';
          }
          // Cleanup code by stripping empty strings.
          source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
            .replace(reEmptyStringMiddle, '$1')
            .replace(reEmptyStringTrailing, '$1;');

          // Frame code as the function body.
          source = 'function(' + (variable || 'obj') + ') {\n' +
            (variable
                ? ''
                : 'obj || (obj = {});\n'
            ) +
            "var __t, __p = ''" +
            (isEscaping
                ? ', __e = _.escape'
                : ''
            ) +
            (isEvaluating
                ? ', __j = Array.prototype.join;\n' +
              "function print() { __p += __j.call(arguments, '') }\n"
                : ';\n'
            ) +
            source +
            'return __p\n}';

          var result = attempt(function() {
            return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
          });

          // Provide the compiled function's source by its `toString` method or
          // the `source` property as a convenience for inlining compiled templates.
          result.source = source;
          if (isError(result)) {
            throw result;
          }
          return result;
        }

        /**
         * Removes leading and trailing whitespace or specified characters from `string`.
         *
         * @static
         * @memberOf _
         * @category String
         * @param {string} [string=''] The string to trim.
         * @param {string} [chars=whitespace] The characters to trim.
         * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
         * @returns {string} Returns the trimmed string.
         * @example
         *
         * _.trim('  abc  ');
         * // => 'abc'
         *
         * _.trim('-_-abc-_-', '_-');
         * // => 'abc'
         *
         * _.map(['  foo  ', '  bar  '], _.trim);
         * // => ['foo', 'bar']
         */
        function trim(string, chars, guard) {
          var value = string;
          string = baseToString(string);
          if (!string) {
            return string;
          }
          if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
            return string.slice(trimmedLeftIndex(string), trimmedRightIndex(string) + 1);
          }
          chars = (chars + '');
          return string.slice(charsLeftIndex(string, chars), charsRightIndex(string, chars) + 1);
        }

        /**
         * Removes leading whitespace or specified characters from `string`.
         *
         * @static
         * @memberOf _
         * @category String
         * @param {string} [string=''] The string to trim.
         * @param {string} [chars=whitespace] The characters to trim.
         * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
         * @returns {string} Returns the trimmed string.
         * @example
         *
         * _.trimLeft('  abc  ');
         * // => 'abc  '
         *
         * _.trimLeft('-_-abc-_-', '_-');
         * // => 'abc-_-'
         */
        function trimLeft(string, chars, guard) {
          var value = string;
          string = baseToString(string);
          if (!string) {
            return string;
          }
          if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
            return string.slice(trimmedLeftIndex(string));
          }
          return string.slice(charsLeftIndex(string, (chars + '')));
        }

        /**
         * Removes trailing whitespace or specified characters from `string`.
         *
         * @static
         * @memberOf _
         * @category String
         * @param {string} [string=''] The string to trim.
         * @param {string} [chars=whitespace] The characters to trim.
         * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
         * @returns {string} Returns the trimmed string.
         * @example
         *
         * _.trimRight('  abc  ');
         * // => '  abc'
         *
         * _.trimRight('-_-abc-_-', '_-');
         * // => '-_-abc'
         */
        function trimRight(string, chars, guard) {
          var value = string;
          string = baseToString(string);
          if (!string) {
            return string;
          }
          if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
            return string.slice(0, trimmedRightIndex(string) + 1);
          }
          return string.slice(0, charsRightIndex(string, (chars + '')) + 1);
        }

        /**
         * Truncates `string` if it's longer than the given maximum string length.
         * The last characters of the truncated string are replaced with the omission
         * string which defaults to "...".
         *
         * @static
         * @memberOf _
         * @category String
         * @param {string} [string=''] The string to truncate.
         * @param {Object|number} [options] The options object or maximum string length.
         * @param {number} [options.length=30] The maximum string length.
         * @param {string} [options.omission='...'] The string to indicate text is omitted.
         * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
         * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
         * @returns {string} Returns the truncated string.
         * @example
         *
         * _.trunc('hi-diddly-ho there, neighborino');
         * // => 'hi-diddly-ho there, neighbo...'
         *
         * _.trunc('hi-diddly-ho there, neighborino', 24);
         * // => 'hi-diddly-ho there, n...'
         *
         * _.trunc('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
         * // => 'hi-diddly-ho there,...'
         *
         * _.trunc('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
         * // => 'hi-diddly-ho there...'
         *
         * _.trunc('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
         * // => 'hi-diddly-ho there, neig [...]'
         */
        function trunc(string, options, guard) {
          if (guard && isIterateeCall(string, options, guard)) {
            options = undefined;
          }
          var length = DEFAULT_TRUNC_LENGTH,
            omission = DEFAULT_TRUNC_OMISSION;

          if (options != null) {
            if (isObject(options)) {
              var separator = 'separator' in options ? options.separator : separator;
              length = 'length' in options ? (+options.length || 0) : length;
              omission = 'omission' in options ? baseToString(options.omission) : omission;
            } else {
              length = +options || 0;
            }
          }
          string = baseToString(string);
          if (length >= string.length) {
            return string;
          }
          var end = length - omission.length;
          if (end < 1) {
            return omission;
          }
          var result = string.slice(0, end);
          if (separator == null) {
            return result + omission;
          }
          if (isRegExp(separator)) {
            if (string.slice(end).search(separator)) {
              var match,
                newEnd,
                substring = string.slice(0, end);

              if (!separator.global) {
                separator = RegExp(separator.source, (reFlags.exec(separator) || '') + 'g');
              }
              separator.lastIndex = 0;
              while ((match = separator.exec(substring))) {
                newEnd = match.index;
              }
              result = result.slice(0, newEnd == null ? end : newEnd);
            }
          } else if (string.indexOf(separator, end) != end) {
            var index = result.lastIndexOf(separator);
            if (index > -1) {
              result = result.slice(0, index);
            }
          }
          return result + omission;
        }

        /**
         * The inverse of `_.escape`; this method converts the HTML entities
         * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to their
         * corresponding characters.
         *
         * **Note:** No other HTML entities are unescaped. To unescape additional HTML
         * entities use a third-party library like [_he_](https://mths.be/he).
         *
         * @static
         * @memberOf _
         * @category String
         * @param {string} [string=''] The string to unescape.
         * @returns {string} Returns the unescaped string.
         * @example
         *
         * _.unescape('fred, barney, &amp; pebbles');
         * // => 'fred, barney, & pebbles'
         */
        function unescape(string) {
          string = baseToString(string);
          return (string && reHasEscapedHtml.test(string))
            ? string.replace(reEscapedHtml, unescapeHtmlChar)
            : string;
        }

        /**
         * Splits `string` into an array of its words.
         *
         * @static
         * @memberOf _
         * @category String
         * @param {string} [string=''] The string to inspect.
         * @param {RegExp|string} [pattern] The pattern to match words.
         * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
         * @returns {Array} Returns the words of `string`.
         * @example
         *
         * _.words('fred, barney, & pebbles');
         * // => ['fred', 'barney', 'pebbles']
         *
         * _.words('fred, barney, & pebbles', /[^, ]+/g);
         * // => ['fred', 'barney', '&', 'pebbles']
         */
        function words(string, pattern, guard) {
          if (guard && isIterateeCall(string, pattern, guard)) {
            pattern = undefined;
          }
          string = baseToString(string);
          return string.match(pattern || reWords) || [];
        }

        /*------------------------------------------------------------------------*/

        /**
         * Attempts to invoke `func`, returning either the result or the caught error
         * object. Any additional arguments are provided to `func` when it is invoked.
         *
         * @static
         * @memberOf _
         * @category Utility
         * @param {Function} func The function to attempt.
         * @returns {*} Returns the `func` result or error object.
         * @example
         *
         * // avoid throwing errors for invalid selectors
         * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
         *
         * if (_.isError(elements)) {
     *   elements = [];
     * }
         */
        var attempt = restParam(function(func, args) {
          try {
            return func.apply(undefined, args);
          } catch(e) {
            return isError(e) ? e : new Error(e);
          }
        });

        /**
         * Creates a function that invokes `func` with the `this` binding of `thisArg`
         * and arguments of the created function. If `func` is a property name the
         * created callback returns the property value for a given element. If `func`
         * is an object the created callback returns `true` for elements that contain
         * the equivalent object properties, otherwise it returns `false`.
         *
         * @static
         * @memberOf _
         * @alias iteratee
         * @category Utility
         * @param {*} [func=_.identity] The value to convert to a callback.
         * @param {*} [thisArg] The `this` binding of `func`.
         * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
         * @returns {Function} Returns the callback.
         * @example
         *
         * var users = [
         *   { 'user': 'barney', 'age': 36 },
         *   { 'user': 'fred',   'age': 40 }
         * ];
         *
         * // wrap to create custom callback shorthands
         * _.callback = _.wrap(_.callback, function(callback, func, thisArg) {
     *   var match = /^(.+?)__([gl]t)(.+)$/.exec(func);
     *   if (!match) {
     *     return callback(func, thisArg);
     *   }
     *   return function(object) {
     *     return match[2] == 'gt'
     *       ? object[match[1]] > match[3]
     *       : object[match[1]] < match[3];
     *   };
     * });
         *
         * _.filter(users, 'age__gt36');
         * // => [{ 'user': 'fred', 'age': 40 }]
         */
        function callback(func, thisArg, guard) {
          if (guard && isIterateeCall(func, thisArg, guard)) {
            thisArg = undefined;
          }
          return isObjectLike(func)
            ? matches(func)
            : baseCallback(func, thisArg);
        }

        /**
         * Creates a function that returns `value`.
         *
         * @static
         * @memberOf _
         * @category Utility
         * @param {*} value The value to return from the new function.
         * @returns {Function} Returns the new function.
         * @example
         *
         * var object = { 'user': 'fred' };
         * var getter = _.constant(object);
         *
         * getter() === object;
         * // => true
         */
        function constant(value) {
          return function() {
            return value;
          };
        }

        /**
         * This method returns the first argument provided to it.
         *
         * @static
         * @memberOf _
         * @category Utility
         * @param {*} value Any value.
         * @returns {*} Returns `value`.
         * @example
         *
         * var object = { 'user': 'fred' };
         *
         * _.identity(object) === object;
         * // => true
         */
        function identity(value) {
          return value;
        }

        /**
         * Creates a function that performs a deep comparison between a given object
         * and `source`, returning `true` if the given object has equivalent property
         * values, else `false`.
         *
         * **Note:** This method supports comparing arrays, booleans, `Date` objects,
         * numbers, `Object` objects, regexes, and strings. Objects are compared by
         * their own, not inherited, enumerable properties. For comparing a single
         * own or inherited property value see `_.matchesProperty`.
         *
         * @static
         * @memberOf _
         * @category Utility
         * @param {Object} source The object of property values to match.
         * @returns {Function} Returns the new function.
         * @example
         *
         * var users = [
         *   { 'user': 'barney', 'age': 36, 'active': true },
         *   { 'user': 'fred',   'age': 40, 'active': false }
         * ];
         *
         * _.filter(users, _.matches({ 'age': 40, 'active': false }));
         * // => [{ 'user': 'fred', 'age': 40, 'active': false }]
         */
        function matches(source) {
          return baseMatches(baseClone(source, true));
        }

        /**
         * Creates a function that compares the property value of `path` on a given
         * object to `value`.
         *
         * **Note:** This method supports comparing arrays, booleans, `Date` objects,
         * numbers, `Object` objects, regexes, and strings. Objects are compared by
         * their own, not inherited, enumerable properties.
         *
         * @static
         * @memberOf _
         * @category Utility
         * @param {Array|string} path The path of the property to get.
         * @param {*} srcValue The value to match.
         * @returns {Function} Returns the new function.
         * @example
         *
         * var users = [
         *   { 'user': 'barney' },
         *   { 'user': 'fred' }
         * ];
         *
         * _.find(users, _.matchesProperty('user', 'fred'));
         * // => { 'user': 'fred' }
         */
        function matchesProperty(path, srcValue) {
          return baseMatchesProperty(path, baseClone(srcValue, true));
        }

        /**
         * Creates a function that invokes the method at `path` on a given object.
         * Any additional arguments are provided to the invoked method.
         *
         * @static
         * @memberOf _
         * @category Utility
         * @param {Array|string} path The path of the method to invoke.
         * @param {...*} [args] The arguments to invoke the method with.
         * @returns {Function} Returns the new function.
         * @example
         *
         * var objects = [
         *   { 'a': { 'b': { 'c': _.constant(2) } } },
         *   { 'a': { 'b': { 'c': _.constant(1) } } }
         * ];
         *
         * _.map(objects, _.method('a.b.c'));
         * // => [2, 1]
         *
         * _.invoke(_.sortBy(objects, _.method(['a', 'b', 'c'])), 'a.b.c');
         * // => [1, 2]
         */
        var method = restParam(function(path, args) {
          return function(object) {
            return invokePath(object, path, args);
          };
        });

        /**
         * The opposite of `_.method`; this method creates a function that invokes
         * the method at a given path on `object`. Any additional arguments are
         * provided to the invoked method.
         *
         * @static
         * @memberOf _
         * @category Utility
         * @param {Object} object The object to query.
         * @param {...*} [args] The arguments to invoke the method with.
         * @returns {Function} Returns the new function.
         * @example
         *
         * var array = _.times(3, _.constant),
         *     object = { 'a': array, 'b': array, 'c': array };
         *
         * _.map(['a[2]', 'c[0]'], _.methodOf(object));
         * // => [2, 0]
         *
         * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
         * // => [2, 0]
         */
        var methodOf = restParam(function(object, args) {
          return function(path) {
            return invokePath(object, path, args);
          };
        });

        /**
         * Adds all own enumerable function properties of a source object to the
         * destination object. If `object` is a function then methods are added to
         * its prototype as well.
         *
         * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
         * avoid conflicts caused by modifying the original.
         *
         * @static
         * @memberOf _
         * @category Utility
         * @param {Function|Object} [object=lodash] The destination object.
         * @param {Object} source The object of functions to add.
         * @param {Object} [options] The options object.
         * @param {boolean} [options.chain=true] Specify whether the functions added
         *  are chainable.
         * @returns {Function|Object} Returns `object`.
         * @example
         *
         * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
         *
         * _.mixin({ 'vowels': vowels });
         * _.vowels('fred');
         * // => ['e']
         *
         * _('fred').vowels().value();
         * // => ['e']
         *
         * _.mixin({ 'vowels': vowels }, { 'chain': false });
         * _('fred').vowels();
         * // => ['e']
         */
        function mixin(object, source, options) {
          if (options == null) {
            var isObj = isObject(source),
              props = isObj ? keys(source) : undefined,
              methodNames = (props && props.length) ? baseFunctions(source, props) : undefined;

            if (!(methodNames ? methodNames.length : isObj)) {
              methodNames = false;
              options = source;
              source = object;
              object = this;
            }
          }
          if (!methodNames) {
            methodNames = baseFunctions(source, keys(source));
          }
          var chain = true,
            index = -1,
            isFunc = isFunction(object),
            length = methodNames.length;

          if (options === false) {
            chain = false;
          } else if (isObject(options) && 'chain' in options) {
            chain = options.chain;
          }
          while (++index < length) {
            var methodName = methodNames[index],
              func = source[methodName];

            object[methodName] = func;
            if (isFunc) {
              object.prototype[methodName] = (function(func) {
                return function() {
                  var chainAll = this.__chain__;
                  if (chain || chainAll) {
                    var result = object(this.__wrapped__),
                      actions = result.__actions__ = arrayCopy(this.__actions__);

                    actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
                    result.__chain__ = chainAll;
                    return result;
                  }
                  return func.apply(object, arrayPush([this.value()], arguments));
                };
              }(func));
            }
          }
          return object;
        }

        /**
         * Reverts the `_` variable to its previous value and returns a reference to
         * the `lodash` function.
         *
         * @static
         * @memberOf _
         * @category Utility
         * @returns {Function} Returns the `lodash` function.
         * @example
         *
         * var lodash = _.noConflict();
         */
        function noConflict() {
          root._ = oldDash;
          return this;
        }

        /**
         * A no-operation function that returns `undefined` regardless of the
         * arguments it receives.
         *
         * @static
         * @memberOf _
         * @category Utility
         * @example
         *
         * var object = { 'user': 'fred' };
         *
         * _.noop(object) === undefined;
         * // => true
         */
        function noop() {
          // No operation performed.
        }

        /**
         * Creates a function that returns the property value at `path` on a
         * given object.
         *
         * @static
         * @memberOf _
         * @category Utility
         * @param {Array|string} path The path of the property to get.
         * @returns {Function} Returns the new function.
         * @example
         *
         * var objects = [
         *   { 'a': { 'b': { 'c': 2 } } },
         *   { 'a': { 'b': { 'c': 1 } } }
         * ];
         *
         * _.map(objects, _.property('a.b.c'));
         * // => [2, 1]
         *
         * _.pluck(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');
         * // => [1, 2]
         */
        function property(path) {
          return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
        }

        /**
         * The opposite of `_.property`; this method creates a function that returns
         * the property value at a given path on `object`.
         *
         * @static
         * @memberOf _
         * @category Utility
         * @param {Object} object The object to query.
         * @returns {Function} Returns the new function.
         * @example
         *
         * var array = [0, 1, 2],
         *     object = { 'a': array, 'b': array, 'c': array };
         *
         * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
         * // => [2, 0]
         *
         * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
         * // => [2, 0]
         */
        function propertyOf(object) {
          return function(path) {
            return baseGet(object, toPath(path), path + '');
          };
        }

        /**
         * Creates an array of numbers (positive and/or negative) progressing from
         * `start` up to, but not including, `end`. If `end` is not specified it is
         * set to `start` with `start` then set to `0`. If `end` is less than `start`
         * a zero-length range is created unless a negative `step` is specified.
         *
         * @static
         * @memberOf _
         * @category Utility
         * @param {number} [start=0] The start of the range.
         * @param {number} end The end of the range.
         * @param {number} [step=1] The value to increment or decrement by.
         * @returns {Array} Returns the new array of numbers.
         * @example
         *
         * _.range(4);
         * // => [0, 1, 2, 3]
         *
         * _.range(1, 5);
         * // => [1, 2, 3, 4]
         *
         * _.range(0, 20, 5);
         * // => [0, 5, 10, 15]
         *
         * _.range(0, -4, -1);
         * // => [0, -1, -2, -3]
         *
         * _.range(1, 4, 0);
         * // => [1, 1, 1]
         *
         * _.range(0);
         * // => []
         */
        function range(start, end, step) {
          if (step && isIterateeCall(start, end, step)) {
            end = step = undefined;
          }
          start = +start || 0;
          step = step == null ? 1 : (+step || 0);

          if (end == null) {
            end = start;
            start = 0;
          } else {
            end = +end || 0;
          }
          // Use `Array(length)` so engines like Chakra and V8 avoid slower modes.
          // See https://youtu.be/XAqIpGU8ZZk#t=17m25s for more details.
          var index = -1,
            length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
            result = Array(length);

          while (++index < length) {
            result[index] = start;
            start += step;
          }
          return result;
        }

        /**
         * Invokes the iteratee function `n` times, returning an array of the results
         * of each invocation. The `iteratee` is bound to `thisArg` and invoked with
         * one argument; (index).
         *
         * @static
         * @memberOf _
         * @category Utility
         * @param {number} n The number of times to invoke `iteratee`.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @param {*} [thisArg] The `this` binding of `iteratee`.
         * @returns {Array} Returns the array of results.
         * @example
         *
         * var diceRolls = _.times(3, _.partial(_.random, 1, 6, false));
         * // => [3, 6, 4]
         *
         * _.times(3, function(n) {
     *   mage.castSpell(n);
     * });
         * // => invokes `mage.castSpell(n)` three times with `n` of `0`, `1`, and `2`
         *
         * _.times(3, function(n) {
     *   this.cast(n);
     * }, mage);
         * // => also invokes `mage.castSpell(n)` three times
         */
        function times(n, iteratee, thisArg) {
          n = nativeFloor(n);

          // Exit early to avoid a JSC JIT bug in Safari 8
          // where `Array(0)` is treated as `Array(1)`.
          if (n < 1 || !nativeIsFinite(n)) {
            return [];
          }
          var index = -1,
            result = Array(nativeMin(n, MAX_ARRAY_LENGTH));

          iteratee = bindCallback(iteratee, thisArg, 1);
          while (++index < n) {
            if (index < MAX_ARRAY_LENGTH) {
              result[index] = iteratee(index);
            } else {
              iteratee(index);
            }
          }
          return result;
        }

        /**
         * Generates a unique ID. If `prefix` is provided the ID is appended to it.
         *
         * @static
         * @memberOf _
         * @category Utility
         * @param {string} [prefix] The value to prefix the ID with.
         * @returns {string} Returns the unique ID.
         * @example
         *
         * _.uniqueId('contact_');
         * // => 'contact_104'
         *
         * _.uniqueId();
         * // => '105'
         */
        function uniqueId(prefix) {
          var id = ++idCounter;
          return baseToString(prefix) + id;
        }

        /*------------------------------------------------------------------------*/

        /**
         * Adds two numbers.
         *
         * @static
         * @memberOf _
         * @category Math
         * @param {number} augend The first number to add.
         * @param {number} addend The second number to add.
         * @returns {number} Returns the sum.
         * @example
         *
         * _.add(6, 4);
         * // => 10
         */
        function add(augend, addend) {
          return (+augend || 0) + (+addend || 0);
        }

        /**
         * Calculates `n` rounded up to `precision`.
         *
         * @static
         * @memberOf _
         * @category Math
         * @param {number} n The number to round up.
         * @param {number} [precision=0] The precision to round up to.
         * @returns {number} Returns the rounded up number.
         * @example
         *
         * _.ceil(4.006);
         * // => 5
         *
         * _.ceil(6.004, 2);
         * // => 6.01
         *
         * _.ceil(6040, -2);
         * // => 6100
         */
        var ceil = createRound('ceil');

        /**
         * Calculates `n` rounded down to `precision`.
         *
         * @static
         * @memberOf _
         * @category Math
         * @param {number} n The number to round down.
         * @param {number} [precision=0] The precision to round down to.
         * @returns {number} Returns the rounded down number.
         * @example
         *
         * _.floor(4.006);
         * // => 4
         *
         * _.floor(0.046, 2);
         * // => 0.04
         *
         * _.floor(4060, -2);
         * // => 4000
         */
        var floor = createRound('floor');

        /**
         * Gets the maximum value of `collection`. If `collection` is empty or falsey
         * `-Infinity` is returned. If an iteratee function is provided it is invoked
         * for each value in `collection` to generate the criterion by which the value
         * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
         * arguments: (value, index, collection).
         *
         * If a property name is provided for `iteratee` the created `_.property`
         * style callback returns the property value of the given element.
         *
         * If a value is also provided for `thisArg` the created `_.matchesProperty`
         * style callback returns `true` for elements that have a matching property
         * value, else `false`.
         *
         * If an object is provided for `iteratee` the created `_.matches` style
         * callback returns `true` for elements that have the properties of the given
         * object, else `false`.
         *
         * @static
         * @memberOf _
         * @category Math
         * @param {Array|Object|string} collection The collection to iterate over.
         * @param {Function|Object|string} [iteratee] The function invoked per iteration.
         * @param {*} [thisArg] The `this` binding of `iteratee`.
         * @returns {*} Returns the maximum value.
         * @example
         *
         * _.max([4, 2, 8, 6]);
         * // => 8
         *
         * _.max([]);
         * // => -Infinity
         *
         * var users = [
         *   { 'user': 'barney', 'age': 36 },
         *   { 'user': 'fred',   'age': 40 }
         * ];
         *
         * _.max(users, function(chr) {
     *   return chr.age;
     * });
         * // => { 'user': 'fred', 'age': 40 }
         *
         * // using the `_.property` callback shorthand
         * _.max(users, 'age');
         * // => { 'user': 'fred', 'age': 40 }
         */
        var max = createExtremum(gt, NEGATIVE_INFINITY);

        /**
         * Gets the minimum value of `collection`. If `collection` is empty or falsey
         * `Infinity` is returned. If an iteratee function is provided it is invoked
         * for each value in `collection` to generate the criterion by which the value
         * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
         * arguments: (value, index, collection).
         *
         * If a property name is provided for `iteratee` the created `_.property`
         * style callback returns the property value of the given element.
         *
         * If a value is also provided for `thisArg` the created `_.matchesProperty`
         * style callback returns `true` for elements that have a matching property
         * value, else `false`.
         *
         * If an object is provided for `iteratee` the created `_.matches` style
         * callback returns `true` for elements that have the properties of the given
         * object, else `false`.
         *
         * @static
         * @memberOf _
         * @category Math
         * @param {Array|Object|string} collection The collection to iterate over.
         * @param {Function|Object|string} [iteratee] The function invoked per iteration.
         * @param {*} [thisArg] The `this` binding of `iteratee`.
         * @returns {*} Returns the minimum value.
         * @example
         *
         * _.min([4, 2, 8, 6]);
         * // => 2
         *
         * _.min([]);
         * // => Infinity
         *
         * var users = [
         *   { 'user': 'barney', 'age': 36 },
         *   { 'user': 'fred',   'age': 40 }
         * ];
         *
         * _.min(users, function(chr) {
     *   return chr.age;
     * });
         * // => { 'user': 'barney', 'age': 36 }
         *
         * // using the `_.property` callback shorthand
         * _.min(users, 'age');
         * // => { 'user': 'barney', 'age': 36 }
         */
        var min = createExtremum(lt, POSITIVE_INFINITY);

        /**
         * Calculates `n` rounded to `precision`.
         *
         * @static
         * @memberOf _
         * @category Math
         * @param {number} n The number to round.
         * @param {number} [precision=0] The precision to round to.
         * @returns {number} Returns the rounded number.
         * @example
         *
         * _.round(4.006);
         * // => 4
         *
         * _.round(4.006, 2);
         * // => 4.01
         *
         * _.round(4060, -2);
         * // => 4100
         */
        var round = createRound('round');

        /**
         * Gets the sum of the values in `collection`.
         *
         * @static
         * @memberOf _
         * @category Math
         * @param {Array|Object|string} collection The collection to iterate over.
         * @param {Function|Object|string} [iteratee] The function invoked per iteration.
         * @param {*} [thisArg] The `this` binding of `iteratee`.
         * @returns {number} Returns the sum.
         * @example
         *
         * _.sum([4, 6]);
         * // => 10
         *
         * _.sum({ 'a': 4, 'b': 6 });
         * // => 10
         *
         * var objects = [
         *   { 'n': 4 },
         *   { 'n': 6 }
         * ];
         *
         * _.sum(objects, function(object) {
     *   return object.n;
     * });
         * // => 10
         *
         * // using the `_.property` callback shorthand
         * _.sum(objects, 'n');
         * // => 10
         */
        function sum(collection, iteratee, thisArg) {
          if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
            iteratee = undefined;
          }
          iteratee = getCallback(iteratee, thisArg, 3);
          return iteratee.length == 1
            ? arraySum(isArray(collection) ? collection : toIterable(collection), iteratee)
            : baseSum(collection, iteratee);
        }

        /*------------------------------------------------------------------------*/

        // Ensure wrappers are instances of `baseLodash`.
        lodash.prototype = baseLodash.prototype;

        LodashWrapper.prototype = baseCreate(baseLodash.prototype);
        LodashWrapper.prototype.constructor = LodashWrapper;

        LazyWrapper.prototype = baseCreate(baseLodash.prototype);
        LazyWrapper.prototype.constructor = LazyWrapper;

        // Add functions to the `Map` cache.
        MapCache.prototype['delete'] = mapDelete;
        MapCache.prototype.get = mapGet;
        MapCache.prototype.has = mapHas;
        MapCache.prototype.set = mapSet;

        // Add functions to the `Set` cache.
        SetCache.prototype.push = cachePush;

        // Assign cache to `_.memoize`.
        memoize.Cache = MapCache;

        // Add functions that return wrapped values when chaining.
        lodash.after = after;
        lodash.ary = ary;
        lodash.assign = assign;
        lodash.at = at;
        lodash.before = before;
        lodash.bind = bind;
        lodash.bindAll = bindAll;
        lodash.bindKey = bindKey;
        lodash.callback = callback;
        lodash.chain = chain;
        lodash.chunk = chunk;
        lodash.compact = compact;
        lodash.constant = constant;
        lodash.countBy = countBy;
        lodash.create = create;
        lodash.curry = curry;
        lodash.curryRight = curryRight;
        lodash.debounce = debounce;
        lodash.defaults = defaults;
        lodash.defaultsDeep = defaultsDeep;
        lodash.defer = defer;
        lodash.delay = delay;
        lodash.difference = difference;
        lodash.drop = drop;
        lodash.dropRight = dropRight;
        lodash.dropRightWhile = dropRightWhile;
        lodash.dropWhile = dropWhile;
        lodash.fill = fill;
        lodash.filter = filter;
        lodash.flatten = flatten;
        lodash.flattenDeep = flattenDeep;
        lodash.flow = flow;
        lodash.flowRight = flowRight;
        lodash.forEach = forEach;
        lodash.forEachRight = forEachRight;
        lodash.forIn = forIn;
        lodash.forInRight = forInRight;
        lodash.forOwn = forOwn;
        lodash.forOwnRight = forOwnRight;
        lodash.functions = functions;
        lodash.groupBy = groupBy;
        lodash.indexBy = indexBy;
        lodash.initial = initial;
        lodash.intersection = intersection;
        lodash.invert = invert;
        lodash.invoke = invoke;
        lodash.keys = keys;
        lodash.keysIn = keysIn;
        lodash.map = map;
        lodash.mapKeys = mapKeys;
        lodash.mapValues = mapValues;
        lodash.matches = matches;
        lodash.matchesProperty = matchesProperty;
        lodash.memoize = memoize;
        lodash.merge = merge;
        lodash.method = method;
        lodash.methodOf = methodOf;
        lodash.mixin = mixin;
        lodash.modArgs = modArgs;
        lodash.negate = negate;
        lodash.omit = omit;
        lodash.once = once;
        lodash.pairs = pairs;
        lodash.partial = partial;
        lodash.partialRight = partialRight;
        lodash.partition = partition;
        lodash.pick = pick;
        lodash.pluck = pluck;
        lodash.property = property;
        lodash.propertyOf = propertyOf;
        lodash.pull = pull;
        lodash.pullAt = pullAt;
        lodash.range = range;
        lodash.rearg = rearg;
        lodash.reject = reject;
        lodash.remove = remove;
        lodash.rest = rest;
        lodash.restParam = restParam;
        lodash.set = set;
        lodash.shuffle = shuffle;
        lodash.slice = slice;
        lodash.sortBy = sortBy;
        lodash.sortByAll = sortByAll;
        lodash.sortByOrder = sortByOrder;
        lodash.spread = spread;
        lodash.take = take;
        lodash.takeRight = takeRight;
        lodash.takeRightWhile = takeRightWhile;
        lodash.takeWhile = takeWhile;
        lodash.tap = tap;
        lodash.throttle = throttle;
        lodash.thru = thru;
        lodash.times = times;
        lodash.toArray = toArray;
        lodash.toPlainObject = toPlainObject;
        lodash.transform = transform;
        lodash.union = union;
        lodash.uniq = uniq;
        lodash.unzip = unzip;
        lodash.unzipWith = unzipWith;
        lodash.values = values;
        lodash.valuesIn = valuesIn;
        lodash.where = where;
        lodash.without = without;
        lodash.wrap = wrap;
        lodash.xor = xor;
        lodash.zip = zip;
        lodash.zipObject = zipObject;
        lodash.zipWith = zipWith;

        // Add aliases.
        lodash.backflow = flowRight;
        lodash.collect = map;
        lodash.compose = flowRight;
        lodash.each = forEach;
        lodash.eachRight = forEachRight;
        lodash.extend = assign;
        lodash.iteratee = callback;
        lodash.methods = functions;
        lodash.object = zipObject;
        lodash.select = filter;
        lodash.tail = rest;
        lodash.unique = uniq;

        // Add functions to `lodash.prototype`.
        mixin(lodash, lodash);

        /*------------------------------------------------------------------------*/

        // Add functions that return unwrapped values when chaining.
        lodash.add = add;
        lodash.attempt = attempt;
        lodash.camelCase = camelCase;
        lodash.capitalize = capitalize;
        lodash.ceil = ceil;
        lodash.clone = clone;
        lodash.cloneDeep = cloneDeep;
        lodash.deburr = deburr;
        lodash.endsWith = endsWith;
        lodash.escape = escape;
        lodash.escapeRegExp = escapeRegExp;
        lodash.every = every;
        lodash.find = find;
        lodash.findIndex = findIndex;
        lodash.findKey = findKey;
        lodash.findLast = findLast;
        lodash.findLastIndex = findLastIndex;
        lodash.findLastKey = findLastKey;
        lodash.findWhere = findWhere;
        lodash.first = first;
        lodash.floor = floor;
        lodash.get = get;
        lodash.gt = gt;
        lodash.gte = gte;
        lodash.has = has;
        lodash.identity = identity;
        lodash.includes = includes;
        lodash.indexOf = indexOf;
        lodash.inRange = inRange;
        lodash.isArguments = isArguments;
        lodash.isArray = isArray;
        lodash.isBoolean = isBoolean;
        lodash.isDate = isDate;
        lodash.isElement = isElement;
        lodash.isEmpty = isEmpty;
        lodash.isEqual = isEqual;
        lodash.isError = isError;
        lodash.isFinite = isFinite;
        lodash.isFunction = isFunction;
        lodash.isMatch = isMatch;
        lodash.isNaN = isNaN;
        lodash.isNative = isNative;
        lodash.isNull = isNull;
        lodash.isNumber = isNumber;
        lodash.isObject = isObject;
        lodash.isPlainObject = isPlainObject;
        lodash.isRegExp = isRegExp;
        lodash.isString = isString;
        lodash.isTypedArray = isTypedArray;
        lodash.isUndefined = isUndefined;
        lodash.kebabCase = kebabCase;
        lodash.last = last;
        lodash.lastIndexOf = lastIndexOf;
        lodash.lt = lt;
        lodash.lte = lte;
        lodash.max = max;
        lodash.min = min;
        lodash.noConflict = noConflict;
        lodash.noop = noop;
        lodash.now = now;
        lodash.pad = pad;
        lodash.padLeft = padLeft;
        lodash.padRight = padRight;
        lodash.parseInt = parseInt;
        lodash.random = random;
        lodash.reduce = reduce;
        lodash.reduceRight = reduceRight;
        lodash.repeat = repeat;
        lodash.result = result;
        lodash.round = round;
        lodash.runInContext = runInContext;
        lodash.size = size;
        lodash.snakeCase = snakeCase;
        lodash.some = some;
        lodash.sortedIndex = sortedIndex;
        lodash.sortedLastIndex = sortedLastIndex;
        lodash.startCase = startCase;
        lodash.startsWith = startsWith;
        lodash.sum = sum;
        lodash.template = template;
        lodash.trim = trim;
        lodash.trimLeft = trimLeft;
        lodash.trimRight = trimRight;
        lodash.trunc = trunc;
        lodash.unescape = unescape;
        lodash.uniqueId = uniqueId;
        lodash.words = words;

        // Add aliases.
        lodash.all = every;
        lodash.any = some;
        lodash.contains = includes;
        lodash.eq = isEqual;
        lodash.detect = find;
        lodash.foldl = reduce;
        lodash.foldr = reduceRight;
        lodash.head = first;
        lodash.include = includes;
        lodash.inject = reduce;

        mixin(lodash, (function() {
          var source = {};
          baseForOwn(lodash, function(func, methodName) {
            if (!lodash.prototype[methodName]) {
              source[methodName] = func;
            }
          });
          return source;
        }()), false);

        /*------------------------------------------------------------------------*/

        // Add functions capable of returning wrapped and unwrapped values when chaining.
        lodash.sample = sample;

        lodash.prototype.sample = function(n) {
          if (!this.__chain__ && n == null) {
            return sample(this.value());
          }
          return this.thru(function(value) {
            return sample(value, n);
          });
        };

        /*------------------------------------------------------------------------*/

        /**
         * The semantic version number.
         *
         * @static
         * @memberOf _
         * @type string
         */
        lodash.VERSION = VERSION;

        // Assign default placeholders.
        arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
          lodash[methodName].placeholder = lodash;
        });

        // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
        arrayEach(['drop', 'take'], function(methodName, index) {
          LazyWrapper.prototype[methodName] = function(n) {
            var filtered = this.__filtered__;
            if (filtered && !index) {
              return new LazyWrapper(this);
            }
            n = n == null ? 1 : nativeMax(nativeFloor(n) || 0, 0);

            var result = this.clone();
            if (filtered) {
              result.__takeCount__ = nativeMin(result.__takeCount__, n);
            } else {
              result.__views__.push({ 'size': n, 'type': methodName + (result.__dir__ < 0 ? 'Right' : '') });
            }
            return result;
          };

          LazyWrapper.prototype[methodName + 'Right'] = function(n) {
            return this.reverse()[methodName](n).reverse();
          };
        });

        // Add `LazyWrapper` methods that accept an `iteratee` value.
        arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
          var type = index + 1,
            isFilter = type != LAZY_MAP_FLAG;

          LazyWrapper.prototype[methodName] = function(iteratee, thisArg) {
            var result = this.clone();
            result.__iteratees__.push({ 'iteratee': getCallback(iteratee, thisArg, 1), 'type': type });
            result.__filtered__ = result.__filtered__ || isFilter;
            return result;
          };
        });

        // Add `LazyWrapper` methods for `_.first` and `_.last`.
        arrayEach(['first', 'last'], function(methodName, index) {
          var takeName = 'take' + (index ? 'Right' : '');

          LazyWrapper.prototype[methodName] = function() {
            return this[takeName](1).value()[0];
          };
        });

        // Add `LazyWrapper` methods for `_.initial` and `_.rest`.
        arrayEach(['initial', 'rest'], function(methodName, index) {
          var dropName = 'drop' + (index ? '' : 'Right');

          LazyWrapper.prototype[methodName] = function() {
            return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
          };
        });

        // Add `LazyWrapper` methods for `_.pluck` and `_.where`.
        arrayEach(['pluck', 'where'], function(methodName, index) {
          var operationName = index ? 'filter' : 'map',
            createCallback = index ? baseMatches : property;

          LazyWrapper.prototype[methodName] = function(value) {
            return this[operationName](createCallback(value));
          };
        });

        LazyWrapper.prototype.compact = function() {
          return this.filter(identity);
        };

        LazyWrapper.prototype.reject = function(predicate, thisArg) {
          predicate = getCallback(predicate, thisArg, 1);
          return this.filter(function(value) {
            return !predicate(value);
          });
        };

        LazyWrapper.prototype.slice = function(start, end) {
          start = start == null ? 0 : (+start || 0);

          var result = this;
          if (result.__filtered__ && (start > 0 || end < 0)) {
            return new LazyWrapper(result);
          }
          if (start < 0) {
            result = result.takeRight(-start);
          } else if (start) {
            result = result.drop(start);
          }
          if (end !== undefined) {
            end = (+end || 0);
            result = end < 0 ? result.dropRight(-end) : result.take(end - start);
          }
          return result;
        };

        LazyWrapper.prototype.takeRightWhile = function(predicate, thisArg) {
          return this.reverse().takeWhile(predicate, thisArg).reverse();
        };

        LazyWrapper.prototype.toArray = function() {
          return this.take(POSITIVE_INFINITY);
        };

        // Add `LazyWrapper` methods to `lodash.prototype`.
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var checkIteratee = /^(?:filter|map|reject)|While$/.test(methodName),
            retUnwrapped = /^(?:first|last)$/.test(methodName),
            lodashFunc = lodash[retUnwrapped ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName];

          if (!lodashFunc) {
            return;
          }
          lodash.prototype[methodName] = function() {
            var args = retUnwrapped ? [1] : arguments,
              chainAll = this.__chain__,
              value = this.__wrapped__,
              isHybrid = !!this.__actions__.length,
              isLazy = value instanceof LazyWrapper,
              iteratee = args[0],
              useLazy = isLazy || isArray(value);

            if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
              // Avoid lazy use if the iteratee has a "length" value other than `1`.
              isLazy = useLazy = false;
            }
            var interceptor = function(value) {
              return (retUnwrapped && chainAll)
                ? lodashFunc(value, 1)[0]
                : lodashFunc.apply(undefined, arrayPush([value], args));
            };

            var action = { 'func': thru, 'args': [interceptor], 'thisArg': undefined },
              onlyLazy = isLazy && !isHybrid;

            if (retUnwrapped && !chainAll) {
              if (onlyLazy) {
                value = value.clone();
                value.__actions__.push(action);
                return func.call(value);
              }
              return lodashFunc.call(undefined, this.value())[0];
            }
            if (!retUnwrapped && useLazy) {
              value = onlyLazy ? value : new LazyWrapper(this);
              var result = func.apply(value, args);
              result.__actions__.push(action);
              return new LodashWrapper(result, chainAll);
            }
            return this.thru(interceptor);
          };
        });

        // Add `Array` and `String` methods to `lodash.prototype`.
        arrayEach(['join', 'pop', 'push', 'replace', 'shift', 'sort', 'splice', 'split', 'unshift'], function(methodName) {
          var func = (/^(?:replace|split)$/.test(methodName) ? stringProto : arrayProto)[methodName],
            chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
            retUnwrapped = /^(?:join|pop|replace|shift)$/.test(methodName);

          lodash.prototype[methodName] = function() {
            var args = arguments;
            if (retUnwrapped && !this.__chain__) {
              return func.apply(this.value(), args);
            }
            return this[chainName](function(value) {
              return func.apply(value, args);
            });
          };
        });

        // Map minified function names to their real names.
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var lodashFunc = lodash[methodName];
          if (lodashFunc) {
            var key = lodashFunc.name,
              names = realNames[key] || (realNames[key] = []);

            names.push({ 'name': methodName, 'func': lodashFunc });
          }
        });

        realNames[createHybridWrapper(undefined, BIND_KEY_FLAG).name] = [{ 'name': 'wrapper', 'func': undefined }];

        // Add functions to the lazy wrapper.
        LazyWrapper.prototype.clone = lazyClone;
        LazyWrapper.prototype.reverse = lazyReverse;
        LazyWrapper.prototype.value = lazyValue;

        // Add chaining functions to the `lodash` wrapper.
        lodash.prototype.chain = wrapperChain;
        lodash.prototype.commit = wrapperCommit;
        lodash.prototype.concat = wrapperConcat;
        lodash.prototype.plant = wrapperPlant;
        lodash.prototype.reverse = wrapperReverse;
        lodash.prototype.toString = wrapperToString;
        lodash.prototype.run = lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

        // Add function aliases to the `lodash` wrapper.
        lodash.prototype.collect = lodash.prototype.map;
        lodash.prototype.head = lodash.prototype.first;
        lodash.prototype.select = lodash.prototype.filter;
        lodash.prototype.tail = lodash.prototype.rest;

        return lodash;
      }

      /*--------------------------------------------------------------------------*/

      // Export lodash.
      var _ = runInContext();

      // Some AMD build optimizers like r.js check for condition patterns like the following:
      if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
        // Expose lodash to the global object when an AMD loader is present to avoid
        // errors in cases where lodash is loaded by a script tag and not intended
        // as an AMD module. See http://requirejs.org/docs/errors.html#mismatch for
        // more details.
        root._ = _;

        // Define as an anonymous module so, through path mapping, it can be
        // referenced as the "underscore" module.
        define(function() {
          return _;
        });
      }
      // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
      else if (freeExports && freeModule) {
        // Export for Node.js or RingoJS.
        if (moduleExports) {
          (freeModule.exports = _)._ = _;
        }
        // Export for Rhino with CommonJS support.
        else {
          freeExports._ = _;
        }
      }
      else {
        // Export for a browser or Rhino.
        root._ = _;
      }
    }.call(this));

  }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],53:[function(require,module,exports){
  (function (global){
    var cachePush = require('./cachePush'),
      getNative = require('./getNative');

    /** Native method references. */
    var Set = getNative(global, 'Set');

    /* Native method references for those with the same name as other `lodash` methods. */
    var nativeCreate = getNative(Object, 'create');

    /**
     *
     * Creates a cache object to store unique values.
     *
     * @private
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var length = values ? values.length : 0;

      this.data = { 'hash': nativeCreate(null), 'set': new Set };
      while (length--) {
        this.push(values[length]);
      }
    }

    // Add functions to the `Set` cache.
    SetCache.prototype.push = cachePush;

    module.exports = SetCache;

  }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./cachePush":79,"./getNative":89}],54:[function(require,module,exports){
  /**
   * A specialized version of `_.map` for arrays without support for callback
   * shorthands and `this` binding.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
      length = array.length,
      result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  module.exports = arrayMap;

},{}],55:[function(require,module,exports){
  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
      length = values.length,
      offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  module.exports = arrayPush;

},{}],56:[function(require,module,exports){
  /**
   * A specialized version of `_.some` for arrays without support for callback
   * shorthands and `this` binding.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
      length = array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  module.exports = arraySome;

},{}],57:[function(require,module,exports){
  var baseMatches = require('./baseMatches'),
    baseMatchesProperty = require('./baseMatchesProperty'),
    bindCallback = require('./bindCallback'),
    identity = require('../utility/identity'),
    property = require('../utility/property');

  /**
   * The base implementation of `_.callback` which supports specifying the
   * number of arguments to provide to `func`.
   *
   * @private
   * @param {*} [func=_.identity] The value to convert to a callback.
   * @param {*} [thisArg] The `this` binding of `func`.
   * @param {number} [argCount] The number of arguments to provide to `func`.
   * @returns {Function} Returns the callback.
   */
  function baseCallback(func, thisArg, argCount) {
    var type = typeof func;
    if (type == 'function') {
      return thisArg === undefined
        ? func
        : bindCallback(func, thisArg, argCount);
    }
    if (func == null) {
      return identity;
    }
    if (type == 'object') {
      return baseMatches(func);
    }
    return thisArg === undefined
      ? property(func)
      : baseMatchesProperty(func, thisArg);
  }

  module.exports = baseCallback;

},{"../utility/identity":113,"../utility/property":114,"./baseMatches":71,"./baseMatchesProperty":72,"./bindCallback":77}],58:[function(require,module,exports){
  var baseIndexOf = require('./baseIndexOf'),
    cacheIndexOf = require('./cacheIndexOf'),
    createCache = require('./createCache');

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /**
   * The base implementation of `_.difference` which accepts a single array
   * of values to exclude.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Array} values The values to exclude.
   * @returns {Array} Returns the new array of filtered values.
   */
  function baseDifference(array, values) {
    var length = array ? array.length : 0,
      result = [];

    if (!length) {
      return result;
    }
    var index = -1,
      indexOf = baseIndexOf,
      isCommon = true,
      cache = (isCommon && values.length >= LARGE_ARRAY_SIZE) ? createCache(values) : null,
      valuesLength = values.length;

    if (cache) {
      indexOf = cacheIndexOf;
      isCommon = false;
      values = cache;
    }
    outer:
      while (++index < length) {
        var value = array[index];

        if (isCommon && value === value) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === value) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (indexOf(values, value, 0) < 0) {
          result.push(value);
        }
      }
    return result;
  }

  module.exports = baseDifference;

},{"./baseIndexOf":67,"./cacheIndexOf":78,"./createCache":82}],59:[function(require,module,exports){
  var baseForOwn = require('./baseForOwn'),
    createBaseEach = require('./createBaseEach');

  /**
   * The base implementation of `_.forEach` without support for callback
   * shorthands and `this` binding.
   *
   * @private
   * @param {Array|Object|string} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array|Object|string} Returns `collection`.
   */
  var baseEach = createBaseEach(baseForOwn);

  module.exports = baseEach;

},{"./baseForOwn":65,"./createBaseEach":80}],60:[function(require,module,exports){
  /**
   * The base implementation of `_.find`, `_.findLast`, `_.findKey`, and `_.findLastKey`,
   * without support for callback shorthands and `this` binding, which iterates
   * over `collection` using the provided `eachFunc`.
   *
   * @private
   * @param {Array|Object|string} collection The collection to search.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @param {boolean} [retKey] Specify returning the key of the found element
   *  instead of the element itself.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFind(collection, predicate, eachFunc, retKey) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = retKey ? key : value;
        return false;
      }
    });
    return result;
  }

  module.exports = baseFind;

},{}],61:[function(require,module,exports){
  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for callback shorthands and `this` binding.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {Function} predicate The function invoked per iteration.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromRight) {
    var length = array.length,
      index = fromRight ? length : -1;

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  module.exports = baseFindIndex;

},{}],62:[function(require,module,exports){
  var arrayPush = require('./arrayPush'),
    isArguments = require('../lang/isArguments'),
    isArray = require('../lang/isArray'),
    isArrayLike = require('./isArrayLike'),
    isObjectLike = require('./isObjectLike');

  /**
   * The base implementation of `_.flatten` with added support for restricting
   * flattening and specifying the start index.
   *
   * @private
   * @param {Array} array The array to flatten.
   * @param {boolean} [isDeep] Specify a deep flatten.
   * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.
   * @param {Array} [result=[]] The initial result value.
   * @returns {Array} Returns the new flattened array.
   */
  function baseFlatten(array, isDeep, isStrict, result) {
    result || (result = []);

    var index = -1,
      length = array.length;

    while (++index < length) {
      var value = array[index];
      if (isObjectLike(value) && isArrayLike(value) &&
        (isStrict || isArray(value) || isArguments(value))) {
        if (isDeep) {
          // Recursively flatten arrays (susceptible to call stack limits).
          baseFlatten(value, isDeep, isStrict, result);
        } else {
          arrayPush(result, value);
        }
      } else if (!isStrict) {
        result[result.length] = value;
      }
    }
    return result;
  }

  module.exports = baseFlatten;

},{"../lang/isArguments":102,"../lang/isArray":103,"./arrayPush":55,"./isArrayLike":91,"./isObjectLike":95}],63:[function(require,module,exports){
  var createBaseFor = require('./createBaseFor');

  /**
   * The base implementation of `baseForIn` and `baseForOwn` which iterates
   * over `object` properties returned by `keysFunc` invoking `iteratee` for
   * each property. Iteratee functions may exit iteration early by explicitly
   * returning `false`.
   *
   * @private
   * @param {Object} object The object to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {Function} keysFunc The function to get the keys of `object`.
   * @returns {Object} Returns `object`.
   */
  var baseFor = createBaseFor();

  module.exports = baseFor;

},{"./createBaseFor":81}],64:[function(require,module,exports){
  var baseFor = require('./baseFor'),
    keysIn = require('../object/keysIn');

  /**
   * The base implementation of `_.forIn` without support for callback
   * shorthands and `this` binding.
   *
   * @private
   * @param {Object} object The object to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Object} Returns `object`.
   */
  function baseForIn(object, iteratee) {
    return baseFor(object, iteratee, keysIn);
  }

  module.exports = baseForIn;

},{"../object/keysIn":109,"./baseFor":63}],65:[function(require,module,exports){
  var baseFor = require('./baseFor'),
    keys = require('../object/keys');

  /**
   * The base implementation of `_.forOwn` without support for callback
   * shorthands and `this` binding.
   *
   * @private
   * @param {Object} object The object to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Object} Returns `object`.
   */
  function baseForOwn(object, iteratee) {
    return baseFor(object, iteratee, keys);
  }

  module.exports = baseForOwn;

},{"../object/keys":108,"./baseFor":63}],66:[function(require,module,exports){
  var toObject = require('./toObject');

  /**
   * The base implementation of `get` without support for string paths
   * and default values.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} path The path of the property to get.
   * @param {string} [pathKey] The key representation of path.
   * @returns {*} Returns the resolved value.
   */
  function baseGet(object, path, pathKey) {
    if (object == null) {
      return;
    }
    if (pathKey !== undefined && pathKey in toObject(object)) {
      path = [pathKey];
    }
    var index = 0,
      length = path.length;

    while (object != null && index < length) {
      object = object[path[index++]];
    }
    return (index && index == length) ? object : undefined;
  }

  module.exports = baseGet;

},{"./toObject":100}],67:[function(require,module,exports){
  var indexOfNaN = require('./indexOfNaN');

  /**
   * The base implementation of `_.indexOf` without support for binary searches.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    if (value !== value) {
      return indexOfNaN(array, fromIndex);
    }
    var index = fromIndex - 1,
      length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  module.exports = baseIndexOf;

},{"./indexOfNaN":90}],68:[function(require,module,exports){
  var baseIsEqualDeep = require('./baseIsEqualDeep'),
    isObject = require('../lang/isObject'),
    isObjectLike = require('./isObjectLike');

  /**
   * The base implementation of `_.isEqual` without support for `this` binding
   * `customizer` functions.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @param {Function} [customizer] The function to customize comparing values.
   * @param {boolean} [isLoose] Specify performing partial comparisons.
   * @param {Array} [stackA] Tracks traversed `value` objects.
   * @param {Array} [stackB] Tracks traversed `other` objects.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   */
  function baseIsEqual(value, other, customizer, isLoose, stackA, stackB) {
    if (value === other) {
      return true;
    }
    if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
      return value !== value && other !== other;
    }
    return baseIsEqualDeep(value, other, baseIsEqual, customizer, isLoose, stackA, stackB);
  }

  module.exports = baseIsEqual;

},{"../lang/isObject":106,"./baseIsEqualDeep":69,"./isObjectLike":95}],69:[function(require,module,exports){
  var equalArrays = require('./equalArrays'),
    equalByTag = require('./equalByTag'),
    equalObjects = require('./equalObjects'),
    isArray = require('../lang/isArray'),
    isTypedArray = require('../lang/isTypedArray');

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    objectTag = '[object Object]';

  /** Used for native method references. */
  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /**
   * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
   * of values.
   */
  var objToString = objectProto.toString;

  /**
   * A specialized version of `baseIsEqual` for arrays and objects which performs
   * deep comparisons and tracks traversed objects enabling objects with circular
   * references to be compared.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Function} [customizer] The function to customize comparing objects.
   * @param {boolean} [isLoose] Specify performing partial comparisons.
   * @param {Array} [stackA=[]] Tracks traversed `value` objects.
   * @param {Array} [stackB=[]] Tracks traversed `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
    var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = arrayTag,
      othTag = arrayTag;

    if (!objIsArr) {
      objTag = objToString.call(object);
      if (objTag == argsTag) {
        objTag = objectTag;
      } else if (objTag != objectTag) {
        objIsArr = isTypedArray(object);
      }
    }
    if (!othIsArr) {
      othTag = objToString.call(other);
      if (othTag == argsTag) {
        othTag = objectTag;
      } else if (othTag != objectTag) {
        othIsArr = isTypedArray(other);
      }
    }
    var objIsObj = objTag == objectTag,
      othIsObj = othTag == objectTag,
      isSameTag = objTag == othTag;

    if (isSameTag && !(objIsArr || objIsObj)) {
      return equalByTag(object, other, objTag);
    }
    if (!isLoose) {
      var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

      if (objIsWrapped || othIsWrapped) {
        return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, isLoose, stackA, stackB);
      }
    }
    if (!isSameTag) {
      return false;
    }
    // Assume cyclic values are equal.
    // For more information on detecting circular references see https://es5.github.io/#JO.
    stackA || (stackA = []);
    stackB || (stackB = []);

    var length = stackA.length;
    while (length--) {
      if (stackA[length] == object) {
        return stackB[length] == other;
      }
    }
    // Add `object` and `other` to the stack of traversed objects.
    stackA.push(object);
    stackB.push(other);

    var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isLoose, stackA, stackB);

    stackA.pop();
    stackB.pop();

    return result;
  }

  module.exports = baseIsEqualDeep;

},{"../lang/isArray":103,"../lang/isTypedArray":107,"./equalArrays":84,"./equalByTag":85,"./equalObjects":86}],70:[function(require,module,exports){
  var baseIsEqual = require('./baseIsEqual'),
    toObject = require('./toObject');

  /**
   * The base implementation of `_.isMatch` without support for callback
   * shorthands and `this` binding.
   *
   * @private
   * @param {Object} object The object to inspect.
   * @param {Array} matchData The propery names, values, and compare flags to match.
   * @param {Function} [customizer] The function to customize comparing objects.
   * @returns {boolean} Returns `true` if `object` is a match, else `false`.
   */
  function baseIsMatch(object, matchData, customizer) {
    var index = matchData.length,
      length = index,
      noCustomizer = !customizer;

    if (object == null) {
      return !length;
    }
    object = toObject(object);
    while (index--) {
      var data = matchData[index];
      if ((noCustomizer && data[2])
          ? data[1] !== object[data[0]]
          : !(data[0] in object)
      ) {
        return false;
      }
    }
    while (++index < length) {
      data = matchData[index];
      var key = data[0],
        objValue = object[key],
        srcValue = data[1];

      if (noCustomizer && data[2]) {
        if (objValue === undefined && !(key in object)) {
          return false;
        }
      } else {
        var result = customizer ? customizer(objValue, srcValue, key) : undefined;
        if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, true) : result)) {
          return false;
        }
      }
    }
    return true;
  }

  module.exports = baseIsMatch;

},{"./baseIsEqual":68,"./toObject":100}],71:[function(require,module,exports){
  var baseIsMatch = require('./baseIsMatch'),
    getMatchData = require('./getMatchData'),
    toObject = require('./toObject');

  /**
   * The base implementation of `_.matches` which does not clone `source`.
   *
   * @private
   * @param {Object} source The object of property values to match.
   * @returns {Function} Returns the new function.
   */
  function baseMatches(source) {
    var matchData = getMatchData(source);
    if (matchData.length == 1 && matchData[0][2]) {
      var key = matchData[0][0],
        value = matchData[0][1];

      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === value && (value !== undefined || (key in toObject(object)));
      };
    }
    return function(object) {
      return baseIsMatch(object, matchData);
    };
  }

  module.exports = baseMatches;

},{"./baseIsMatch":70,"./getMatchData":88,"./toObject":100}],72:[function(require,module,exports){
  var baseGet = require('./baseGet'),
    baseIsEqual = require('./baseIsEqual'),
    baseSlice = require('./baseSlice'),
    isArray = require('../lang/isArray'),
    isKey = require('./isKey'),
    isStrictComparable = require('./isStrictComparable'),
    last = require('../array/last'),
    toObject = require('./toObject'),
    toPath = require('./toPath');

  /**
   * The base implementation of `_.matchesProperty` which does not clone `srcValue`.
   *
   * @private
   * @param {string} path The path of the property to get.
   * @param {*} srcValue The value to compare.
   * @returns {Function} Returns the new function.
   */
  function baseMatchesProperty(path, srcValue) {
    var isArr = isArray(path),
      isCommon = isKey(path) && isStrictComparable(srcValue),
      pathKey = (path + '');

    path = toPath(path);
    return function(object) {
      if (object == null) {
        return false;
      }
      var key = pathKey;
      object = toObject(object);
      if ((isArr || !isCommon) && !(key in object)) {
        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
        if (object == null) {
          return false;
        }
        key = last(path);
        object = toObject(object);
      }
      return object[key] === srcValue
        ? (srcValue !== undefined || (key in object))
        : baseIsEqual(srcValue, object[key], undefined, true);
    };
  }

  module.exports = baseMatchesProperty;

},{"../array/last":49,"../lang/isArray":103,"./baseGet":66,"./baseIsEqual":68,"./baseSlice":75,"./isKey":93,"./isStrictComparable":96,"./toObject":100,"./toPath":101}],73:[function(require,module,exports){
  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  module.exports = baseProperty;

},{}],74:[function(require,module,exports){
  var baseGet = require('./baseGet'),
    toPath = require('./toPath');

  /**
   * A specialized version of `baseProperty` which supports deep paths.
   *
   * @private
   * @param {Array|string} path The path of the property to get.
   * @returns {Function} Returns the new function.
   */
  function basePropertyDeep(path) {
    var pathKey = (path + '');
    path = toPath(path);
    return function(object) {
      return baseGet(object, path, pathKey);
    };
  }

  module.exports = basePropertyDeep;

},{"./baseGet":66,"./toPath":101}],75:[function(require,module,exports){
  /**
   * The base implementation of `_.slice` without an iteratee call guard.
   *
   * @private
   * @param {Array} array The array to slice.
   * @param {number} [start=0] The start position.
   * @param {number} [end=array.length] The end position.
   * @returns {Array} Returns the slice of `array`.
   */
  function baseSlice(array, start, end) {
    var index = -1,
      length = array.length;

    start = start == null ? 0 : (+start || 0);
    if (start < 0) {
      start = -start > length ? 0 : (length + start);
    }
    end = (end === undefined || end > length) ? length : (+end || 0);
    if (end < 0) {
      end += length;
    }
    length = start > end ? 0 : ((end - start) >>> 0);
    start >>>= 0;

    var result = Array(length);
    while (++index < length) {
      result[index] = array[index + start];
    }
    return result;
  }

  module.exports = baseSlice;

},{}],76:[function(require,module,exports){
  /**
   * Converts `value` to a string if it's not one. An empty string is returned
   * for `null` or `undefined` values.
   *
   * @private
   * @param {*} value The value to process.
   * @returns {string} Returns the string.
   */
  function baseToString(value) {
    return value == null ? '' : (value + '');
  }

  module.exports = baseToString;

},{}],77:[function(require,module,exports){
  var identity = require('../utility/identity');

  /**
   * A specialized version of `baseCallback` which only supports `this` binding
   * and specifying the number of arguments to provide to `func`.
   *
   * @private
   * @param {Function} func The function to bind.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {number} [argCount] The number of arguments to provide to `func`.
   * @returns {Function} Returns the callback.
   */
  function bindCallback(func, thisArg, argCount) {
    if (typeof func != 'function') {
      return identity;
    }
    if (thisArg === undefined) {
      return func;
    }
    switch (argCount) {
      case 1: return function(value) {
        return func.call(thisArg, value);
      };
      case 3: return function(value, index, collection) {
        return func.call(thisArg, value, index, collection);
      };
      case 4: return function(accumulator, value, index, collection) {
        return func.call(thisArg, accumulator, value, index, collection);
      };
      case 5: return function(value, other, key, object, source) {
        return func.call(thisArg, value, other, key, object, source);
      };
    }
    return function() {
      return func.apply(thisArg, arguments);
    };
  }

  module.exports = bindCallback;

},{"../utility/identity":113}],78:[function(require,module,exports){
  var isObject = require('../lang/isObject');

  /**
   * Checks if `value` is in `cache` mimicking the return signature of
   * `_.indexOf` by returning `0` if the value is found, else `-1`.
   *
   * @private
   * @param {Object} cache The cache to search.
   * @param {*} value The value to search for.
   * @returns {number} Returns `0` if `value` is found, else `-1`.
   */
  function cacheIndexOf(cache, value) {
    var data = cache.data,
      result = (typeof value == 'string' || isObject(value)) ? data.set.has(value) : data.hash[value];

    return result ? 0 : -1;
  }

  module.exports = cacheIndexOf;

},{"../lang/isObject":106}],79:[function(require,module,exports){
  var isObject = require('../lang/isObject');

  /**
   * Adds `value` to the cache.
   *
   * @private
   * @name push
   * @memberOf SetCache
   * @param {*} value The value to cache.
   */
  function cachePush(value) {
    var data = this.data;
    if (typeof value == 'string' || isObject(value)) {
      data.set.add(value);
    } else {
      data.hash[value] = true;
    }
  }

  module.exports = cachePush;

},{"../lang/isObject":106}],80:[function(require,module,exports){
  var getLength = require('./getLength'),
    isLength = require('./isLength'),
    toObject = require('./toObject');

  /**
   * Creates a `baseEach` or `baseEachRight` function.
   *
   * @private
   * @param {Function} eachFunc The function to iterate over a collection.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Function} Returns the new base function.
   */
  function createBaseEach(eachFunc, fromRight) {
    return function(collection, iteratee) {
      var length = collection ? getLength(collection) : 0;
      if (!isLength(length)) {
        return eachFunc(collection, iteratee);
      }
      var index = fromRight ? length : -1,
        iterable = toObject(collection);

      while ((fromRight ? index-- : ++index < length)) {
        if (iteratee(iterable[index], index, iterable) === false) {
          break;
        }
      }
      return collection;
    };
  }

  module.exports = createBaseEach;

},{"./getLength":87,"./isLength":94,"./toObject":100}],81:[function(require,module,exports){
  var toObject = require('./toObject');

  /**
   * Creates a base function for `_.forIn` or `_.forInRight`.
   *
   * @private
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Function} Returns the new base function.
   */
  function createBaseFor(fromRight) {
    return function(object, iteratee, keysFunc) {
      var iterable = toObject(object),
        props = keysFunc(object),
        length = props.length,
        index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length)) {
        var key = props[index];
        if (iteratee(iterable[key], key, iterable) === false) {
          break;
        }
      }
      return object;
    };
  }

  module.exports = createBaseFor;

},{"./toObject":100}],82:[function(require,module,exports){
  (function (global){
    var SetCache = require('./SetCache'),
      getNative = require('./getNative');

    /** Native method references. */
    var Set = getNative(global, 'Set');

    /* Native method references for those with the same name as other `lodash` methods. */
    var nativeCreate = getNative(Object, 'create');

    /**
     * Creates a `Set` cache object to optimize linear searches of large arrays.
     *
     * @private
     * @param {Array} [values] The values to cache.
     * @returns {null|Object} Returns the new cache object if `Set` is supported, else `null`.
     */
    function createCache(values) {
      return (nativeCreate && Set) ? new SetCache(values) : null;
    }

    module.exports = createCache;

  }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./SetCache":53,"./getNative":89}],83:[function(require,module,exports){
  var baseCallback = require('./baseCallback'),
    baseFind = require('./baseFind'),
    baseFindIndex = require('./baseFindIndex'),
    isArray = require('../lang/isArray');

  /**
   * Creates a `_.find` or `_.findLast` function.
   *
   * @private
   * @param {Function} eachFunc The function to iterate over a collection.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Function} Returns the new find function.
   */
  function createFind(eachFunc, fromRight) {
    return function(collection, predicate, thisArg) {
      predicate = baseCallback(predicate, thisArg, 3);
      if (isArray(collection)) {
        var index = baseFindIndex(collection, predicate, fromRight);
        return index > -1 ? collection[index] : undefined;
      }
      return baseFind(collection, predicate, eachFunc);
    };
  }

  module.exports = createFind;

},{"../lang/isArray":103,"./baseCallback":57,"./baseFind":60,"./baseFindIndex":61}],84:[function(require,module,exports){
  var arraySome = require('./arraySome');

  /**
   * A specialized version of `baseIsEqualDeep` for arrays with support for
   * partial deep comparisons.
   *
   * @private
   * @param {Array} array The array to compare.
   * @param {Array} other The other array to compare.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Function} [customizer] The function to customize comparing arrays.
   * @param {boolean} [isLoose] Specify performing partial comparisons.
   * @param {Array} [stackA] Tracks traversed `value` objects.
   * @param {Array} [stackB] Tracks traversed `other` objects.
   * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
   */
  function equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {
    var index = -1,
      arrLength = array.length,
      othLength = other.length;

    if (arrLength != othLength && !(isLoose && othLength > arrLength)) {
      return false;
    }
    // Ignore non-index properties.
    while (++index < arrLength) {
      var arrValue = array[index],
        othValue = other[index],
        result = customizer ? customizer(isLoose ? othValue : arrValue, isLoose ? arrValue : othValue, index) : undefined;

      if (result !== undefined) {
        if (result) {
          continue;
        }
        return false;
      }
      // Recursively compare arrays (susceptible to call stack limits).
      if (isLoose) {
        if (!arraySome(other, function(othValue) {
            return arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);
          })) {
          return false;
        }
      } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB))) {
        return false;
      }
    }
    return true;
  }

  module.exports = equalArrays;

},{"./arraySome":56}],85:[function(require,module,exports){
  /** `Object#toString` result references. */
  var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    stringTag = '[object String]';

  /**
   * A specialized version of `baseIsEqualDeep` for comparing objects of
   * the same `toStringTag`.
   *
   * **Note:** This function only supports comparing values with tags of
   * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {string} tag The `toStringTag` of the objects to compare.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function equalByTag(object, other, tag) {
    switch (tag) {
      case boolTag:
      case dateTag:
        // Coerce dates and booleans to numbers, dates to milliseconds and booleans
        // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.
        return +object == +other;

      case errorTag:
        return object.name == other.name && object.message == other.message;

      case numberTag:
        // Treat `NaN` vs. `NaN` as equal.
        return (object != +object)
          ? other != +other
          : object == +other;

      case regexpTag:
      case stringTag:
        // Coerce regexes to strings and treat strings primitives and string
        // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.
        return object == (other + '');
    }
    return false;
  }

  module.exports = equalByTag;

},{}],86:[function(require,module,exports){
  var keys = require('../object/keys');

  /** Used for native method references. */
  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /**
   * A specialized version of `baseIsEqualDeep` for objects with support for
   * partial deep comparisons.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Function} [customizer] The function to customize comparing values.
   * @param {boolean} [isLoose] Specify performing partial comparisons.
   * @param {Array} [stackA] Tracks traversed `value` objects.
   * @param {Array} [stackB] Tracks traversed `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function equalObjects(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
    var objProps = keys(object),
      objLength = objProps.length,
      othProps = keys(other),
      othLength = othProps.length;

    if (objLength != othLength && !isLoose) {
      return false;
    }
    var index = objLength;
    while (index--) {
      var key = objProps[index];
      if (!(isLoose ? key in other : hasOwnProperty.call(other, key))) {
        return false;
      }
    }
    var skipCtor = isLoose;
    while (++index < objLength) {
      key = objProps[index];
      var objValue = object[key],
        othValue = other[key],
        result = customizer ? customizer(isLoose ? othValue : objValue, isLoose? objValue : othValue, key) : undefined;

      // Recursively compare objects (susceptible to call stack limits).
      if (!(result === undefined ? equalFunc(objValue, othValue, customizer, isLoose, stackA, stackB) : result)) {
        return false;
      }
      skipCtor || (skipCtor = key == 'constructor');
    }
    if (!skipCtor) {
      var objCtor = object.constructor,
        othCtor = other.constructor;

      // Non `Object` object instances with different constructors are not equal.
      if (objCtor != othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
        typeof othCtor == 'function' && othCtor instanceof othCtor)) {
        return false;
      }
    }
    return true;
  }

  module.exports = equalObjects;

},{"../object/keys":108}],87:[function(require,module,exports){
  var baseProperty = require('./baseProperty');

  /**
   * Gets the "length" property value of `object`.
   *
   * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
   * that affects Safari on at least iOS 8.1-8.3 ARM64.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {*} Returns the "length" value.
   */
  var getLength = baseProperty('length');

  module.exports = getLength;

},{"./baseProperty":73}],88:[function(require,module,exports){
  var isStrictComparable = require('./isStrictComparable'),
    pairs = require('../object/pairs');

  /**
   * Gets the propery names, values, and compare flags of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the match data of `object`.
   */
  function getMatchData(object) {
    var result = pairs(object),
      length = result.length;

    while (length--) {
      result[length][2] = isStrictComparable(result[length][1]);
    }
    return result;
  }

  module.exports = getMatchData;

},{"../object/pairs":111,"./isStrictComparable":96}],89:[function(require,module,exports){
  var isNative = require('../lang/isNative');

  /**
   * Gets the native function at `key` of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {string} key The key of the method to get.
   * @returns {*} Returns the function if it's native, else `undefined`.
   */
  function getNative(object, key) {
    var value = object == null ? undefined : object[key];
    return isNative(value) ? value : undefined;
  }

  module.exports = getNative;

},{"../lang/isNative":105}],90:[function(require,module,exports){
  /**
   * Gets the index at which the first occurrence of `NaN` is found in `array`.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched `NaN`, else `-1`.
   */
  function indexOfNaN(array, fromIndex, fromRight) {
    var length = array.length,
      index = fromIndex + (fromRight ? 0 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      var other = array[index];
      if (other !== other) {
        return index;
      }
    }
    return -1;
  }

  module.exports = indexOfNaN;

},{}],91:[function(require,module,exports){
  var getLength = require('./getLength'),
    isLength = require('./isLength');

  /**
   * Checks if `value` is array-like.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
   */
  function isArrayLike(value) {
    return value != null && isLength(getLength(value));
  }

  module.exports = isArrayLike;

},{"./getLength":87,"./isLength":94}],92:[function(require,module,exports){
  /** Used to detect unsigned integer values. */
  var reIsUint = /^\d+$/;

  /**
   * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
   * of an array-like value.
   */
  var MAX_SAFE_INTEGER = 9007199254740991;

  /**
   * Checks if `value` is a valid array-like index.
   *
   * @private
   * @param {*} value The value to check.
   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
   */
  function isIndex(value, length) {
    value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
    length = length == null ? MAX_SAFE_INTEGER : length;
    return value > -1 && value % 1 == 0 && value < length;
  }

  module.exports = isIndex;

},{}],93:[function(require,module,exports){
  var isArray = require('../lang/isArray'),
    toObject = require('./toObject');

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\n\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/;

  /**
   * Checks if `value` is a property name and not a property path.
   *
   * @private
   * @param {*} value The value to check.
   * @param {Object} [object] The object to query keys on.
   * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
   */
  function isKey(value, object) {
    var type = typeof value;
    if ((type == 'string' && reIsPlainProp.test(value)) || type == 'number') {
      return true;
    }
    if (isArray(value)) {
      return false;
    }
    var result = !reIsDeepProp.test(value);
    return result || (object != null && value in toObject(object));
  }

  module.exports = isKey;

},{"../lang/isArray":103,"./toObject":100}],94:[function(require,module,exports){
  /**
   * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
   * of an array-like value.
   */
  var MAX_SAFE_INTEGER = 9007199254740991;

  /**
   * Checks if `value` is a valid array-like length.
   *
   * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
   */
  function isLength(value) {
    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }

  module.exports = isLength;

},{}],95:[function(require,module,exports){
  /**
   * Checks if `value` is object-like.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   */
  function isObjectLike(value) {
    return !!value && typeof value == 'object';
  }

  module.exports = isObjectLike;

},{}],96:[function(require,module,exports){
  var isObject = require('../lang/isObject');

  /**
   * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` if suitable for strict
   *  equality comparisons, else `false`.
   */
  function isStrictComparable(value) {
    return value === value && !isObject(value);
  }

  module.exports = isStrictComparable;

},{"../lang/isObject":106}],97:[function(require,module,exports){
  var toObject = require('./toObject');

  /**
   * A specialized version of `_.pick` which picks `object` properties specified
   * by `props`.
   *
   * @private
   * @param {Object} object The source object.
   * @param {string[]} props The property names to pick.
   * @returns {Object} Returns the new object.
   */
  function pickByArray(object, props) {
    object = toObject(object);

    var index = -1,
      length = props.length,
      result = {};

    while (++index < length) {
      var key = props[index];
      if (key in object) {
        result[key] = object[key];
      }
    }
    return result;
  }

  module.exports = pickByArray;

},{"./toObject":100}],98:[function(require,module,exports){
  var baseForIn = require('./baseForIn');

  /**
   * A specialized version of `_.pick` which picks `object` properties `predicate`
   * returns truthy for.
   *
   * @private
   * @param {Object} object The source object.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Object} Returns the new object.
   */
  function pickByCallback(object, predicate) {
    var result = {};
    baseForIn(object, function(value, key, object) {
      if (predicate(value, key, object)) {
        result[key] = value;
      }
    });
    return result;
  }

  module.exports = pickByCallback;

},{"./baseForIn":64}],99:[function(require,module,exports){
  var isArguments = require('../lang/isArguments'),
    isArray = require('../lang/isArray'),
    isIndex = require('./isIndex'),
    isLength = require('./isLength'),
    keysIn = require('../object/keysIn');

  /** Used for native method references. */
  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /**
   * A fallback implementation of `Object.keys` which creates an array of the
   * own enumerable property names of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function shimKeys(object) {
    var props = keysIn(object),
      propsLength = props.length,
      length = propsLength && object.length;

    var allowIndexes = !!length && isLength(length) &&
      (isArray(object) || isArguments(object));

    var index = -1,
      result = [];

    while (++index < propsLength) {
      var key = props[index];
      if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {
        result.push(key);
      }
    }
    return result;
  }

  module.exports = shimKeys;

},{"../lang/isArguments":102,"../lang/isArray":103,"../object/keysIn":109,"./isIndex":92,"./isLength":94}],100:[function(require,module,exports){
  var isObject = require('../lang/isObject');

  /**
   * Converts `value` to an object if it's not one.
   *
   * @private
   * @param {*} value The value to process.
   * @returns {Object} Returns the object.
   */
  function toObject(value) {
    return isObject(value) ? value : Object(value);
  }

  module.exports = toObject;

},{"../lang/isObject":106}],101:[function(require,module,exports){
  var baseToString = require('./baseToString'),
    isArray = require('../lang/isArray');

  /** Used to match property names within property paths. */
  var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Converts `value` to property path array if it's not one.
   *
   * @private
   * @param {*} value The value to process.
   * @returns {Array} Returns the property path array.
   */
  function toPath(value) {
    if (isArray(value)) {
      return value;
    }
    var result = [];
    baseToString(value).replace(rePropName, function(match, number, quote, string) {
      result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
    });
    return result;
  }

  module.exports = toPath;

},{"../lang/isArray":103,"./baseToString":76}],102:[function(require,module,exports){
  var isArrayLike = require('../internal/isArrayLike'),
    isObjectLike = require('../internal/isObjectLike');

  /** Used for native method references. */
  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /** Native method references. */
  var propertyIsEnumerable = objectProto.propertyIsEnumerable;

  /**
   * Checks if `value` is classified as an `arguments` object.
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
   * @example
   *
   * _.isArguments(function() { return arguments; }());
   * // => true
   *
   * _.isArguments([1, 2, 3]);
   * // => false
   */
  function isArguments(value) {
    return isObjectLike(value) && isArrayLike(value) &&
      hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
  }

  module.exports = isArguments;

},{"../internal/isArrayLike":91,"../internal/isObjectLike":95}],103:[function(require,module,exports){
  var getNative = require('../internal/getNative'),
    isLength = require('../internal/isLength'),
    isObjectLike = require('../internal/isObjectLike');

  /** `Object#toString` result references. */
  var arrayTag = '[object Array]';

  /** Used for native method references. */
  var objectProto = Object.prototype;

  /**
   * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
   * of values.
   */
  var objToString = objectProto.toString;

  /* Native method references for those with the same name as other `lodash` methods. */
  var nativeIsArray = getNative(Array, 'isArray');

  /**
   * Checks if `value` is classified as an `Array` object.
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
   * @example
   *
   * _.isArray([1, 2, 3]);
   * // => true
   *
   * _.isArray(function() { return arguments; }());
   * // => false
   */
  var isArray = nativeIsArray || function(value) {
      return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
    };

  module.exports = isArray;

},{"../internal/getNative":89,"../internal/isLength":94,"../internal/isObjectLike":95}],104:[function(require,module,exports){
  var isObject = require('./isObject');

  /** `Object#toString` result references. */
  var funcTag = '[object Function]';

  /** Used for native method references. */
  var objectProto = Object.prototype;

  /**
   * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
   * of values.
   */
  var objToString = objectProto.toString;

  /**
   * Checks if `value` is classified as a `Function` object.
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
   * @example
   *
   * _.isFunction(_);
   * // => true
   *
   * _.isFunction(/abc/);
   * // => false
   */
  function isFunction(value) {
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in older versions of Chrome and Safari which return 'function' for regexes
    // and Safari 8 which returns 'object' for typed array constructors.
    return isObject(value) && objToString.call(value) == funcTag;
  }

  module.exports = isFunction;

},{"./isObject":106}],105:[function(require,module,exports){
  var isFunction = require('./isFunction'),
    isObjectLike = require('../internal/isObjectLike');

  /** Used to detect host constructors (Safari > 5). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used for native method references. */
  var objectProto = Object.prototype;

  /** Used to resolve the decompiled source of functions. */
  var fnToString = Function.prototype.toString;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /** Used to detect if a method is native. */
  var reIsNative = RegExp('^' +
    fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
  );

  /**
   * Checks if `value` is a native function.
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
   * @example
   *
   * _.isNative(Array.prototype.push);
   * // => true
   *
   * _.isNative(_);
   * // => false
   */
  function isNative(value) {
    if (value == null) {
      return false;
    }
    if (isFunction(value)) {
      return reIsNative.test(fnToString.call(value));
    }
    return isObjectLike(value) && reIsHostCtor.test(value);
  }

  module.exports = isNative;

},{"../internal/isObjectLike":95,"./isFunction":104}],106:[function(require,module,exports){
  /**
   * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
   * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an object, else `false`.
   * @example
   *
   * _.isObject({});
   * // => true
   *
   * _.isObject([1, 2, 3]);
   * // => true
   *
   * _.isObject(1);
   * // => false
   */
  function isObject(value) {
    // Avoid a V8 JIT bug in Chrome 19-20.
    // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
    var type = typeof value;
    return !!value && (type == 'object' || type == 'function');
  }

  module.exports = isObject;

},{}],107:[function(require,module,exports){
  var isLength = require('../internal/isLength'),
    isObjectLike = require('../internal/isObjectLike');

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    weakMapTag = '[object WeakMap]';

  var arrayBufferTag = '[object ArrayBuffer]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
    typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
      typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
        typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
          typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
    typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
      typedArrayTags[dateTag] = typedArrayTags[errorTag] =
        typedArrayTags[funcTag] = typedArrayTags[mapTag] =
          typedArrayTags[numberTag] = typedArrayTags[objectTag] =
            typedArrayTags[regexpTag] = typedArrayTags[setTag] =
              typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

  /** Used for native method references. */
  var objectProto = Object.prototype;

  /**
   * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
   * of values.
   */
  var objToString = objectProto.toString;

  /**
   * Checks if `value` is classified as a typed array.
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
   * @example
   *
   * _.isTypedArray(new Uint8Array);
   * // => true
   *
   * _.isTypedArray([]);
   * // => false
   */
  function isTypedArray(value) {
    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];
  }

  module.exports = isTypedArray;

},{"../internal/isLength":94,"../internal/isObjectLike":95}],108:[function(require,module,exports){
  var getNative = require('../internal/getNative'),
    isArrayLike = require('../internal/isArrayLike'),
    isObject = require('../lang/isObject'),
    shimKeys = require('../internal/shimKeys');

  /* Native method references for those with the same name as other `lodash` methods. */
  var nativeKeys = getNative(Object, 'keys');

  /**
   * Creates an array of the own enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects. See the
   * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
   * for more details.
   *
   * @static
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keys(new Foo);
   * // => ['a', 'b'] (iteration order is not guaranteed)
   *
   * _.keys('hi');
   * // => ['0', '1']
   */
  var keys = !nativeKeys ? shimKeys : function(object) {
    var Ctor = object == null ? undefined : object.constructor;
    if ((typeof Ctor == 'function' && Ctor.prototype === object) ||
      (typeof object != 'function' && isArrayLike(object))) {
      return shimKeys(object);
    }
    return isObject(object) ? nativeKeys(object) : [];
  };

  module.exports = keys;

},{"../internal/getNative":89,"../internal/isArrayLike":91,"../internal/shimKeys":99,"../lang/isObject":106}],109:[function(require,module,exports){
  var isArguments = require('../lang/isArguments'),
    isArray = require('../lang/isArray'),
    isIndex = require('../internal/isIndex'),
    isLength = require('../internal/isLength'),
    isObject = require('../lang/isObject');

  /** Used for native method references. */
  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /**
   * Creates an array of the own and inherited enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects.
   *
   * @static
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keysIn(new Foo);
   * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
   */
  function keysIn(object) {
    if (object == null) {
      return [];
    }
    if (!isObject(object)) {
      object = Object(object);
    }
    var length = object.length;
    length = (length && isLength(length) &&
      (isArray(object) || isArguments(object)) && length) || 0;

    var Ctor = object.constructor,
      index = -1,
      isProto = typeof Ctor == 'function' && Ctor.prototype === object,
      result = Array(length),
      skipIndexes = length > 0;

    while (++index < length) {
      result[index] = (index + '');
    }
    for (var key in object) {
      if (!(skipIndexes && isIndex(key, length)) &&
        !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
        result.push(key);
      }
    }
    return result;
  }

  module.exports = keysIn;

},{"../internal/isIndex":92,"../internal/isLength":94,"../lang/isArguments":102,"../lang/isArray":103,"../lang/isObject":106}],110:[function(require,module,exports){
  var arrayMap = require('../internal/arrayMap'),
    baseDifference = require('../internal/baseDifference'),
    baseFlatten = require('../internal/baseFlatten'),
    bindCallback = require('../internal/bindCallback'),
    keysIn = require('./keysIn'),
    pickByArray = require('../internal/pickByArray'),
    pickByCallback = require('../internal/pickByCallback'),
    restParam = require('../function/restParam');

  /**
   * The opposite of `_.pick`; this method creates an object composed of the
   * own and inherited enumerable properties of `object` that are not omitted.
   *
   * @static
   * @memberOf _
   * @category Object
   * @param {Object} object The source object.
   * @param {Function|...(string|string[])} [predicate] The function invoked per
   *  iteration or property names to omit, specified as individual property
   *  names or arrays of property names.
   * @param {*} [thisArg] The `this` binding of `predicate`.
   * @returns {Object} Returns the new object.
   * @example
   *
   * var object = { 'user': 'fred', 'age': 40 };
   *
   * _.omit(object, 'age');
   * // => { 'user': 'fred' }
   *
   * _.omit(object, _.isNumber);
   * // => { 'user': 'fred' }
   */
  var omit = restParam(function(object, props) {
    if (object == null) {
      return {};
    }
    if (typeof props[0] != 'function') {
      var props = arrayMap(baseFlatten(props), String);
      return pickByArray(object, baseDifference(keysIn(object), props));
    }
    var predicate = bindCallback(props[0], props[1], 3);
    return pickByCallback(object, function(value, key, object) {
      return !predicate(value, key, object);
    });
  });

  module.exports = omit;

},{"../function/restParam":51,"../internal/arrayMap":54,"../internal/baseDifference":58,"../internal/baseFlatten":62,"../internal/bindCallback":77,"../internal/pickByArray":97,"../internal/pickByCallback":98,"./keysIn":109}],111:[function(require,module,exports){
  var keys = require('./keys'),
    toObject = require('../internal/toObject');

  /**
   * Creates a two dimensional array of the key-value pairs for `object`,
   * e.g. `[[key1, value1], [key2, value2]]`.
   *
   * @static
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the new array of key-value pairs.
   * @example
   *
   * _.pairs({ 'barney': 36, 'fred': 40 });
   * // => [['barney', 36], ['fred', 40]] (iteration order is not guaranteed)
   */
  function pairs(object) {
    object = toObject(object);

    var index = -1,
      props = keys(object),
      length = props.length,
      result = Array(length);

    while (++index < length) {
      var key = props[index];
      result[index] = [key, object[key]];
    }
    return result;
  }

  module.exports = pairs;

},{"../internal/toObject":100,"./keys":108}],112:[function(require,module,exports){
  var baseFlatten = require('../internal/baseFlatten'),
    bindCallback = require('../internal/bindCallback'),
    pickByArray = require('../internal/pickByArray'),
    pickByCallback = require('../internal/pickByCallback'),
    restParam = require('../function/restParam');

  /**
   * Creates an object composed of the picked `object` properties. Property
   * names may be specified as individual arguments or as arrays of property
   * names. If `predicate` is provided it's invoked for each property of `object`
   * picking the properties `predicate` returns truthy for. The predicate is
   * bound to `thisArg` and invoked with three arguments: (value, key, object).
   *
   * @static
   * @memberOf _
   * @category Object
   * @param {Object} object The source object.
   * @param {Function|...(string|string[])} [predicate] The function invoked per
   *  iteration or property names to pick, specified as individual property
   *  names or arrays of property names.
   * @param {*} [thisArg] The `this` binding of `predicate`.
   * @returns {Object} Returns the new object.
   * @example
   *
   * var object = { 'user': 'fred', 'age': 40 };
   *
   * _.pick(object, 'user');
   * // => { 'user': 'fred' }
   *
   * _.pick(object, _.isString);
   * // => { 'user': 'fred' }
   */
  var pick = restParam(function(object, props) {
    if (object == null) {
      return {};
    }
    return typeof props[0] == 'function'
      ? pickByCallback(object, bindCallback(props[0], props[1], 3))
      : pickByArray(object, baseFlatten(props));
  });

  module.exports = pick;

},{"../function/restParam":51,"../internal/baseFlatten":62,"../internal/bindCallback":77,"../internal/pickByArray":97,"../internal/pickByCallback":98}],113:[function(require,module,exports){
  /**
   * This method returns the first argument provided to it.
   *
   * @static
   * @memberOf _
   * @category Utility
   * @param {*} value Any value.
   * @returns {*} Returns `value`.
   * @example
   *
   * var object = { 'user': 'fred' };
   *
   * _.identity(object) === object;
   * // => true
   */
  function identity(value) {
    return value;
  }

  module.exports = identity;

},{}],114:[function(require,module,exports){
  var baseProperty = require('../internal/baseProperty'),
    basePropertyDeep = require('../internal/basePropertyDeep'),
    isKey = require('../internal/isKey');

  /**
   * Creates a function that returns the property value at `path` on a
   * given object.
   *
   * @static
   * @memberOf _
   * @category Utility
   * @param {Array|string} path The path of the property to get.
   * @returns {Function} Returns the new function.
   * @example
   *
   * var objects = [
   *   { 'a': { 'b': { 'c': 2 } } },
   *   { 'a': { 'b': { 'c': 1 } } }
   * ];
   *
   * _.map(objects, _.property('a.b.c'));
   * // => [2, 1]
   *
   * _.pluck(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');
   * // => [1, 2]
   */
  function property(path) {
    return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
  }

  module.exports = property;

},{"../internal/baseProperty":73,"../internal/basePropertyDeep":74,"../internal/isKey":93}],115:[function(require,module,exports){
  //! moment.js
  //! version : 2.10.6
  //! authors : Tim Wood, Iskren Chernev, Moment.js contributors
  //! license : MIT
  //! momentjs.com

  (function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
      typeof define === 'function' && define.amd ? define(factory) :
        global.moment = factory()
  }(this, function () { 'use strict';

    var hookCallback;

    function utils_hooks__hooks () {
      return hookCallback.apply(null, arguments);
    }

    // This is done to register the method called with moment()
    // without creating circular dependencies.
    function setHookCallback (callback) {
      hookCallback = callback;
    }

    function isArray(input) {
      return Object.prototype.toString.call(input) === '[object Array]';
    }

    function isDate(input) {
      return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
    }

    function map(arr, fn) {
      var res = [], i;
      for (i = 0; i < arr.length; ++i) {
        res.push(fn(arr[i], i));
      }
      return res;
    }

    function hasOwnProp(a, b) {
      return Object.prototype.hasOwnProperty.call(a, b);
    }

    function extend(a, b) {
      for (var i in b) {
        if (hasOwnProp(b, i)) {
          a[i] = b[i];
        }
      }

      if (hasOwnProp(b, 'toString')) {
        a.toString = b.toString;
      }

      if (hasOwnProp(b, 'valueOf')) {
        a.valueOf = b.valueOf;
      }

      return a;
    }

    function create_utc__createUTC (input, format, locale, strict) {
      return createLocalOrUTC(input, format, locale, strict, true).utc();
    }

    function defaultParsingFlags() {
      // We need to deep clone this object.
      return {
        empty           : false,
        unusedTokens    : [],
        unusedInput     : [],
        overflow        : -2,
        charsLeftOver   : 0,
        nullInput       : false,
        invalidMonth    : null,
        invalidFormat   : false,
        userInvalidated : false,
        iso             : false
      };
    }

    function getParsingFlags(m) {
      if (m._pf == null) {
        m._pf = defaultParsingFlags();
      }
      return m._pf;
    }

    function valid__isValid(m) {
      if (m._isValid == null) {
        var flags = getParsingFlags(m);
        m._isValid = !isNaN(m._d.getTime()) &&
          flags.overflow < 0 &&
          !flags.empty &&
          !flags.invalidMonth &&
          !flags.invalidWeekday &&
          !flags.nullInput &&
          !flags.invalidFormat &&
          !flags.userInvalidated;

        if (m._strict) {
          m._isValid = m._isValid &&
            flags.charsLeftOver === 0 &&
            flags.unusedTokens.length === 0 &&
            flags.bigHour === undefined;
        }
      }
      return m._isValid;
    }

    function valid__createInvalid (flags) {
      var m = create_utc__createUTC(NaN);
      if (flags != null) {
        extend(getParsingFlags(m), flags);
      }
      else {
        getParsingFlags(m).userInvalidated = true;
      }

      return m;
    }

    var momentProperties = utils_hooks__hooks.momentProperties = [];

    function copyConfig(to, from) {
      var i, prop, val;

      if (typeof from._isAMomentObject !== 'undefined') {
        to._isAMomentObject = from._isAMomentObject;
      }
      if (typeof from._i !== 'undefined') {
        to._i = from._i;
      }
      if (typeof from._f !== 'undefined') {
        to._f = from._f;
      }
      if (typeof from._l !== 'undefined') {
        to._l = from._l;
      }
      if (typeof from._strict !== 'undefined') {
        to._strict = from._strict;
      }
      if (typeof from._tzm !== 'undefined') {
        to._tzm = from._tzm;
      }
      if (typeof from._isUTC !== 'undefined') {
        to._isUTC = from._isUTC;
      }
      if (typeof from._offset !== 'undefined') {
        to._offset = from._offset;
      }
      if (typeof from._pf !== 'undefined') {
        to._pf = getParsingFlags(from);
      }
      if (typeof from._locale !== 'undefined') {
        to._locale = from._locale;
      }

      if (momentProperties.length > 0) {
        for (i in momentProperties) {
          prop = momentProperties[i];
          val = from[prop];
          if (typeof val !== 'undefined') {
            to[prop] = val;
          }
        }
      }

      return to;
    }

    var updateInProgress = false;

    // Moment prototype object
    function Moment(config) {
      copyConfig(this, config);
      this._d = new Date(config._d != null ? config._d.getTime() : NaN);
      // Prevent infinite loop in case updateOffset creates new moment
      // objects.
      if (updateInProgress === false) {
        updateInProgress = true;
        utils_hooks__hooks.updateOffset(this);
        updateInProgress = false;
      }
    }

    function isMoment (obj) {
      return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
    }

    function absFloor (number) {
      if (number < 0) {
        return Math.ceil(number);
      } else {
        return Math.floor(number);
      }
    }

    function toInt(argumentForCoercion) {
      var coercedNumber = +argumentForCoercion,
        value = 0;

      if (coercedNumber !== 0 && isFinite(coercedNumber)) {
        value = absFloor(coercedNumber);
      }

      return value;
    }

    function compareArrays(array1, array2, dontConvert) {
      var len = Math.min(array1.length, array2.length),
        lengthDiff = Math.abs(array1.length - array2.length),
        diffs = 0,
        i;
      for (i = 0; i < len; i++) {
        if ((dontConvert && array1[i] !== array2[i]) ||
          (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
          diffs++;
        }
      }
      return diffs + lengthDiff;
    }

    function Locale() {
    }

    var locales = {};
    var globalLocale;

    function normalizeLocale(key) {
      return key ? key.toLowerCase().replace('_', '-') : key;
    }

    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
      var i = 0, j, next, locale, split;

      while (i < names.length) {
        split = normalizeLocale(names[i]).split('-');
        j = split.length;
        next = normalizeLocale(names[i + 1]);
        next = next ? next.split('-') : null;
        while (j > 0) {
          locale = loadLocale(split.slice(0, j).join('-'));
          if (locale) {
            return locale;
          }
          if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
            //the next array item is better than a shallower substring of this one
            break;
          }
          j--;
        }
        i++;
      }
      return null;
    }

    function loadLocale(name) {
      var oldLocale = null;
      // TODO: Find a better way to register and load all the locales in Node
      if (!locales[name] && typeof module !== 'undefined' &&
        module && module.exports) {
        try {
          oldLocale = globalLocale._abbr;
          require('./locale/' + name);
          // because defineLocale currently also sets the global locale, we
          // want to undo that for lazy loaded locales
          locale_locales__getSetGlobalLocale(oldLocale);
        } catch (e) { }
      }
      return locales[name];
    }

    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    function locale_locales__getSetGlobalLocale (key, values) {
      var data;
      if (key) {
        if (typeof values === 'undefined') {
          data = locale_locales__getLocale(key);
        }
        else {
          data = defineLocale(key, values);
        }

        if (data) {
          // moment.duration._locale = moment._locale = data;
          globalLocale = data;
        }
      }

      return globalLocale._abbr;
    }

    function defineLocale (name, values) {
      if (values !== null) {
        values.abbr = name;
        locales[name] = locales[name] || new Locale();
        locales[name].set(values);

        // backwards compat for now: also set the locale
        locale_locales__getSetGlobalLocale(name);

        return locales[name];
      } else {
        // useful for testing
        delete locales[name];
        return null;
      }
    }

    // returns locale data
    function locale_locales__getLocale (key) {
      var locale;

      if (key && key._locale && key._locale._abbr) {
        key = key._locale._abbr;
      }

      if (!key) {
        return globalLocale;
      }

      if (!isArray(key)) {
        //short-circuit everything else
        locale = loadLocale(key);
        if (locale) {
          return locale;
        }
        key = [key];
      }

      return chooseLocale(key);
    }

    var aliases = {};

    function addUnitAlias (unit, shorthand) {
      var lowerCase = unit.toLowerCase();
      aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
    }

    function normalizeUnits(units) {
      return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
    }

    function normalizeObjectUnits(inputObject) {
      var normalizedInput = {},
        normalizedProp,
        prop;

      for (prop in inputObject) {
        if (hasOwnProp(inputObject, prop)) {
          normalizedProp = normalizeUnits(prop);
          if (normalizedProp) {
            normalizedInput[normalizedProp] = inputObject[prop];
          }
        }
      }

      return normalizedInput;
    }

    function makeGetSet (unit, keepTime) {
      return function (value) {
        if (value != null) {
          get_set__set(this, unit, value);
          utils_hooks__hooks.updateOffset(this, keepTime);
          return this;
        } else {
          return get_set__get(this, unit);
        }
      };
    }

    function get_set__get (mom, unit) {
      return mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]();
    }

    function get_set__set (mom, unit, value) {
      return mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
    }

    // MOMENTS

    function getSet (units, value) {
      var unit;
      if (typeof units === 'object') {
        for (unit in units) {
          this.set(unit, units[unit]);
        }
      } else {
        units = normalizeUnits(units);
        if (typeof this[units] === 'function') {
          return this[units](value);
        }
      }
      return this;
    }

    function zeroFill(number, targetLength, forceSign) {
      var absNumber = '' + Math.abs(number),
        zerosToFill = targetLength - absNumber.length,
        sign = number >= 0;
      return (sign ? (forceSign ? '+' : '') : '-') +
        Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
    }

    var formattingTokens = /(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

    var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

    var formatFunctions = {};

    var formatTokenFunctions = {};

    // token:    'M'
    // padded:   ['MM', 2]
    // ordinal:  'Mo'
    // callback: function () { this.month() + 1 }
    function addFormatToken (token, padded, ordinal, callback) {
      var func = callback;
      if (typeof callback === 'string') {
        func = function () {
          return this[callback]();
        };
      }
      if (token) {
        formatTokenFunctions[token] = func;
      }
      if (padded) {
        formatTokenFunctions[padded[0]] = function () {
          return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
        };
      }
      if (ordinal) {
        formatTokenFunctions[ordinal] = function () {
          return this.localeData().ordinal(func.apply(this, arguments), token);
        };
      }
    }

    function removeFormattingTokens(input) {
      if (input.match(/\[[\s\S]/)) {
        return input.replace(/^\[|\]$/g, '');
      }
      return input.replace(/\\/g, '');
    }

    function makeFormatFunction(format) {
      var array = format.match(formattingTokens), i, length;

      for (i = 0, length = array.length; i < length; i++) {
        if (formatTokenFunctions[array[i]]) {
          array[i] = formatTokenFunctions[array[i]];
        } else {
          array[i] = removeFormattingTokens(array[i]);
        }
      }

      return function (mom) {
        var output = '';
        for (i = 0; i < length; i++) {
          output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
        }
        return output;
      };
    }

    // format date using native date object
    function formatMoment(m, format) {
      if (!m.isValid()) {
        return m.localeData().invalidDate();
      }

      format = expandFormat(format, m.localeData());
      formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

      return formatFunctions[format](m);
    }

    function expandFormat(format, locale) {
      var i = 5;

      function replaceLongDateFormatTokens(input) {
        return locale.longDateFormat(input) || input;
      }

      localFormattingTokens.lastIndex = 0;
      while (i >= 0 && localFormattingTokens.test(format)) {
        format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
        localFormattingTokens.lastIndex = 0;
        i -= 1;
      }

      return format;
    }

    var match1         = /\d/;            //       0 - 9
    var match2         = /\d\d/;          //      00 - 99
    var match3         = /\d{3}/;         //     000 - 999
    var match4         = /\d{4}/;         //    0000 - 9999
    var match6         = /[+-]?\d{6}/;    // -999999 - 999999
    var match1to2      = /\d\d?/;         //       0 - 99
    var match1to3      = /\d{1,3}/;       //       0 - 999
    var match1to4      = /\d{1,4}/;       //       0 - 9999
    var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999

    var matchUnsigned  = /\d+/;           //       0 - inf
    var matchSigned    = /[+-]?\d+/;      //    -inf - inf

    var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z

    var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

    // any word (or two) characters or numbers including two/three word month in arabic.
    var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;

    var regexes = {};

    function isFunction (sth) {
      // https://github.com/moment/moment/issues/2325
      return typeof sth === 'function' &&
        Object.prototype.toString.call(sth) === '[object Function]';
    }


    function addRegexToken (token, regex, strictRegex) {
      regexes[token] = isFunction(regex) ? regex : function (isStrict) {
        return (isStrict && strictRegex) ? strictRegex : regex;
      };
    }

    function getParseRegexForToken (token, config) {
      if (!hasOwnProp(regexes, token)) {
        return new RegExp(unescapeFormat(token));
      }

      return regexes[token](config._strict, config._locale);
    }

    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function unescapeFormat(s) {
      return s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
        return p1 || p2 || p3 || p4;
      }).replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }

    var tokens = {};

    function addParseToken (token, callback) {
      var i, func = callback;
      if (typeof token === 'string') {
        token = [token];
      }
      if (typeof callback === 'number') {
        func = function (input, array) {
          array[callback] = toInt(input);
        };
      }
      for (i = 0; i < token.length; i++) {
        tokens[token[i]] = func;
      }
    }

    function addWeekParseToken (token, callback) {
      addParseToken(token, function (input, array, config, token) {
        config._w = config._w || {};
        callback(input, config._w, config, token);
      });
    }

    function addTimeToArrayFromToken(token, input, config) {
      if (input != null && hasOwnProp(tokens, token)) {
        tokens[token](input, config._a, config, token);
      }
    }

    var YEAR = 0;
    var MONTH = 1;
    var DATE = 2;
    var HOUR = 3;
    var MINUTE = 4;
    var SECOND = 5;
    var MILLISECOND = 6;

    function daysInMonth(year, month) {
      return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
    }

    // FORMATTING

    addFormatToken('M', ['MM', 2], 'Mo', function () {
      return this.month() + 1;
    });

    addFormatToken('MMM', 0, 0, function (format) {
      return this.localeData().monthsShort(this, format);
    });

    addFormatToken('MMMM', 0, 0, function (format) {
      return this.localeData().months(this, format);
    });

    // ALIASES

    addUnitAlias('month', 'M');

    // PARSING

    addRegexToken('M',    match1to2);
    addRegexToken('MM',   match1to2, match2);
    addRegexToken('MMM',  matchWord);
    addRegexToken('MMMM', matchWord);

    addParseToken(['M', 'MM'], function (input, array) {
      array[MONTH] = toInt(input) - 1;
    });

    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
      var month = config._locale.monthsParse(input, token, config._strict);
      // if we didn't find a month name, mark the date as invalid.
      if (month != null) {
        array[MONTH] = month;
      } else {
        getParsingFlags(config).invalidMonth = input;
      }
    });

    // LOCALES

    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
    function localeMonths (m) {
      return this._months[m.month()];
    }

    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
    function localeMonthsShort (m) {
      return this._monthsShort[m.month()];
    }

    function localeMonthsParse (monthName, format, strict) {
      var i, mom, regex;

      if (!this._monthsParse) {
        this._monthsParse = [];
        this._longMonthsParse = [];
        this._shortMonthsParse = [];
      }

      for (i = 0; i < 12; i++) {
        // make the regex if we don't have it already
        mom = create_utc__createUTC([2000, i]);
        if (strict && !this._longMonthsParse[i]) {
          this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
          this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
        }
        if (!strict && !this._monthsParse[i]) {
          regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
          this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
        }
        // test the regex
        if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
          return i;
        } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
          return i;
        } else if (!strict && this._monthsParse[i].test(monthName)) {
          return i;
        }
      }
    }

    // MOMENTS

    function setMonth (mom, value) {
      var dayOfMonth;

      // TODO: Move this out of here!
      if (typeof value === 'string') {
        value = mom.localeData().monthsParse(value);
        // TODO: Another silent failure?
        if (typeof value !== 'number') {
          return mom;
        }
      }

      dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
      mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
      return mom;
    }

    function getSetMonth (value) {
      if (value != null) {
        setMonth(this, value);
        utils_hooks__hooks.updateOffset(this, true);
        return this;
      } else {
        return get_set__get(this, 'Month');
      }
    }

    function getDaysInMonth () {
      return daysInMonth(this.year(), this.month());
    }

    function checkOverflow (m) {
      var overflow;
      var a = m._a;

      if (a && getParsingFlags(m).overflow === -2) {
        overflow =
          a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
            a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
              a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
                a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
                  a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
                    a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
                      -1;

        if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
          overflow = DATE;
        }

        getParsingFlags(m).overflow = overflow;
      }

      return m;
    }

    function warn(msg) {
      if (utils_hooks__hooks.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {
        console.warn('Deprecation warning: ' + msg);
      }
    }

    function deprecate(msg, fn) {
      var firstTime = true;

      return extend(function () {
        if (firstTime) {
          warn(msg + '\n' + (new Error()).stack);
          firstTime = false;
        }
        return fn.apply(this, arguments);
      }, fn);
    }

    var deprecations = {};

    function deprecateSimple(name, msg) {
      if (!deprecations[name]) {
        warn(msg);
        deprecations[name] = true;
      }
    }

    utils_hooks__hooks.suppressDeprecationWarnings = false;

    var from_string__isoRegex = /^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

    var isoDates = [
      ['YYYYYY-MM-DD', /[+-]\d{6}-\d{2}-\d{2}/],
      ['YYYY-MM-DD', /\d{4}-\d{2}-\d{2}/],
      ['GGGG-[W]WW-E', /\d{4}-W\d{2}-\d/],
      ['GGGG-[W]WW', /\d{4}-W\d{2}/],
      ['YYYY-DDD', /\d{4}-\d{3}/]
    ];

    // iso time formats and regexes
    var isoTimes = [
      ['HH:mm:ss.SSSS', /(T| )\d\d:\d\d:\d\d\.\d+/],
      ['HH:mm:ss', /(T| )\d\d:\d\d:\d\d/],
      ['HH:mm', /(T| )\d\d:\d\d/],
      ['HH', /(T| )\d\d/]
    ];

    var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

    // date from iso format
    function configFromISO(config) {
      var i, l,
        string = config._i,
        match = from_string__isoRegex.exec(string);

      if (match) {
        getParsingFlags(config).iso = true;
        for (i = 0, l = isoDates.length; i < l; i++) {
          if (isoDates[i][1].exec(string)) {
            config._f = isoDates[i][0];
            break;
          }
        }
        for (i = 0, l = isoTimes.length; i < l; i++) {
          if (isoTimes[i][1].exec(string)) {
            // match[6] should be 'T' or space
            config._f += (match[6] || ' ') + isoTimes[i][0];
            break;
          }
        }
        if (string.match(matchOffset)) {
          config._f += 'Z';
        }
        configFromStringAndFormat(config);
      } else {
        config._isValid = false;
      }
    }

    // date from iso format or fallback
    function configFromString(config) {
      var matched = aspNetJsonRegex.exec(config._i);

      if (matched !== null) {
        config._d = new Date(+matched[1]);
        return;
      }

      configFromISO(config);
      if (config._isValid === false) {
        delete config._isValid;
        utils_hooks__hooks.createFromInputFallback(config);
      }
    }

    utils_hooks__hooks.createFromInputFallback = deprecate(
      'moment construction falls back to js Date. This is ' +
      'discouraged and will be removed in upcoming major ' +
      'release. Please refer to ' +
      'https://github.com/moment/moment/issues/1407 for more info.',
      function (config) {
        config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
      }
    );

    function createDate (y, m, d, h, M, s, ms) {
      //can't just apply() to create a date:
      //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
      var date = new Date(y, m, d, h, M, s, ms);

      //the date constructor doesn't accept years < 1970
      if (y < 1970) {
        date.setFullYear(y);
      }
      return date;
    }

    function createUTCDate (y) {
      var date = new Date(Date.UTC.apply(null, arguments));
      if (y < 1970) {
        date.setUTCFullYear(y);
      }
      return date;
    }

    addFormatToken(0, ['YY', 2], 0, function () {
      return this.year() % 100;
    });

    addFormatToken(0, ['YYYY',   4],       0, 'year');
    addFormatToken(0, ['YYYYY',  5],       0, 'year');
    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

    // ALIASES

    addUnitAlias('year', 'y');

    // PARSING

    addRegexToken('Y',      matchSigned);
    addRegexToken('YY',     match1to2, match2);
    addRegexToken('YYYY',   match1to4, match4);
    addRegexToken('YYYYY',  match1to6, match6);
    addRegexToken('YYYYYY', match1to6, match6);

    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
    addParseToken('YYYY', function (input, array) {
      array[YEAR] = input.length === 2 ? utils_hooks__hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken('YY', function (input, array) {
      array[YEAR] = utils_hooks__hooks.parseTwoDigitYear(input);
    });

    // HELPERS

    function daysInYear(year) {
      return isLeapYear(year) ? 366 : 365;
    }

    function isLeapYear(year) {
      return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
    }

    // HOOKS

    utils_hooks__hooks.parseTwoDigitYear = function (input) {
      return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };

    // MOMENTS

    var getSetYear = makeGetSet('FullYear', false);

    function getIsLeapYear () {
      return isLeapYear(this.year());
    }

    addFormatToken('w', ['ww', 2], 'wo', 'week');
    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

    // ALIASES

    addUnitAlias('week', 'w');
    addUnitAlias('isoWeek', 'W');

    // PARSING

    addRegexToken('w',  match1to2);
    addRegexToken('ww', match1to2, match2);
    addRegexToken('W',  match1to2);
    addRegexToken('WW', match1to2, match2);

    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
      week[token.substr(0, 1)] = toInt(input);
    });

    // HELPERS

    // firstDayOfWeek       0 = sun, 6 = sat
    //                      the day of the week that starts the week
    //                      (usually sunday or monday)
    // firstDayOfWeekOfYear 0 = sun, 6 = sat
    //                      the first week is the week that contains the first
    //                      of this day of the week
    //                      (eg. ISO weeks use thursday (4))
    function weekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {
      var end = firstDayOfWeekOfYear - firstDayOfWeek,
        daysToDayOfWeek = firstDayOfWeekOfYear - mom.day(),
        adjustedMoment;


      if (daysToDayOfWeek > end) {
        daysToDayOfWeek -= 7;
      }

      if (daysToDayOfWeek < end - 7) {
        daysToDayOfWeek += 7;
      }

      adjustedMoment = local__createLocal(mom).add(daysToDayOfWeek, 'd');
      return {
        week: Math.ceil(adjustedMoment.dayOfYear() / 7),
        year: adjustedMoment.year()
      };
    }

    // LOCALES

    function localeWeek (mom) {
      return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }

    var defaultLocaleWeek = {
      dow : 0, // Sunday is the first day of the week.
      doy : 6  // The week that contains Jan 1st is the first week of the year.
    };

    function localeFirstDayOfWeek () {
      return this._week.dow;
    }

    function localeFirstDayOfYear () {
      return this._week.doy;
    }

    // MOMENTS

    function getSetWeek (input) {
      var week = this.localeData().week(this);
      return input == null ? week : this.add((input - week) * 7, 'd');
    }

    function getSetISOWeek (input) {
      var week = weekOfYear(this, 1, 4).week;
      return input == null ? week : this.add((input - week) * 7, 'd');
    }

    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

    // ALIASES

    addUnitAlias('dayOfYear', 'DDD');

    // PARSING

    addRegexToken('DDD',  match1to3);
    addRegexToken('DDDD', match3);
    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
      config._dayOfYear = toInt(input);
    });

    // HELPERS

    //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, firstDayOfWeekOfYear, firstDayOfWeek) {
      var week1Jan = 6 + firstDayOfWeek - firstDayOfWeekOfYear, janX = createUTCDate(year, 0, 1 + week1Jan), d = janX.getUTCDay(), dayOfYear;
      if (d < firstDayOfWeek) {
        d += 7;
      }

      weekday = weekday != null ? 1 * weekday : firstDayOfWeek;

      dayOfYear = 1 + week1Jan + 7 * (week - 1) - d + weekday;

      return {
        year: dayOfYear > 0 ? year : year - 1,
        dayOfYear: dayOfYear > 0 ?  dayOfYear : daysInYear(year - 1) + dayOfYear
      };
    }

    // MOMENTS

    function getSetDayOfYear (input) {
      var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
      return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
    }

    // Pick the first defined of two or three arguments.
    function defaults(a, b, c) {
      if (a != null) {
        return a;
      }
      if (b != null) {
        return b;
      }
      return c;
    }

    function currentDateArray(config) {
      var now = new Date();
      if (config._useUTC) {
        return [now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate()];
      }
      return [now.getFullYear(), now.getMonth(), now.getDate()];
    }

    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function configFromArray (config) {
      var i, date, input = [], currentDate, yearToUse;

      if (config._d) {
        return;
      }

      currentDate = currentDateArray(config);

      //compute day of the year from weeks and weekdays
      if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
        dayOfYearFromWeekInfo(config);
      }

      //if the day of the year is set, figure out what it is
      if (config._dayOfYear) {
        yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

        if (config._dayOfYear > daysInYear(yearToUse)) {
          getParsingFlags(config)._overflowDayOfYear = true;
        }

        date = createUTCDate(yearToUse, 0, config._dayOfYear);
        config._a[MONTH] = date.getUTCMonth();
        config._a[DATE] = date.getUTCDate();
      }

      // Default to current date.
      // * if no year, month, day of month are given, default to today
      // * if day of month is given, default month and year
      // * if month is given, default only year
      // * if year is given, don't default anything
      for (i = 0; i < 3 && config._a[i] == null; ++i) {
        config._a[i] = input[i] = currentDate[i];
      }

      // Zero out whatever was not defaulted, including time
      for (; i < 7; i++) {
        config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
      }

      // Check for 24:00:00.000
      if (config._a[HOUR] === 24 &&
        config._a[MINUTE] === 0 &&
        config._a[SECOND] === 0 &&
        config._a[MILLISECOND] === 0) {
        config._nextDay = true;
        config._a[HOUR] = 0;
      }

      config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
      // Apply timezone offset from input. The actual utcOffset can be changed
      // with parseZone.
      if (config._tzm != null) {
        config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
      }

      if (config._nextDay) {
        config._a[HOUR] = 24;
      }
    }

    function dayOfYearFromWeekInfo(config) {
      var w, weekYear, week, weekday, dow, doy, temp;

      w = config._w;
      if (w.GG != null || w.W != null || w.E != null) {
        dow = 1;
        doy = 4;

        // TODO: We need to take the current isoWeekYear, but that depends on
        // how we interpret now (local, utc, fixed offset). So create
        // a now version of current config (take local/utc/offset flags, and
        // create now).
        weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(local__createLocal(), 1, 4).year);
        week = defaults(w.W, 1);
        weekday = defaults(w.E, 1);
      } else {
        dow = config._locale._week.dow;
        doy = config._locale._week.doy;

        weekYear = defaults(w.gg, config._a[YEAR], weekOfYear(local__createLocal(), dow, doy).year);
        week = defaults(w.w, 1);

        if (w.d != null) {
          // weekday -- low day numbers are considered next week
          weekday = w.d;
          if (weekday < dow) {
            ++week;
          }
        } else if (w.e != null) {
          // local weekday -- counting starts from begining of week
          weekday = w.e + dow;
        } else {
          // default to begining of week
          weekday = dow;
        }
      }
      temp = dayOfYearFromWeeks(weekYear, week, weekday, doy, dow);

      config._a[YEAR] = temp.year;
      config._dayOfYear = temp.dayOfYear;
    }

    utils_hooks__hooks.ISO_8601 = function () {};

    // date from string and format string
    function configFromStringAndFormat(config) {
      // TODO: Move this to another part of the creation flow to prevent circular deps
      if (config._f === utils_hooks__hooks.ISO_8601) {
        configFromISO(config);
        return;
      }

      config._a = [];
      getParsingFlags(config).empty = true;

      // This array is used to make a Date, either with `new Date` or `Date.UTC`
      var string = '' + config._i,
        i, parsedInput, tokens, token, skipped,
        stringLength = string.length,
        totalParsedInputLength = 0;

      tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

      for (i = 0; i < tokens.length; i++) {
        token = tokens[i];
        parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
        if (parsedInput) {
          skipped = string.substr(0, string.indexOf(parsedInput));
          if (skipped.length > 0) {
            getParsingFlags(config).unusedInput.push(skipped);
          }
          string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
          totalParsedInputLength += parsedInput.length;
        }
        // don't parse if it's not a known token
        if (formatTokenFunctions[token]) {
          if (parsedInput) {
            getParsingFlags(config).empty = false;
          }
          else {
            getParsingFlags(config).unusedTokens.push(token);
          }
          addTimeToArrayFromToken(token, parsedInput, config);
        }
        else if (config._strict && !parsedInput) {
          getParsingFlags(config).unusedTokens.push(token);
        }
      }

      // add remaining unparsed input length to the string
      getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
      if (string.length > 0) {
        getParsingFlags(config).unusedInput.push(string);
      }

      // clear _12h flag if hour is <= 12
      if (getParsingFlags(config).bigHour === true &&
        config._a[HOUR] <= 12 &&
        config._a[HOUR] > 0) {
        getParsingFlags(config).bigHour = undefined;
      }
      // handle meridiem
      config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

      configFromArray(config);
      checkOverflow(config);
    }


    function meridiemFixWrap (locale, hour, meridiem) {
      var isPm;

      if (meridiem == null) {
        // nothing to do
        return hour;
      }
      if (locale.meridiemHour != null) {
        return locale.meridiemHour(hour, meridiem);
      } else if (locale.isPM != null) {
        // Fallback
        isPm = locale.isPM(meridiem);
        if (isPm && hour < 12) {
          hour += 12;
        }
        if (!isPm && hour === 12) {
          hour = 0;
        }
        return hour;
      } else {
        // this is not supposed to happen
        return hour;
      }
    }

    function configFromStringAndArray(config) {
      var tempConfig,
        bestMoment,

        scoreToBeat,
        i,
        currentScore;

      if (config._f.length === 0) {
        getParsingFlags(config).invalidFormat = true;
        config._d = new Date(NaN);
        return;
      }

      for (i = 0; i < config._f.length; i++) {
        currentScore = 0;
        tempConfig = copyConfig({}, config);
        if (config._useUTC != null) {
          tempConfig._useUTC = config._useUTC;
        }
        tempConfig._f = config._f[i];
        configFromStringAndFormat(tempConfig);

        if (!valid__isValid(tempConfig)) {
          continue;
        }

        // if there is any input that was not parsed add a penalty for that format
        currentScore += getParsingFlags(tempConfig).charsLeftOver;

        //or tokens
        currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

        getParsingFlags(tempConfig).score = currentScore;

        if (scoreToBeat == null || currentScore < scoreToBeat) {
          scoreToBeat = currentScore;
          bestMoment = tempConfig;
        }
      }

      extend(config, bestMoment || tempConfig);
    }

    function configFromObject(config) {
      if (config._d) {
        return;
      }

      var i = normalizeObjectUnits(config._i);
      config._a = [i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond];

      configFromArray(config);
    }

    function createFromConfig (config) {
      var res = new Moment(checkOverflow(prepareConfig(config)));
      if (res._nextDay) {
        // Adding is smart enough around DST
        res.add(1, 'd');
        res._nextDay = undefined;
      }

      return res;
    }

    function prepareConfig (config) {
      var input = config._i,
        format = config._f;

      config._locale = config._locale || locale_locales__getLocale(config._l);

      if (input === null || (format === undefined && input === '')) {
        return valid__createInvalid({nullInput: true});
      }

      if (typeof input === 'string') {
        config._i = input = config._locale.preparse(input);
      }

      if (isMoment(input)) {
        return new Moment(checkOverflow(input));
      } else if (isArray(format)) {
        configFromStringAndArray(config);
      } else if (format) {
        configFromStringAndFormat(config);
      } else if (isDate(input)) {
        config._d = input;
      } else {
        configFromInput(config);
      }

      return config;
    }

    function configFromInput(config) {
      var input = config._i;
      if (input === undefined) {
        config._d = new Date();
      } else if (isDate(input)) {
        config._d = new Date(+input);
      } else if (typeof input === 'string') {
        configFromString(config);
      } else if (isArray(input)) {
        config._a = map(input.slice(0), function (obj) {
          return parseInt(obj, 10);
        });
        configFromArray(config);
      } else if (typeof(input) === 'object') {
        configFromObject(config);
      } else if (typeof(input) === 'number') {
        // from milliseconds
        config._d = new Date(input);
      } else {
        utils_hooks__hooks.createFromInputFallback(config);
      }
    }

    function createLocalOrUTC (input, format, locale, strict, isUTC) {
      var c = {};

      if (typeof(locale) === 'boolean') {
        strict = locale;
        locale = undefined;
      }
      // object construction must be done this way.
      // https://github.com/moment/moment/issues/1423
      c._isAMomentObject = true;
      c._useUTC = c._isUTC = isUTC;
      c._l = locale;
      c._i = input;
      c._f = format;
      c._strict = strict;

      return createFromConfig(c);
    }

    function local__createLocal (input, format, locale, strict) {
      return createLocalOrUTC(input, format, locale, strict, false);
    }

    var prototypeMin = deprecate(
      'moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548',
      function () {
        var other = local__createLocal.apply(null, arguments);
        return other < this ? this : other;
      }
    );

    var prototypeMax = deprecate(
      'moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548',
      function () {
        var other = local__createLocal.apply(null, arguments);
        return other > this ? this : other;
      }
    );

    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
      var res, i;
      if (moments.length === 1 && isArray(moments[0])) {
        moments = moments[0];
      }
      if (!moments.length) {
        return local__createLocal();
      }
      res = moments[0];
      for (i = 1; i < moments.length; ++i) {
        if (!moments[i].isValid() || moments[i][fn](res)) {
          res = moments[i];
        }
      }
      return res;
    }

    // TODO: Use [].sort instead?
    function min () {
      var args = [].slice.call(arguments, 0);

      return pickBy('isBefore', args);
    }

    function max () {
      var args = [].slice.call(arguments, 0);

      return pickBy('isAfter', args);
    }

    function Duration (duration) {
      var normalizedInput = normalizeObjectUnits(duration),
        years = normalizedInput.year || 0,
        quarters = normalizedInput.quarter || 0,
        months = normalizedInput.month || 0,
        weeks = normalizedInput.week || 0,
        days = normalizedInput.day || 0,
        hours = normalizedInput.hour || 0,
        minutes = normalizedInput.minute || 0,
        seconds = normalizedInput.second || 0,
        milliseconds = normalizedInput.millisecond || 0;

      // representation for dateAddRemove
      this._milliseconds = +milliseconds +
        seconds * 1e3 + // 1000
        minutes * 6e4 + // 1000 * 60
        hours * 36e5; // 1000 * 60 * 60
      // Because of dateAddRemove treats 24 hours as different from a
      // day when working around DST, we need to store them separately
      this._days = +days +
        weeks * 7;
      // It is impossible translate months into days without knowing
      // which months you are are talking about, so we have to store
      // it separately.
      this._months = +months +
        quarters * 3 +
        years * 12;

      this._data = {};

      this._locale = locale_locales__getLocale();

      this._bubble();
    }

    function isDuration (obj) {
      return obj instanceof Duration;
    }

    function offset (token, separator) {
      addFormatToken(token, 0, 0, function () {
        var offset = this.utcOffset();
        var sign = '+';
        if (offset < 0) {
          offset = -offset;
          sign = '-';
        }
        return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
      });
    }

    offset('Z', ':');
    offset('ZZ', '');

    // PARSING

    addRegexToken('Z',  matchOffset);
    addRegexToken('ZZ', matchOffset);
    addParseToken(['Z', 'ZZ'], function (input, array, config) {
      config._useUTC = true;
      config._tzm = offsetFromString(input);
    });

    // HELPERS

    // timezone chunker
    // '+10:00' > ['10',  '00']
    // '-1530'  > ['-15', '30']
    var chunkOffset = /([\+\-]|\d\d)/gi;

    function offsetFromString(string) {
      var matches = ((string || '').match(matchOffset) || []);
      var chunk   = matches[matches.length - 1] || [];
      var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
      var minutes = +(parts[1] * 60) + toInt(parts[2]);

      return parts[0] === '+' ? minutes : -minutes;
    }

    // Return a moment from input, that is local/utc/zone equivalent to model.
    function cloneWithOffset(input, model) {
      var res, diff;
      if (model._isUTC) {
        res = model.clone();
        diff = (isMoment(input) || isDate(input) ? +input : +local__createLocal(input)) - (+res);
        // Use low-level api, because this fn is low-level api.
        res._d.setTime(+res._d + diff);
        utils_hooks__hooks.updateOffset(res, false);
        return res;
      } else {
        return local__createLocal(input).local();
      }
    }

    function getDateOffset (m) {
      // On Firefox.24 Date#getTimezoneOffset returns a floating point.
      // https://github.com/moment/moment/pull/1871
      return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
    }

    // HOOKS

    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    utils_hooks__hooks.updateOffset = function () {};

    // MOMENTS

    // keepLocalTime = true means only change the timezone, without
    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
    // +0200, so we adjust the time as needed, to be valid.
    //
    // Keeping the time actually adds/subtracts (one hour)
    // from the actual represented time. That is why we call updateOffset
    // a second time. In case it wants us to change the offset again
    // _changeInProgress == true case, then we have to adjust, because
    // there is no such time in the given timezone.
    function getSetOffset (input, keepLocalTime) {
      var offset = this._offset || 0,
        localAdjust;
      if (input != null) {
        if (typeof input === 'string') {
          input = offsetFromString(input);
        }
        if (Math.abs(input) < 16) {
          input = input * 60;
        }
        if (!this._isUTC && keepLocalTime) {
          localAdjust = getDateOffset(this);
        }
        this._offset = input;
        this._isUTC = true;
        if (localAdjust != null) {
          this.add(localAdjust, 'm');
        }
        if (offset !== input) {
          if (!keepLocalTime || this._changeInProgress) {
            add_subtract__addSubtract(this, create__createDuration(input - offset, 'm'), 1, false);
          } else if (!this._changeInProgress) {
            this._changeInProgress = true;
            utils_hooks__hooks.updateOffset(this, true);
            this._changeInProgress = null;
          }
        }
        return this;
      } else {
        return this._isUTC ? offset : getDateOffset(this);
      }
    }

    function getSetZone (input, keepLocalTime) {
      if (input != null) {
        if (typeof input !== 'string') {
          input = -input;
        }

        this.utcOffset(input, keepLocalTime);

        return this;
      } else {
        return -this.utcOffset();
      }
    }

    function setOffsetToUTC (keepLocalTime) {
      return this.utcOffset(0, keepLocalTime);
    }

    function setOffsetToLocal (keepLocalTime) {
      if (this._isUTC) {
        this.utcOffset(0, keepLocalTime);
        this._isUTC = false;

        if (keepLocalTime) {
          this.subtract(getDateOffset(this), 'm');
        }
      }
      return this;
    }

    function setOffsetToParsedOffset () {
      if (this._tzm) {
        this.utcOffset(this._tzm);
      } else if (typeof this._i === 'string') {
        this.utcOffset(offsetFromString(this._i));
      }
      return this;
    }

    function hasAlignedHourOffset (input) {
      input = input ? local__createLocal(input).utcOffset() : 0;

      return (this.utcOffset() - input) % 60 === 0;
    }

    function isDaylightSavingTime () {
      return (
        this.utcOffset() > this.clone().month(0).utcOffset() ||
        this.utcOffset() > this.clone().month(5).utcOffset()
      );
    }

    function isDaylightSavingTimeShifted () {
      if (typeof this._isDSTShifted !== 'undefined') {
        return this._isDSTShifted;
      }

      var c = {};

      copyConfig(c, this);
      c = prepareConfig(c);

      if (c._a) {
        var other = c._isUTC ? create_utc__createUTC(c._a) : local__createLocal(c._a);
        this._isDSTShifted = this.isValid() &&
          compareArrays(c._a, other.toArray()) > 0;
      } else {
        this._isDSTShifted = false;
      }

      return this._isDSTShifted;
    }

    function isLocal () {
      return !this._isUTC;
    }

    function isUtcOffset () {
      return this._isUTC;
    }

    function isUtc () {
      return this._isUTC && this._offset === 0;
    }

    var aspNetRegex = /(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/;

    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
    var create__isoRegex = /^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;

    function create__createDuration (input, key) {
      var duration = input,
      // matching against regexp is expensive, do it on demand
        match = null,
        sign,
        ret,
        diffRes;

      if (isDuration(input)) {
        duration = {
          ms : input._milliseconds,
          d  : input._days,
          M  : input._months
        };
      } else if (typeof input === 'number') {
        duration = {};
        if (key) {
          duration[key] = input;
        } else {
          duration.milliseconds = input;
        }
      } else if (!!(match = aspNetRegex.exec(input))) {
        sign = (match[1] === '-') ? -1 : 1;
        duration = {
          y  : 0,
          d  : toInt(match[DATE])        * sign,
          h  : toInt(match[HOUR])        * sign,
          m  : toInt(match[MINUTE])      * sign,
          s  : toInt(match[SECOND])      * sign,
          ms : toInt(match[MILLISECOND]) * sign
        };
      } else if (!!(match = create__isoRegex.exec(input))) {
        sign = (match[1] === '-') ? -1 : 1;
        duration = {
          y : parseIso(match[2], sign),
          M : parseIso(match[3], sign),
          d : parseIso(match[4], sign),
          h : parseIso(match[5], sign),
          m : parseIso(match[6], sign),
          s : parseIso(match[7], sign),
          w : parseIso(match[8], sign)
        };
      } else if (duration == null) {// checks for null or undefined
        duration = {};
      } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
        diffRes = momentsDifference(local__createLocal(duration.from), local__createLocal(duration.to));

        duration = {};
        duration.ms = diffRes.milliseconds;
        duration.M = diffRes.months;
      }

      ret = new Duration(duration);

      if (isDuration(input) && hasOwnProp(input, '_locale')) {
        ret._locale = input._locale;
      }

      return ret;
    }

    create__createDuration.fn = Duration.prototype;

    function parseIso (inp, sign) {
      // We'd normally use ~~inp for this, but unfortunately it also
      // converts floats to ints.
      // inp may be undefined, so careful calling replace on it.
      var res = inp && parseFloat(inp.replace(',', '.'));
      // apply sign while we're at it
      return (isNaN(res) ? 0 : res) * sign;
    }

    function positiveMomentsDifference(base, other) {
      var res = {milliseconds: 0, months: 0};

      res.months = other.month() - base.month() +
        (other.year() - base.year()) * 12;
      if (base.clone().add(res.months, 'M').isAfter(other)) {
        --res.months;
      }

      res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

      return res;
    }

    function momentsDifference(base, other) {
      var res;
      other = cloneWithOffset(other, base);
      if (base.isBefore(other)) {
        res = positiveMomentsDifference(base, other);
      } else {
        res = positiveMomentsDifference(other, base);
        res.milliseconds = -res.milliseconds;
        res.months = -res.months;
      }

      return res;
    }

    function createAdder(direction, name) {
      return function (val, period) {
        var dur, tmp;
        //invert the arguments, but complain about it
        if (period !== null && !isNaN(+period)) {
          deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period).');
          tmp = val; val = period; period = tmp;
        }

        val = typeof val === 'string' ? +val : val;
        dur = create__createDuration(val, period);
        add_subtract__addSubtract(this, dur, direction);
        return this;
      };
    }

    function add_subtract__addSubtract (mom, duration, isAdding, updateOffset) {
      var milliseconds = duration._milliseconds,
        days = duration._days,
        months = duration._months;
      updateOffset = updateOffset == null ? true : updateOffset;

      if (milliseconds) {
        mom._d.setTime(+mom._d + milliseconds * isAdding);
      }
      if (days) {
        get_set__set(mom, 'Date', get_set__get(mom, 'Date') + days * isAdding);
      }
      if (months) {
        setMonth(mom, get_set__get(mom, 'Month') + months * isAdding);
      }
      if (updateOffset) {
        utils_hooks__hooks.updateOffset(mom, days || months);
      }
    }

    var add_subtract__add      = createAdder(1, 'add');
    var add_subtract__subtract = createAdder(-1, 'subtract');

    function moment_calendar__calendar (time, formats) {
      // We want to compare the start of today, vs this.
      // Getting start-of-today depends on whether we're local/utc/offset or not.
      var now = time || local__createLocal(),
        sod = cloneWithOffset(now, this).startOf('day'),
        diff = this.diff(sod, 'days', true),
        format = diff < -6 ? 'sameElse' :
          diff < -1 ? 'lastWeek' :
            diff < 0 ? 'lastDay' :
              diff < 1 ? 'sameDay' :
                diff < 2 ? 'nextDay' :
                  diff < 7 ? 'nextWeek' : 'sameElse';
      return this.format(formats && formats[format] || this.localeData().calendar(format, this, local__createLocal(now)));
    }

    function clone () {
      return new Moment(this);
    }

    function isAfter (input, units) {
      var inputMs;
      units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');
      if (units === 'millisecond') {
        input = isMoment(input) ? input : local__createLocal(input);
        return +this > +input;
      } else {
        inputMs = isMoment(input) ? +input : +local__createLocal(input);
        return inputMs < +this.clone().startOf(units);
      }
    }

    function isBefore (input, units) {
      var inputMs;
      units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');
      if (units === 'millisecond') {
        input = isMoment(input) ? input : local__createLocal(input);
        return +this < +input;
      } else {
        inputMs = isMoment(input) ? +input : +local__createLocal(input);
        return +this.clone().endOf(units) < inputMs;
      }
    }

    function isBetween (from, to, units) {
      return this.isAfter(from, units) && this.isBefore(to, units);
    }

    function isSame (input, units) {
      var inputMs;
      units = normalizeUnits(units || 'millisecond');
      if (units === 'millisecond') {
        input = isMoment(input) ? input : local__createLocal(input);
        return +this === +input;
      } else {
        inputMs = +local__createLocal(input);
        return +(this.clone().startOf(units)) <= inputMs && inputMs <= +(this.clone().endOf(units));
      }
    }

    function diff (input, units, asFloat) {
      var that = cloneWithOffset(input, this),
        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4,
        delta, output;

      units = normalizeUnits(units);

      if (units === 'year' || units === 'month' || units === 'quarter') {
        output = monthDiff(this, that);
        if (units === 'quarter') {
          output = output / 3;
        } else if (units === 'year') {
          output = output / 12;
        }
      } else {
        delta = this - that;
        output = units === 'second' ? delta / 1e3 : // 1000
          units === 'minute' ? delta / 6e4 : // 1000 * 60
            units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60
              units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
                units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
                  delta;
      }
      return asFloat ? output : absFloor(output);
    }

    function monthDiff (a, b) {
      // difference in months
      var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
      // b is in (anchor - 1 month, anchor + 1 month)
        anchor = a.clone().add(wholeMonthDiff, 'months'),
        anchor2, adjust;

      if (b - anchor < 0) {
        anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
        // linear across the month
        adjust = (b - anchor) / (anchor - anchor2);
      } else {
        anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
        // linear across the month
        adjust = (b - anchor) / (anchor2 - anchor);
      }

      return -(wholeMonthDiff + adjust);
    }

    utils_hooks__hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';

    function toString () {
      return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    }

    function moment_format__toISOString () {
      var m = this.clone().utc();
      if (0 < m.year() && m.year() <= 9999) {
        if ('function' === typeof Date.prototype.toISOString) {
          // native implementation is ~50x faster, use it when we can
          return this.toDate().toISOString();
        } else {
          return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
        }
      } else {
        return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
      }
    }

    function format (inputString) {
      var output = formatMoment(this, inputString || utils_hooks__hooks.defaultFormat);
      return this.localeData().postformat(output);
    }

    function from (time, withoutSuffix) {
      if (!this.isValid()) {
        return this.localeData().invalidDate();
      }
      return create__createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
    }

    function fromNow (withoutSuffix) {
      return this.from(local__createLocal(), withoutSuffix);
    }

    function to (time, withoutSuffix) {
      if (!this.isValid()) {
        return this.localeData().invalidDate();
      }
      return create__createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
    }

    function toNow (withoutSuffix) {
      return this.to(local__createLocal(), withoutSuffix);
    }

    function locale (key) {
      var newLocaleData;

      if (key === undefined) {
        return this._locale._abbr;
      } else {
        newLocaleData = locale_locales__getLocale(key);
        if (newLocaleData != null) {
          this._locale = newLocaleData;
        }
        return this;
      }
    }

    var lang = deprecate(
      'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
      function (key) {
        if (key === undefined) {
          return this.localeData();
        } else {
          return this.locale(key);
        }
      }
    );

    function localeData () {
      return this._locale;
    }

    function startOf (units) {
      units = normalizeUnits(units);
      // the following switch intentionally omits break keywords
      // to utilize falling through the cases.
      switch (units) {
        case 'year':
          this.month(0);
        /* falls through */
        case 'quarter':
        case 'month':
          this.date(1);
        /* falls through */
        case 'week':
        case 'isoWeek':
        case 'day':
          this.hours(0);
        /* falls through */
        case 'hour':
          this.minutes(0);
        /* falls through */
        case 'minute':
          this.seconds(0);
        /* falls through */
        case 'second':
          this.milliseconds(0);
      }

      // weeks are a special case
      if (units === 'week') {
        this.weekday(0);
      }
      if (units === 'isoWeek') {
        this.isoWeekday(1);
      }

      // quarters are also special
      if (units === 'quarter') {
        this.month(Math.floor(this.month() / 3) * 3);
      }

      return this;
    }

    function endOf (units) {
      units = normalizeUnits(units);
      if (units === undefined || units === 'millisecond') {
        return this;
      }
      return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
    }

    function to_type__valueOf () {
      return +this._d - ((this._offset || 0) * 60000);
    }

    function unix () {
      return Math.floor(+this / 1000);
    }

    function toDate () {
      return this._offset ? new Date(+this) : this._d;
    }

    function toArray () {
      var m = this;
      return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
    }

    function toObject () {
      var m = this;
      return {
        years: m.year(),
        months: m.month(),
        date: m.date(),
        hours: m.hours(),
        minutes: m.minutes(),
        seconds: m.seconds(),
        milliseconds: m.milliseconds()
      };
    }

    function moment_valid__isValid () {
      return valid__isValid(this);
    }

    function parsingFlags () {
      return extend({}, getParsingFlags(this));
    }

    function invalidAt () {
      return getParsingFlags(this).overflow;
    }

    addFormatToken(0, ['gg', 2], 0, function () {
      return this.weekYear() % 100;
    });

    addFormatToken(0, ['GG', 2], 0, function () {
      return this.isoWeekYear() % 100;
    });

    function addWeekYearFormatToken (token, getter) {
      addFormatToken(0, [token, token.length], 0, getter);
    }

    addWeekYearFormatToken('gggg',     'weekYear');
    addWeekYearFormatToken('ggggg',    'weekYear');
    addWeekYearFormatToken('GGGG',  'isoWeekYear');
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

    // ALIASES

    addUnitAlias('weekYear', 'gg');
    addUnitAlias('isoWeekYear', 'GG');

    // PARSING

    addRegexToken('G',      matchSigned);
    addRegexToken('g',      matchSigned);
    addRegexToken('GG',     match1to2, match2);
    addRegexToken('gg',     match1to2, match2);
    addRegexToken('GGGG',   match1to4, match4);
    addRegexToken('gggg',   match1to4, match4);
    addRegexToken('GGGGG',  match1to6, match6);
    addRegexToken('ggggg',  match1to6, match6);

    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
      week[token.substr(0, 2)] = toInt(input);
    });

    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
      week[token] = utils_hooks__hooks.parseTwoDigitYear(input);
    });

    // HELPERS

    function weeksInYear(year, dow, doy) {
      return weekOfYear(local__createLocal([year, 11, 31 + dow - doy]), dow, doy).week;
    }

    // MOMENTS

    function getSetWeekYear (input) {
      var year = weekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).year;
      return input == null ? year : this.add((input - year), 'y');
    }

    function getSetISOWeekYear (input) {
      var year = weekOfYear(this, 1, 4).year;
      return input == null ? year : this.add((input - year), 'y');
    }

    function getISOWeeksInYear () {
      return weeksInYear(this.year(), 1, 4);
    }

    function getWeeksInYear () {
      var weekInfo = this.localeData()._week;
      return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }

    addFormatToken('Q', 0, 0, 'quarter');

    // ALIASES

    addUnitAlias('quarter', 'Q');

    // PARSING

    addRegexToken('Q', match1);
    addParseToken('Q', function (input, array) {
      array[MONTH] = (toInt(input) - 1) * 3;
    });

    // MOMENTS

    function getSetQuarter (input) {
      return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
    }

    addFormatToken('D', ['DD', 2], 'Do', 'date');

    // ALIASES

    addUnitAlias('date', 'D');

    // PARSING

    addRegexToken('D',  match1to2);
    addRegexToken('DD', match1to2, match2);
    addRegexToken('Do', function (isStrict, locale) {
      return isStrict ? locale._ordinalParse : locale._ordinalParseLenient;
    });

    addParseToken(['D', 'DD'], DATE);
    addParseToken('Do', function (input, array) {
      array[DATE] = toInt(input.match(match1to2)[0], 10);
    });

    // MOMENTS

    var getSetDayOfMonth = makeGetSet('Date', true);

    addFormatToken('d', 0, 'do', 'day');

    addFormatToken('dd', 0, 0, function (format) {
      return this.localeData().weekdaysMin(this, format);
    });

    addFormatToken('ddd', 0, 0, function (format) {
      return this.localeData().weekdaysShort(this, format);
    });

    addFormatToken('dddd', 0, 0, function (format) {
      return this.localeData().weekdays(this, format);
    });

    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');

    // ALIASES

    addUnitAlias('day', 'd');
    addUnitAlias('weekday', 'e');
    addUnitAlias('isoWeekday', 'E');

    // PARSING

    addRegexToken('d',    match1to2);
    addRegexToken('e',    match1to2);
    addRegexToken('E',    match1to2);
    addRegexToken('dd',   matchWord);
    addRegexToken('ddd',  matchWord);
    addRegexToken('dddd', matchWord);

    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config) {
      var weekday = config._locale.weekdaysParse(input);
      // if we didn't get a weekday name, mark the date as invalid
      if (weekday != null) {
        week.d = weekday;
      } else {
        getParsingFlags(config).invalidWeekday = input;
      }
    });

    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
      week[token] = toInt(input);
    });

    // HELPERS

    function parseWeekday(input, locale) {
      if (typeof input !== 'string') {
        return input;
      }

      if (!isNaN(input)) {
        return parseInt(input, 10);
      }

      input = locale.weekdaysParse(input);
      if (typeof input === 'number') {
        return input;
      }

      return null;
    }

    // LOCALES

    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
    function localeWeekdays (m) {
      return this._weekdays[m.day()];
    }

    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
    function localeWeekdaysShort (m) {
      return this._weekdaysShort[m.day()];
    }

    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
    function localeWeekdaysMin (m) {
      return this._weekdaysMin[m.day()];
    }

    function localeWeekdaysParse (weekdayName) {
      var i, mom, regex;

      this._weekdaysParse = this._weekdaysParse || [];

      for (i = 0; i < 7; i++) {
        // make the regex if we don't have it already
        if (!this._weekdaysParse[i]) {
          mom = local__createLocal([2000, 1]).day(i);
          regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
          this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
        }
        // test the regex
        if (this._weekdaysParse[i].test(weekdayName)) {
          return i;
        }
      }
    }

    // MOMENTS

    function getSetDayOfWeek (input) {
      var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
      if (input != null) {
        input = parseWeekday(input, this.localeData());
        return this.add(input - day, 'd');
      } else {
        return day;
      }
    }

    function getSetLocaleDayOfWeek (input) {
      var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
      return input == null ? weekday : this.add(input - weekday, 'd');
    }

    function getSetISODayOfWeek (input) {
      // behaves the same as moment#day except
      // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
      // as a setter, sunday should belong to the previous week.
      return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7);
    }

    addFormatToken('H', ['HH', 2], 0, 'hour');
    addFormatToken('h', ['hh', 2], 0, function () {
      return this.hours() % 12 || 12;
    });

    function meridiem (token, lowercase) {
      addFormatToken(token, 0, 0, function () {
        return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
      });
    }

    meridiem('a', true);
    meridiem('A', false);

    // ALIASES

    addUnitAlias('hour', 'h');

    // PARSING

    function matchMeridiem (isStrict, locale) {
      return locale._meridiemParse;
    }

    addRegexToken('a',  matchMeridiem);
    addRegexToken('A',  matchMeridiem);
    addRegexToken('H',  match1to2);
    addRegexToken('h',  match1to2);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);

    addParseToken(['H', 'HH'], HOUR);
    addParseToken(['a', 'A'], function (input, array, config) {
      config._isPm = config._locale.isPM(input);
      config._meridiem = input;
    });
    addParseToken(['h', 'hh'], function (input, array, config) {
      array[HOUR] = toInt(input);
      getParsingFlags(config).bigHour = true;
    });

    // LOCALES

    function localeIsPM (input) {
      // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
      // Using charAt should be more compatible.
      return ((input + '').toLowerCase().charAt(0) === 'p');
    }

    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
    function localeMeridiem (hours, minutes, isLower) {
      if (hours > 11) {
        return isLower ? 'pm' : 'PM';
      } else {
        return isLower ? 'am' : 'AM';
      }
    }


    // MOMENTS

    // Setting the hour should keep the time, because the user explicitly
    // specified which hour he wants. So trying to maintain the same hour (in
    // a new timezone) makes sense. Adding/subtracting hours does not follow
    // this rule.
    var getSetHour = makeGetSet('Hours', true);

    addFormatToken('m', ['mm', 2], 0, 'minute');

    // ALIASES

    addUnitAlias('minute', 'm');

    // PARSING

    addRegexToken('m',  match1to2);
    addRegexToken('mm', match1to2, match2);
    addParseToken(['m', 'mm'], MINUTE);

    // MOMENTS

    var getSetMinute = makeGetSet('Minutes', false);

    addFormatToken('s', ['ss', 2], 0, 'second');

    // ALIASES

    addUnitAlias('second', 's');

    // PARSING

    addRegexToken('s',  match1to2);
    addRegexToken('ss', match1to2, match2);
    addParseToken(['s', 'ss'], SECOND);

    // MOMENTS

    var getSetSecond = makeGetSet('Seconds', false);

    addFormatToken('S', 0, 0, function () {
      return ~~(this.millisecond() / 100);
    });

    addFormatToken(0, ['SS', 2], 0, function () {
      return ~~(this.millisecond() / 10);
    });

    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
    addFormatToken(0, ['SSSS', 4], 0, function () {
      return this.millisecond() * 10;
    });
    addFormatToken(0, ['SSSSS', 5], 0, function () {
      return this.millisecond() * 100;
    });
    addFormatToken(0, ['SSSSSS', 6], 0, function () {
      return this.millisecond() * 1000;
    });
    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
      return this.millisecond() * 10000;
    });
    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
      return this.millisecond() * 100000;
    });
    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
      return this.millisecond() * 1000000;
    });


    // ALIASES

    addUnitAlias('millisecond', 'ms');

    // PARSING

    addRegexToken('S',    match1to3, match1);
    addRegexToken('SS',   match1to3, match2);
    addRegexToken('SSS',  match1to3, match3);

    var token;
    for (token = 'SSSS'; token.length <= 9; token += 'S') {
      addRegexToken(token, matchUnsigned);
    }

    function parseMs(input, array) {
      array[MILLISECOND] = toInt(('0.' + input) * 1000);
    }

    for (token = 'S'; token.length <= 9; token += 'S') {
      addParseToken(token, parseMs);
    }
    // MOMENTS

    var getSetMillisecond = makeGetSet('Milliseconds', false);

    addFormatToken('z',  0, 0, 'zoneAbbr');
    addFormatToken('zz', 0, 0, 'zoneName');

    // MOMENTS

    function getZoneAbbr () {
      return this._isUTC ? 'UTC' : '';
    }

    function getZoneName () {
      return this._isUTC ? 'Coordinated Universal Time' : '';
    }

    var momentPrototype__proto = Moment.prototype;

    momentPrototype__proto.add          = add_subtract__add;
    momentPrototype__proto.calendar     = moment_calendar__calendar;
    momentPrototype__proto.clone        = clone;
    momentPrototype__proto.diff         = diff;
    momentPrototype__proto.endOf        = endOf;
    momentPrototype__proto.format       = format;
    momentPrototype__proto.from         = from;
    momentPrototype__proto.fromNow      = fromNow;
    momentPrototype__proto.to           = to;
    momentPrototype__proto.toNow        = toNow;
    momentPrototype__proto.get          = getSet;
    momentPrototype__proto.invalidAt    = invalidAt;
    momentPrototype__proto.isAfter      = isAfter;
    momentPrototype__proto.isBefore     = isBefore;
    momentPrototype__proto.isBetween    = isBetween;
    momentPrototype__proto.isSame       = isSame;
    momentPrototype__proto.isValid      = moment_valid__isValid;
    momentPrototype__proto.lang         = lang;
    momentPrototype__proto.locale       = locale;
    momentPrototype__proto.localeData   = localeData;
    momentPrototype__proto.max          = prototypeMax;
    momentPrototype__proto.min          = prototypeMin;
    momentPrototype__proto.parsingFlags = parsingFlags;
    momentPrototype__proto.set          = getSet;
    momentPrototype__proto.startOf      = startOf;
    momentPrototype__proto.subtract     = add_subtract__subtract;
    momentPrototype__proto.toArray      = toArray;
    momentPrototype__proto.toObject     = toObject;
    momentPrototype__proto.toDate       = toDate;
    momentPrototype__proto.toISOString  = moment_format__toISOString;
    momentPrototype__proto.toJSON       = moment_format__toISOString;
    momentPrototype__proto.toString     = toString;
    momentPrototype__proto.unix         = unix;
    momentPrototype__proto.valueOf      = to_type__valueOf;

    // Year
    momentPrototype__proto.year       = getSetYear;
    momentPrototype__proto.isLeapYear = getIsLeapYear;

    // Week Year
    momentPrototype__proto.weekYear    = getSetWeekYear;
    momentPrototype__proto.isoWeekYear = getSetISOWeekYear;

    // Quarter
    momentPrototype__proto.quarter = momentPrototype__proto.quarters = getSetQuarter;

    // Month
    momentPrototype__proto.month       = getSetMonth;
    momentPrototype__proto.daysInMonth = getDaysInMonth;

    // Week
    momentPrototype__proto.week           = momentPrototype__proto.weeks        = getSetWeek;
    momentPrototype__proto.isoWeek        = momentPrototype__proto.isoWeeks     = getSetISOWeek;
    momentPrototype__proto.weeksInYear    = getWeeksInYear;
    momentPrototype__proto.isoWeeksInYear = getISOWeeksInYear;

    // Day
    momentPrototype__proto.date       = getSetDayOfMonth;
    momentPrototype__proto.day        = momentPrototype__proto.days             = getSetDayOfWeek;
    momentPrototype__proto.weekday    = getSetLocaleDayOfWeek;
    momentPrototype__proto.isoWeekday = getSetISODayOfWeek;
    momentPrototype__proto.dayOfYear  = getSetDayOfYear;

    // Hour
    momentPrototype__proto.hour = momentPrototype__proto.hours = getSetHour;

    // Minute
    momentPrototype__proto.minute = momentPrototype__proto.minutes = getSetMinute;

    // Second
    momentPrototype__proto.second = momentPrototype__proto.seconds = getSetSecond;

    // Millisecond
    momentPrototype__proto.millisecond = momentPrototype__proto.milliseconds = getSetMillisecond;

    // Offset
    momentPrototype__proto.utcOffset            = getSetOffset;
    momentPrototype__proto.utc                  = setOffsetToUTC;
    momentPrototype__proto.local                = setOffsetToLocal;
    momentPrototype__proto.parseZone            = setOffsetToParsedOffset;
    momentPrototype__proto.hasAlignedHourOffset = hasAlignedHourOffset;
    momentPrototype__proto.isDST                = isDaylightSavingTime;
    momentPrototype__proto.isDSTShifted         = isDaylightSavingTimeShifted;
    momentPrototype__proto.isLocal              = isLocal;
    momentPrototype__proto.isUtcOffset          = isUtcOffset;
    momentPrototype__proto.isUtc                = isUtc;
    momentPrototype__proto.isUTC                = isUtc;

    // Timezone
    momentPrototype__proto.zoneAbbr = getZoneAbbr;
    momentPrototype__proto.zoneName = getZoneName;

    // Deprecations
    momentPrototype__proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
    momentPrototype__proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
    momentPrototype__proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
    momentPrototype__proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779', getSetZone);

    var momentPrototype = momentPrototype__proto;

    function moment__createUnix (input) {
      return local__createLocal(input * 1000);
    }

    function moment__createInZone () {
      return local__createLocal.apply(null, arguments).parseZone();
    }

    var defaultCalendar = {
      sameDay : '[Today at] LT',
      nextDay : '[Tomorrow at] LT',
      nextWeek : 'dddd [at] LT',
      lastDay : '[Yesterday at] LT',
      lastWeek : '[Last] dddd [at] LT',
      sameElse : 'L'
    };

    function locale_calendar__calendar (key, mom, now) {
      var output = this._calendar[key];
      return typeof output === 'function' ? output.call(mom, now) : output;
    }

    var defaultLongDateFormat = {
      LTS  : 'h:mm:ss A',
      LT   : 'h:mm A',
      L    : 'MM/DD/YYYY',
      LL   : 'MMMM D, YYYY',
      LLL  : 'MMMM D, YYYY h:mm A',
      LLLL : 'dddd, MMMM D, YYYY h:mm A'
    };

    function longDateFormat (key) {
      var format = this._longDateFormat[key],
        formatUpper = this._longDateFormat[key.toUpperCase()];

      if (format || !formatUpper) {
        return format;
      }

      this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
        return val.slice(1);
      });

      return this._longDateFormat[key];
    }

    var defaultInvalidDate = 'Invalid date';

    function invalidDate () {
      return this._invalidDate;
    }

    var defaultOrdinal = '%d';
    var defaultOrdinalParse = /\d{1,2}/;

    function ordinal (number) {
      return this._ordinal.replace('%d', number);
    }

    function preParsePostFormat (string) {
      return string;
    }

    var defaultRelativeTime = {
      future : 'in %s',
      past   : '%s ago',
      s  : 'a few seconds',
      m  : 'a minute',
      mm : '%d minutes',
      h  : 'an hour',
      hh : '%d hours',
      d  : 'a day',
      dd : '%d days',
      M  : 'a month',
      MM : '%d months',
      y  : 'a year',
      yy : '%d years'
    };

    function relative__relativeTime (number, withoutSuffix, string, isFuture) {
      var output = this._relativeTime[string];
      return (typeof output === 'function') ?
        output(number, withoutSuffix, string, isFuture) :
        output.replace(/%d/i, number);
    }

    function pastFuture (diff, output) {
      var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
      return typeof format === 'function' ? format(output) : format.replace(/%s/i, output);
    }

    function locale_set__set (config) {
      var prop, i;
      for (i in config) {
        prop = config[i];
        if (typeof prop === 'function') {
          this[i] = prop;
        } else {
          this['_' + i] = prop;
        }
      }
      // Lenient ordinal parsing accepts just a number in addition to
      // number + (possibly) stuff coming from _ordinalParseLenient.
      this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + (/\d{1,2}/).source);
    }

    var prototype__proto = Locale.prototype;

    prototype__proto._calendar       = defaultCalendar;
    prototype__proto.calendar        = locale_calendar__calendar;
    prototype__proto._longDateFormat = defaultLongDateFormat;
    prototype__proto.longDateFormat  = longDateFormat;
    prototype__proto._invalidDate    = defaultInvalidDate;
    prototype__proto.invalidDate     = invalidDate;
    prototype__proto._ordinal        = defaultOrdinal;
    prototype__proto.ordinal         = ordinal;
    prototype__proto._ordinalParse   = defaultOrdinalParse;
    prototype__proto.preparse        = preParsePostFormat;
    prototype__proto.postformat      = preParsePostFormat;
    prototype__proto._relativeTime   = defaultRelativeTime;
    prototype__proto.relativeTime    = relative__relativeTime;
    prototype__proto.pastFuture      = pastFuture;
    prototype__proto.set             = locale_set__set;

    // Month
    prototype__proto.months       =        localeMonths;
    prototype__proto._months      = defaultLocaleMonths;
    prototype__proto.monthsShort  =        localeMonthsShort;
    prototype__proto._monthsShort = defaultLocaleMonthsShort;
    prototype__proto.monthsParse  =        localeMonthsParse;

    // Week
    prototype__proto.week = localeWeek;
    prototype__proto._week = defaultLocaleWeek;
    prototype__proto.firstDayOfYear = localeFirstDayOfYear;
    prototype__proto.firstDayOfWeek = localeFirstDayOfWeek;

    // Day of Week
    prototype__proto.weekdays       =        localeWeekdays;
    prototype__proto._weekdays      = defaultLocaleWeekdays;
    prototype__proto.weekdaysMin    =        localeWeekdaysMin;
    prototype__proto._weekdaysMin   = defaultLocaleWeekdaysMin;
    prototype__proto.weekdaysShort  =        localeWeekdaysShort;
    prototype__proto._weekdaysShort = defaultLocaleWeekdaysShort;
    prototype__proto.weekdaysParse  =        localeWeekdaysParse;

    // Hours
    prototype__proto.isPM = localeIsPM;
    prototype__proto._meridiemParse = defaultLocaleMeridiemParse;
    prototype__proto.meridiem = localeMeridiem;

    function lists__get (format, index, field, setter) {
      var locale = locale_locales__getLocale();
      var utc = create_utc__createUTC().set(setter, index);
      return locale[field](utc, format);
    }

    function list (format, index, field, count, setter) {
      if (typeof format === 'number') {
        index = format;
        format = undefined;
      }

      format = format || '';

      if (index != null) {
        return lists__get(format, index, field, setter);
      }

      var i;
      var out = [];
      for (i = 0; i < count; i++) {
        out[i] = lists__get(format, i, field, setter);
      }
      return out;
    }

    function lists__listMonths (format, index) {
      return list(format, index, 'months', 12, 'month');
    }

    function lists__listMonthsShort (format, index) {
      return list(format, index, 'monthsShort', 12, 'month');
    }

    function lists__listWeekdays (format, index) {
      return list(format, index, 'weekdays', 7, 'day');
    }

    function lists__listWeekdaysShort (format, index) {
      return list(format, index, 'weekdaysShort', 7, 'day');
    }

    function lists__listWeekdaysMin (format, index) {
      return list(format, index, 'weekdaysMin', 7, 'day');
    }

    locale_locales__getSetGlobalLocale('en', {
      ordinalParse: /\d{1,2}(th|st|nd|rd)/,
      ordinal : function (number) {
        var b = number % 10,
          output = (toInt(number % 100 / 10) === 1) ? 'th' :
            (b === 1) ? 'st' :
              (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
        return number + output;
      }
    });

    // Side effect imports
    utils_hooks__hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', locale_locales__getSetGlobalLocale);
    utils_hooks__hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', locale_locales__getLocale);

    var mathAbs = Math.abs;

    function duration_abs__abs () {
      var data           = this._data;

      this._milliseconds = mathAbs(this._milliseconds);
      this._days         = mathAbs(this._days);
      this._months       = mathAbs(this._months);

      data.milliseconds  = mathAbs(data.milliseconds);
      data.seconds       = mathAbs(data.seconds);
      data.minutes       = mathAbs(data.minutes);
      data.hours         = mathAbs(data.hours);
      data.months        = mathAbs(data.months);
      data.years         = mathAbs(data.years);

      return this;
    }

    function duration_add_subtract__addSubtract (duration, input, value, direction) {
      var other = create__createDuration(input, value);

      duration._milliseconds += direction * other._milliseconds;
      duration._days         += direction * other._days;
      duration._months       += direction * other._months;

      return duration._bubble();
    }

    // supports only 2.0-style add(1, 's') or add(duration)
    function duration_add_subtract__add (input, value) {
      return duration_add_subtract__addSubtract(this, input, value, 1);
    }

    // supports only 2.0-style subtract(1, 's') or subtract(duration)
    function duration_add_subtract__subtract (input, value) {
      return duration_add_subtract__addSubtract(this, input, value, -1);
    }

    function absCeil (number) {
      if (number < 0) {
        return Math.floor(number);
      } else {
        return Math.ceil(number);
      }
    }

    function bubble () {
      var milliseconds = this._milliseconds;
      var days         = this._days;
      var months       = this._months;
      var data         = this._data;
      var seconds, minutes, hours, years, monthsFromDays;

      // if we have a mix of positive and negative values, bubble down first
      // check: https://github.com/moment/moment/issues/2166
      if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
        (milliseconds <= 0 && days <= 0 && months <= 0))) {
        milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
        days = 0;
        months = 0;
      }

      // The following code bubbles up values, see the tests for
      // examples of what that means.
      data.milliseconds = milliseconds % 1000;

      seconds           = absFloor(milliseconds / 1000);
      data.seconds      = seconds % 60;

      minutes           = absFloor(seconds / 60);
      data.minutes      = minutes % 60;

      hours             = absFloor(minutes / 60);
      data.hours        = hours % 24;

      days += absFloor(hours / 24);

      // convert days to months
      monthsFromDays = absFloor(daysToMonths(days));
      months += monthsFromDays;
      days -= absCeil(monthsToDays(monthsFromDays));

      // 12 months -> 1 year
      years = absFloor(months / 12);
      months %= 12;

      data.days   = days;
      data.months = months;
      data.years  = years;

      return this;
    }

    function daysToMonths (days) {
      // 400 years have 146097 days (taking into account leap year rules)
      // 400 years have 12 months === 4800
      return days * 4800 / 146097;
    }

    function monthsToDays (months) {
      // the reverse of daysToMonths
      return months * 146097 / 4800;
    }

    function as (units) {
      var days;
      var months;
      var milliseconds = this._milliseconds;

      units = normalizeUnits(units);

      if (units === 'month' || units === 'year') {
        days   = this._days   + milliseconds / 864e5;
        months = this._months + daysToMonths(days);
        return units === 'month' ? months : months / 12;
      } else {
        // handle milliseconds separately because of floating point math errors (issue #1867)
        days = this._days + Math.round(monthsToDays(this._months));
        switch (units) {
          case 'week'   : return days / 7     + milliseconds / 6048e5;
          case 'day'    : return days         + milliseconds / 864e5;
          case 'hour'   : return days * 24    + milliseconds / 36e5;
          case 'minute' : return days * 1440  + milliseconds / 6e4;
          case 'second' : return days * 86400 + milliseconds / 1000;
          // Math.floor prevents floating point math errors here
          case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
          default: throw new Error('Unknown unit ' + units);
        }
      }
    }

    // TODO: Use this.as('ms')?
    function duration_as__valueOf () {
      return (
        this._milliseconds +
        this._days * 864e5 +
        (this._months % 12) * 2592e6 +
        toInt(this._months / 12) * 31536e6
      );
    }

    function makeAs (alias) {
      return function () {
        return this.as(alias);
      };
    }

    var asMilliseconds = makeAs('ms');
    var asSeconds      = makeAs('s');
    var asMinutes      = makeAs('m');
    var asHours        = makeAs('h');
    var asDays         = makeAs('d');
    var asWeeks        = makeAs('w');
    var asMonths       = makeAs('M');
    var asYears        = makeAs('y');

    function duration_get__get (units) {
      units = normalizeUnits(units);
      return this[units + 's']();
    }

    function makeGetter(name) {
      return function () {
        return this._data[name];
      };
    }

    var milliseconds = makeGetter('milliseconds');
    var seconds      = makeGetter('seconds');
    var minutes      = makeGetter('minutes');
    var hours        = makeGetter('hours');
    var days         = makeGetter('days');
    var months       = makeGetter('months');
    var years        = makeGetter('years');

    function weeks () {
      return absFloor(this.days() / 7);
    }

    var round = Math.round;
    var thresholds = {
      s: 45,  // seconds to minute
      m: 45,  // minutes to hour
      h: 22,  // hours to day
      d: 26,  // days to month
      M: 11   // months to year
    };

    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
      return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }

    function duration_humanize__relativeTime (posNegDuration, withoutSuffix, locale) {
      var duration = create__createDuration(posNegDuration).abs();
      var seconds  = round(duration.as('s'));
      var minutes  = round(duration.as('m'));
      var hours    = round(duration.as('h'));
      var days     = round(duration.as('d'));
      var months   = round(duration.as('M'));
      var years    = round(duration.as('y'));

      var a = seconds < thresholds.s && ['s', seconds]  ||
        minutes === 1          && ['m']           ||
        minutes < thresholds.m && ['mm', minutes] ||
        hours   === 1          && ['h']           ||
        hours   < thresholds.h && ['hh', hours]   ||
        days    === 1          && ['d']           ||
        days    < thresholds.d && ['dd', days]    ||
        months  === 1          && ['M']           ||
        months  < thresholds.M && ['MM', months]  ||
        years   === 1          && ['y']           || ['yy', years];

      a[2] = withoutSuffix;
      a[3] = +posNegDuration > 0;
      a[4] = locale;
      return substituteTimeAgo.apply(null, a);
    }

    // This function allows you to set a threshold for relative time strings
    function duration_humanize__getSetRelativeTimeThreshold (threshold, limit) {
      if (thresholds[threshold] === undefined) {
        return false;
      }
      if (limit === undefined) {
        return thresholds[threshold];
      }
      thresholds[threshold] = limit;
      return true;
    }

    function humanize (withSuffix) {
      var locale = this.localeData();
      var output = duration_humanize__relativeTime(this, !withSuffix, locale);

      if (withSuffix) {
        output = locale.pastFuture(+this, output);
      }

      return locale.postformat(output);
    }

    var iso_string__abs = Math.abs;

    function iso_string__toISOString() {
      // for ISO strings we do not use the normal bubbling rules:
      //  * milliseconds bubble up until they become hours
      //  * days do not bubble at all
      //  * months bubble up until they become years
      // This is because there is no context-free conversion between hours and days
      // (think of clock changes)
      // and also not between days and months (28-31 days per month)
      var seconds = iso_string__abs(this._milliseconds) / 1000;
      var days         = iso_string__abs(this._days);
      var months       = iso_string__abs(this._months);
      var minutes, hours, years;

      // 3600 seconds -> 60 minutes -> 1 hour
      minutes           = absFloor(seconds / 60);
      hours             = absFloor(minutes / 60);
      seconds %= 60;
      minutes %= 60;

      // 12 months -> 1 year
      years  = absFloor(months / 12);
      months %= 12;


      // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
      var Y = years;
      var M = months;
      var D = days;
      var h = hours;
      var m = minutes;
      var s = seconds;
      var total = this.asSeconds();

      if (!total) {
        // this is the same as C#'s (Noda) and python (isodate)...
        // but not other JS (goog.date)
        return 'P0D';
      }

      return (total < 0 ? '-' : '') +
        'P' +
        (Y ? Y + 'Y' : '') +
        (M ? M + 'M' : '') +
        (D ? D + 'D' : '') +
        ((h || m || s) ? 'T' : '') +
        (h ? h + 'H' : '') +
        (m ? m + 'M' : '') +
        (s ? s + 'S' : '');
    }

    var duration_prototype__proto = Duration.prototype;

    duration_prototype__proto.abs            = duration_abs__abs;
    duration_prototype__proto.add            = duration_add_subtract__add;
    duration_prototype__proto.subtract       = duration_add_subtract__subtract;
    duration_prototype__proto.as             = as;
    duration_prototype__proto.asMilliseconds = asMilliseconds;
    duration_prototype__proto.asSeconds      = asSeconds;
    duration_prototype__proto.asMinutes      = asMinutes;
    duration_prototype__proto.asHours        = asHours;
    duration_prototype__proto.asDays         = asDays;
    duration_prototype__proto.asWeeks        = asWeeks;
    duration_prototype__proto.asMonths       = asMonths;
    duration_prototype__proto.asYears        = asYears;
    duration_prototype__proto.valueOf        = duration_as__valueOf;
    duration_prototype__proto._bubble        = bubble;
    duration_prototype__proto.get            = duration_get__get;
    duration_prototype__proto.milliseconds   = milliseconds;
    duration_prototype__proto.seconds        = seconds;
    duration_prototype__proto.minutes        = minutes;
    duration_prototype__proto.hours          = hours;
    duration_prototype__proto.days           = days;
    duration_prototype__proto.weeks          = weeks;
    duration_prototype__proto.months         = months;
    duration_prototype__proto.years          = years;
    duration_prototype__proto.humanize       = humanize;
    duration_prototype__proto.toISOString    = iso_string__toISOString;
    duration_prototype__proto.toString       = iso_string__toISOString;
    duration_prototype__proto.toJSON         = iso_string__toISOString;
    duration_prototype__proto.locale         = locale;
    duration_prototype__proto.localeData     = localeData;

    // Deprecations
    duration_prototype__proto.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', iso_string__toISOString);
    duration_prototype__proto.lang = lang;

    // Side effect imports

    addFormatToken('X', 0, 0, 'unix');
    addFormatToken('x', 0, 0, 'valueOf');

    // PARSING

    addRegexToken('x', matchSigned);
    addRegexToken('X', matchTimestamp);
    addParseToken('X', function (input, array, config) {
      config._d = new Date(parseFloat(input, 10) * 1000);
    });
    addParseToken('x', function (input, array, config) {
      config._d = new Date(toInt(input));
    });

    // Side effect imports


    utils_hooks__hooks.version = '2.10.6';

    setHookCallback(local__createLocal);

    utils_hooks__hooks.fn                    = momentPrototype;
    utils_hooks__hooks.min                   = min;
    utils_hooks__hooks.max                   = max;
    utils_hooks__hooks.utc                   = create_utc__createUTC;
    utils_hooks__hooks.unix                  = moment__createUnix;
    utils_hooks__hooks.months                = lists__listMonths;
    utils_hooks__hooks.isDate                = isDate;
    utils_hooks__hooks.locale                = locale_locales__getSetGlobalLocale;
    utils_hooks__hooks.invalid               = valid__createInvalid;
    utils_hooks__hooks.duration              = create__createDuration;
    utils_hooks__hooks.isMoment              = isMoment;
    utils_hooks__hooks.weekdays              = lists__listWeekdays;
    utils_hooks__hooks.parseZone             = moment__createInZone;
    utils_hooks__hooks.localeData            = locale_locales__getLocale;
    utils_hooks__hooks.isDuration            = isDuration;
    utils_hooks__hooks.monthsShort           = lists__listMonthsShort;
    utils_hooks__hooks.weekdaysMin           = lists__listWeekdaysMin;
    utils_hooks__hooks.defineLocale          = defineLocale;
    utils_hooks__hooks.weekdaysShort         = lists__listWeekdaysShort;
    utils_hooks__hooks.normalizeUnits        = normalizeUnits;
    utils_hooks__hooks.relativeTimeThreshold = duration_humanize__getSetRelativeTimeThreshold;

    var _moment = utils_hooks__hooks;

    return _moment;

  }));
},{}],116:[function(require,module,exports){
  'use strict';
  var propIsEnumerable = Object.prototype.propertyIsEnumerable;

  function ToObject(val) {
    if (val == null) {
      throw new TypeError('Object.assign cannot be called with null or undefined');
    }

    return Object(val);
  }

  function ownEnumerableKeys(obj) {
    var keys = Object.getOwnPropertyNames(obj);

    if (Object.getOwnPropertySymbols) {
      keys = keys.concat(Object.getOwnPropertySymbols(obj));
    }

    return keys.filter(function (key) {
      return propIsEnumerable.call(obj, key);
    });
  }

  module.exports = Object.assign || function (target, source) {
      var from;
      var keys;
      var to = ToObject(target);

      for (var s = 1; s < arguments.length; s++) {
        from = arguments[s];
        keys = ownEnumerableKeys(Object(from));

        for (var i = 0; i < keys.length; i++) {
          to[keys[i]] = from[keys[i]];
        }
      }

      return to;
    };

},{}],117:[function(require,module,exports){
  'use strict';

  var _extends = require('babel-runtime/helpers/extends')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _PanelGroup = require('./PanelGroup');

  var _PanelGroup2 = _interopRequireDefault(_PanelGroup);

  var Accordion = _react2['default'].createClass({
    displayName: 'Accordion',

    render: function render() {
      return _react2['default'].createElement(
        _PanelGroup2['default'],
        _extends({}, this.props, { accordion: true }),
        this.props.children
      );
    }
  });

  exports['default'] = Accordion;
  module.exports = exports['default'];
},{"./PanelGroup":170,"babel-runtime/helpers/extends":208,"babel-runtime/helpers/interop-require-default":210,"react":482}],118:[function(require,module,exports){
  'use strict';

  var _extends = require('babel-runtime/helpers/extends')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _classnames = require('classnames');

  var _classnames2 = _interopRequireDefault(_classnames);

  var _AffixMixin = require('./AffixMixin');

  var _AffixMixin2 = _interopRequireDefault(_AffixMixin);

  var Affix = _react2['default'].createClass({
    displayName: 'Affix',

    mixins: [_AffixMixin2['default']],

    render: function render() {
      var holderStyle = _extends({
        top: this.state.affixPositionTop
      }, this.props.style);

      // eslint-disable-line react/prop-types
      return _react2['default'].createElement(
        'div',
        _extends({}, this.props, {
          className: _classnames2['default'](this.props.className, this.state.affixClass),
          style: holderStyle }),
        this.props.children
      );
    }
  });

  exports['default'] = Affix;
  module.exports = exports['default'];
  // we don't want to expose the `style` property
},{"./AffixMixin":119,"babel-runtime/helpers/extends":208,"babel-runtime/helpers/interop-require-default":210,"classnames":40,"react":482}],119:[function(require,module,exports){
  'use strict';

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _utilsDomUtils = require('./utils/domUtils');

  var _utilsDomUtils2 = _interopRequireDefault(_utilsDomUtils);

  var _utilsEventListener = require('./utils/EventListener');

  var _utilsEventListener2 = _interopRequireDefault(_utilsEventListener);

  var AffixMixin = {
    propTypes: {
      offset: _react2['default'].PropTypes.number,
      offsetTop: _react2['default'].PropTypes.number,
      offsetBottom: _react2['default'].PropTypes.number
    },

    getInitialState: function getInitialState() {
      return {
        affixClass: 'affix-top'
      };
    },

    getPinnedOffset: function getPinnedOffset(DOMNode) {
      if (this.pinnedOffset) {
        return this.pinnedOffset;
      }

      DOMNode.className = DOMNode.className.replace(/affix-top|affix-bottom|affix/, '');
      DOMNode.className += DOMNode.className.length ? ' affix' : 'affix';

      this.pinnedOffset = _utilsDomUtils2['default'].getOffset(DOMNode).top - window.pageYOffset;

      return this.pinnedOffset;
    },

    checkPosition: function checkPosition() {
      var DOMNode = undefined,
        scrollHeight = undefined,
        scrollTop = undefined,
        position = undefined,
        offsetTop = undefined,
        offsetBottom = undefined,
        affix = undefined,
        affixType = undefined,
        affixPositionTop = undefined;

      // TODO: or not visible
      if (!this.isMounted()) {
        return;
      }

      DOMNode = _react2['default'].findDOMNode(this);
      scrollHeight = _utilsDomUtils2['default'].getDocumentHeight();
      scrollTop = window.pageYOffset;
      position = _utilsDomUtils2['default'].getOffset(DOMNode);

      if (this.affixed === 'top') {
        position.top += scrollTop;
      }

      offsetTop = this.props.offsetTop != null ? this.props.offsetTop : this.props.offset;
      offsetBottom = this.props.offsetBottom != null ? this.props.offsetBottom : this.props.offset;

      if (offsetTop == null && offsetBottom == null) {
        return;
      }
      if (offsetTop == null) {
        offsetTop = 0;
      }
      if (offsetBottom == null) {
        offsetBottom = 0;
      }

      if (this.unpin != null && scrollTop + this.unpin <= position.top) {
        affix = false;
      } else if (offsetBottom != null && position.top + DOMNode.offsetHeight >= scrollHeight - offsetBottom) {
        affix = 'bottom';
      } else if (offsetTop != null && scrollTop <= offsetTop) {
        affix = 'top';
      } else {
        affix = false;
      }

      if (this.affixed === affix) {
        return;
      }

      if (this.unpin != null) {
        DOMNode.style.top = '';
      }

      affixType = 'affix' + (affix ? '-' + affix : '');

      this.affixed = affix;
      this.unpin = affix === 'bottom' ? this.getPinnedOffset(DOMNode) : null;

      if (affix === 'bottom') {
        DOMNode.className = DOMNode.className.replace(/affix-top|affix-bottom|affix/, 'affix-bottom');
        affixPositionTop = scrollHeight - offsetBottom - DOMNode.offsetHeight - _utilsDomUtils2['default'].getOffset(DOMNode).top;
      }

      this.setState({
        affixClass: affixType,
        affixPositionTop: affixPositionTop
      });
    },

    checkPositionWithEventLoop: function checkPositionWithEventLoop() {
      setTimeout(this.checkPosition, 0);
    },

    componentDidMount: function componentDidMount() {
      this._onWindowScrollListener = _utilsEventListener2['default'].listen(window, 'scroll', this.checkPosition);
      this._onDocumentClickListener = _utilsEventListener2['default'].listen(_utilsDomUtils2['default'].ownerDocument(this), 'click', this.checkPositionWithEventLoop);
    },

    componentWillUnmount: function componentWillUnmount() {
      if (this._onWindowScrollListener) {
        this._onWindowScrollListener.remove();
      }

      if (this._onDocumentClickListener) {
        this._onDocumentClickListener.remove();
      }
    },

    componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
      if (prevState.affixClass === this.state.affixClass) {
        this.checkPositionWithEventLoop();
      }
    }
  };

  exports['default'] = AffixMixin;
  module.exports = exports['default'];
},{"./utils/EventListener":191,"./utils/domUtils":200,"babel-runtime/helpers/interop-require-default":210,"react":482}],120:[function(require,module,exports){
  'use strict';

  var _extends = require('babel-runtime/helpers/extends')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _classnames = require('classnames');

  var _classnames2 = _interopRequireDefault(_classnames);

  var _BootstrapMixin = require('./BootstrapMixin');

  var _BootstrapMixin2 = _interopRequireDefault(_BootstrapMixin);

  var Alert = _react2['default'].createClass({
    displayName: 'Alert',

    mixins: [_BootstrapMixin2['default']],

    propTypes: {
      onDismiss: _react2['default'].PropTypes.func,
      dismissAfter: _react2['default'].PropTypes.number,
      closeLabel: _react2['default'].PropTypes.string
    },

    getDefaultProps: function getDefaultProps() {
      return {
        bsClass: 'alert',
        bsStyle: 'info',
        closeLabel: 'Close Alert'
      };
    },

    renderDismissButton: function renderDismissButton() {
      return _react2['default'].createElement(
        'button',
        {
          type: 'button',
          className: 'close',
          'aria-label': this.props.closeLabel,
          onClick: this.props.onDismiss },
        _react2['default'].createElement(
          'span',
          { 'aria-hidden': 'true' },
          '×'
        )
      );
    },

    render: function render() {
      var classes = this.getBsClassSet();
      var isDismissable = !!this.props.onDismiss;

      classes['alert-dismissable'] = isDismissable;

      return _react2['default'].createElement(
        'div',
        _extends({}, this.props, { role: 'alert', className: _classnames2['default'](this.props.className, classes) }),
        isDismissable ? this.renderDismissButton() : null,
        this.props.children
      );
    },

    componentDidMount: function componentDidMount() {
      if (this.props.dismissAfter && this.props.onDismiss) {
        this.dismissTimer = setTimeout(this.props.onDismiss, this.props.dismissAfter);
      }
    },

    componentWillUnmount: function componentWillUnmount() {
      clearTimeout(this.dismissTimer);
    }
  });

  exports['default'] = Alert;
  module.exports = exports['default'];
},{"./BootstrapMixin":122,"babel-runtime/helpers/extends":208,"babel-runtime/helpers/interop-require-default":210,"classnames":40,"react":482}],121:[function(require,module,exports){
  'use strict';

  var _extends = require('babel-runtime/helpers/extends')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _utilsValidComponentChildren = require('./utils/ValidComponentChildren');

  var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

  var _classnames = require('classnames');

  var _classnames2 = _interopRequireDefault(_classnames);

  var Badge = _react2['default'].createClass({
    displayName: 'Badge',

    propTypes: {
      pullRight: _react2['default'].PropTypes.bool
    },

    getDefaultProps: function getDefaultProps() {
      return {
        pullRight: false
      };
    },

    hasContent: function hasContent() {
      return _utilsValidComponentChildren2['default'].hasValidComponent(this.props.children) || _react2['default'].Children.count(this.props.children) > 1 || typeof this.props.children === 'string' || typeof this.props.children === 'number';
    },

    render: function render() {
      var classes = {
        'pull-right': this.props.pullRight,
        'badge': this.hasContent()
      };
      return _react2['default'].createElement(
        'span',
        _extends({}, this.props, {
          className: _classnames2['default'](this.props.className, classes) }),
        this.props.children
      );
    }
  });

  exports['default'] = Badge;
  module.exports = exports['default'];
},{"./utils/ValidComponentChildren":193,"babel-runtime/helpers/extends":208,"babel-runtime/helpers/interop-require-default":210,"classnames":40,"react":482}],122:[function(require,module,exports){
  'use strict';

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _styleMaps = require('./styleMaps');

  var _styleMaps2 = _interopRequireDefault(_styleMaps);

  var _utilsCustomPropTypes = require('./utils/CustomPropTypes');

  var _utilsCustomPropTypes2 = _interopRequireDefault(_utilsCustomPropTypes);

  var BootstrapMixin = {
    propTypes: {
      /**
       * bootstrap className
       * @private
       */
      bsClass: _utilsCustomPropTypes2['default'].keyOf(_styleMaps2['default'].CLASSES),
      /**
       * Style variants
       * @type {("default"|"primary"|"success"|"info"|"warning"|"danger"|"link")}
       */
      bsStyle: _react2['default'].PropTypes.oneOf(_styleMaps2['default'].STYLES),
      /**
       * Size variants
       * @type {("xsmall"|"small"|"medium"|"large"|"xs"|"sm"|"md"|"lg")}
       */
      bsSize: _utilsCustomPropTypes2['default'].keyOf(_styleMaps2['default'].SIZES)
    },

    getBsClassSet: function getBsClassSet() {
      var classes = {};

      var bsClass = this.props.bsClass && _styleMaps2['default'].CLASSES[this.props.bsClass];
      if (bsClass) {
        classes[bsClass] = true;

        var prefix = bsClass + '-';

        var bsSize = this.props.bsSize && _styleMaps2['default'].SIZES[this.props.bsSize];
        if (bsSize) {
          classes[prefix + bsSize] = true;
        }

        if (this.props.bsStyle) {
          if (_styleMaps2['default'].STYLES.indexOf(this.props.bsStyle) >= 0) {
            classes[prefix + this.props.bsStyle] = true;
          } else {
            classes[this.props.bsStyle] = true;
          }
        }
      }

      return classes;
    },

    prefixClass: function prefixClass(subClass) {
      return _styleMaps2['default'].CLASSES[this.props.bsClass] + '-' + subClass;
    }
  };

  exports['default'] = BootstrapMixin;
  module.exports = exports['default'];
},{"./styleMaps":189,"./utils/CustomPropTypes":190,"babel-runtime/helpers/interop-require-default":210,"react":482}],123:[function(require,module,exports){
  'use strict';

  var _extends = require('babel-runtime/helpers/extends')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _classnames = require('classnames');

  var _classnames2 = _interopRequireDefault(_classnames);

  var _BootstrapMixin = require('./BootstrapMixin');

  var _BootstrapMixin2 = _interopRequireDefault(_BootstrapMixin);

  var _utilsCustomPropTypes = require('./utils/CustomPropTypes');

  var _utilsCustomPropTypes2 = _interopRequireDefault(_utilsCustomPropTypes);

  var _ButtonInput = require('./ButtonInput');

  var _ButtonInput2 = _interopRequireDefault(_ButtonInput);

  var Button = _react2['default'].createClass({
    displayName: 'Button',

    mixins: [_BootstrapMixin2['default']],

    propTypes: {
      active: _react2['default'].PropTypes.bool,
      disabled: _react2['default'].PropTypes.bool,
      block: _react2['default'].PropTypes.bool,
      navItem: _react2['default'].PropTypes.bool,
      navDropdown: _react2['default'].PropTypes.bool,
      /**
       * You can use a custom element for this component
       */
      componentClass: _utilsCustomPropTypes2['default'].elementType,
      href: _react2['default'].PropTypes.string,
      target: _react2['default'].PropTypes.string,
      /**
       * Defines HTML button type Attribute
       * @type {("button"|"reset"|"submit")}
       * @defaultValue 'button'
       */
      type: _react2['default'].PropTypes.oneOf(_ButtonInput2['default'].types)
    },

    getDefaultProps: function getDefaultProps() {
      return {
        active: false,
        block: false,
        bsClass: 'button',
        bsStyle: 'default',
        disabled: false,
        navItem: false,
        navDropdown: false
      };
    },

    render: function render() {
      var classes = this.props.navDropdown ? {} : this.getBsClassSet();
      var renderFuncName = undefined;

      classes = _extends({
        active: this.props.active,
        'btn-block': this.props.block
      }, classes);

      if (this.props.navItem) {
        return this.renderNavItem(classes);
      }

      renderFuncName = this.props.href || this.props.target || this.props.navDropdown ? 'renderAnchor' : 'renderButton';

      return this[renderFuncName](classes);
    },

    renderAnchor: function renderAnchor(classes) {

      var Component = this.props.componentClass || 'a';
      var href = this.props.href || '#';
      classes.disabled = this.props.disabled;

      return _react2['default'].createElement(
        Component,
        _extends({}, this.props, {
          href: href,
          className: _classnames2['default'](this.props.className, classes),
          role: 'button' }),
        this.props.children
      );
    },

    renderButton: function renderButton(classes) {
      var Component = this.props.componentClass || 'button';

      return _react2['default'].createElement(
        Component,
        _extends({}, this.props, {
          type: this.props.type || 'button',
          className: _classnames2['default'](this.props.className, classes) }),
        this.props.children
      );
    },

    renderNavItem: function renderNavItem(classes) {
      var liClasses = {
        active: this.props.active
      };

      return _react2['default'].createElement(
        'li',
        { className: _classnames2['default'](liClasses) },
        this.renderAnchor(classes)
      );
    }
  });

  exports['default'] = Button;
  module.exports = exports['default'];
},{"./BootstrapMixin":122,"./ButtonInput":125,"./utils/CustomPropTypes":190,"babel-runtime/helpers/extends":208,"babel-runtime/helpers/interop-require-default":210,"classnames":40,"react":482}],124:[function(require,module,exports){
  'use strict';

  var _extends = require('babel-runtime/helpers/extends')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _classnames = require('classnames');

  var _classnames2 = _interopRequireDefault(_classnames);

  var _BootstrapMixin = require('./BootstrapMixin');

  var _BootstrapMixin2 = _interopRequireDefault(_BootstrapMixin);

  var _utilsCustomPropTypes = require('./utils/CustomPropTypes');

  var _utilsCustomPropTypes2 = _interopRequireDefault(_utilsCustomPropTypes);

  var ButtonGroup = _react2['default'].createClass({
    displayName: 'ButtonGroup',

    mixins: [_BootstrapMixin2['default']],

    propTypes: {
      vertical: _react2['default'].PropTypes.bool,
      justified: _react2['default'].PropTypes.bool,
      /**
       * Display block buttons, only useful when used with the "vertical" prop.
       * @type {bool}
       */
      block: _utilsCustomPropTypes2['default'].all([_react2['default'].PropTypes.bool, function (props, propName, componentName) {
        if (props.block && !props.vertical) {
          return new Error('The block property requires the vertical property to be set to have any effect');
        }
      }])
    },

    getDefaultProps: function getDefaultProps() {
      return {
        block: false,
        bsClass: 'button-group',
        justified: false,
        vertical: false
      };
    },

    render: function render() {
      var classes = this.getBsClassSet();
      classes['btn-group'] = !this.props.vertical;
      classes['btn-group-vertical'] = this.props.vertical;
      classes['btn-group-justified'] = this.props.justified;
      classes['btn-block'] = this.props.block;

      return _react2['default'].createElement(
        'div',
        _extends({}, this.props, {
          className: _classnames2['default'](this.props.className, classes) }),
        this.props.children
      );
    }
  });

  exports['default'] = ButtonGroup;
  module.exports = exports['default'];
},{"./BootstrapMixin":122,"./utils/CustomPropTypes":190,"babel-runtime/helpers/extends":208,"babel-runtime/helpers/interop-require-default":210,"classnames":40,"react":482}],125:[function(require,module,exports){
  'use strict';

  var _inherits = require('babel-runtime/helpers/inherits')['default'];

  var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

  var _objectWithoutProperties = require('babel-runtime/helpers/object-without-properties')['default'];

  var _extends = require('babel-runtime/helpers/extends')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _Button = require('./Button');

  var _Button2 = _interopRequireDefault(_Button);

  var _FormGroup = require('./FormGroup');

  var _FormGroup2 = _interopRequireDefault(_FormGroup);

  var _InputBase2 = require('./InputBase');

  var _InputBase3 = _interopRequireDefault(_InputBase2);

  var _utilsChildrenValueInputValidation = require('./utils/childrenValueInputValidation');

  var _utilsChildrenValueInputValidation2 = _interopRequireDefault(_utilsChildrenValueInputValidation);

  var ButtonInput = (function (_InputBase) {
    _inherits(ButtonInput, _InputBase);

    function ButtonInput() {
      _classCallCheck(this, ButtonInput);

      _InputBase.apply(this, arguments);
    }

    ButtonInput.prototype.renderFormGroup = function renderFormGroup(children) {
      var _props = this.props;
      var bsStyle = _props.bsStyle;
      var value = _props.value;

      var other = _objectWithoutProperties(_props, ['bsStyle', 'value']);

      return _react2['default'].createElement(
        _FormGroup2['default'],
        other,
        children
      );
    };

    ButtonInput.prototype.renderInput = function renderInput() {
      var _props2 = this.props;
      var children = _props2.children;
      var value = _props2.value;

      var other = _objectWithoutProperties(_props2, ['children', 'value']);

      var val = children ? children : value;
      return _react2['default'].createElement(_Button2['default'], _extends({}, other, { componentClass: 'input', ref: 'input', key: 'input', value: val }));
    };

    return ButtonInput;
  })(_InputBase3['default']);

  ButtonInput.types = ['button', 'reset', 'submit'];

  ButtonInput.defaultProps = {
    type: 'button'
  };

  ButtonInput.propTypes = {
    type: _react2['default'].PropTypes.oneOf(ButtonInput.types),
    bsStyle: function bsStyle(props) {
      //defer to Button propTypes of bsStyle
      return null;
    },
    children: _utilsChildrenValueInputValidation2['default'],
    value: _utilsChildrenValueInputValidation2['default']
  };

  exports['default'] = ButtonInput;
  module.exports = exports['default'];
},{"./Button":123,"./FormGroup":141,"./InputBase":145,"./utils/childrenValueInputValidation":195,"babel-runtime/helpers/class-call-check":207,"babel-runtime/helpers/extends":208,"babel-runtime/helpers/inherits":209,"babel-runtime/helpers/interop-require-default":210,"babel-runtime/helpers/object-without-properties":212,"react":482}],126:[function(require,module,exports){
  'use strict';

  var _extends = require('babel-runtime/helpers/extends')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _classnames = require('classnames');

  var _classnames2 = _interopRequireDefault(_classnames);

  var _BootstrapMixin = require('./BootstrapMixin');

  var _BootstrapMixin2 = _interopRequireDefault(_BootstrapMixin);

  var ButtonToolbar = _react2['default'].createClass({
    displayName: 'ButtonToolbar',

    mixins: [_BootstrapMixin2['default']],

    getDefaultProps: function getDefaultProps() {
      return {
        bsClass: 'button-toolbar'
      };
    },

    render: function render() {
      var classes = this.getBsClassSet();

      return _react2['default'].createElement(
        'div',
        _extends({}, this.props, {
          role: 'toolbar',
          className: _classnames2['default'](this.props.className, classes) }),
        this.props.children
      );
    }
  });

  exports['default'] = ButtonToolbar;
  module.exports = exports['default'];
},{"./BootstrapMixin":122,"babel-runtime/helpers/extends":208,"babel-runtime/helpers/interop-require-default":210,"classnames":40,"react":482}],127:[function(require,module,exports){
  'use strict';

  var _extends = require('babel-runtime/helpers/extends')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _classnames = require('classnames');

  var _classnames2 = _interopRequireDefault(_classnames);

  var _BootstrapMixin = require('./BootstrapMixin');

  var _BootstrapMixin2 = _interopRequireDefault(_BootstrapMixin);

  var _utilsValidComponentChildren = require('./utils/ValidComponentChildren');

  var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

  var _Glyphicon = require('./Glyphicon');

  var _Glyphicon2 = _interopRequireDefault(_Glyphicon);

  var Carousel = _react2['default'].createClass({
    displayName: 'Carousel',

    mixins: [_BootstrapMixin2['default']],

    propTypes: {
      slide: _react2['default'].PropTypes.bool,
      indicators: _react2['default'].PropTypes.bool,
      interval: _react2['default'].PropTypes.number,
      controls: _react2['default'].PropTypes.bool,
      pauseOnHover: _react2['default'].PropTypes.bool,
      wrap: _react2['default'].PropTypes.bool,
      onSelect: _react2['default'].PropTypes.func,
      onSlideEnd: _react2['default'].PropTypes.func,
      activeIndex: _react2['default'].PropTypes.number,
      defaultActiveIndex: _react2['default'].PropTypes.number,
      direction: _react2['default'].PropTypes.oneOf(['prev', 'next']),
      prevIcon: _react2['default'].PropTypes.node,
      nextIcon: _react2['default'].PropTypes.node
    },

    getDefaultProps: function getDefaultProps() {
      return {
        slide: true,
        interval: 5000,
        pauseOnHover: true,
        wrap: true,
        indicators: true,
        controls: true,
        prevIcon: _react2['default'].createElement(_Glyphicon2['default'], { glyph: 'chevron-left' }),
        nextIcon: _react2['default'].createElement(_Glyphicon2['default'], { glyph: 'chevron-right' })
      };
    },

    getInitialState: function getInitialState() {
      return {
        activeIndex: this.props.defaultActiveIndex == null ? 0 : this.props.defaultActiveIndex,
        previousActiveIndex: null,
        direction: null
      };
    },

    getDirection: function getDirection(prevIndex, index) {
      if (prevIndex === index) {
        return null;
      }

      return prevIndex > index ? 'prev' : 'next';
    },

    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
      var activeIndex = this.getActiveIndex();

      if (nextProps.activeIndex != null && nextProps.activeIndex !== activeIndex) {
        clearTimeout(this.timeout);
        this.setState({
          previousActiveIndex: activeIndex,
          direction: nextProps.direction != null ? nextProps.direction : this.getDirection(activeIndex, nextProps.activeIndex)
        });
      }
    },

    componentDidMount: function componentDidMount() {
      this.waitForNext();
    },

    componentWillUnmount: function componentWillUnmount() {
      clearTimeout(this.timeout);
    },

    next: function next(e) {
      if (e) {
        e.preventDefault();
      }

      var index = this.getActiveIndex() + 1;
      var count = _utilsValidComponentChildren2['default'].numberOf(this.props.children);

      if (index > count - 1) {
        if (!this.props.wrap) {
          return;
        }
        index = 0;
      }

      this.handleSelect(index, 'next');
    },

    prev: function prev(e) {
      if (e) {
        e.preventDefault();
      }

      var index = this.getActiveIndex() - 1;

      if (index < 0) {
        if (!this.props.wrap) {
          return;
        }
        index = _utilsValidComponentChildren2['default'].numberOf(this.props.children) - 1;
      }

      this.handleSelect(index, 'prev');
    },

    pause: function pause() {
      this.isPaused = true;
      clearTimeout(this.timeout);
    },

    play: function play() {
      this.isPaused = false;
      this.waitForNext();
    },

    waitForNext: function waitForNext() {
      if (!this.isPaused && this.props.slide && this.props.interval && this.props.activeIndex == null) {
        this.timeout = setTimeout(this.next, this.props.interval);
      }
    },

    handleMouseOver: function handleMouseOver() {
      if (this.props.pauseOnHover) {
        this.pause();
      }
    },

    handleMouseOut: function handleMouseOut() {
      if (this.isPaused) {
        this.play();
      }
    },

    render: function render() {
      var classes = {
        carousel: true,
        slide: this.props.slide
      };

      return _react2['default'].createElement(
        'div',
        _extends({}, this.props, {
          className: _classnames2['default'](this.props.className, classes),
          onMouseOver: this.handleMouseOver,
          onMouseOut: this.handleMouseOut }),
        this.props.indicators ? this.renderIndicators() : null,
        _react2['default'].createElement(
          'div',
          { className: 'carousel-inner', ref: 'inner' },
          _utilsValidComponentChildren2['default'].map(this.props.children, this.renderItem)
        ),
        this.props.controls ? this.renderControls() : null
      );
    },

    renderPrev: function renderPrev() {
      return _react2['default'].createElement(
        'a',
        { className: 'left carousel-control', href: '#prev', key: 0, onClick: this.prev },
        this.props.prevIcon
      );
    },

    renderNext: function renderNext() {
      return _react2['default'].createElement(
        'a',
        { className: 'right carousel-control', href: '#next', key: 1, onClick: this.next },
        this.props.nextIcon
      );
    },

    renderControls: function renderControls() {
      if (!this.props.wrap) {
        var activeIndex = this.getActiveIndex();
        var count = _utilsValidComponentChildren2['default'].numberOf(this.props.children);

        return [activeIndex !== 0 ? this.renderPrev() : null, activeIndex !== count - 1 ? this.renderNext() : null];
      }

      return [this.renderPrev(), this.renderNext()];
    },

    renderIndicator: function renderIndicator(child, index) {
      var className = index === this.getActiveIndex() ? 'active' : null;

      return _react2['default'].createElement('li', {
        key: index,
        className: className,
        onClick: this.handleSelect.bind(this, index, null) });
    },

    renderIndicators: function renderIndicators() {
      var indicators = [];
      _utilsValidComponentChildren2['default'].forEach(this.props.children, function (child, index) {
        indicators.push(this.renderIndicator(child, index),

          // Force whitespace between indicator elements, bootstrap
          // requires this for correct spacing of elements.
          ' ');
      }, this);

      return _react2['default'].createElement(
        'ol',
        { className: 'carousel-indicators' },
        indicators
      );
    },

    getActiveIndex: function getActiveIndex() {
      return this.props.activeIndex != null ? this.props.activeIndex : this.state.activeIndex;
    },

    handleItemAnimateOutEnd: function handleItemAnimateOutEnd() {
      this.setState({
        previousActiveIndex: null,
        direction: null
      }, function () {
        this.waitForNext();

        if (this.props.onSlideEnd) {
          this.props.onSlideEnd();
        }
      });
    },

    renderItem: function renderItem(child, index) {
      var activeIndex = this.getActiveIndex();
      var isActive = index === activeIndex;
      var isPreviousActive = this.state.previousActiveIndex != null && this.state.previousActiveIndex === index && this.props.slide;

      return _react.cloneElement(child, {
        active: isActive,
        ref: child.ref,
        key: child.key ? child.key : index,
        index: index,
        animateOut: isPreviousActive,
        animateIn: isActive && this.state.previousActiveIndex != null && this.props.slide,
        direction: this.state.direction,
        onAnimateOutEnd: isPreviousActive ? this.handleItemAnimateOutEnd : null
      });
    },

    handleSelect: function handleSelect(index, direction) {
      clearTimeout(this.timeout);

      if (this.isMounted()) {
        var previousActiveIndex = this.getActiveIndex();
        direction = direction || this.getDirection(previousActiveIndex, index);

        if (this.props.onSelect) {
          this.props.onSelect(index, direction);
        }

        if (this.props.activeIndex == null && index !== previousActiveIndex) {
          if (this.state.previousActiveIndex != null) {
            // If currently animating don't activate the new index.
            // TODO: look into queuing this canceled call and
            // animating after the current animation has ended.
            return;
          }

          this.setState({
            activeIndex: index,
            previousActiveIndex: previousActiveIndex,
            direction: direction
          });
        }
      }
    }
  });

  exports['default'] = Carousel;
  module.exports = exports['default'];
},{"./BootstrapMixin":122,"./Glyphicon":142,"./utils/ValidComponentChildren":193,"babel-runtime/helpers/extends":208,"babel-runtime/helpers/interop-require-default":210,"classnames":40,"react":482}],128:[function(require,module,exports){
  'use strict';

  var _extends = require('babel-runtime/helpers/extends')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _classnames = require('classnames');

  var _classnames2 = _interopRequireDefault(_classnames);

  var _utilsTransitionEvents = require('./utils/TransitionEvents');

  var _utilsTransitionEvents2 = _interopRequireDefault(_utilsTransitionEvents);

  var CarouselItem = _react2['default'].createClass({
    displayName: 'CarouselItem',

    propTypes: {
      direction: _react2['default'].PropTypes.oneOf(['prev', 'next']),
      onAnimateOutEnd: _react2['default'].PropTypes.func,
      active: _react2['default'].PropTypes.bool,
      animateIn: _react2['default'].PropTypes.bool,
      animateOut: _react2['default'].PropTypes.bool,
      caption: _react2['default'].PropTypes.node,
      index: _react2['default'].PropTypes.number
    },

    getInitialState: function getInitialState() {
      return {
        direction: null
      };
    },

    getDefaultProps: function getDefaultProps() {
      return {
        active: false,
        animateIn: false,
        animateOut: false
      };
    },

    handleAnimateOutEnd: function handleAnimateOutEnd() {
      if (this.props.onAnimateOutEnd && this.isMounted()) {
        this.props.onAnimateOutEnd(this.props.index);
      }
    },

    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
      if (this.props.active !== nextProps.active) {
        this.setState({
          direction: null
        });
      }
    },

    componentDidUpdate: function componentDidUpdate(prevProps) {
      if (!this.props.active && prevProps.active) {
        _utilsTransitionEvents2['default'].addEndEventListener(_react2['default'].findDOMNode(this), this.handleAnimateOutEnd);
      }

      if (this.props.active !== prevProps.active) {
        setTimeout(this.startAnimation, 20);
      }
    },

    startAnimation: function startAnimation() {
      if (!this.isMounted()) {
        return;
      }

      this.setState({
        direction: this.props.direction === 'prev' ? 'right' : 'left'
      });
    },

    render: function render() {
      var classes = {
        item: true,
        active: this.props.active && !this.props.animateIn || this.props.animateOut,
        next: this.props.active && this.props.animateIn && this.props.direction === 'next',
        prev: this.props.active && this.props.animateIn && this.props.direction === 'prev'
      };

      if (this.state.direction && (this.props.animateIn || this.props.animateOut)) {
        classes[this.state.direction] = true;
      }

      return _react2['default'].createElement(
        'div',
        _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }),
        this.props.children,
        this.props.caption ? this.renderCaption() : null
      );
    },

    renderCaption: function renderCaption() {
      return _react2['default'].createElement(
        'div',
        { className: 'carousel-caption' },
        this.props.caption
      );
    }
  });

  exports['default'] = CarouselItem;
  module.exports = exports['default'];
},{"./utils/TransitionEvents":192,"babel-runtime/helpers/extends":208,"babel-runtime/helpers/interop-require-default":210,"classnames":40,"react":482}],129:[function(require,module,exports){
  'use strict';

  var _extends = require('babel-runtime/helpers/extends')['default'];

  var _Object$keys = require('babel-runtime/core-js/object/keys')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _classnames = require('classnames');

  var _classnames2 = _interopRequireDefault(_classnames);

  var _styleMaps = require('./styleMaps');

  var _styleMaps2 = _interopRequireDefault(_styleMaps);

  var _utilsCustomPropTypes = require('./utils/CustomPropTypes');

  var _utilsCustomPropTypes2 = _interopRequireDefault(_utilsCustomPropTypes);

  var Col = _react2['default'].createClass({
    displayName: 'Col',

    propTypes: {
      /**
       * The number of columns you wish to span
       *
       * for Extra small devices Phones (<768px)
       *
       * class-prefix `col-xs-`
       */
      xs: _react2['default'].PropTypes.number,
      /**
       * The number of columns you wish to span
       *
       * for Small devices Tablets (≥768px)
       *
       * class-prefix `col-sm-`
       */
      sm: _react2['default'].PropTypes.number,
      /**
       * The number of columns you wish to span
       *
       * for Medium devices Desktops (≥992px)
       *
       * class-prefix `col-md-`
       */
      md: _react2['default'].PropTypes.number,
      /**
       * The number of columns you wish to span
       *
       * for Large devices Desktops (≥1200px)
       *
       * class-prefix `col-lg-`
       */
      lg: _react2['default'].PropTypes.number,
      /**
       * Move columns to the right
       *
       * for Extra small devices Phones
       *
       * class-prefix `col-xs-offset-`
       */
      xsOffset: _react2['default'].PropTypes.number,
      /**
       * Move columns to the right
       *
       * for Small devices Tablets
       *
       * class-prefix `col-sm-offset-`
       */
      smOffset: _react2['default'].PropTypes.number,
      /**
       * Move columns to the right
       *
       * for Medium devices Desktops
       *
       * class-prefix `col-md-offset-`
       */
      mdOffset: _react2['default'].PropTypes.number,
      /**
       * Move columns to the right
       *
       * for Large devices Desktops
       *
       * class-prefix `col-lg-offset-`
       */
      lgOffset: _react2['default'].PropTypes.number,
      /**
       * Change the order of grid columns to the right
       *
       * for Extra small devices Phones
       *
       * class-prefix `col-xs-push-`
       */
      xsPush: _react2['default'].PropTypes.number,
      /**
       * Change the order of grid columns to the right
       *
       * for Small devices Tablets
       *
       * class-prefix `col-sm-push-`
       */
      smPush: _react2['default'].PropTypes.number,
      /**
       * Change the order of grid columns to the right
       *
       * for Medium devices Desktops
       *
       * class-prefix `col-md-push-`
       */
      mdPush: _react2['default'].PropTypes.number,
      /**
       * Change the order of grid columns to the right
       *
       * for Large devices Desktops
       *
       * class-prefix `col-lg-push-`
       */
      lgPush: _react2['default'].PropTypes.number,
      /**
       * Change the order of grid columns to the left
       *
       * for Extra small devices Phones
       *
       * class-prefix `col-xs-pull-`
       */
      xsPull: _react2['default'].PropTypes.number,
      /**
       * Change the order of grid columns to the left
       *
       * for Small devices Tablets
       *
       * class-prefix `col-sm-pull-`
       */
      smPull: _react2['default'].PropTypes.number,
      /**
       * Change the order of grid columns to the left
       *
       * for Medium devices Desktops
       *
       * class-prefix `col-md-pull-`
       */
      mdPull: _react2['default'].PropTypes.number,
      /**
       * Change the order of grid columns to the left
       *
       * for Large devices Desktops
       *
       * class-prefix `col-lg-pull-`
       */
      lgPull: _react2['default'].PropTypes.number,
      /**
       * You can use a custom element for this component
       */
      componentClass: _utilsCustomPropTypes2['default'].elementType
    },

    getDefaultProps: function getDefaultProps() {
      return {
        componentClass: 'div'
      };
    },

    render: function render() {
      var ComponentClass = this.props.componentClass;
      var classes = {};

      _Object$keys(_styleMaps2['default'].SIZES).forEach(function (key) {
        var size = _styleMaps2['default'].SIZES[key];
        var prop = size;
        var classPart = size + '-';

        if (this.props[prop]) {
          classes['col-' + classPart + this.props[prop]] = true;
        }

        prop = size + 'Offset';
        classPart = size + '-offset-';
        if (this.props[prop] >= 0) {
          classes['col-' + classPart + this.props[prop]] = true;
        }

        prop = size + 'Push';
        classPart = size + '-push-';
        if (this.props[prop] >= 0) {
          classes['col-' + classPart + this.props[prop]] = true;
        }

        prop = size + 'Pull';
        classPart = size + '-pull-';
        if (this.props[prop] >= 0) {
          classes['col-' + classPart + this.props[prop]] = true;
        }
      }, this);

      return _react2['default'].createElement(
        ComponentClass,
        _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }),
        this.props.children
      );
    }
  });

  exports['default'] = Col;
  module.exports = exports['default'];
},{"./styleMaps":189,"./utils/CustomPropTypes":190,"babel-runtime/core-js/object/keys":205,"babel-runtime/helpers/extends":208,"babel-runtime/helpers/interop-require-default":210,"classnames":40,"react":482}],130:[function(require,module,exports){
  'use strict';

  var _inherits = require('babel-runtime/helpers/inherits')['default'];

  var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

  var _extends = require('babel-runtime/helpers/extends')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _reactOverlaysLibTransition = require('react-overlays/lib/Transition');

  var _reactOverlaysLibTransition2 = _interopRequireDefault(_reactOverlaysLibTransition);

  var _utilsDomUtils = require('./utils/domUtils');

  var _utilsDomUtils2 = _interopRequireDefault(_utilsDomUtils);

  var _utilsCustomPropTypes = require('./utils/CustomPropTypes');

  var _utilsCustomPropTypes2 = _interopRequireDefault(_utilsCustomPropTypes);

  var _utilsDeprecationWarning = require('./utils/deprecationWarning');

  var _utilsDeprecationWarning2 = _interopRequireDefault(_utilsDeprecationWarning);

  var _utilsCreateChainedFunction = require('./utils/createChainedFunction');

  var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

  var capitalize = function capitalize(str) {
    return str[0].toUpperCase() + str.substr(1);
  };

  // reading a dimension prop will cause the browser to recalculate,
  // which will let our animations work
  var triggerBrowserReflow = function triggerBrowserReflow(node) {
    return node.offsetHeight;
  };

  var MARGINS = {
    height: ['marginTop', 'marginBottom'],
    width: ['marginLeft', 'marginRight']
  };

  function getDimensionValue(dimension, elem) {
    var value = elem['offset' + capitalize(dimension)];
    var margins = MARGINS[dimension];

    return value + parseInt(_utilsDomUtils2['default'].css(elem, margins[0]), 10) + parseInt(_utilsDomUtils2['default'].css(elem, margins[1]), 10);
  }

  var Collapse = (function (_React$Component) {
    _inherits(Collapse, _React$Component);

    function Collapse(props, context) {
      _classCallCheck(this, Collapse);

      _React$Component.call(this, props, context);

      this.onEnterListener = this.handleEnter.bind(this);
      this.onEnteringListener = this.handleEntering.bind(this);
      this.onEnteredListener = this.handleEntered.bind(this);
      this.onExitListener = this.handleExit.bind(this);
      this.onExitingListener = this.handleExiting.bind(this);
    }

    // Explicitly copied from Transition for doc generation.
    // TODO: Remove duplication once #977 is resolved.

    Collapse.prototype.render = function render() {
      var enter = _utilsCreateChainedFunction2['default'](this.onEnterListener, this.props.onEnter);
      var entering = _utilsCreateChainedFunction2['default'](this.onEnteringListener, this.props.onEntering);
      var entered = _utilsCreateChainedFunction2['default'](this.onEnteredListener, this.props.onEntered);
      var exit = _utilsCreateChainedFunction2['default'](this.onExitListener, this.props.onExit);
      var exiting = _utilsCreateChainedFunction2['default'](this.onExitingListener, this.props.onExiting);

      return _react2['default'].createElement(
        _reactOverlaysLibTransition2['default'],
        _extends({
          ref: 'transition'
        }, this.props, {
          'aria-expanded': this.props.role ? this.props['in'] : null,
          className: this._dimension() === 'width' ? 'width' : '',
          exitedClassName: 'collapse',
          exitingClassName: 'collapsing',
          enteredClassName: 'collapse in',
          enteringClassName: 'collapsing',
          onEnter: enter,
          onEntering: entering,
          onEntered: entered,
          onExit: exit,
          onExiting: exiting,
          onExited: this.props.onExited
        }),
        this.props.children
      );
    };

    /* -- Expanding -- */

    Collapse.prototype.handleEnter = function handleEnter(elem) {
      var dimension = this._dimension();
      elem.style[dimension] = '0';
    };

    Collapse.prototype.handleEntering = function handleEntering(elem) {
      var dimension = this._dimension();

      elem.style[dimension] = this._getScrollDimensionValue(elem, dimension);
    };

    Collapse.prototype.handleEntered = function handleEntered(elem) {
      var dimension = this._dimension();
      elem.style[dimension] = null;
    };

    /* -- Collapsing -- */

    Collapse.prototype.handleExit = function handleExit(elem) {
      var dimension = this._dimension();

      elem.style[dimension] = this.props.getDimensionValue(dimension, elem) + 'px';
    };

    Collapse.prototype.handleExiting = function handleExiting(elem) {
      var dimension = this._dimension();

      triggerBrowserReflow(elem);
      elem.style[dimension] = '0';
    };

    Collapse.prototype._dimension = function _dimension() {
      return typeof this.props.dimension === 'function' ? this.props.dimension() : this.props.dimension;
    };

    //for testing

    Collapse.prototype._getTransitionInstance = function _getTransitionInstance() {
      return this.refs.transition;
    };

    Collapse.prototype._getScrollDimensionValue = function _getScrollDimensionValue(elem, dimension) {
      return elem['scroll' + capitalize(dimension)] + 'px';
    };

    return Collapse;
  })(_react2['default'].Component);

  Collapse.propTypes = {
    /**
     * Show the component; triggers the expand or collapse animation
     */
    'in': _react2['default'].PropTypes.bool,

    /**
     * Unmount the component (remove it from the DOM) when it is collapsed
     */
    unmountOnExit: _react2['default'].PropTypes.bool,

    /**
     * Run the expand animation when the component mounts, if it is initially
     * shown
     */
    transitionAppear: _react2['default'].PropTypes.bool,

    /**
     * Duration of the collapse animation in milliseconds, to ensure that
     * finishing callbacks are fired even if the original browser transition end
     * events are canceled
     */
    timeout: _react2['default'].PropTypes.number,

    /**
     * duration
     * @private
     */
    duration: _utilsCustomPropTypes2['default'].all([_react2['default'].PropTypes.number, function (props) {
      if (props.duration != null) {
        _utilsDeprecationWarning2['default']('Collapse `duration`', 'the `timeout` prop');
      }
      return null;
    }]),

    /**
     * Callback fired before the component expands
     */
    onEnter: _react2['default'].PropTypes.func,
    /**
     * Callback fired after the component starts to expand
     */
    onEntering: _react2['default'].PropTypes.func,
    /**
     * Callback fired after the component has expanded
     */
    onEntered: _react2['default'].PropTypes.func,
    /**
     * Callback fired before the component collapses
     */
    onExit: _react2['default'].PropTypes.func,
    /**
     * Callback fired after the component starts to collapse
     */
    onExiting: _react2['default'].PropTypes.func,
    /**
     * Callback fired after the component has collapsed
     */
    onExited: _react2['default'].PropTypes.func,

    /**
     * The dimension used when collapsing, or a function that returns the
     * dimension
     *
     * _Note: Bootstrap only partially supports 'width'!
     * You will need to supply your own CSS animation for the `.width` CSS class._
     */
    dimension: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.oneOf(['height', 'width']), _react2['default'].PropTypes.func]),

    /**
     * Function that returns the height or width of the animating DOM node
     *
     * Allows for providing some custom logic for how much the Collapse component
     * should animate in its specified dimension. Called with the current
     * dimension prop value and the DOM node.
     */
    getDimensionValue: _react2['default'].PropTypes.func,

    /**
     * ARIA role of collapsible element
     */
    role: _react2['default'].PropTypes.string
  };

  Collapse.defaultProps = {
    'in': false,
    timeout: 300,
    unmountOnExit: false,
    transitionAppear: false,

    dimension: 'height',
    getDimensionValue: getDimensionValue
  };

  exports['default'] = Collapse;
  module.exports = exports['default'];
},{"./utils/CustomPropTypes":190,"./utils/createChainedFunction":196,"./utils/deprecationWarning":199,"./utils/domUtils":200,"babel-runtime/helpers/class-call-check":207,"babel-runtime/helpers/extends":208,"babel-runtime/helpers/inherits":209,"babel-runtime/helpers/interop-require-default":210,"react":482,"react-overlays/lib/Transition":267}],131:[function(require,module,exports){
  'use strict';

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _utilsTransitionEvents = require('./utils/TransitionEvents');

  var _utilsTransitionEvents2 = _interopRequireDefault(_utilsTransitionEvents);

  var _utilsDeprecationWarning = require('./utils/deprecationWarning');

  var _utilsDeprecationWarning2 = _interopRequireDefault(_utilsDeprecationWarning);

  var CollapsibleMixin = {

    propTypes: {
      defaultExpanded: _react2['default'].PropTypes.bool,
      expanded: _react2['default'].PropTypes.bool
    },

    getInitialState: function getInitialState() {
      var defaultExpanded = this.props.defaultExpanded != null ? this.props.defaultExpanded : this.props.expanded != null ? this.props.expanded : false;

      return {
        expanded: defaultExpanded,
        collapsing: false
      };
    },

    componentWillMount: function componentWillMount() {
      _utilsDeprecationWarning2['default']('CollapsibleMixin', 'Collapse Component');
    },

    componentWillUpdate: function componentWillUpdate(nextProps, nextState) {
      var willExpanded = nextProps.expanded != null ? nextProps.expanded : nextState.expanded;
      if (willExpanded === this.isExpanded()) {
        return;
      }

      // if the expanded state is being toggled, ensure node has a dimension value
      // this is needed for the animation to work and needs to be set before
      // the collapsing class is applied (after collapsing is applied the in class
      // is removed and the node's dimension will be wrong)

      var node = this.getCollapsibleDOMNode();
      var dimension = this.dimension();
      var value = '0';

      if (!willExpanded) {
        value = this.getCollapsibleDimensionValue();
      }

      node.style[dimension] = value + 'px';

      this._afterWillUpdate();
    },

    componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
      // check if expanded is being toggled; if so, set collapsing
      this._checkToggleCollapsing(prevProps, prevState);

      // check if collapsing was turned on; if so, start animation
      this._checkStartAnimation();
    },

    // helps enable test stubs
    _afterWillUpdate: function _afterWillUpdate() {},

    _checkStartAnimation: function _checkStartAnimation() {
      if (!this.state.collapsing) {
        return;
      }

      var node = this.getCollapsibleDOMNode();
      var dimension = this.dimension();
      var value = this.getCollapsibleDimensionValue();

      // setting the dimension here starts the transition animation
      var result = undefined;
      if (this.isExpanded()) {
        result = value + 'px';
      } else {
        result = '0px';
      }
      node.style[dimension] = result;
    },

    _checkToggleCollapsing: function _checkToggleCollapsing(prevProps, prevState) {
      var wasExpanded = prevProps.expanded != null ? prevProps.expanded : prevState.expanded;
      var isExpanded = this.isExpanded();
      if (wasExpanded !== isExpanded) {
        if (wasExpanded) {
          this._handleCollapse();
        } else {
          this._handleExpand();
        }
      }
    },

    _handleExpand: function _handleExpand() {
      var _this = this;

      var node = this.getCollapsibleDOMNode();
      var dimension = this.dimension();

      var complete = function complete() {
        _this._removeEndEventListener(node, complete);
        // remove dimension value - this ensures the collapsible item can grow
        // in dimension after initial display (such as an image loading)
        node.style[dimension] = '';
        _this.setState({
          collapsing: false
        });
      };

      this._addEndEventListener(node, complete);

      this.setState({
        collapsing: true
      });
    },

    _handleCollapse: function _handleCollapse() {
      var _this2 = this;

      var node = this.getCollapsibleDOMNode();

      var complete = function complete() {
        _this2._removeEndEventListener(node, complete);
        _this2.setState({
          collapsing: false
        });
      };

      this._addEndEventListener(node, complete);

      this.setState({
        collapsing: true
      });
    },

    // helps enable test stubs
    _addEndEventListener: function _addEndEventListener(node, complete) {
      _utilsTransitionEvents2['default'].addEndEventListener(node, complete);
    },

    // helps enable test stubs
    _removeEndEventListener: function _removeEndEventListener(node, complete) {
      _utilsTransitionEvents2['default'].removeEndEventListener(node, complete);
    },

    dimension: function dimension() {
      return typeof this.getCollapsibleDimension === 'function' ? this.getCollapsibleDimension() : 'height';
    },

    isExpanded: function isExpanded() {
      return this.props.expanded != null ? this.props.expanded : this.state.expanded;
    },

    getCollapsibleClassSet: function getCollapsibleClassSet(className) {
      var classes = {};

      if (typeof className === 'string') {
        className.split(' ').forEach(function (subClasses) {
          if (subClasses) {
            classes[subClasses] = true;
          }
        });
      }

      classes.collapsing = this.state.collapsing;
      classes.collapse = !this.state.collapsing;
      classes['in'] = this.isExpanded() && !this.state.collapsing;

      return classes;
    }
  };

  exports['default'] = CollapsibleMixin;
  module.exports = exports['default'];
},{"./utils/TransitionEvents":192,"./utils/deprecationWarning":199,"babel-runtime/helpers/interop-require-default":210,"react":482}],132:[function(require,module,exports){
  'use strict';

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _BootstrapMixin = require('./BootstrapMixin');

  var _BootstrapMixin2 = _interopRequireDefault(_BootstrapMixin);

  var _Collapse = require('./Collapse');

  var _Collapse2 = _interopRequireDefault(_Collapse);

  var _classnames = require('classnames');

  var _classnames2 = _interopRequireDefault(_classnames);

  var _utilsValidComponentChildren = require('./utils/ValidComponentChildren');

  var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

  var _utilsCreateChainedFunction = require('./utils/createChainedFunction');

  var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

  var CollapsibleNav = _react2['default'].createClass({
    displayName: 'CollapsibleNav',

    mixins: [_BootstrapMixin2['default']],

    propTypes: {
      onSelect: _react2['default'].PropTypes.func,
      activeHref: _react2['default'].PropTypes.string,
      activeKey: _react2['default'].PropTypes.any,
      collapsible: _react2['default'].PropTypes.bool,
      expanded: _react2['default'].PropTypes.bool,
      eventKey: _react2['default'].PropTypes.any
    },

    getDefaultProps: function getDefaultProps() {
      return {
        collapsible: false,
        expanded: false
      };
    },

    render: function render() {
      /*
       * this.props.collapsible is set in NavBar when an eventKey is supplied.
       */
      var classes = this.props.collapsible ? 'navbar-collapse' : null;
      var renderChildren = this.props.collapsible ? this.renderCollapsibleNavChildren : this.renderChildren;

      var nav = _react2['default'].createElement(
        'div',
        { eventKey: this.props.eventKey, className: _classnames2['default'](this.props.className, classes) },
        _utilsValidComponentChildren2['default'].map(this.props.children, renderChildren)
      );

      if (this.props.collapsible) {
        return _react2['default'].createElement(
          _Collapse2['default'],
          { 'in': this.props.expanded },
          nav
        );
      } else {
        return nav;
      }
    },

    getChildActiveProp: function getChildActiveProp(child) {
      if (child.props.active) {
        return true;
      }
      if (this.props.activeKey != null) {
        if (child.props.eventKey === this.props.activeKey) {
          return true;
        }
      }
      if (this.props.activeHref != null) {
        if (child.props.href === this.props.activeHref) {
          return true;
        }
      }

      return child.props.active;
    },

    renderChildren: function renderChildren(child, index) {
      var key = child.key ? child.key : index;
      return _react.cloneElement(child, {
        activeKey: this.props.activeKey,
        activeHref: this.props.activeHref,
        ref: 'nocollapse_' + key,
        key: key,
        navItem: true
      });
    },

    renderCollapsibleNavChildren: function renderCollapsibleNavChildren(child, index) {
      var key = child.key ? child.key : index;
      return _react.cloneElement(child, {
        active: this.getChildActiveProp(child),
        activeKey: this.props.activeKey,
        activeHref: this.props.activeHref,
        onSelect: _utilsCreateChainedFunction2['default'](child.props.onSelect, this.props.onSelect),
        ref: 'collapsible_' + key,
        key: key,
        navItem: true
      });
    }
  });

  exports['default'] = CollapsibleNav;
  module.exports = exports['default'];
},{"./BootstrapMixin":122,"./Collapse":130,"./utils/ValidComponentChildren":193,"./utils/createChainedFunction":196,"babel-runtime/helpers/interop-require-default":210,"classnames":40,"react":482}],133:[function(require,module,exports){
  'use strict';

  var _inherits = require('babel-runtime/helpers/inherits')['default'];

  var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

  var _extends = require('babel-runtime/helpers/extends')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _keycode = require('keycode');

  var _keycode2 = _interopRequireDefault(_keycode);

  var _classnames = require('classnames');

  var _classnames2 = _interopRequireDefault(_classnames);

  var _uncontrollable = require('uncontrollable');

  var _uncontrollable2 = _interopRequireDefault(_uncontrollable);

  var _ButtonGroup = require('./ButtonGroup');

  var _ButtonGroup2 = _interopRequireDefault(_ButtonGroup);

  var _DropdownToggle = require('./DropdownToggle');

  var _DropdownToggle2 = _interopRequireDefault(_DropdownToggle);

  var _DropdownMenu = require('./DropdownMenu');

  var _DropdownMenu2 = _interopRequireDefault(_DropdownMenu);

  var _utilsCustomPropTypes = require('./utils/CustomPropTypes');

  var _utilsCustomPropTypes2 = _interopRequireDefault(_utilsCustomPropTypes);

  var _utilsCreateChainedFunction = require('./utils/createChainedFunction');

  var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

  var _lodashCollectionFind = require('lodash/collection/find');

  var _lodashCollectionFind2 = _interopRequireDefault(_lodashCollectionFind);

  var _lodashObjectOmit = require('lodash/object/omit');

  var _lodashObjectOmit2 = _interopRequireDefault(_lodashObjectOmit);

  var TOGGLE_REF = 'toggle-btn';

  var TOGGLE_ROLE = _DropdownToggle2['default'].defaultProps.bsRole;
  exports.TOGGLE_ROLE = TOGGLE_ROLE;
  var MENU_ROLE = _DropdownMenu2['default'].defaultProps.bsRole;

  exports.MENU_ROLE = MENU_ROLE;

  var Dropdown = (function (_React$Component) {
    _inherits(Dropdown, _React$Component);

    function Dropdown(props) {
      _classCallCheck(this, Dropdown);

      _React$Component.call(this, props);

      this.Toggle = _DropdownToggle2['default'];

      this.toggleOpen = this.toggleOpen.bind(this);
      this.handleClick = this.handleClick.bind(this);
      this.handleKeyDown = this.handleKeyDown.bind(this);
      this.handleClose = this.handleClose.bind(this);
      this.extractChildren = this.extractChildren.bind(this);

      this.refineMenu = this.refineMenu.bind(this);
      this.refineToggle = this.refineToggle.bind(this);

      this.childExtractors = [{
        key: 'toggle',
        matches: function matches(child) {
          return child.props.bsRole === TOGGLE_ROLE;
        },
        refine: this.refineToggle
      }, {
        key: 'menu',
        exclusive: true,
        matches: function matches(child) {
          return child.props.bsRole === MENU_ROLE;
        },
        refine: this.refineMenu
      }];

      this.state = {};
    }

    Dropdown.prototype.componentDidMount = function componentDidMount() {
      var menu = this.refs.menu;
      if (this.props.open && menu.focusNext) {
        menu.focusNext();
      }
    };

    Dropdown.prototype.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
      var menu = this.refs.menu;
      if (this.props.open && !prevProps.open && menu.focusNext) {
        menu.focusNext();
      }
    };

    Dropdown.prototype.render = function render() {
      var children = this.extractChildren();
      var Component = this.props.componentClass;

      var props = _lodashObjectOmit2['default'](this.props, ['id']);

      var rootClasses = {
        open: this.props.open,
        dropdown: !this.props.dropup,
        dropup: this.props.dropup
      };

      return _react2['default'].createElement(
        Component,
        _extends({}, props, {
          className: _classnames2['default'](this.props.className, rootClasses)
        }),
        children
      );
    };

    Dropdown.prototype.toggleOpen = function toggleOpen() {
      var open = !this.props.open;

      if (this.props.onToggle) {
        this.props.onToggle(open);
      }
    };

    Dropdown.prototype.handleClick = function handleClick(event) {
      if (this.props.disabled) {
        return;
      }

      this.toggleOpen();
    };

    Dropdown.prototype.handleKeyDown = function handleKeyDown(event) {
      var _this = this;

      var focusNext = function focusNext() {
        if (_this.refs.menu.focusNext) {
          _this.refs.menu.focusNext();
        }
      };

      switch (event.keyCode) {
        case _keycode2['default'].codes.down:
          if (!this.props.open) {
            this.toggleOpen();
          } else {
            focusNext();
          }
          event.preventDefault();
          break;
        case _keycode2['default'].codes.esc:
        case _keycode2['default'].codes.tab:
          if (this.props.open) {
            this.handleClose(event);
          }
          break;
      }
    };

    Dropdown.prototype.handleClose = function handleClose(event) {
      if (!this.props.open) {
        return;
      }

      // we need to let the current event finish before closing the menu.
      // otherwise the menu may close, shifting focus to document.body, before focus has moved
      // to the next focusable input
      if (event && event.keyCode === _keycode2['default'].codes.tab) {
        setTimeout(this.toggleOpen);
      } else {
        this.toggleOpen();
      }

      if (event && event.type === 'keydown' && event.keyCode === _keycode2['default'].codes.esc) {
        var toggle = _react2['default'].findDOMNode(this.refs[TOGGLE_REF]);
        event.preventDefault();
        event.stopPropagation();
        toggle.focus();
      }
    };

    Dropdown.prototype.extractChildren = function extractChildren() {
      var _this2 = this;

      var open = !!this.props.open;
      var seen = {};

      return _react2['default'].Children.map(this.props.children, function (child) {
        var extractor = _lodashCollectionFind2['default'](_this2.childExtractors, function (x) {
          return x.matches(child);
        });

        if (extractor) {
          if (seen[extractor.key]) {
            return false;
          }

          seen[extractor.key] = extractor.exclusive;
          child = extractor.refine(child, open);
        }

        return child;
      });
    };

    Dropdown.prototype.refineMenu = function refineMenu(menu, open) {
      var menuProps = {
        ref: 'menu',
        open: open,
        labelledBy: this.props.id,
        pullRight: this.props.pullRight
      };

      menuProps.onClose = _utilsCreateChainedFunction2['default'](menu.props.onClose, this.props.onClose, this.handleClose);

      menuProps.onSelect = _utilsCreateChainedFunction2['default'](menu.props.onSelect, this.props.onSelect, this.handleClose);

      return _react.cloneElement(menu, menuProps, menu.props.children);
    };

    Dropdown.prototype.refineToggle = function refineToggle(toggle, open) {
      var toggleProps = {
        open: open,
        id: this.props.id,
        ref: TOGGLE_REF
      };

      toggleProps.onClick = _utilsCreateChainedFunction2['default'](toggle.props.onClick, this.handleClick);

      toggleProps.onKeyDown = _utilsCreateChainedFunction2['default'](toggle.props.onKeyDown, this.handleKeyDown);

      return _react.cloneElement(toggle, toggleProps, toggle.props.children);
    };

    return Dropdown;
  })(_react2['default'].Component);

  Dropdown.Toggle = _DropdownToggle2['default'];

  Dropdown.TOGGLE_REF = TOGGLE_REF;

  Dropdown.defaultProps = {
    componentClass: _ButtonGroup2['default']
  };

  Dropdown.propTypes = {
    /**
     * The menu will open above the dropdown button, instead of below it.
     */
    dropup: _react2['default'].PropTypes.bool,

    /**
     * An html id attribute, necessary for assistive technologies, such as screen readers.
     * @type {string|number}
     * @required
     */
    id: _utilsCustomPropTypes2['default'].isRequiredForA11y(_react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number])),

    componentClass: _utilsCustomPropTypes2['default'].elementType,

    /**
     * The children of a Dropdown may be a `<Dropdown.Toggle/>` or a `<Dropdown.Menu/>`.
     * @type {node}
     */
    children: _utilsCustomPropTypes2['default'].all([_utilsCustomPropTypes2['default'].requiredRoles(TOGGLE_ROLE, MENU_ROLE), _utilsCustomPropTypes2['default'].exclusiveRoles(MENU_ROLE)]),

    /**
     * Whether or not component is disabled.
     */
    disabled: _react2['default'].PropTypes.bool,

    /**
     * Align the menu to the right  side of the Dropdown toggle
     */
    pullRight: _react2['default'].PropTypes.bool,

    /**
     * Whether or not the Dropdown is visible.
     *
     * @controllable onToggle
     */
    open: _react2['default'].PropTypes.bool,

    /**
     * A callback fired when the Dropdown closes.
     */
    onClose: _react2['default'].PropTypes.func,

    /**
     * A callback fired when the Dropdown wishes to change visibility. Called with the requested
     * `open` value.
     *
     * ```js
     * function(Boolean isOpen){}
     * ```
     * @controllable open
     */
    onToggle: _react2['default'].PropTypes.func,

    /**
     * A callback fired when a menu item is selected.
     *
     * ```js
     * function(Object event, Any eventKey)
     * ```
     */
    onSelect: _react2['default'].PropTypes.func
  };

  Dropdown = _uncontrollable2['default'](Dropdown, { open: 'onToggle' });

  Dropdown.Toggle = _DropdownToggle2['default'];
  Dropdown.Menu = _DropdownMenu2['default'];

  exports['default'] = Dropdown;
},{"./ButtonGroup":124,"./DropdownMenu":135,"./DropdownToggle":136,"./utils/CustomPropTypes":190,"./utils/createChainedFunction":196,"babel-runtime/helpers/class-call-check":207,"babel-runtime/helpers/extends":208,"babel-runtime/helpers/inherits":209,"babel-runtime/helpers/interop-require-default":210,"classnames":40,"keycode":262,"lodash/collection/find":50,"lodash/object/omit":110,"react":482,"uncontrollable":277}],134:[function(require,module,exports){
  'use strict';

  var _inherits = require('babel-runtime/helpers/inherits')['default'];

  var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

  var _extends = require('babel-runtime/helpers/extends')['default'];

  var _objectWithoutProperties = require('babel-runtime/helpers/object-without-properties')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _BootstrapMixin = require('./BootstrapMixin');

  var _BootstrapMixin2 = _interopRequireDefault(_BootstrapMixin);

  var _Dropdown = require('./Dropdown');

  var _Dropdown2 = _interopRequireDefault(_Dropdown);

  var _NavDropdown = require('./NavDropdown');

  var _NavDropdown2 = _interopRequireDefault(_NavDropdown);

  var _utilsCustomPropTypes = require('./utils/CustomPropTypes');

  var _utilsCustomPropTypes2 = _interopRequireDefault(_utilsCustomPropTypes);

  var _utilsDeprecationWarning = require('./utils/deprecationWarning');

  var _utilsDeprecationWarning2 = _interopRequireDefault(_utilsDeprecationWarning);

  var _lodashObjectOmit = require('lodash/object/omit');

  var _lodashObjectOmit2 = _interopRequireDefault(_lodashObjectOmit);

  var DropdownButton = (function (_React$Component) {
    _inherits(DropdownButton, _React$Component);

    function DropdownButton(props) {
      _classCallCheck(this, DropdownButton);

      _React$Component.call(this, props);
    }

    DropdownButton.prototype.render = function render() {
      var _props = this.props;
      var title = _props.title;
      var navItem = _props.navItem;

      var props = _objectWithoutProperties(_props, ['title', 'navItem']);

      var toggleProps = _lodashObjectOmit2['default'](props, _Dropdown2['default'].ControlledComponent.propTypes);

      if (navItem) {
        return _react2['default'].createElement(_NavDropdown2['default'], this.props);
      }

      return _react2['default'].createElement(
        _Dropdown2['default'],
        props,
        _react2['default'].createElement(
          _Dropdown2['default'].Toggle,
          toggleProps,
          title
        ),
        _react2['default'].createElement(
          _Dropdown2['default'].Menu,
          null,
          this.props.children
        )
      );
    };

    return DropdownButton;
  })(_react2['default'].Component);

  DropdownButton.propTypes = _extends({
    /**
     * When used with the `title` prop, the noCaret option will not render a caret icon, in the toggle element.
     */
    noCaret: _react2['default'].PropTypes.bool,

    /**
     * Specify whether this Dropdown is part of a Nav component
     *
     * @type {bool}
     * @deprecated Use the `NavDropdown` instead.
     */
    navItem: _utilsCustomPropTypes2['default'].all([_react2['default'].PropTypes.bool, function (props, propName, componentName) {
      if (props.navItem) {
        _utilsDeprecationWarning2['default']('navItem', 'NavDropdown component', 'https://github.com/react-bootstrap/react-bootstrap/issues/526');
      }
    }]),
    title: _react2['default'].PropTypes.node.isRequired
  }, _Dropdown2['default'].propTypes, _BootstrapMixin2['default'].propTypes);

  DropdownButton.defaultProps = {
    pullRight: false,
    dropup: false,
    navItem: false,
    noCaret: false
  };

  exports['default'] = DropdownButton;
  module.exports = exports['default'];
},{"./BootstrapMixin":122,"./Dropdown":133,"./NavDropdown":159,"./utils/CustomPropTypes":190,"./utils/deprecationWarning":199,"babel-runtime/helpers/class-call-check":207,"babel-runtime/helpers/extends":208,"babel-runtime/helpers/inherits":209,"babel-runtime/helpers/interop-require-default":210,"babel-runtime/helpers/object-without-properties":212,"lodash/object/omit":110,"react":482}],135:[function(require,module,exports){
  'use strict';

  var _inherits = require('babel-runtime/helpers/inherits')['default'];

  var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _keycode = require('keycode');

  var _keycode2 = _interopRequireDefault(_keycode);

  var _classnames = require('classnames');

  var _classnames2 = _interopRequireDefault(_classnames);

  var _reactOverlaysLibRootCloseWrapper = require('react-overlays/lib/RootCloseWrapper');

  var _reactOverlaysLibRootCloseWrapper2 = _interopRequireDefault(_reactOverlaysLibRootCloseWrapper);

  var _utilsCreateChainedFunction = require('./utils/createChainedFunction');

  var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

  var DropdownMenu = (function (_React$Component) {
    _inherits(DropdownMenu, _React$Component);

    function DropdownMenu(props) {
      _classCallCheck(this, DropdownMenu);

      _React$Component.call(this, props);

      this.focusNext = this.focusNext.bind(this);
      this.focusPrevious = this.focusPrevious.bind(this);
      this.getFocusableMenuItems = this.getFocusableMenuItems.bind(this);
      this.getItemsAndActiveIndex = this.getItemsAndActiveIndex.bind(this);

      this.handleKeyDown = this.handleKeyDown.bind(this);
    }

    DropdownMenu.prototype.handleKeyDown = function handleKeyDown(event) {

      switch (event.keyCode) {
        case _keycode2['default'].codes.down:
          this.focusNext();
          event.preventDefault();
          break;
        case _keycode2['default'].codes.up:
          this.focusPrevious();
          event.preventDefault();
          break;
        case _keycode2['default'].codes.esc:
        case _keycode2['default'].codes.tab:
          this.props.onClose(event);
          break;
      }
    };

    DropdownMenu.prototype.focusNext = function focusNext() {
      var _getItemsAndActiveIndex = this.getItemsAndActiveIndex();

      var items = _getItemsAndActiveIndex.items;
      var activeItemIndex = _getItemsAndActiveIndex.activeItemIndex;

      if (activeItemIndex === items.length - 1) {
        items[0].focus();
        return;
      }

      items[activeItemIndex + 1].focus();
    };

    DropdownMenu.prototype.focusPrevious = function focusPrevious() {
      var _getItemsAndActiveIndex2 = this.getItemsAndActiveIndex();

      var items = _getItemsAndActiveIndex2.items;
      var activeItemIndex = _getItemsAndActiveIndex2.activeItemIndex;

      if (activeItemIndex === 0) {
        items[items.length - 1].focus();
        return;
      }

      items[activeItemIndex - 1].focus();
    };

    DropdownMenu.prototype.getItemsAndActiveIndex = function getItemsAndActiveIndex() {
      var items = this.getFocusableMenuItems();
      var activeElement = document.activeElement;
      var activeItemIndex = items.indexOf(activeElement);

      return { items: items, activeItemIndex: activeItemIndex };
    };

    DropdownMenu.prototype.getFocusableMenuItems = function getFocusableMenuItems() {
      var menuNode = _react2['default'].findDOMNode(this);

      if (menuNode === undefined) {
        return [];
      }

      return [].slice.call(menuNode.querySelectorAll('[tabIndex="-1"]'), 0);
    };

    DropdownMenu.prototype.render = function render() {
      var _this = this;

      var items = _react2['default'].Children.map(this.props.children, function (child) {
        var _ref = child.props || {};

        var children = _ref.children;
        var onKeyDown = _ref.onKeyDown;
        var onSelect = _ref.onSelect;

        return _react2['default'].cloneElement(child, {
          onKeyDown: _utilsCreateChainedFunction2['default'](onKeyDown, _this.handleKeyDown),
          onSelect: _utilsCreateChainedFunction2['default'](onSelect, _this.props.onSelect)
        }, children);
      });

      var classes = {
        'dropdown-menu': true,
        'dropdown-menu-right': this.props.pullRight
      };

      var list = _react2['default'].createElement(
        'ul',
        {
          className: _classnames2['default'](this.props.className, classes),
          role: 'menu',
          'aria-labelledby': this.props.labelledBy
        },
        items
      );

      if (this.props.open) {
        list = _react2['default'].createElement(
          _reactOverlaysLibRootCloseWrapper2['default'],
          { noWrap: true, onRootClose: this.props.onClose },
          list
        );
      }

      return list;
    };

    return DropdownMenu;
  })(_react2['default'].Component);

  DropdownMenu.defaultProps = {
    bsRole: 'menu',
    pullRight: false
  };

  DropdownMenu.propTypes = {
    open: _react2['default'].PropTypes.bool,
    pullRight: _react2['default'].PropTypes.bool,
    onClose: _react2['default'].PropTypes.func,
    labelledBy: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number]),
    onSelect: _react2['default'].PropTypes.func
  };

  exports['default'] = DropdownMenu;
  module.exports = exports['default'];
},{"./utils/createChainedFunction":196,"babel-runtime/helpers/class-call-check":207,"babel-runtime/helpers/inherits":209,"babel-runtime/helpers/interop-require-default":210,"classnames":40,"keycode":262,"react":482,"react-overlays/lib/RootCloseWrapper":266}],136:[function(require,module,exports){
  'use strict';

  var _inherits = require('babel-runtime/helpers/inherits')['default'];

  var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

  var _extends = require('babel-runtime/helpers/extends')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _classnames = require('classnames');

  var _classnames2 = _interopRequireDefault(_classnames);

  var _Button = require('./Button');

  var _Button2 = _interopRequireDefault(_Button);

  var _utilsCustomPropTypes = require('./utils/CustomPropTypes');

  var _utilsCustomPropTypes2 = _interopRequireDefault(_utilsCustomPropTypes);

  var _SafeAnchor = require('./SafeAnchor');

  var _SafeAnchor2 = _interopRequireDefault(_SafeAnchor);

  var CARET = _react2['default'].createElement(
    'span',
    null,
    ' ',
    _react2['default'].createElement('span', { className: 'caret' })
  );

  var DropdownToggle = (function (_React$Component) {
    _inherits(DropdownToggle, _React$Component);

    function DropdownToggle() {
      _classCallCheck(this, DropdownToggle);

      _React$Component.apply(this, arguments);
    }

    DropdownToggle.prototype.render = function render() {
      var caret = this.props.noCaret ? null : CARET;

      var classes = {
        'dropdown-toggle': true
      };

      var Component = this.props.useAnchor ? _SafeAnchor2['default'] : _Button2['default'];

      return _react2['default'].createElement(
        Component,
        _extends({}, this.props, {
          className: _classnames2['default'](classes, this.props.className),
          type: 'button',
          'aria-haspopup': true,
          'aria-expanded': this.props.open }),
        this.props.title || this.props.children,
        caret
      );
    };

    return DropdownToggle;
  })(_react2['default'].Component);

  exports['default'] = DropdownToggle;

  var titleAndChildrenValidation = _utilsCustomPropTypes2['default'].singlePropFrom(['title', 'children']);

  DropdownToggle.defaultProps = {
    open: false,
    useAnchor: false,
    bsRole: 'toggle'
  };

  DropdownToggle.propTypes = {
    bsRole: _react2['default'].PropTypes.string,
    children: titleAndChildrenValidation,
    noCaret: _react2['default'].PropTypes.bool,
    open: _react2['default'].PropTypes.bool,
    title: titleAndChildrenValidation,
    useAnchor: _react2['default'].PropTypes.bool
  };

  DropdownToggle.isToggle = true;
  DropdownToggle.titleProp = 'title';
  DropdownToggle.onClickProp = 'onClick';
  module.exports = exports['default'];
},{"./Button":123,"./SafeAnchor":176,"./utils/CustomPropTypes":190,"babel-runtime/helpers/class-call-check":207,"babel-runtime/helpers/extends":208,"babel-runtime/helpers/inherits":209,"babel-runtime/helpers/interop-require-default":210,"classnames":40,"react":482}],137:[function(require,module,exports){
  'use strict';

  var _inherits = require('babel-runtime/helpers/inherits')['default'];

  var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

  var _extends = require('babel-runtime/helpers/extends')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _reactOverlaysLibTransition = require('react-overlays/lib/Transition');

  var _reactOverlaysLibTransition2 = _interopRequireDefault(_reactOverlaysLibTransition);

  var _utilsCustomPropTypes = require('./utils/CustomPropTypes');

  var _utilsCustomPropTypes2 = _interopRequireDefault(_utilsCustomPropTypes);

  var _utilsDeprecationWarning = require('./utils/deprecationWarning');

  var _utilsDeprecationWarning2 = _interopRequireDefault(_utilsDeprecationWarning);

  var Fade = (function (_React$Component) {
    _inherits(Fade, _React$Component);

    function Fade() {
      _classCallCheck(this, Fade);

      _React$Component.apply(this, arguments);
    }

    // Explicitly copied from Transition for doc generation.
    // TODO: Remove duplication once #977 is resolved.

    Fade.prototype.render = function render() {
      var timeout = this.props.timeout || this.props.duration;

      return _react2['default'].createElement(
        _reactOverlaysLibTransition2['default'],
        _extends({}, this.props, {
          timeout: timeout,
          className: 'fade',
          enteredClassName: 'in',
          enteringClassName: 'in'
        }),
        this.props.children
      );
    };

    return Fade;
  })(_react2['default'].Component);

  Fade.propTypes = {
    /**
     * Show the component; triggers the fade in or fade out animation
     */
    'in': _react2['default'].PropTypes.bool,

    /**
     * Unmount the component (remove it from the DOM) when it is faded out
     */
    unmountOnExit: _react2['default'].PropTypes.bool,

    /**
     * Run the fade in animation when the component mounts, if it is initially
     * shown
     */
    transitionAppear: _react2['default'].PropTypes.bool,

    /**
     * Duration of the fade animation in milliseconds, to ensure that finishing
     * callbacks are fired even if the original browser transition end events are
     * canceled
     */
    timeout: _react2['default'].PropTypes.number,

    /**
     * duration
     * @private
     */
    duration: _utilsCustomPropTypes2['default'].all([_react2['default'].PropTypes.number, function (props) {
      if (props.duration != null) {
        _utilsDeprecationWarning2['default']('Fade `duration`', 'the `timeout` prop');
      }
      return null;
    }]),

    /**
     * Callback fired before the component fades in
     */
    onEnter: _react2['default'].PropTypes.func,
    /**
     * Callback fired after the component starts to fade in
     */
    onEntering: _react2['default'].PropTypes.func,
    /**
     * Callback fired after the has component faded in
     */
    onEntered: _react2['default'].PropTypes.func,
    /**
     * Callback fired before the component fades out
     */
    onExit: _react2['default'].PropTypes.func,
    /**
     * Callback fired after the component starts to fade out
     */
    onExiting: _react2['default'].PropTypes.func,
    /**
     * Callback fired after the component has faded out
     */
    onExited: _react2['default'].PropTypes.func
  };

  Fade.defaultProps = {
    'in': false,
    timeout: 300,
    unmountOnExit: false,
    transitionAppear: false
  };

  exports['default'] = Fade;
  module.exports = exports['default'];
},{"./utils/CustomPropTypes":190,"./utils/deprecationWarning":199,"babel-runtime/helpers/class-call-check":207,"babel-runtime/helpers/extends":208,"babel-runtime/helpers/inherits":209,"babel-runtime/helpers/interop-require-default":210,"react":482,"react-overlays/lib/Transition":267}],138:[function(require,module,exports){
  'use strict';

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _utilsDomUtils = require('./utils/domUtils');

  var _utilsDomUtils2 = _interopRequireDefault(_utilsDomUtils);

  var _utilsDeprecationWarning = require('./utils/deprecationWarning');

  var _utilsDeprecationWarning2 = _interopRequireDefault(_utilsDeprecationWarning);

  // TODO: listen for onTransitionEnd to remove el
  function getElementsAndSelf(root, classes) {
    var els = root.querySelectorAll('.' + classes.join('.'));

    els = [].map.call(els, function (e) {
      return e;
    });

    for (var i = 0; i < classes.length; i++) {
      if (!root.className.match(new RegExp('\\b' + classes[i] + '\\b'))) {
        return els;
      }
    }
    els.unshift(root);
    return els;
  }

  exports['default'] = {
    componentWillMount: function componentWillMount() {
      _utilsDeprecationWarning2['default']('FadeMixin', 'Fade Component');
    },

    _fadeIn: function _fadeIn() {
      var els = undefined;

      if (this.isMounted()) {
        els = getElementsAndSelf(_react2['default'].findDOMNode(this), ['fade']);

        if (els.length) {
          els.forEach(function (el) {
            el.className += ' in';
          });
        }
      }
    },

    _fadeOut: function _fadeOut() {
      var els = getElementsAndSelf(this._fadeOutEl, ['fade', 'in']);

      if (els.length) {
        els.forEach(function (el) {
          el.className = el.className.replace(/\bin\b/, '');
        });
      }

      setTimeout(this._handleFadeOutEnd, 300);
    },

    _handleFadeOutEnd: function _handleFadeOutEnd() {
      if (this._fadeOutEl && this._fadeOutEl.parentNode) {
        this._fadeOutEl.parentNode.removeChild(this._fadeOutEl);
      }
    },

    componentDidMount: function componentDidMount() {
      if (document.querySelectorAll) {
        // Firefox needs delay for transition to be triggered
        setTimeout(this._fadeIn, 20);
      }
    },

    componentWillUnmount: function componentWillUnmount() {
      var els = getElementsAndSelf(_react2['default'].findDOMNode(this), ['fade']);
      var container = this.props.container && _react2['default'].findDOMNode(this.props.container) || _utilsDomUtils2['default'].ownerDocument(this).body;

      if (els.length) {
        this._fadeOutEl = document.createElement('div');
        container.appendChild(this._fadeOutEl);
        this._fadeOutEl.appendChild(_react2['default'].findDOMNode(this).cloneNode(true));
        // Firefox needs delay for transition to be triggered
        setTimeout(this._fadeOut, 20);
      }
    }
  };
  module.exports = exports['default'];
},{"./utils/deprecationWarning":199,"./utils/domUtils":200,"babel-runtime/helpers/interop-require-default":210,"react":482}],139:[function(require,module,exports){
  'use strict';

  var _inherits = require('babel-runtime/helpers/inherits')['default'];

  var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

  var _extends = require('babel-runtime/helpers/extends')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _classnames = require('classnames');

  var _classnames2 = _interopRequireDefault(_classnames);

  var _InputBase2 = require('../InputBase');

  var _InputBase3 = _interopRequireDefault(_InputBase2);

  var _utilsChildrenValueInputValidation = require('../utils/childrenValueInputValidation');

  var _utilsChildrenValueInputValidation2 = _interopRequireDefault(_utilsChildrenValueInputValidation);

  var Static = (function (_InputBase) {
    _inherits(Static, _InputBase);

    function Static() {
      _classCallCheck(this, Static);

      _InputBase.apply(this, arguments);
    }

    Static.prototype.getValue = function getValue() {
      var _props = this.props;
      var children = _props.children;
      var value = _props.value;

      return children ? children : value;
    };

    Static.prototype.renderInput = function renderInput() {
      return _react2['default'].createElement(
        'p',
        _extends({}, this.props, { className: _classnames2['default'](this.props.className, 'form-control-static'), ref: 'input', key: 'input' }),
        this.getValue()
      );
    };

    return Static;
  })(_InputBase3['default']);

  Static.propTypes = {
    value: _utilsChildrenValueInputValidation2['default'],
    children: _utilsChildrenValueInputValidation2['default']
  };

  exports['default'] = Static;
  module.exports = exports['default'];
},{"../InputBase":145,"../utils/childrenValueInputValidation":195,"babel-runtime/helpers/class-call-check":207,"babel-runtime/helpers/extends":208,"babel-runtime/helpers/inherits":209,"babel-runtime/helpers/interop-require-default":210,"classnames":40,"react":482}],140:[function(require,module,exports){
  'use strict';

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _Static2 = require('./Static');

  var _Static3 = _interopRequireDefault(_Static2);

  exports.Static = _Static3['default'];
},{"./Static":139,"babel-runtime/helpers/interop-require-default":210}],141:[function(require,module,exports){
  'use strict';

  var _inherits = require('babel-runtime/helpers/inherits')['default'];

  var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _classnames = require('classnames');

  var _classnames2 = _interopRequireDefault(_classnames);

  var FormGroup = (function (_React$Component) {
    _inherits(FormGroup, _React$Component);

    function FormGroup() {
      _classCallCheck(this, FormGroup);

      _React$Component.apply(this, arguments);
    }

    FormGroup.prototype.render = function render() {
      var classes = {
        'form-group': !this.props.standalone,
        'form-group-lg': !this.props.standalone && this.props.bsSize === 'large',
        'form-group-sm': !this.props.standalone && this.props.bsSize === 'small',
        'has-feedback': this.props.hasFeedback,
        'has-success': this.props.bsStyle === 'success',
        'has-warning': this.props.bsStyle === 'warning',
        'has-error': this.props.bsStyle === 'error'
      };

      return _react2['default'].createElement(
        'div',
        { className: _classnames2['default'](classes, this.props.groupClassName) },
        this.props.children
      );
    };

    return FormGroup;
  })(_react2['default'].Component);

  FormGroup.defaultProps = {
    hasFeedback: false,
    standalone: false
  };

  FormGroup.propTypes = {
    standalone: _react2['default'].PropTypes.bool,
    hasFeedback: _react2['default'].PropTypes.bool,
    bsSize: function bsSize(props) {
      if (props.standalone && props.bsSize !== undefined) {
        return new Error('bsSize will not be used when `standalone` is set.');
      }

      return _react2['default'].PropTypes.oneOf(['small', 'medium', 'large']).apply(null, arguments);
    },
    bsStyle: _react2['default'].PropTypes.oneOf(['success', 'warning', 'error']),
    groupClassName: _react2['default'].PropTypes.string
  };

  exports['default'] = FormGroup;
  module.exports = exports['default'];
},{"babel-runtime/helpers/class-call-check":207,"babel-runtime/helpers/inherits":209,"babel-runtime/helpers/interop-require-default":210,"classnames":40,"react":482}],142:[function(require,module,exports){
  'use strict';

  var _extends = require('babel-runtime/helpers/extends')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _classnames = require('classnames');

  var _classnames2 = _interopRequireDefault(_classnames);

  var Glyphicon = _react2['default'].createClass({
    displayName: 'Glyphicon',

    propTypes: {
      /**
       * bootstrap className
       * @private
       */
      bsClass: _react2['default'].PropTypes.string,
      /**
       * An icon name. See e.g. http://getbootstrap.com/components/#glyphicons
       */
      glyph: _react2['default'].PropTypes.string.isRequired,
      /**
       * Adds 'form-control-feedback' class
       * @private
       */
      formControlFeedback: _react2['default'].PropTypes.bool
    },

    getDefaultProps: function getDefaultProps() {
      return {
        bsClass: 'glyphicon',
        formControlFeedback: false
      };
    },

    render: function render() {
      var _classNames;

      var className = _classnames2['default'](this.props.className, (_classNames = {}, _classNames[this.props.bsClass] = true, _classNames['glyphicon-' + this.props.glyph] = true, _classNames['form-control-feedback'] = this.props.formControlFeedback, _classNames));

      return _react2['default'].createElement(
        'span',
        _extends({}, this.props, { className: className }),
        this.props.children
      );
    }
  });

  exports['default'] = Glyphicon;
  module.exports = exports['default'];
},{"babel-runtime/helpers/extends":208,"babel-runtime/helpers/interop-require-default":210,"classnames":40,"react":482}],143:[function(require,module,exports){
  'use strict';

  var _extends = require('babel-runtime/helpers/extends')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _classnames = require('classnames');

  var _classnames2 = _interopRequireDefault(_classnames);

  var _utilsCustomPropTypes = require('./utils/CustomPropTypes');

  var _utilsCustomPropTypes2 = _interopRequireDefault(_utilsCustomPropTypes);

  var Grid = _react2['default'].createClass({
    displayName: 'Grid',

    propTypes: {
      /**
       * Turn any fixed-width grid layout into a full-width layout by this property.
       *
       * Adds `container-fluid` class.
       */
      fluid: _react2['default'].PropTypes.bool,
      /**
       * You can use a custom element for this component
       */
      componentClass: _utilsCustomPropTypes2['default'].elementType
    },

    getDefaultProps: function getDefaultProps() {
      return {
        componentClass: 'div',
        fluid: false
      };
    },

    render: function render() {
      var ComponentClass = this.props.componentClass;
      var className = this.props.fluid ? 'container-fluid' : 'container';

      return _react2['default'].createElement(
        ComponentClass,
        _extends({}, this.props, {
          className: _classnames2['default'](this.props.className, className) }),
        this.props.children
      );
    }
  });

  exports['default'] = Grid;
  module.exports = exports['default'];
},{"./utils/CustomPropTypes":190,"babel-runtime/helpers/extends":208,"babel-runtime/helpers/interop-require-default":210,"classnames":40,"react":482}],144:[function(require,module,exports){
  'use strict';

  var _inherits = require('babel-runtime/helpers/inherits')['default'];

  var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _InputBase2 = require('./InputBase');

  var _InputBase3 = _interopRequireDefault(_InputBase2);

  var _FormControls = require('./FormControls');

  var FormControls = _interopRequireWildcard(_FormControls);

  var _utilsDeprecationWarning = require('./utils/deprecationWarning');

  var _utilsDeprecationWarning2 = _interopRequireDefault(_utilsDeprecationWarning);

  var Input = (function (_InputBase) {
    _inherits(Input, _InputBase);

    function Input() {
      _classCallCheck(this, Input);

      _InputBase.apply(this, arguments);
    }

    Input.prototype.render = function render() {
      if (this.props.type === 'static') {
        _utilsDeprecationWarning2['default']('Input type=static', 'StaticText');
        return _react2['default'].createElement(FormControls.Static, this.props);
      }

      return _InputBase.prototype.render.call(this);
    };

    return Input;
  })(_InputBase3['default']);

  Input.propTypes = {
    type: _react2['default'].PropTypes.string
  };

  exports['default'] = Input;
  module.exports = exports['default'];
},{"./FormControls":140,"./InputBase":145,"./utils/deprecationWarning":199,"babel-runtime/helpers/class-call-check":207,"babel-runtime/helpers/inherits":209,"babel-runtime/helpers/interop-require-default":210,"babel-runtime/helpers/interop-require-wildcard":211,"react":482}],145:[function(require,module,exports){
  'use strict';

  var _inherits = require('babel-runtime/helpers/inherits')['default'];

  var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

  var _extends = require('babel-runtime/helpers/extends')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _classnames = require('classnames');

  var _classnames2 = _interopRequireDefault(_classnames);

  var _FormGroup = require('./FormGroup');

  var _FormGroup2 = _interopRequireDefault(_FormGroup);

  var _Glyphicon = require('./Glyphicon');

  var _Glyphicon2 = _interopRequireDefault(_Glyphicon);

  var InputBase = (function (_React$Component) {
    _inherits(InputBase, _React$Component);

    function InputBase() {
      _classCallCheck(this, InputBase);

      _React$Component.apply(this, arguments);
    }

    InputBase.prototype.getInputDOMNode = function getInputDOMNode() {
      return _react2['default'].findDOMNode(this.refs.input);
    };

    InputBase.prototype.getValue = function getValue() {
      if (this.props.type === 'static') {
        return this.props.value;
      } else if (this.props.type) {
        if (this.props.type === 'select' && this.props.multiple) {
          return this.getSelectedOptions();
        } else {
          return this.getInputDOMNode().value;
        }
      } else {
        throw 'Cannot use getValue without specifying input type.';
      }
    };

    InputBase.prototype.getChecked = function getChecked() {
      return this.getInputDOMNode().checked;
    };

    InputBase.prototype.getSelectedOptions = function getSelectedOptions() {
      var values = [];

      Array.prototype.forEach.call(this.getInputDOMNode().getElementsByTagName('option'), function (option) {
        if (option.selected) {
          var value = option.getAttribute('value') || option.innerHtml;
          values.push(value);
        }
      });

      return values;
    };

    InputBase.prototype.isCheckboxOrRadio = function isCheckboxOrRadio() {
      return this.props.type === 'checkbox' || this.props.type === 'radio';
    };

    InputBase.prototype.isFile = function isFile() {
      return this.props.type === 'file';
    };

    InputBase.prototype.renderInputGroup = function renderInputGroup(children) {
      var addonBefore = this.props.addonBefore ? _react2['default'].createElement(
        'span',
        { className: 'input-group-addon', key: 'addonBefore' },
        this.props.addonBefore
      ) : null;

      var addonAfter = this.props.addonAfter ? _react2['default'].createElement(
        'span',
        { className: 'input-group-addon', key: 'addonAfter' },
        this.props.addonAfter
      ) : null;

      var buttonBefore = this.props.buttonBefore ? _react2['default'].createElement(
        'span',
        { className: 'input-group-btn' },
        this.props.buttonBefore
      ) : null;

      var buttonAfter = this.props.buttonAfter ? _react2['default'].createElement(
        'span',
        { className: 'input-group-btn' },
        this.props.buttonAfter
      ) : null;

      var inputGroupClassName = undefined;
      switch (this.props.bsSize) {
        case 'small':
          inputGroupClassName = 'input-group-sm';break;
        case 'large':
          inputGroupClassName = 'input-group-lg';break;
      }

      return addonBefore || addonAfter || buttonBefore || buttonAfter ? _react2['default'].createElement(
        'div',
        { className: _classnames2['default'](inputGroupClassName, 'input-group'), key: 'input-group' },
        addonBefore,
        buttonBefore,
        children,
        addonAfter,
        buttonAfter
      ) : children;
    };

    InputBase.prototype.renderIcon = function renderIcon() {
      if (this.props.hasFeedback) {
        if (this.props.feedbackIcon) {
          return _react2['default'].cloneElement(this.props.feedbackIcon, { formControlFeedback: true });
        }

        switch (this.props.bsStyle) {
          case 'success':
            return _react2['default'].createElement(_Glyphicon2['default'], { formControlFeedback: true, glyph: 'ok', key: 'icon' });
          case 'warning':
            return _react2['default'].createElement(_Glyphicon2['default'], { formControlFeedback: true, glyph: 'warning-sign', key: 'icon' });
          case 'error':
            return _react2['default'].createElement(_Glyphicon2['default'], { formControlFeedback: true, glyph: 'remove', key: 'icon' });
          default:
            return _react2['default'].createElement('span', { className: 'form-control-feedback', key: 'icon' });
        }
      } else {
        return null;
      }
    };

    InputBase.prototype.renderHelp = function renderHelp() {
      return this.props.help ? _react2['default'].createElement(
        'span',
        { className: 'help-block', key: 'help' },
        this.props.help
      ) : null;
    };

    InputBase.prototype.renderCheckboxAndRadioWrapper = function renderCheckboxAndRadioWrapper(children) {
      var classes = {
        'checkbox': this.props.type === 'checkbox',
        'radio': this.props.type === 'radio'
      };

      return _react2['default'].createElement(
        'div',
        { className: _classnames2['default'](classes), key: 'checkboxRadioWrapper' },
        children
      );
    };

    InputBase.prototype.renderWrapper = function renderWrapper(children) {
      return this.props.wrapperClassName ? _react2['default'].createElement(
        'div',
        { className: this.props.wrapperClassName, key: 'wrapper' },
        children
      ) : children;
    };

    InputBase.prototype.renderLabel = function renderLabel(children) {
      var classes = {
        'control-label': !this.isCheckboxOrRadio()
      };
      classes[this.props.labelClassName] = this.props.labelClassName;

      return this.props.label ? _react2['default'].createElement(
        'label',
        { htmlFor: this.props.id, className: _classnames2['default'](classes), key: 'label' },
        children,
        this.props.label
      ) : children;
    };

    InputBase.prototype.renderInput = function renderInput() {
      if (!this.props.type) {
        return this.props.children;
      }

      switch (this.props.type) {
        case 'select':
          return _react2['default'].createElement(
            'select',
            _extends({}, this.props, { className: _classnames2['default'](this.props.className, 'form-control'), ref: 'input', key: 'input' }),
            this.props.children
          );
        case 'textarea':
          return _react2['default'].createElement('textarea', _extends({}, this.props, { className: _classnames2['default'](this.props.className, 'form-control'), ref: 'input', key: 'input' }));
        case 'static':
          return _react2['default'].createElement(
            'p',
            _extends({}, this.props, { className: _classnames2['default'](this.props.className, 'form-control-static'), ref: 'input', key: 'input' }),
            this.props.value
          );
      }

      var className = this.isCheckboxOrRadio() || this.isFile() ? '' : 'form-control';
      return _react2['default'].createElement('input', _extends({}, this.props, { className: _classnames2['default'](this.props.className, className), ref: 'input', key: 'input' }));
    };

    InputBase.prototype.renderFormGroup = function renderFormGroup(children) {
      return _react2['default'].createElement(
        _FormGroup2['default'],
        this.props,
        children
      );
    };

    InputBase.prototype.renderChildren = function renderChildren() {
      return !this.isCheckboxOrRadio() ? [this.renderLabel(), this.renderWrapper([this.renderInputGroup(this.renderInput()), this.renderIcon(), this.renderHelp()])] : this.renderWrapper([this.renderCheckboxAndRadioWrapper(this.renderLabel(this.renderInput())), this.renderHelp()]);
    };

    InputBase.prototype.render = function render() {
      var children = this.renderChildren();
      return this.renderFormGroup(children);
    };

    return InputBase;
  })(_react2['default'].Component);

  InputBase.propTypes = {
    type: _react2['default'].PropTypes.string,
    label: _react2['default'].PropTypes.node,
    help: _react2['default'].PropTypes.node,
    addonBefore: _react2['default'].PropTypes.node,
    addonAfter: _react2['default'].PropTypes.node,
    buttonBefore: _react2['default'].PropTypes.node,
    buttonAfter: _react2['default'].PropTypes.node,
    bsSize: _react2['default'].PropTypes.oneOf(['small', 'medium', 'large']),
    bsStyle: _react2['default'].PropTypes.oneOf(['success', 'warning', 'error']),
    hasFeedback: _react2['default'].PropTypes.bool,
    feedbackIcon: _react2['default'].PropTypes.node,
    id: _react2['default'].PropTypes.string,
    groupClassName: _react2['default'].PropTypes.string,
    wrapperClassName: _react2['default'].PropTypes.string,
    labelClassName: _react2['default'].PropTypes.string,
    multiple: _react2['default'].PropTypes.bool,
    disabled: _react2['default'].PropTypes.bool,
    value: _react2['default'].PropTypes.any
  };

  InputBase.defaultProps = {
    disabled: false,
    hasFeedback: false,
    multiple: false
  };

  exports['default'] = InputBase;
  module.exports = exports['default'];
},{"./FormGroup":141,"./Glyphicon":142,"babel-runtime/helpers/class-call-check":207,"babel-runtime/helpers/extends":208,"babel-runtime/helpers/inherits":209,"babel-runtime/helpers/interop-require-default":210,"classnames":40,"react":482}],146:[function(require,module,exports){
  // https://www.npmjs.org/package/react-interpolate-component
  // TODO: Drop this in favor of es6 string interpolation

  'use strict';

  var _extends = require('babel-runtime/helpers/extends')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _utilsValidComponentChildren = require('./utils/ValidComponentChildren');

  var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

  var REGEXP = /\%\((.+?)\)s/;

  var Interpolate = _react2['default'].createClass({
    displayName: 'Interpolate',

    propTypes: {
      component: _react2['default'].PropTypes.node,
      format: _react2['default'].PropTypes.string,
      unsafe: _react2['default'].PropTypes.bool
    },

    getDefaultProps: function getDefaultProps() {
      return {
        component: 'span',
        unsafe: false
      };
    },

    render: function render() {
      var format = _utilsValidComponentChildren2['default'].hasValidComponent(this.props.children) || typeof this.props.children === 'string' ? this.props.children : this.props.format;
      var parent = this.props.component;
      var unsafe = this.props.unsafe === true;
      var props = _extends({}, this.props);

      delete props.children;
      delete props.format;
      delete props.component;
      delete props.unsafe;

      if (unsafe) {
        var content = format.split(REGEXP).reduce(function (memo, match, index) {
          var html = undefined;

          if (index % 2 === 0) {
            html = match;
          } else {
            html = props[match];
            delete props[match];
          }

          if (_react2['default'].isValidElement(html)) {
            throw new Error('cannot interpolate a React component into unsafe text');
          }

          memo += html;

          return memo;
        }, '');

        props.dangerouslySetInnerHTML = { __html: content };

        return _react2['default'].createElement(parent, props);
      } else {
        var kids = format.split(REGEXP).reduce(function (memo, match, index) {
          var child = undefined;

          if (index % 2 === 0) {
            if (match.length === 0) {
              return memo;
            }

            child = match;
          } else {
            child = props[match];
            delete props[match];
          }

          memo.push(child);

          return memo;
        }, []);

        return _react2['default'].createElement(parent, props, kids);
      }
    }
  });

  exports['default'] = Interpolate;
  module.exports = exports['default'];
},{"./utils/ValidComponentChildren":193,"babel-runtime/helpers/extends":208,"babel-runtime/helpers/interop-require-default":210,"react":482}],147:[function(require,module,exports){
  'use strict';

  var _extends = require('babel-runtime/helpers/extends')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _classnames = require('classnames');

  var _classnames2 = _interopRequireDefault(_classnames);

  var _utilsCustomPropTypes = require('./utils/CustomPropTypes');

  var _utilsCustomPropTypes2 = _interopRequireDefault(_utilsCustomPropTypes);

  var Jumbotron = _react2['default'].createClass({
    displayName: 'Jumbotron',

    propTypes: {
      /**
       * You can use a custom element for this component
       */
      componentClass: _utilsCustomPropTypes2['default'].elementType
    },

    getDefaultProps: function getDefaultProps() {
      return { componentClass: 'div' };
    },

    render: function render() {
      var ComponentClass = this.props.componentClass;

      return _react2['default'].createElement(
        ComponentClass,
        _extends({}, this.props, { className: _classnames2['default'](this.props.className, 'jumbotron') }),
        this.props.children
      );
    }
  });

  exports['default'] = Jumbotron;
  module.exports = exports['default'];
},{"./utils/CustomPropTypes":190,"babel-runtime/helpers/extends":208,"babel-runtime/helpers/interop-require-default":210,"classnames":40,"react":482}],148:[function(require,module,exports){
  'use strict';

  var _extends = require('babel-runtime/helpers/extends')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _classnames = require('classnames');

  var _classnames2 = _interopRequireDefault(_classnames);

  var _BootstrapMixin = require('./BootstrapMixin');

  var _BootstrapMixin2 = _interopRequireDefault(_BootstrapMixin);

  var Label = _react2['default'].createClass({
    displayName: 'Label',

    mixins: [_BootstrapMixin2['default']],

    getDefaultProps: function getDefaultProps() {
      return {
        bsClass: 'label',
        bsStyle: 'default'
      };
    },

    render: function render() {
      var classes = this.getBsClassSet();

      return _react2['default'].createElement(
        'span',
        _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }),
        this.props.children
      );
    }
  });

  exports['default'] = Label;
  module.exports = exports['default'];
},{"./BootstrapMixin":122,"babel-runtime/helpers/extends":208,"babel-runtime/helpers/interop-require-default":210,"classnames":40,"react":482}],149:[function(require,module,exports){
  'use strict';

  var _inherits = require('babel-runtime/helpers/inherits')['default'];

  var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

  var _extends = require('babel-runtime/helpers/extends')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _classnames = require('classnames');

  var _classnames2 = _interopRequireDefault(_classnames);

  var _utilsValidComponentChildren = require('./utils/ValidComponentChildren');

  var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

  var ListGroup = (function (_React$Component) {
    _inherits(ListGroup, _React$Component);

    function ListGroup() {
      _classCallCheck(this, ListGroup);

      _React$Component.apply(this, arguments);
    }

    ListGroup.prototype.render = function render() {
      var _this = this;

      var items = _utilsValidComponentChildren2['default'].map(this.props.children, function (item, index) {
        return _react.cloneElement(item, { key: item.key ? item.key : index });
      });

      var shouldRenderDiv = false;

      if (!this.props.children) {
        shouldRenderDiv = true;
      } else {
        _react2['default'].Children.forEach(this.props.children, function (child) {
          if (_this.isAnchorOrButton(child.props)) {
            shouldRenderDiv = true;
          }
        });
      }

      if (shouldRenderDiv) {
        return this.renderDiv(items);
      } else {
        return this.renderUL(items);
      }
    };

    ListGroup.prototype.isAnchorOrButton = function isAnchorOrButton(props) {
      return props.href || props.onClick;
    };

    ListGroup.prototype.renderUL = function renderUL(items) {
      var listItems = _utilsValidComponentChildren2['default'].map(items, function (item, index) {
        return _react.cloneElement(item, { listItem: true });
      });

      return _react2['default'].createElement(
        'ul',
        _extends({}, this.props, {
          className: _classnames2['default'](this.props.className, 'list-group') }),
        listItems
      );
    };

    ListGroup.prototype.renderDiv = function renderDiv(items) {
      return _react2['default'].createElement(
        'div',
        _extends({}, this.props, {
          className: _classnames2['default'](this.props.className, 'list-group') }),
        items
      );
    };

    return ListGroup;
  })(_react2['default'].Component);

  ListGroup.propTypes = {
    className: _react2['default'].PropTypes.string,
    id: _react2['default'].PropTypes.string
  };

  exports['default'] = ListGroup;
  module.exports = exports['default'];
},{"./utils/ValidComponentChildren":193,"babel-runtime/helpers/class-call-check":207,"babel-runtime/helpers/extends":208,"babel-runtime/helpers/inherits":209,"babel-runtime/helpers/interop-require-default":210,"classnames":40,"react":482}],150:[function(require,module,exports){
  'use strict';

  var _extends = require('babel-runtime/helpers/extends')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _BootstrapMixin = require('./BootstrapMixin');

  var _BootstrapMixin2 = _interopRequireDefault(_BootstrapMixin);

  var _classnames = require('classnames');

  var _classnames2 = _interopRequireDefault(_classnames);

  var ListGroupItem = _react2['default'].createClass({
    displayName: 'ListGroupItem',

    mixins: [_BootstrapMixin2['default']],

    propTypes: {
      bsStyle: _react2['default'].PropTypes.oneOf(['danger', 'info', 'success', 'warning']),
      className: _react2['default'].PropTypes.string,
      active: _react2['default'].PropTypes.any,
      disabled: _react2['default'].PropTypes.any,
      header: _react2['default'].PropTypes.node,
      listItem: _react2['default'].PropTypes.bool,
      onClick: _react2['default'].PropTypes.func,
      eventKey: _react2['default'].PropTypes.any,
      href: _react2['default'].PropTypes.string,
      target: _react2['default'].PropTypes.string
    },

    getDefaultProps: function getDefaultProps() {
      return {
        bsClass: 'list-group-item',
        listItem: false
      };
    },

    render: function render() {
      var classes = this.getBsClassSet();

      classes.active = this.props.active;
      classes.disabled = this.props.disabled;

      if (this.props.href) {
        return this.renderAnchor(classes);
      } else if (this.props.onClick) {
        return this.renderButton(classes);
      } else if (this.props.listItem) {
        return this.renderLi(classes);
      } else {
        return this.renderSpan(classes);
      }
    },

    renderLi: function renderLi(classes) {
      return _react2['default'].createElement(
        'li',
        _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }),
        this.props.header ? this.renderStructuredContent() : this.props.children
      );
    },

    renderAnchor: function renderAnchor(classes) {
      return _react2['default'].createElement(
        'a',
        _extends({}, this.props, {
          className: _classnames2['default'](this.props.className, classes)
        }),
        this.props.header ? this.renderStructuredContent() : this.props.children
      );
    },

    renderButton: function renderButton(classes) {
      return _react2['default'].createElement(
        'button',
        _extends({
          type: 'button'
        }, this.props, {
          className: _classnames2['default'](this.props.className, classes) }),
        this.props.children
      );
    },

    renderSpan: function renderSpan(classes) {
      return _react2['default'].createElement(
        'span',
        _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }),
        this.props.header ? this.renderStructuredContent() : this.props.children
      );
    },

    renderStructuredContent: function renderStructuredContent() {
      var header = undefined;
      if (_react2['default'].isValidElement(this.props.header)) {
        header = _react.cloneElement(this.props.header, {
          key: 'header',
          className: _classnames2['default'](this.props.header.props.className, 'list-group-item-heading')
        });
      } else {
        header = _react2['default'].createElement(
          'h4',
          { key: 'header', className: 'list-group-item-heading' },
          this.props.header
        );
      }

      var content = _react2['default'].createElement(
        'p',
        { key: 'content', className: 'list-group-item-text' },
        this.props.children
      );

      return [header, content];
    }
  });

  exports['default'] = ListGroupItem;
  module.exports = exports['default'];
},{"./BootstrapMixin":122,"babel-runtime/helpers/extends":208,"babel-runtime/helpers/interop-require-default":210,"classnames":40,"react":482}],151:[function(require,module,exports){
  'use strict';

  var _inherits = require('babel-runtime/helpers/inherits')['default'];

  var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _classnames = require('classnames');

  var _classnames2 = _interopRequireDefault(_classnames);

  var _utilsCustomPropTypes = require('./utils/CustomPropTypes');

  var _utilsCustomPropTypes2 = _interopRequireDefault(_utilsCustomPropTypes);

  var _SafeAnchor = require('./SafeAnchor');

  var _SafeAnchor2 = _interopRequireDefault(_SafeAnchor);

  var MenuItem = (function (_React$Component) {
    _inherits(MenuItem, _React$Component);

    function MenuItem(props) {
      _classCallCheck(this, MenuItem);

      _React$Component.call(this, props);

      this.handleClick = this.handleClick.bind(this);
    }

    MenuItem.prototype.handleClick = function handleClick(event) {
      if (!this.props.href || this.props.disabled) {
        event.preventDefault();
      }

      if (this.props.disabled) {
        return;
      }

      if (this.props.onSelect) {
        this.props.onSelect(event, this.props.eventKey);
      }
    };

    MenuItem.prototype.render = function render() {
      if (this.props.divider) {
        return _react2['default'].createElement('li', { role: 'separator', className: 'divider' });
      }

      if (this.props.header) {
        return _react2['default'].createElement(
          'li',
          { role: 'heading', className: 'dropdown-header' },
          this.props.children
        );
      }

      var classes = {
        disabled: this.props.disabled
      };

      return _react2['default'].createElement(
        'li',
        { role: 'presentation',
          className: _classnames2['default'](this.props.className, classes),
          style: this.props.style
        },
        _react2['default'].createElement(
          _SafeAnchor2['default'],
          {
            role: 'menuitem',
            tabIndex: '-1',
            target: this.props.target,
            title: this.props.title,
            href: this.props.href || '',
            onKeyDown: this.props.onKeyDown,
            onClick: this.handleClick },
          this.props.children
        )
      );
    };

    return MenuItem;
  })(_react2['default'].Component);

  exports['default'] = MenuItem;

  MenuItem.propTypes = {
    disabled: _react2['default'].PropTypes.bool,
    divider: _utilsCustomPropTypes2['default'].all([_react2['default'].PropTypes.bool, function (props, propName, componentName) {
      if (props.divider && props.children) {
        return new Error('Children will not be rendered for dividers');
      }
    }]),
    eventKey: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.number, _react2['default'].PropTypes.string]),
    header: _react2['default'].PropTypes.bool,
    href: _react2['default'].PropTypes.string,
    target: _react2['default'].PropTypes.string,
    title: _react2['default'].PropTypes.string,
    onKeyDown: _react2['default'].PropTypes.func,
    onSelect: _react2['default'].PropTypes.func
  };

  MenuItem.defaultProps = {
    divider: false,
    disabled: false,
    header: false
  };
  module.exports = exports['default'];
},{"./SafeAnchor":176,"./utils/CustomPropTypes":190,"babel-runtime/helpers/class-call-check":207,"babel-runtime/helpers/inherits":209,"babel-runtime/helpers/interop-require-default":210,"classnames":40,"react":482}],152:[function(require,module,exports){
  /*eslint-disable react/prop-types */
  'use strict';

  var _extends = require('babel-runtime/helpers/extends')['default'];

  var _objectWithoutProperties = require('babel-runtime/helpers/object-without-properties')['default'];

  var _Object$isFrozen = require('babel-runtime/core-js/object/is-frozen')['default'];

  var _Object$keys = require('babel-runtime/core-js/object/keys')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _classnames = require('classnames');

  var _classnames2 = _interopRequireDefault(_classnames);

  var _utilsDomUtils = require('./utils/domUtils');

  var _utilsDomUtils2 = _interopRequireDefault(_utilsDomUtils);

  var _domHelpersUtilScrollbarSize = require('dom-helpers/util/scrollbarSize');

  var _domHelpersUtilScrollbarSize2 = _interopRequireDefault(_domHelpersUtilScrollbarSize);

  var _utilsEventListener = require('./utils/EventListener');

  var _utilsEventListener2 = _interopRequireDefault(_utilsEventListener);

  var _utilsCreateChainedFunction = require('./utils/createChainedFunction');

  var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

  var _utilsCustomPropTypes = require('./utils/CustomPropTypes');

  var _utilsCustomPropTypes2 = _interopRequireDefault(_utilsCustomPropTypes);

  var _reactOverlaysLibPortal = require('react-overlays/lib/Portal');

  var _reactOverlaysLibPortal2 = _interopRequireDefault(_reactOverlaysLibPortal);

  var _Fade = require('./Fade');

  var _Fade2 = _interopRequireDefault(_Fade);

  var _ModalDialog = require('./ModalDialog');

  var _ModalDialog2 = _interopRequireDefault(_ModalDialog);

  var _ModalBody = require('./ModalBody');

  var _ModalBody2 = _interopRequireDefault(_ModalBody);

  var _ModalHeader = require('./ModalHeader');

  var _ModalHeader2 = _interopRequireDefault(_ModalHeader);

  var _ModalTitle = require('./ModalTitle');

  var _ModalTitle2 = _interopRequireDefault(_ModalTitle);

  var _ModalFooter = require('./ModalFooter');

  var _ModalFooter2 = _interopRequireDefault(_ModalFooter);

  /**
   * Gets the correct clientHeight of the modal container
   * when the body/window/document you need to use the docElement clientHeight
   * @param  {HTMLElement} container
   * @param  {ReactElement|HTMLElement} context
   * @return {Number}
   */
  function containerClientHeight(container, context) {
    var doc = _utilsDomUtils2['default'].ownerDocument(context);

    return container === doc.body || container === doc.documentElement ? doc.documentElement.clientHeight : container.clientHeight;
  }

  function getContainer(context) {
    return context.props.container && _react2['default'].findDOMNode(context.props.container) || _utilsDomUtils2['default'].ownerDocument(context).body;
  }

  var currentFocusListener = undefined;

  /**
   * Firefox doesn't have a focusin event so using capture is easiest way to get bubbling
   * IE8 can't do addEventListener, but does have onfocusin, so we use that in ie8
   *
   * We only allow one Listener at a time to avoid stack overflows
   *
   * @param  {ReactElement|HTMLElement} context
   * @param  {Function} handler
   */
  function onFocus(context, handler) {
    var doc = _utilsDomUtils2['default'].ownerDocument(context);
    var useFocusin = !doc.addEventListener;
    var remove = undefined;

    if (currentFocusListener) {
      currentFocusListener.remove();
    }

    if (useFocusin) {
      document.attachEvent('onfocusin', handler);
      remove = function () {
        return document.detachEvent('onfocusin', handler);
      };
    } else {
      document.addEventListener('focus', handler, true);
      remove = function () {
        return document.removeEventListener('focus', handler, true);
      };
    }

    currentFocusListener = { remove: remove };

    return currentFocusListener;
  }

  var Modal = _react2['default'].createClass({
    displayName: 'Modal',

    propTypes: _extends({}, _reactOverlaysLibPortal2['default'].propTypes, _ModalDialog2['default'].propTypes, {

      /**
       * Include a backdrop component. Specify 'static' for a backdrop that doesn't trigger an "onHide" when clicked.
       */
      backdrop: _react2['default'].PropTypes.oneOf(['static', true, false]),

      /**
       * Close the modal when escape key is pressed
       */
      keyboard: _react2['default'].PropTypes.bool,

      /**
       * Open and close the Modal with a slide and fade animation.
       */
      animation: _react2['default'].PropTypes.bool,

      /**
       * A Component type that provides the modal content Markup. This is a useful prop when you want to use your own
       * styles and markup to create a custom modal component.
       */
      dialogComponent: _utilsCustomPropTypes2['default'].elementType,

      /**
       * When `true` The modal will automatically shift focus to itself when it opens, and replace it to the last focused element when it closes.
       * Generally this should never be set to false as it makes the Modal less accessible to assistive technologies, like screen-readers.
       */
      autoFocus: _react2['default'].PropTypes.bool,

      /**
       * When `true` The modal will prevent focus from leaving the Modal while open.
       * Consider leaving the default value here, as it is necessary to make the Modal work well with assistive technologies,
       * such as screen readers.
       */
      enforceFocus: _react2['default'].PropTypes.bool,

      /**
       * Hide this from automatic props documentation generation.
       * @private
       */
      bsStyle: _react2['default'].PropTypes.string,

      /**
       * When `true` The modal will show itself.
       */
      show: _react2['default'].PropTypes.bool
    }),

    getDefaultProps: function getDefaultProps() {
      return {
        bsClass: 'modal',
        dialogComponent: _ModalDialog2['default'],
        show: false,
        animation: true,
        backdrop: true,
        keyboard: true,
        autoFocus: true,
        enforceFocus: true
      };
    },

    getInitialState: function getInitialState() {
      return {
        exited: !this.props.show
      };
    },

    render: function render() {
      var _props = this.props;
      var children = _props.children;
      var animation = _props.animation;
      var backdrop = _props.backdrop;

      var props = _objectWithoutProperties(_props, ['children', 'animation', 'backdrop']);

      var onExit = props.onExit;
      var onExiting = props.onExiting;
      var onEnter = props.onEnter;
      var onEntering = props.onEntering;
      var onEntered = props.onEntered;

      var show = !!props.show;
      var Dialog = props.dialogComponent;

      var mountModal = show || animation && !this.state.exited;
      if (!mountModal) {
        return null;
      }

      var modal = _react2['default'].createElement(
        Dialog,
        _extends({}, props, {
          ref: this._setDialogRef,
          className: _classnames2['default'](this.props.className, { 'in': show && !animation }),
          onClick: backdrop === true ? this.handleBackdropClick : null }),
        this.renderContent()
      );

      if (animation) {
        modal = _react2['default'].createElement(
          _Fade2['default'],
          {
            transitionAppear: true,
            unmountOnExit: true,
            'in': show,
            timeout: Modal.TRANSITION_DURATION,
            onExit: onExit,
            onExiting: onExiting,
            onExited: this.handleHidden,
            onEnter: onEnter,
            onEntering: onEntering,
            onEntered: onEntered },
          modal
        );
      }

      if (backdrop) {
        modal = this.renderBackdrop(modal);
      }

      return _react2['default'].createElement(
        _reactOverlaysLibPortal2['default'],
        { container: props.container },
        modal
      );
    },

    renderContent: function renderContent() {
      var _this = this;

      return _react2['default'].Children.map(this.props.children, function (child) {
        // TODO: use context in 0.14
        if (child && child.type && child.type.__isModalHeader) {
          return _react.cloneElement(child, {
            onHide: _utilsCreateChainedFunction2['default'](_this.props.onHide, child.props.onHide)
          });
        }
        return child;
      });
    },

    renderBackdrop: function renderBackdrop(modal) {
      var _props2 = this.props;
      var animation = _props2.animation;
      var bsClass = _props2.bsClass;

      var duration = Modal.BACKDROP_TRANSITION_DURATION;

      // Don't handle clicks for "static" backdrops
      var onClick = this.props.backdrop === true ? this.handleBackdropClick : null;

      var backdrop = _react2['default'].createElement('div', {
        ref: 'backdrop',
        className: _classnames2['default'](bsClass + '-backdrop', { 'in': this.props.show && !animation }),
        onClick: onClick });

      return _react2['default'].createElement(
        'div',
        {
          ref: 'modal' },
        animation ? _react2['default'].createElement(
          _Fade2['default'],
          { transitionAppear: true, 'in': this.props.show, timeout: duration },
          backdrop
        ) : backdrop,
        modal
      );
    },

    _setDialogRef: function _setDialogRef(ref) {
      // issue #1074
      // due to: https://github.com/facebook/react/blob/v0.13.3/src/core/ReactCompositeComponent.js#L842
      //
      // when backdrop is `false` react hasn't had a chance to reassign the refs to a usable object, b/c there are no other
      // "classic" refs on the component (or they haven't been processed yet)
      // TODO: Remove the need for this in next breaking release
      if (_Object$isFrozen(this.refs) && !_Object$keys(this.refs).length) {
        this.refs = {};
      }

      this.refs.dialog = ref;

      //maintains backwards compat with older component breakdown
      if (!this.props.backdrop) {
        this.refs.modal = ref;
      }
    },

    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
      if (nextProps.show) {
        this.setState({ exited: false });
      } else if (!nextProps.animation) {
        // Otherwise let handleHidden take care of marking exited.
        this.setState({ exited: true });
      }
    },

    componentWillUpdate: function componentWillUpdate(nextProps) {
      if (nextProps.show) {
        this.checkForFocus();
      }
    },

    componentDidMount: function componentDidMount() {
      if (this.props.show) {
        this.onShow();
      }
    },

    componentDidUpdate: function componentDidUpdate(prevProps) {
      var animation = this.props.animation;

      if (prevProps.show && !this.props.show && !animation) {
        //otherwise handleHidden will call this.
        this.onHide();
      } else if (!prevProps.show && this.props.show) {
        this.onShow();
      }
    },

    componentWillUnmount: function componentWillUnmount() {
      if (this.props.show) {
        this.onHide();
      }
    },

    onShow: function onShow() {
      var _this2 = this;

      var doc = _utilsDomUtils2['default'].ownerDocument(this);
      var win = _utilsDomUtils2['default'].ownerWindow(this);

      this._onDocumentKeyupListener = _utilsEventListener2['default'].listen(doc, 'keyup', this.handleDocumentKeyUp);

      this._onWindowResizeListener = _utilsEventListener2['default'].listen(win, 'resize', this.handleWindowResize);

      if (this.props.enforceFocus) {
        this._onFocusinListener = onFocus(this, this.enforceFocus);
      }

      var container = getContainer(this);

      container.className += container.className.length ? ' modal-open' : 'modal-open';

      this._containerIsOverflowing = container.scrollHeight > containerClientHeight(container, this);

      this._originalPadding = container.style.paddingRight;

      if (this._containerIsOverflowing) {
        container.style.paddingRight = parseInt(this._originalPadding || 0, 10) + _domHelpersUtilScrollbarSize2['default']() + 'px';
      }

      if (this.props.backdrop) {
        this.iosClickHack();
      }

      this.setState(this._getStyles(), function () {
        return _this2.focusModalContent();
      });
    },

    onHide: function onHide() {
      this._onDocumentKeyupListener.remove();
      this._onWindowResizeListener.remove();

      if (this._onFocusinListener) {
        this._onFocusinListener.remove();
      }

      var container = getContainer(this);

      container.style.paddingRight = this._originalPadding;

      container.className = container.className.replace(/ ?modal-open/, '');

      this.restoreLastFocus();
    },

    handleHidden: function handleHidden() {
      this.setState({ exited: true });

      this.onHide();

      if (this.props.onExited) {
        var _props3;

        (_props3 = this.props).onExited.apply(_props3, arguments);
      }
    },

    handleBackdropClick: function handleBackdropClick(e) {
      if (e.target !== e.currentTarget) {
        return;
      }

      this.props.onHide();
    },

    handleDocumentKeyUp: function handleDocumentKeyUp(e) {
      if (this.props.keyboard && e.keyCode === 27) {
        this.props.onHide();
      }
    },

    handleWindowResize: function handleWindowResize() {
      this.setState(this._getStyles());
    },

    checkForFocus: function checkForFocus() {
      if (_utilsDomUtils2['default'].canUseDom) {
        this.lastFocus = _utilsDomUtils2['default'].activeElement(document);
      }
    },

    focusModalContent: function focusModalContent() {
      var modalContent = _react2['default'].findDOMNode(this.refs.dialog);
      var current = _utilsDomUtils2['default'].activeElement(_utilsDomUtils2['default'].ownerDocument(this));
      var focusInModal = current && _utilsDomUtils2['default'].contains(modalContent, current);

      if (modalContent && this.props.autoFocus && !focusInModal) {
        this.lastFocus = current;
        modalContent.focus();
      }
    },

    restoreLastFocus: function restoreLastFocus() {
      if (this.lastFocus && this.lastFocus.focus) {
        this.lastFocus.focus();
        this.lastFocus = null;
      }
    },

    enforceFocus: function enforceFocus() {
      if (!this.isMounted()) {
        return;
      }

      var active = _utilsDomUtils2['default'].activeElement(_utilsDomUtils2['default'].ownerDocument(this));
      var modal = _react2['default'].findDOMNode(this.refs.dialog);

      if (modal && modal !== active && !_utilsDomUtils2['default'].contains(modal, active)) {
        modal.focus();
      }
    },

    iosClickHack: function iosClickHack() {
      // IOS only allows click events to be delegated to the document on elements
      // it considers 'clickable' - anchors, buttons, etc. We fake a click handler on the
      // DOM nodes themselves. Remove if handled by React: https://github.com/facebook/react/issues/1169
      _react2['default'].findDOMNode(this.refs.modal).onclick = function () {};
      _react2['default'].findDOMNode(this.refs.backdrop).onclick = function () {};
    },

    _getStyles: function _getStyles() {
      if (!_utilsDomUtils2['default'].canUseDom) {
        return {};
      }

      var node = _react2['default'].findDOMNode(this.refs.modal);
      var scrollHt = node.scrollHeight;
      var container = getContainer(this);
      var containerIsOverflowing = this._containerIsOverflowing;
      var modalIsOverflowing = scrollHt > containerClientHeight(container, this);

      return {
        dialogStyles: {
          paddingRight: containerIsOverflowing && !modalIsOverflowing ? _domHelpersUtilScrollbarSize2['default']() : void 0,
          paddingLeft: !containerIsOverflowing && modalIsOverflowing ? _domHelpersUtilScrollbarSize2['default']() : void 0
        }
      };
    }

  });

  Modal.Body = _ModalBody2['default'];
  Modal.Header = _ModalHeader2['default'];
  Modal.Title = _ModalTitle2['default'];
  Modal.Footer = _ModalFooter2['default'];

  Modal.Dialog = _ModalDialog2['default'];

  Modal.TRANSITION_DURATION = 300;
  Modal.BACKDROP_TRANSITION_DURATION = 150;

  exports['default'] = Modal;
  module.exports = exports['default'];
},{"./Fade":137,"./ModalBody":153,"./ModalDialog":154,"./ModalFooter":155,"./ModalHeader":156,"./ModalTitle":157,"./utils/CustomPropTypes":190,"./utils/EventListener":191,"./utils/createChainedFunction":196,"./utils/domUtils":200,"babel-runtime/core-js/object/is-frozen":204,"babel-runtime/core-js/object/keys":205,"babel-runtime/helpers/extends":208,"babel-runtime/helpers/interop-require-default":210,"babel-runtime/helpers/object-without-properties":212,"classnames":40,"dom-helpers/util/scrollbarSize":261,"react":482,"react-overlays/lib/Portal":264}],153:[function(require,module,exports){
  'use strict';

  var _inherits = require('babel-runtime/helpers/inherits')['default'];

  var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

  var _extends = require('babel-runtime/helpers/extends')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _classnames = require('classnames');

  var _classnames2 = _interopRequireDefault(_classnames);

  var ModalBody = (function (_React$Component) {
    _inherits(ModalBody, _React$Component);

    function ModalBody() {
      _classCallCheck(this, ModalBody);

      _React$Component.apply(this, arguments);
    }

    ModalBody.prototype.render = function render() {
      return _react2['default'].createElement(
        'div',
        _extends({}, this.props, {
          className: _classnames2['default'](this.props.className, this.props.modalClassName) }),
        this.props.children
      );
    };

    return ModalBody;
  })(_react2['default'].Component);

  ModalBody.propTypes = {
    /**
     * A css class applied to the Component
     */
    modalClassName: _react2['default'].PropTypes.string
  };

  ModalBody.defaultProps = {
    modalClassName: 'modal-body'
  };

  exports['default'] = ModalBody;
  module.exports = exports['default'];
},{"babel-runtime/helpers/class-call-check":207,"babel-runtime/helpers/extends":208,"babel-runtime/helpers/inherits":209,"babel-runtime/helpers/interop-require-default":210,"classnames":40,"react":482}],154:[function(require,module,exports){
  /*eslint-disable react/prop-types */
  'use strict';

  var _extends = require('babel-runtime/helpers/extends')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _classnames = require('classnames');

  var _classnames2 = _interopRequireDefault(_classnames);

  var _BootstrapMixin = require('./BootstrapMixin');

  var _BootstrapMixin2 = _interopRequireDefault(_BootstrapMixin);

  var ModalDialog = _react2['default'].createClass({
    displayName: 'ModalDialog',

    mixins: [_BootstrapMixin2['default']],

    propTypes: {
      /**
       * A Callback fired when the header closeButton or non-static backdrop is clicked.
       * @type {function}
       * @required
       */
      onHide: _react2['default'].PropTypes.func.isRequired,

      /**
       * A css class to apply to the Modal dialog DOM node.
       */
      dialogClassName: _react2['default'].PropTypes.string

    },

    getDefaultProps: function getDefaultProps() {
      return {
        bsClass: 'modal',
        closeButton: true
      };
    },

    render: function render() {
      var modalStyle = _extends({
        display: 'block'
      }, this.props.style);
      var bsClass = this.props.bsClass;
      var dialogClasses = this.getBsClassSet();

      delete dialogClasses.modal;
      dialogClasses[bsClass + '-dialog'] = true;

      return _react2['default'].createElement(
        'div',
        _extends({}, this.props, {
          title: null,
          tabIndex: '-1',
          role: 'dialog',
          style: modalStyle,
          className: _classnames2['default'](this.props.className, bsClass) }),
        _react2['default'].createElement(
          'div',
          { className: _classnames2['default'](this.props.dialogClassName, dialogClasses) },
          _react2['default'].createElement(
            'div',
            { className: bsClass + '-content', role: 'document' },
            this.props.children
          )
        )
      );
    }
  });

  exports['default'] = ModalDialog;
  module.exports = exports['default'];
},{"./BootstrapMixin":122,"babel-runtime/helpers/extends":208,"babel-runtime/helpers/interop-require-default":210,"classnames":40,"react":482}],155:[function(require,module,exports){
  'use strict';

  var _inherits = require('babel-runtime/helpers/inherits')['default'];

  var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

  var _extends = require('babel-runtime/helpers/extends')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _classnames = require('classnames');

  var _classnames2 = _interopRequireDefault(_classnames);

  var ModalFooter = (function (_React$Component) {
    _inherits(ModalFooter, _React$Component);

    function ModalFooter() {
      _classCallCheck(this, ModalFooter);

      _React$Component.apply(this, arguments);
    }

    ModalFooter.prototype.render = function render() {
      return _react2['default'].createElement(
        'div',
        _extends({}, this.props, {
          className: _classnames2['default'](this.props.className, this.props.modalClassName) }),
        this.props.children
      );
    };

    return ModalFooter;
  })(_react2['default'].Component);

  ModalFooter.propTypes = {
    /**
     * A css class applied to the Component
     */
    modalClassName: _react2['default'].PropTypes.string
  };

  ModalFooter.defaultProps = {
    modalClassName: 'modal-footer'
  };

  exports['default'] = ModalFooter;
  module.exports = exports['default'];
},{"babel-runtime/helpers/class-call-check":207,"babel-runtime/helpers/extends":208,"babel-runtime/helpers/inherits":209,"babel-runtime/helpers/interop-require-default":210,"classnames":40,"react":482}],156:[function(require,module,exports){
  'use strict';

  var _inherits = require('babel-runtime/helpers/inherits')['default'];

  var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

  var _extends = require('babel-runtime/helpers/extends')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _classnames = require('classnames');

  var _classnames2 = _interopRequireDefault(_classnames);

  var ModalHeader = (function (_React$Component) {
    _inherits(ModalHeader, _React$Component);

    function ModalHeader() {
      _classCallCheck(this, ModalHeader);

      _React$Component.apply(this, arguments);
    }

    //used in liue of parent contexts right now to auto wire the close button

    ModalHeader.prototype.render = function render() {
      return _react2['default'].createElement(
        'div',
        _extends({}, this.props, {
          className: _classnames2['default'](this.props.className, this.props.modalClassName) }),
        this.props.closeButton && _react2['default'].createElement(
          'button',
          {
            className: 'close',
            onClick: this.props.onHide },
          _react2['default'].createElement(
            'span',
            { 'aria-hidden': 'true' },
            '×'
          )
        ),
        this.props.children
      );
    };

    return ModalHeader;
  })(_react2['default'].Component);

  ModalHeader.__isModalHeader = true;

  ModalHeader.propTypes = {
    /**
     * The 'aria-label' attribute is used to define a string that labels the current element.
     * It is used for Assistive Technology when the label text is not visible on screen.
     */
    'aria-label': _react2['default'].PropTypes.string,

    /**
     * A css class applied to the Component
     */
    modalClassName: _react2['default'].PropTypes.string,

    /**
     * Specify whether the Component should contain a close button
     */
    closeButton: _react2['default'].PropTypes.bool,

    /**
     * A Callback fired when the close button is clicked. If used directly inside a Modal component, the onHide will automatically
     * be propagated up to the parent Modal `onHide`.
     */
    onHide: _react2['default'].PropTypes.func
  };

  ModalHeader.defaultProps = {
    'aria-label': 'Close',
    modalClassName: 'modal-header',
    closeButton: false
  };

  exports['default'] = ModalHeader;
  module.exports = exports['default'];
},{"babel-runtime/helpers/class-call-check":207,"babel-runtime/helpers/extends":208,"babel-runtime/helpers/inherits":209,"babel-runtime/helpers/interop-require-default":210,"classnames":40,"react":482}],157:[function(require,module,exports){
  'use strict';

  var _inherits = require('babel-runtime/helpers/inherits')['default'];

  var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

  var _extends = require('babel-runtime/helpers/extends')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _classnames = require('classnames');

  var _classnames2 = _interopRequireDefault(_classnames);

  var ModalTitle = (function (_React$Component) {
    _inherits(ModalTitle, _React$Component);

    function ModalTitle() {
      _classCallCheck(this, ModalTitle);

      _React$Component.apply(this, arguments);
    }

    ModalTitle.prototype.render = function render() {
      return _react2['default'].createElement(
        'h4',
        _extends({}, this.props, {
          className: _classnames2['default'](this.props.className, this.props.modalClassName) }),
        this.props.children
      );
    };

    return ModalTitle;
  })(_react2['default'].Component);

  ModalTitle.propTypes = {
    /**
     * A css class applied to the Component
     */
    modalClassName: _react2['default'].PropTypes.string
  };

  ModalTitle.defaultProps = {
    modalClassName: 'modal-title'
  };

  exports['default'] = ModalTitle;
  module.exports = exports['default'];
},{"babel-runtime/helpers/class-call-check":207,"babel-runtime/helpers/extends":208,"babel-runtime/helpers/inherits":209,"babel-runtime/helpers/interop-require-default":210,"classnames":40,"react":482}],158:[function(require,module,exports){
  'use strict';

  var _extends = require('babel-runtime/helpers/extends')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _BootstrapMixin = require('./BootstrapMixin');

  var _BootstrapMixin2 = _interopRequireDefault(_BootstrapMixin);

  var _Collapse = require('./Collapse');

  var _Collapse2 = _interopRequireDefault(_Collapse);

  var _classnames = require('classnames');

  var _classnames2 = _interopRequireDefault(_classnames);

  var _utilsValidComponentChildren = require('./utils/ValidComponentChildren');

  var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

  var _utilsCreateChainedFunction = require('./utils/createChainedFunction');

  var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

  var Nav = _react2['default'].createClass({
    displayName: 'Nav',

    mixins: [_BootstrapMixin2['default']],

    propTypes: {
      activeHref: _react2['default'].PropTypes.string,
      activeKey: _react2['default'].PropTypes.any,
      bsStyle: _react2['default'].PropTypes.oneOf(['tabs', 'pills']),
      stacked: _react2['default'].PropTypes.bool,
      justified: _react2['default'].PropTypes.bool,
      onSelect: _react2['default'].PropTypes.func,
      collapsible: _react2['default'].PropTypes.bool,
      /**
       * CSS classes for the wrapper `nav` element
       */
      className: _react2['default'].PropTypes.string,
      /**
       * HTML id for the wrapper `nav` element
       */
      id: _react2['default'].PropTypes.string,
      /**
       * CSS classes for the inner `ul` element
       */
      ulClassName: _react2['default'].PropTypes.string,
      /**
       * HTML id for the inner `ul` element
       */
      ulId: _react2['default'].PropTypes.string,
      expanded: _react2['default'].PropTypes.bool,
      navbar: _react2['default'].PropTypes.bool,
      eventKey: _react2['default'].PropTypes.any,
      pullRight: _react2['default'].PropTypes.bool,
      right: _react2['default'].PropTypes.bool
    },

    getDefaultProps: function getDefaultProps() {
      return {
        bsClass: 'nav',
        collapsible: false,
        expanded: true,
        justified: false,
        navbar: false,
        pullRight: false,
        right: false,
        stacked: false
      };
    },

    render: function render() {
      var classes = this.props.collapsible ? 'navbar-collapse' : null;

      if (this.props.navbar && !this.props.collapsible) {
        return this.renderUl();
      }

      return _react2['default'].createElement(
        _Collapse2['default'],
        { 'in': this.props.expanded },
        _react2['default'].createElement(
          'nav',
          _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }),
          this.renderUl()
        )
      );
    },

    renderUl: function renderUl() {
      var classes = this.getBsClassSet();

      classes['nav-stacked'] = this.props.stacked;
      classes['nav-justified'] = this.props.justified;
      classes['navbar-nav'] = this.props.navbar;
      classes['pull-right'] = this.props.pullRight;
      classes['navbar-right'] = this.props.right;

      return _react2['default'].createElement(
        'ul',
        _extends({}, this.props, {
          role: this.props.bsStyle === 'tabs' ? 'tablist' : null,
          className: _classnames2['default'](this.props.ulClassName, classes),
          id: this.props.ulId,
          ref: 'ul'
        }),
        _utilsValidComponentChildren2['default'].map(this.props.children, this.renderNavItem)
      );
    },

    getChildActiveProp: function getChildActiveProp(child) {
      if (child.props.active) {
        return true;
      }
      if (this.props.activeKey != null) {
        if (child.props.eventKey === this.props.activeKey) {
          return true;
        }
      }
      if (this.props.activeHref != null) {
        if (child.props.href === this.props.activeHref) {
          return true;
        }
      }

      return child.props.active;
    },

    renderNavItem: function renderNavItem(child, index) {
      return _react.cloneElement(child, {
        role: this.props.bsStyle === 'tabs' ? 'tab' : null,
        active: this.getChildActiveProp(child),
        activeKey: this.props.activeKey,
        activeHref: this.props.activeHref,
        onSelect: _utilsCreateChainedFunction2['default'](child.props.onSelect, this.props.onSelect),
        key: child.key ? child.key : index,
        navItem: true
      });
    }
  });

  exports['default'] = Nav;
  module.exports = exports['default'];
},{"./BootstrapMixin":122,"./Collapse":130,"./utils/ValidComponentChildren":193,"./utils/createChainedFunction":196,"babel-runtime/helpers/extends":208,"babel-runtime/helpers/interop-require-default":210,"classnames":40,"react":482}],159:[function(require,module,exports){
  'use strict';

  var _inherits = require('babel-runtime/helpers/inherits')['default'];

  var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

  var _extends = require('babel-runtime/helpers/extends')['default'];

  var _objectWithoutProperties = require('babel-runtime/helpers/object-without-properties')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _Dropdown = require('./Dropdown');

  var _Dropdown2 = _interopRequireDefault(_Dropdown);

  var NavDropdown = (function (_React$Component) {
    _inherits(NavDropdown, _React$Component);

    function NavDropdown() {
      _classCallCheck(this, NavDropdown);

      _React$Component.apply(this, arguments);
    }

    NavDropdown.prototype.render = function render() {
      var _props = this.props;
      var children = _props.children;
      var title = _props.title;
      var noCaret = _props.noCaret;

      var props = _objectWithoutProperties(_props, ['children', 'title', 'noCaret']);

      return _react2['default'].createElement(
        _Dropdown2['default'],
        _extends({}, props, { componentClass: 'li' }),
        _react2['default'].createElement(
          _Dropdown2['default'].Toggle,
          {
            useAnchor: true,
            disabled: props.disabled,
            noCaret: noCaret
          },
          title
        ),
        _react2['default'].createElement(
          _Dropdown2['default'].Menu,
          null,
          children
        )
      );
    };

    return NavDropdown;
  })(_react2['default'].Component);

  NavDropdown.propTypes = _extends({
    noCaret: _react2['default'].PropTypes.bool,
    title: _react2['default'].PropTypes.node.isRequired
  }, _Dropdown2['default'].propTypes);

  exports['default'] = NavDropdown;
  module.exports = exports['default'];
},{"./Dropdown":133,"babel-runtime/helpers/class-call-check":207,"babel-runtime/helpers/extends":208,"babel-runtime/helpers/inherits":209,"babel-runtime/helpers/interop-require-default":210,"babel-runtime/helpers/object-without-properties":212,"react":482}],160:[function(require,module,exports){
  'use strict';

  var _objectWithoutProperties = require('babel-runtime/helpers/object-without-properties')['default'];

  var _extends = require('babel-runtime/helpers/extends')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _classnames = require('classnames');

  var _classnames2 = _interopRequireDefault(_classnames);

  var _BootstrapMixin = require('./BootstrapMixin');

  var _BootstrapMixin2 = _interopRequireDefault(_BootstrapMixin);

  var _SafeAnchor = require('./SafeAnchor');

  var _SafeAnchor2 = _interopRequireDefault(_SafeAnchor);

  var NavItem = _react2['default'].createClass({
    displayName: 'NavItem',

    mixins: [_BootstrapMixin2['default']],

    propTypes: {
      linkId: _react2['default'].PropTypes.string,
      onSelect: _react2['default'].PropTypes.func,
      active: _react2['default'].PropTypes.bool,
      disabled: _react2['default'].PropTypes.bool,
      href: _react2['default'].PropTypes.string,
      role: _react2['default'].PropTypes.string,
      title: _react2['default'].PropTypes.node,
      eventKey: _react2['default'].PropTypes.any,
      target: _react2['default'].PropTypes.string,
      'aria-controls': _react2['default'].PropTypes.string
    },

    getDefaultProps: function getDefaultProps() {
      return {
        active: false,
        disabled: false
      };
    },

    render: function render() {
      var _props = this.props;
      var role = _props.role;
      var linkId = _props.linkId;
      var disabled = _props.disabled;
      var active = _props.active;
      var href = _props.href;
      var title = _props.title;
      var target = _props.target;
      var children = _props.children;
      var ariaControls = _props['aria-controls'];

      var props = _objectWithoutProperties(_props, ['role', 'linkId', 'disabled', 'active', 'href', 'title', 'target', 'children', 'aria-controls']);

      var classes = {
        active: active,
        disabled: disabled
      };
      var linkProps = {
        role: role,
        href: href,
        title: title,
        target: target,
        id: linkId,
        onClick: this.handleClick
      };

      if (!role && href === '#') {
        linkProps.role = 'button';
      }

      return _react2['default'].createElement(
        'li',
        _extends({}, props, { role: 'presentation', className: _classnames2['default'](props.className, classes) }),
        _react2['default'].createElement(
          _SafeAnchor2['default'],
          _extends({}, linkProps, { 'aria-selected': active, 'aria-controls': ariaControls }),
          children
        )
      );
    },

    handleClick: function handleClick(e) {
      if (this.props.onSelect) {
        e.preventDefault();

        if (!this.props.disabled) {
          this.props.onSelect(this.props.eventKey, this.props.href, this.props.target);
        }
      }
    }
  });

  exports['default'] = NavItem;
  module.exports = exports['default'];
},{"./BootstrapMixin":122,"./SafeAnchor":176,"babel-runtime/helpers/extends":208,"babel-runtime/helpers/interop-require-default":210,"babel-runtime/helpers/object-without-properties":212,"classnames":40,"react":482}],161:[function(require,module,exports){
  'use strict';

  var _extends = require('babel-runtime/helpers/extends')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _BootstrapMixin = require('./BootstrapMixin');

  var _BootstrapMixin2 = _interopRequireDefault(_BootstrapMixin);

  var _classnames = require('classnames');

  var _classnames2 = _interopRequireDefault(_classnames);

  var _utilsValidComponentChildren = require('./utils/ValidComponentChildren');

  var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

  var _utilsCreateChainedFunction = require('./utils/createChainedFunction');

  var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

  var _utilsCustomPropTypes = require('./utils/CustomPropTypes');

  var _utilsCustomPropTypes2 = _interopRequireDefault(_utilsCustomPropTypes);

  var Navbar = _react2['default'].createClass({
    displayName: 'Navbar',

    mixins: [_BootstrapMixin2['default']],

    propTypes: {
      fixedTop: _react2['default'].PropTypes.bool,
      fixedBottom: _react2['default'].PropTypes.bool,
      staticTop: _react2['default'].PropTypes.bool,
      inverse: _react2['default'].PropTypes.bool,
      fluid: _react2['default'].PropTypes.bool,
      role: _react2['default'].PropTypes.string,
      /**
       * You can use a custom element for this component
       */
      componentClass: _utilsCustomPropTypes2['default'].elementType,
      brand: _react2['default'].PropTypes.node,
      toggleButton: _react2['default'].PropTypes.node,
      toggleNavKey: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number]),
      onToggle: _react2['default'].PropTypes.func,
      navExpanded: _react2['default'].PropTypes.bool,
      defaultNavExpanded: _react2['default'].PropTypes.bool
    },

    getDefaultProps: function getDefaultProps() {
      return {
        bsClass: 'navbar',
        bsStyle: 'default',
        role: 'navigation',
        componentClass: 'nav',
        fixedTop: false,
        fixedBottom: false,
        staticTop: false,
        inverse: false,
        fluid: false,
        defaultNavExpanded: false
      };
    },

    getInitialState: function getInitialState() {
      return {
        navExpanded: this.props.defaultNavExpanded
      };
    },

    shouldComponentUpdate: function shouldComponentUpdate() {
      // Defer any updates to this component during the `onSelect` handler.
      return !this._isChanging;
    },

    handleToggle: function handleToggle() {
      if (this.props.onToggle) {
        this._isChanging = true;
        this.props.onToggle();
        this._isChanging = false;
      }

      this.setState({
        navExpanded: !this.state.navExpanded
      });
    },

    isNavExpanded: function isNavExpanded() {
      return this.props.navExpanded != null ? this.props.navExpanded : this.state.navExpanded;
    },

    render: function render() {
      var classes = this.getBsClassSet();
      var ComponentClass = this.props.componentClass;

      classes['navbar-fixed-top'] = this.props.fixedTop;
      classes['navbar-fixed-bottom'] = this.props.fixedBottom;
      classes['navbar-static-top'] = this.props.staticTop;
      classes['navbar-inverse'] = this.props.inverse;

      return _react2['default'].createElement(
        ComponentClass,
        _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }),
        _react2['default'].createElement(
          'div',
          { className: this.props.fluid ? 'container-fluid' : 'container' },
          this.props.brand || this.props.toggleButton || this.props.toggleNavKey != null ? this.renderHeader() : null,
          _utilsValidComponentChildren2['default'].map(this.props.children, this.renderChild)
        )
      );
    },

    renderChild: function renderChild(child, index) {
      return _react.cloneElement(child, {
        navbar: true,
        collapsible: this.props.toggleNavKey != null && this.props.toggleNavKey === child.props.eventKey,
        expanded: this.props.toggleNavKey != null && this.props.toggleNavKey === child.props.eventKey && this.isNavExpanded(),
        key: child.key ? child.key : index
      });
    },

    renderHeader: function renderHeader() {
      var brand = undefined;

      if (this.props.brand) {
        if (_react2['default'].isValidElement(this.props.brand)) {
          brand = _react.cloneElement(this.props.brand, {
            className: _classnames2['default'](this.props.brand.props.className, 'navbar-brand')
          });
        } else {
          brand = _react2['default'].createElement(
            'span',
            { className: 'navbar-brand' },
            this.props.brand
          );
        }
      }

      return _react2['default'].createElement(
        'div',
        { className: 'navbar-header' },
        brand,
        this.props.toggleButton || this.props.toggleNavKey != null ? this.renderToggleButton() : null
      );
    },

    renderToggleButton: function renderToggleButton() {
      var children = undefined;

      if (_react2['default'].isValidElement(this.props.toggleButton)) {

        return _react.cloneElement(this.props.toggleButton, {
          className: _classnames2['default'](this.props.toggleButton.props.className, 'navbar-toggle'),
          onClick: _utilsCreateChainedFunction2['default'](this.handleToggle, this.props.toggleButton.props.onClick)
        });
      }

      children = this.props.toggleButton != null ? this.props.toggleButton : [_react2['default'].createElement(
        'span',
        { className: 'sr-only', key: 0 },
        'Toggle navigation'
      ), _react2['default'].createElement('span', { className: 'icon-bar', key: 1 }), _react2['default'].createElement('span', { className: 'icon-bar', key: 2 }), _react2['default'].createElement('span', { className: 'icon-bar', key: 3 })];

      return _react2['default'].createElement(
        'button',
        { className: 'navbar-toggle', type: 'button', onClick: this.handleToggle },
        children
      );
    }
  });

  exports['default'] = Navbar;
  module.exports = exports['default'];
},{"./BootstrapMixin":122,"./utils/CustomPropTypes":190,"./utils/ValidComponentChildren":193,"./utils/createChainedFunction":196,"babel-runtime/helpers/extends":208,"babel-runtime/helpers/interop-require-default":210,"classnames":40,"react":482}],162:[function(require,module,exports){
  /* eslint react/prop-types: [2, {ignore: ["container", "containerPadding", "target", "placement", "children"] }] */
  /* These properties are validated in 'Portal' and 'Position' components */

  'use strict';

  var _inherits = require('babel-runtime/helpers/inherits')['default'];

  var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

  var _extends = require('babel-runtime/helpers/extends')['default'];

  var _objectWithoutProperties = require('babel-runtime/helpers/object-without-properties')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _reactOverlaysLibOverlay = require('react-overlays/lib/Overlay');

  var _reactOverlaysLibOverlay2 = _interopRequireDefault(_reactOverlaysLibOverlay);

  var _utilsCustomPropTypes = require('./utils/CustomPropTypes');

  var _utilsCustomPropTypes2 = _interopRequireDefault(_utilsCustomPropTypes);

  var _Fade = require('./Fade');

  var _Fade2 = _interopRequireDefault(_Fade);

  var _classnames = require('classnames');

  var _classnames2 = _interopRequireDefault(_classnames);

  var Overlay = (function (_React$Component) {
    _inherits(Overlay, _React$Component);

    function Overlay() {
      _classCallCheck(this, Overlay);

      _React$Component.apply(this, arguments);
    }

    Overlay.prototype.render = function render() {
      var _props = this.props;
      var child = _props.children;
      var transition = _props.animation;

      var props = _objectWithoutProperties(_props, ['children', 'animation']);

      if (transition === true) {
        transition = _Fade2['default'];
      }

      if (!transition) {
        child = _react.cloneElement(child, {
          className: _classnames2['default']('in', child.props.className)
        });
      }

      return _react2['default'].createElement(
        _reactOverlaysLibOverlay2['default'],
        _extends({}, props, {
          transition: transition
        }),
        child
      );
    };

    return Overlay;
  })(_react2['default'].Component);

  Overlay.propTypes = _extends({}, _reactOverlaysLibOverlay2['default'].propTypes, {

    /**
     * Set the visibility of the Overlay
     */
    show: _react2['default'].PropTypes.bool,
    /**
     * Specify whether the overlay should trigger onHide when the user clicks outside the overlay
     */
    rootClose: _react2['default'].PropTypes.bool,
    /**
     * A Callback fired by the Overlay when it wishes to be hidden.
     */
    onHide: _react2['default'].PropTypes.func,

    /**
     * Use animation
     */
    animation: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.bool, _utilsCustomPropTypes2['default'].elementType]),

    /**
     * Callback fired before the Overlay transitions in
     */
    onEnter: _react2['default'].PropTypes.func,

    /**
     * Callback fired as the Overlay begins to transition in
     */
    onEntering: _react2['default'].PropTypes.func,

    /**
     * Callback fired after the Overlay finishes transitioning in
     */
    onEntered: _react2['default'].PropTypes.func,

    /**
     * Callback fired right before the Overlay transitions out
     */
    onExit: _react2['default'].PropTypes.func,

    /**
     * Callback fired as the Overlay begins to transition out
     */
    onExiting: _react2['default'].PropTypes.func,

    /**
     * Callback fired after the Overlay finishes transitioning out
     */
    onExited: _react2['default'].PropTypes.func
  });

  Overlay.defaultProps = {
    animation: _Fade2['default'],
    rootClose: false,
    show: false
  };

  exports['default'] = Overlay;
  module.exports = exports['default'];
},{"./Fade":137,"./utils/CustomPropTypes":190,"babel-runtime/helpers/class-call-check":207,"babel-runtime/helpers/extends":208,"babel-runtime/helpers/inherits":209,"babel-runtime/helpers/interop-require-default":210,"babel-runtime/helpers/object-without-properties":212,"classnames":40,"react":482,"react-overlays/lib/Overlay":263}],163:[function(require,module,exports){
  /*eslint-disable react/prop-types */
  'use strict';

  var _extends = require('babel-runtime/helpers/extends')['default'];

  var _Object$keys = require('babel-runtime/core-js/object/keys')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _utilsCreateChainedFunction = require('./utils/createChainedFunction');

  var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

  var _utilsCreateContextWrapper = require('./utils/createContextWrapper');

  var _utilsCreateContextWrapper2 = _interopRequireDefault(_utilsCreateContextWrapper);

  var _Overlay = require('./Overlay');

  var _Overlay2 = _interopRequireDefault(_Overlay);

  var _reactLibWarning = require('react/lib/warning');

  var _reactLibWarning2 = _interopRequireDefault(_reactLibWarning);

  var _lodashObjectPick = require('lodash/object/pick');

  var _lodashObjectPick2 = _interopRequireDefault(_lodashObjectPick);

  /**
   * Check if value one is inside or equal to the of value
   *
   * @param {string} one
   * @param {string|array} of
   * @returns {boolean}
   */
  function isOneOf(one, of) {
    if (Array.isArray(of)) {
      return of.indexOf(one) >= 0;
    }
    return one === of;
  }

  var OverlayTrigger = _react2['default'].createClass({
    displayName: 'OverlayTrigger',

    propTypes: _extends({}, _Overlay2['default'].propTypes, {

      /**
       * Specify which action or actions trigger Overlay visibility
       */
      trigger: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.oneOf(['click', 'hover', 'focus']), _react2['default'].PropTypes.arrayOf(_react2['default'].PropTypes.oneOf(['click', 'hover', 'focus']))]),

      /**
       * A millisecond delay amount to show and hide the Overlay once triggered
       */
      delay: _react2['default'].PropTypes.number,
      /**
       * A millisecond delay amount before showing the Overlay once triggered.
       */
      delayShow: _react2['default'].PropTypes.number,
      /**
       * A millisecond delay amount before hiding the Overlay once triggered.
       */
      delayHide: _react2['default'].PropTypes.number,

      /**
       * The initial visibility state of the Overlay, for more nuanced visibility controll consider
       * using the Overlay component directly.
       */
      defaultOverlayShown: _react2['default'].PropTypes.bool,

      /**
       * An element or text to overlay next to the target.
       */
      overlay: _react2['default'].PropTypes.node.isRequired,

      /**
       * @private
       */
      onBlur: _react2['default'].PropTypes.func,
      /**
       * @private
       */
      onClick: _react2['default'].PropTypes.func,
      /**
       * @private
       */
      onFocus: _react2['default'].PropTypes.func,
      /**
       * @private
       */
      onMouseEnter: _react2['default'].PropTypes.func,
      /**
       * @private
       */
      onMouseLeave: _react2['default'].PropTypes.func,

      //override specific overlay props
      /**
       * @private
       */
      target: function target() {},
      /**
       * @private
       */
      onHide: function onHide() {},
      /**
       * @private
       */
      show: function show() {}
    }),

    getDefaultProps: function getDefaultProps() {
      return {
        defaultOverlayShown: false,
        trigger: ['hover', 'focus']
      };
    },

    getInitialState: function getInitialState() {
      return {
        isOverlayShown: this.props.defaultOverlayShown
      };
    },

    show: function show() {
      this.setState({
        isOverlayShown: true
      });
    },

    hide: function hide() {
      this.setState({
        isOverlayShown: false
      });
    },

    toggle: function toggle() {
      if (this.state.isOverlayShown) {
        this.hide();
      } else {
        this.show();
      }
    },

    componentDidMount: function componentDidMount() {
      this._mountNode = document.createElement('div');
      _react2['default'].render(this._overlay, this._mountNode);
    },

    componentWillUnmount: function componentWillUnmount() {
      _react2['default'].unmountComponentAtNode(this._mountNode);
      this._mountNode = null;
      clearTimeout(this._hoverDelay);
    },

    componentDidUpdate: function componentDidUpdate() {
      if (this._mountNode) {
        _react2['default'].render(this._overlay, this._mountNode);
      }
    },

    getOverlayTarget: function getOverlayTarget() {
      return _react2['default'].findDOMNode(this);
    },

    getOverlay: function getOverlay() {
      var overlayProps = _extends({}, _lodashObjectPick2['default'](this.props, _Object$keys(_Overlay2['default'].propTypes)), {
        show: this.state.isOverlayShown,
        onHide: this.hide,
        target: this.getOverlayTarget,
        onExit: this.props.onExit,
        onExiting: this.props.onExiting,
        onExited: this.props.onExited,
        onEnter: this.props.onEnter,
        onEntering: this.props.onEntering,
        onEntered: this.props.onEntered
      });

      var overlay = _react.cloneElement(this.props.overlay, {
        placement: overlayProps.placement,
        container: overlayProps.container
      });

      return _react2['default'].createElement(
        _Overlay2['default'],
        overlayProps,
        overlay
      );
    },

    render: function render() {
      var trigger = _react2['default'].Children.only(this.props.children);

      var props = {
        'aria-describedby': this.props.overlay.props.id
      };

      // create in render otherwise owner is lost...
      this._overlay = this.getOverlay();

      props.onClick = _utilsCreateChainedFunction2['default'](trigger.props.onClick, this.props.onClick);

      if (isOneOf('click', this.props.trigger)) {
        props.onClick = _utilsCreateChainedFunction2['default'](this.toggle, props.onClick);
      }

      if (isOneOf('hover', this.props.trigger)) {
        _reactLibWarning2['default'](!(this.props.trigger === 'hover'), '[react-bootstrap] Specifying only the `"hover"` trigger limits the visibilty of the overlay to just mouse users. ' + 'Consider also including the `"focus"` trigger so that touch and keyboard only users can see the overlay as well.');

        props.onMouseOver = _utilsCreateChainedFunction2['default'](this.handleDelayedShow, this.props.onMouseOver);
        props.onMouseOut = _utilsCreateChainedFunction2['default'](this.handleDelayedHide, this.props.onMouseOut);
      }

      if (isOneOf('focus', this.props.trigger)) {
        props.onFocus = _utilsCreateChainedFunction2['default'](this.handleDelayedShow, this.props.onFocus);
        props.onBlur = _utilsCreateChainedFunction2['default'](this.handleDelayedHide, this.props.onBlur);
      }

      return _react.cloneElement(trigger, props);
    },

    handleDelayedShow: function handleDelayedShow() {
      var _this = this;

      if (this._hoverDelay != null) {
        clearTimeout(this._hoverDelay);
        this._hoverDelay = null;
        return;
      }

      var delay = this.props.delayShow != null ? this.props.delayShow : this.props.delay;

      if (!delay) {
        this.show();
        return;
      }

      this._hoverDelay = setTimeout(function () {
        _this._hoverDelay = null;
        _this.show();
      }, delay);
    },

    handleDelayedHide: function handleDelayedHide() {
      var _this2 = this;

      if (this._hoverDelay != null) {
        clearTimeout(this._hoverDelay);
        this._hoverDelay = null;
        return;
      }

      var delay = this.props.delayHide != null ? this.props.delayHide : this.props.delay;

      if (!delay) {
        this.hide();
        return;
      }

      this._hoverDelay = setTimeout(function () {
        _this2._hoverDelay = null;
        _this2.hide();
      }, delay);
    }

  });

  /**
   * Creates a new OverlayTrigger class that forwards the relevant context
   *
   * This static method should only be called at the module level, instead of in
   * e.g. a render() method, because it's expensive to create new classes.
   *
   * For example, you would want to have:
   *
   * > export default OverlayTrigger.withContext({
 * >   myContextKey: React.PropTypes.object
 * > });
   *
   * and import this when needed.
   */
  OverlayTrigger.withContext = _utilsCreateContextWrapper2['default'](OverlayTrigger, 'overlay');

  exports['default'] = OverlayTrigger;
  module.exports = exports['default'];
},{"./Overlay":162,"./utils/createChainedFunction":196,"./utils/createContextWrapper":197,"babel-runtime/core-js/object/keys":205,"babel-runtime/helpers/extends":208,"babel-runtime/helpers/interop-require-default":210,"lodash/object/pick":112,"react":482,"react/lib/warning":481}],164:[function(require,module,exports){
  'use strict';

  var _extends = require('babel-runtime/helpers/extends')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _classnames = require('classnames');

  var _classnames2 = _interopRequireDefault(_classnames);

  var PageHeader = _react2['default'].createClass({
    displayName: 'PageHeader',

    render: function render() {
      return _react2['default'].createElement(
        'div',
        _extends({}, this.props, { className: _classnames2['default'](this.props.className, 'page-header') }),
        _react2['default'].createElement(
          'h1',
          null,
          this.props.children
        )
      );
    }
  });

  exports['default'] = PageHeader;
  module.exports = exports['default'];
},{"babel-runtime/helpers/extends":208,"babel-runtime/helpers/interop-require-default":210,"classnames":40,"react":482}],165:[function(require,module,exports){
  'use strict';

  var _extends = require('babel-runtime/helpers/extends')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _classnames = require('classnames');

  var _classnames2 = _interopRequireDefault(_classnames);

  var _SafeAnchor = require('./SafeAnchor');

  var _SafeAnchor2 = _interopRequireDefault(_SafeAnchor);

  var PageItem = _react2['default'].createClass({
    displayName: 'PageItem',

    propTypes: {
      href: _react2['default'].PropTypes.string,
      target: _react2['default'].PropTypes.string,
      title: _react2['default'].PropTypes.string,
      disabled: _react2['default'].PropTypes.bool,
      previous: _react2['default'].PropTypes.bool,
      next: _react2['default'].PropTypes.bool,
      onSelect: _react2['default'].PropTypes.func,
      eventKey: _react2['default'].PropTypes.any
    },

    getDefaultProps: function getDefaultProps() {
      return {
        disabled: false,
        previous: false,
        next: false
      };
    },

    render: function render() {
      var classes = {
        'disabled': this.props.disabled,
        'previous': this.props.previous,
        'next': this.props.next
      };

      return _react2['default'].createElement(
        'li',
        _extends({}, this.props, {
          className: _classnames2['default'](this.props.className, classes) }),
        _react2['default'].createElement(
          _SafeAnchor2['default'],
          {
            href: this.props.href,
            title: this.props.title,
            target: this.props.target,
            onClick: this.handleSelect },
          this.props.children
        )
      );
    },

    handleSelect: function handleSelect(e) {
      if (this.props.onSelect || this.props.disabled) {
        e.preventDefault();

        if (!this.props.disabled) {
          this.props.onSelect(this.props.eventKey, this.props.href, this.props.target);
        }
      }
    }
  });

  exports['default'] = PageItem;
  module.exports = exports['default'];
},{"./SafeAnchor":176,"babel-runtime/helpers/extends":208,"babel-runtime/helpers/interop-require-default":210,"classnames":40,"react":482}],166:[function(require,module,exports){
  'use strict';

  var _extends = require('babel-runtime/helpers/extends')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _classnames = require('classnames');

  var _classnames2 = _interopRequireDefault(_classnames);

  var _utilsValidComponentChildren = require('./utils/ValidComponentChildren');

  var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

  var _utilsCreateChainedFunction = require('./utils/createChainedFunction');

  var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

  var Pager = _react2['default'].createClass({
    displayName: 'Pager',

    propTypes: {
      onSelect: _react2['default'].PropTypes.func
    },

    render: function render() {
      return _react2['default'].createElement(
        'ul',
        _extends({}, this.props, {
          className: _classnames2['default'](this.props.className, 'pager') }),
        _utilsValidComponentChildren2['default'].map(this.props.children, this.renderPageItem)
      );
    },

    renderPageItem: function renderPageItem(child, index) {
      return _react.cloneElement(child, {
        onSelect: _utilsCreateChainedFunction2['default'](child.props.onSelect, this.props.onSelect),
        key: child.key ? child.key : index
      });
    }
  });

  exports['default'] = Pager;
  module.exports = exports['default'];
},{"./utils/ValidComponentChildren":193,"./utils/createChainedFunction":196,"babel-runtime/helpers/extends":208,"babel-runtime/helpers/interop-require-default":210,"classnames":40,"react":482}],167:[function(require,module,exports){
  'use strict';

  var _extends = require('babel-runtime/helpers/extends')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _classnames = require('classnames');

  var _classnames2 = _interopRequireDefault(_classnames);

  var _BootstrapMixin = require('./BootstrapMixin');

  var _BootstrapMixin2 = _interopRequireDefault(_BootstrapMixin);

  var _PaginationButton = require('./PaginationButton');

  var _PaginationButton2 = _interopRequireDefault(_PaginationButton);

  var _utilsCustomPropTypes = require('./utils/CustomPropTypes');

  var _utilsCustomPropTypes2 = _interopRequireDefault(_utilsCustomPropTypes);

  var _SafeAnchor = require('./SafeAnchor');

  var _SafeAnchor2 = _interopRequireDefault(_SafeAnchor);

  var Pagination = _react2['default'].createClass({
    displayName: 'Pagination',

    mixins: [_BootstrapMixin2['default']],

    propTypes: {
      activePage: _react2['default'].PropTypes.number,
      items: _react2['default'].PropTypes.number,
      maxButtons: _react2['default'].PropTypes.number,
      ellipsis: _react2['default'].PropTypes.bool,
      first: _react2['default'].PropTypes.bool,
      last: _react2['default'].PropTypes.bool,
      prev: _react2['default'].PropTypes.bool,
      next: _react2['default'].PropTypes.bool,
      onSelect: _react2['default'].PropTypes.func,
      /**
       * You can use a custom element for the buttons
       */
      buttonComponentClass: _utilsCustomPropTypes2['default'].elementType
    },

    getDefaultProps: function getDefaultProps() {
      return {
        activePage: 1,
        items: 1,
        maxButtons: 0,
        first: false,
        last: false,
        prev: false,
        next: false,
        ellipsis: true,
        buttonComponentClass: _SafeAnchor2['default'],
        bsClass: 'pagination'
      };
    },

    renderPageButtons: function renderPageButtons() {
      var pageButtons = [];
      var startPage = undefined,
        endPage = undefined,
        hasHiddenPagesAfter = undefined;
      var _props = this.props;
      var maxButtons = _props.maxButtons;
      var activePage = _props.activePage;
      var items = _props.items;
      var onSelect = _props.onSelect;
      var ellipsis = _props.ellipsis;
      var buttonComponentClass = _props.buttonComponentClass;

      if (maxButtons) {
        var hiddenPagesBefore = activePage - parseInt(maxButtons / 2, 10);
        startPage = hiddenPagesBefore > 1 ? hiddenPagesBefore : 1;
        hasHiddenPagesAfter = startPage + maxButtons <= items;

        if (!hasHiddenPagesAfter) {
          endPage = items;
          startPage = items - maxButtons + 1;
          if (startPage < 1) {
            startPage = 1;
          }
        } else {
          endPage = startPage + maxButtons - 1;
        }
      } else {
        startPage = 1;
        endPage = items;
      }

      for (var pagenumber = startPage; pagenumber <= endPage; pagenumber++) {
        pageButtons.push(_react2['default'].createElement(
          _PaginationButton2['default'],
          {
            key: pagenumber,
            eventKey: pagenumber,
            active: pagenumber === activePage,
            onSelect: onSelect,
            buttonComponentClass: buttonComponentClass },
          pagenumber
        ));
      }

      if (maxButtons && hasHiddenPagesAfter && ellipsis) {
        pageButtons.push(_react2['default'].createElement(
          _PaginationButton2['default'],
          {
            key: 'ellipsis',
            disabled: true,
            buttonComponentClass: buttonComponentClass },
          _react2['default'].createElement(
            'span',
            { 'aria-label': 'More' },
            '...'
          )
        ));
      }

      return pageButtons;
    },

    renderPrev: function renderPrev() {
      if (!this.props.prev) {
        return null;
      }

      return _react2['default'].createElement(
        _PaginationButton2['default'],
        {
          key: 'prev',
          eventKey: this.props.activePage - 1,
          disabled: this.props.activePage === 1,
          onSelect: this.props.onSelect,
          buttonComponentClass: this.props.buttonComponentClass },
        _react2['default'].createElement(
          'span',
          { 'aria-label': 'Previous' },
          '‹'
        )
      );
    },

    renderNext: function renderNext() {
      if (!this.props.next) {
        return null;
      }

      return _react2['default'].createElement(
        _PaginationButton2['default'],
        {
          key: 'next',
          eventKey: this.props.activePage + 1,
          disabled: this.props.activePage >= this.props.items,
          onSelect: this.props.onSelect,
          buttonComponentClass: this.props.buttonComponentClass },
        _react2['default'].createElement(
          'span',
          { 'aria-label': 'Next' },
          '›'
        )
      );
    },

    renderFirst: function renderFirst() {
      if (!this.props.first) {
        return null;
      }

      return _react2['default'].createElement(
        _PaginationButton2['default'],
        {
          key: 'first',
          eventKey: 1,
          disabled: this.props.activePage === 1,
          onSelect: this.props.onSelect,
          buttonComponentClass: this.props.buttonComponentClass },
        _react2['default'].createElement(
          'span',
          { 'aria-label': 'First' },
          '«'
        )
      );
    },

    renderLast: function renderLast() {
      if (!this.props.last) {
        return null;
      }

      return _react2['default'].createElement(
        _PaginationButton2['default'],
        {
          key: 'last',
          eventKey: this.props.items,
          disabled: this.props.activePage >= this.props.items,
          onSelect: this.props.onSelect,
          buttonComponentClass: this.props.buttonComponentClass },
        _react2['default'].createElement(
          'span',
          { 'aria-label': 'Last' },
          '»'
        )
      );
    },

    render: function render() {
      return _react2['default'].createElement(
        'ul',
        _extends({}, this.props, {
          className: _classnames2['default'](this.props.className, this.getBsClassSet()) }),
        this.renderFirst(),
        this.renderPrev(),
        this.renderPageButtons(),
        this.renderNext(),
        this.renderLast()
      );
    }
  });

  exports['default'] = Pagination;
  module.exports = exports['default'];
},{"./BootstrapMixin":122,"./PaginationButton":168,"./SafeAnchor":176,"./utils/CustomPropTypes":190,"babel-runtime/helpers/extends":208,"babel-runtime/helpers/interop-require-default":210,"classnames":40,"react":482}],168:[function(require,module,exports){
  'use strict';

  var _extends = require('babel-runtime/helpers/extends')['default'];

  var _objectWithoutProperties = require('babel-runtime/helpers/object-without-properties')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _classnames = require('classnames');

  var _classnames2 = _interopRequireDefault(_classnames);

  var _BootstrapMixin = require('./BootstrapMixin');

  var _BootstrapMixin2 = _interopRequireDefault(_BootstrapMixin);

  var _utilsCreateSelectedEvent = require('./utils/createSelectedEvent');

  var _utilsCreateSelectedEvent2 = _interopRequireDefault(_utilsCreateSelectedEvent);

  var _utilsCustomPropTypes = require('./utils/CustomPropTypes');

  var _utilsCustomPropTypes2 = _interopRequireDefault(_utilsCustomPropTypes);

  var PaginationButton = _react2['default'].createClass({
    displayName: 'PaginationButton',

    mixins: [_BootstrapMixin2['default']],

    propTypes: {
      className: _react2['default'].PropTypes.string,
      eventKey: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number]),
      onSelect: _react2['default'].PropTypes.func,
      disabled: _react2['default'].PropTypes.bool,
      active: _react2['default'].PropTypes.bool,
      /**
       * You can use a custom element for this component
       */
      buttonComponentClass: _utilsCustomPropTypes2['default'].elementType
    },

    getDefaultProps: function getDefaultProps() {
      return {
        active: false,
        disabled: false
      };
    },

    handleClick: function handleClick(event) {
      if (this.props.disabled) {
        return;
      }

      if (this.props.onSelect) {
        var selectedEvent = _utilsCreateSelectedEvent2['default'](this.props.eventKey);
        this.props.onSelect(event, selectedEvent);
      }
    },

    render: function render() {
      var classes = _extends({
        active: this.props.active,
        disabled: this.props.disabled
      }, this.getBsClassSet());

      var _props = this.props;
      var className = _props.className;

      var anchorProps = _objectWithoutProperties(_props, ['className']);

      var ButtonComponentClass = this.props.buttonComponentClass;

      return _react2['default'].createElement(
        'li',
        { className: _classnames2['default'](className, classes) },
        _react2['default'].createElement(ButtonComponentClass, _extends({}, anchorProps, {
          onClick: this.handleClick }))
      );
    }
  });

  exports['default'] = PaginationButton;
  module.exports = exports['default'];
},{"./BootstrapMixin":122,"./utils/CustomPropTypes":190,"./utils/createSelectedEvent":198,"babel-runtime/helpers/extends":208,"babel-runtime/helpers/interop-require-default":210,"babel-runtime/helpers/object-without-properties":212,"classnames":40,"react":482}],169:[function(require,module,exports){
  'use strict';

  var _objectWithoutProperties = require('babel-runtime/helpers/object-without-properties')['default'];

  var _extends = require('babel-runtime/helpers/extends')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _classnames = require('classnames');

  var _classnames2 = _interopRequireDefault(_classnames);

  var _BootstrapMixin = require('./BootstrapMixin');

  var _BootstrapMixin2 = _interopRequireDefault(_BootstrapMixin);

  var _Collapse = require('./Collapse');

  var _Collapse2 = _interopRequireDefault(_Collapse);

  var Panel = _react2['default'].createClass({
    displayName: 'Panel',

    mixins: [_BootstrapMixin2['default']],

    propTypes: {
      collapsible: _react2['default'].PropTypes.bool,
      onSelect: _react2['default'].PropTypes.func,
      header: _react2['default'].PropTypes.node,
      id: _react2['default'].PropTypes.string,
      footer: _react2['default'].PropTypes.node,
      defaultExpanded: _react2['default'].PropTypes.bool,
      expanded: _react2['default'].PropTypes.bool,
      eventKey: _react2['default'].PropTypes.any,
      headerRole: _react2['default'].PropTypes.string,
      panelRole: _react2['default'].PropTypes.string
    },

    getDefaultProps: function getDefaultProps() {
      return {
        bsClass: 'panel',
        bsStyle: 'default',
        defaultExpanded: false
      };
    },

    getInitialState: function getInitialState() {
      return {
        expanded: this.props.defaultExpanded
      };
    },

    handleSelect: function handleSelect(e) {
      e.selected = true;

      if (this.props.onSelect) {
        this.props.onSelect(e, this.props.eventKey);
      } else {
        e.preventDefault();
      }

      if (e.selected) {
        this.handleToggle();
      }
    },

    handleToggle: function handleToggle() {
      this.setState({ expanded: !this.state.expanded });
    },

    isExpanded: function isExpanded() {
      return this.props.expanded != null ? this.props.expanded : this.state.expanded;
    },

    render: function render() {
      var _props = this.props;
      var headerRole = _props.headerRole;
      var panelRole = _props.panelRole;

      var props = _objectWithoutProperties(_props, ['headerRole', 'panelRole']);

      return _react2['default'].createElement(
        'div',
        _extends({}, props, {
          className: _classnames2['default'](this.props.className, this.getBsClassSet()),
          id: this.props.collapsible ? null : this.props.id, onSelect: null }),
        this.renderHeading(headerRole),
        this.props.collapsible ? this.renderCollapsibleBody(panelRole) : this.renderBody(),
        this.renderFooter()
      );
    },

    renderCollapsibleBody: function renderCollapsibleBody(panelRole) {
      var props = {
        className: this.prefixClass('collapse'),
        id: this.props.id,
        ref: 'panel',
        'aria-hidden': !this.isExpanded()
      };
      if (panelRole) {
        props.role = panelRole;
      }

      return _react2['default'].createElement(
        _Collapse2['default'],
        { 'in': this.isExpanded() },
        _react2['default'].createElement(
          'div',
          props,
          this.renderBody()
        )
      );
    },

    renderBody: function renderBody() {
      var allChildren = this.props.children;
      var bodyElements = [];
      var panelBodyChildren = [];
      var bodyClass = this.prefixClass('body');

      function getProps() {
        return { key: bodyElements.length };
      }

      function addPanelChild(child) {
        bodyElements.push(_react.cloneElement(child, getProps()));
      }

      function addPanelBody(children) {
        bodyElements.push(_react2['default'].createElement(
          'div',
          _extends({ className: bodyClass }, getProps()),
          children
        ));
      }

      function maybeRenderPanelBody() {
        if (panelBodyChildren.length === 0) {
          return;
        }

        addPanelBody(panelBodyChildren);
        panelBodyChildren = [];
      }

      // Handle edge cases where we should not iterate through children.
      if (!Array.isArray(allChildren) || allChildren.length === 0) {
        if (this.shouldRenderFill(allChildren)) {
          addPanelChild(allChildren);
        } else {
          addPanelBody(allChildren);
        }
      } else {

        allChildren.forEach((function (child) {
          if (this.shouldRenderFill(child)) {
            maybeRenderPanelBody();

            // Separately add the filled element.
            addPanelChild(child);
          } else {
            panelBodyChildren.push(child);
          }
        }).bind(this));

        maybeRenderPanelBody();
      }

      return bodyElements;
    },

    shouldRenderFill: function shouldRenderFill(child) {
      return _react2['default'].isValidElement(child) && child.props.fill != null;
    },

    renderHeading: function renderHeading(headerRole) {
      var header = this.props.header;

      if (!header) {
        return null;
      }

      if (!_react2['default'].isValidElement(header) || Array.isArray(header)) {
        header = this.props.collapsible ? this.renderCollapsibleTitle(header, headerRole) : header;
      } else {
        var className = _classnames2['default'](this.prefixClass('title'), header.props.className);

        if (this.props.collapsible) {
          header = _react.cloneElement(header, {
            className: className,
            children: this.renderAnchor(header.props.children, headerRole)
          });
        } else {
          header = _react.cloneElement(header, { className: className });
        }
      }

      return _react2['default'].createElement(
        'div',
        { className: this.prefixClass('heading') },
        header
      );
    },

    renderAnchor: function renderAnchor(header, headerRole) {
      return _react2['default'].createElement(
        'a',
        {
          href: '#' + (this.props.id || ''),
          'aria-controls': this.props.collapsible ? this.props.id : null,
          className: this.isExpanded() ? null : 'collapsed',
          'aria-expanded': this.isExpanded(),
          'aria-selected': this.isExpanded(),
          onClick: this.handleSelect,
          role: headerRole },
        header
      );
    },

    renderCollapsibleTitle: function renderCollapsibleTitle(header, headerRole) {
      return _react2['default'].createElement(
        'h4',
        { className: this.prefixClass('title'), role: 'presentation' },
        this.renderAnchor(header, headerRole)
      );
    },

    renderFooter: function renderFooter() {
      if (!this.props.footer) {
        return null;
      }

      return _react2['default'].createElement(
        'div',
        { className: this.prefixClass('footer') },
        this.props.footer
      );
    }
  });

  exports['default'] = Panel;
  module.exports = exports['default'];
},{"./BootstrapMixin":122,"./Collapse":130,"babel-runtime/helpers/extends":208,"babel-runtime/helpers/interop-require-default":210,"babel-runtime/helpers/object-without-properties":212,"classnames":40,"react":482}],170:[function(require,module,exports){
  /* eslint react/prop-types: [2, {ignore: "bsStyle"}] */
  /* BootstrapMixin contains `bsStyle` type validation */

  'use strict';

  var _objectWithoutProperties = require('babel-runtime/helpers/object-without-properties')['default'];

  var _extends = require('babel-runtime/helpers/extends')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _classnames = require('classnames');

  var _classnames2 = _interopRequireDefault(_classnames);

  var _BootstrapMixin = require('./BootstrapMixin');

  var _BootstrapMixin2 = _interopRequireDefault(_BootstrapMixin);

  var _utilsValidComponentChildren = require('./utils/ValidComponentChildren');

  var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

  var PanelGroup = _react2['default'].createClass({
    displayName: 'PanelGroup',

    mixins: [_BootstrapMixin2['default']],

    propTypes: {
      accordion: _react2['default'].PropTypes.bool,
      activeKey: _react2['default'].PropTypes.any,
      className: _react2['default'].PropTypes.string,
      children: _react2['default'].PropTypes.node,
      defaultActiveKey: _react2['default'].PropTypes.any,
      onSelect: _react2['default'].PropTypes.func
    },

    getDefaultProps: function getDefaultProps() {
      return {
        accordion: false,
        bsClass: 'panel-group'
      };
    },

    getInitialState: function getInitialState() {
      var defaultActiveKey = this.props.defaultActiveKey;

      return {
        activeKey: defaultActiveKey
      };
    },

    render: function render() {
      var classes = this.getBsClassSet();
      var _props = this.props;
      var className = _props.className;

      var props = _objectWithoutProperties(_props, ['className']);

      if (this.props.accordion) {
        props.role = 'tablist';
      }
      return _react2['default'].createElement(
        'div',
        _extends({}, props, { className: _classnames2['default'](className, classes), onSelect: null }),
        _utilsValidComponentChildren2['default'].map(props.children, this.renderPanel)
      );
    },

    renderPanel: function renderPanel(child, index) {
      var activeKey = this.props.activeKey != null ? this.props.activeKey : this.state.activeKey;

      var props = {
        bsStyle: child.props.bsStyle || this.props.bsStyle,
        key: child.key ? child.key : index,
        ref: child.ref
      };

      if (this.props.accordion) {
        props.headerRole = 'tab';
        props.panelRole = 'tabpanel';
        props.collapsible = true;
        props.expanded = child.props.eventKey === activeKey;
        props.onSelect = this.handleSelect;
      }

      return _react.cloneElement(child, props);
    },

    shouldComponentUpdate: function shouldComponentUpdate() {
      // Defer any updates to this component during the `onSelect` handler.
      return !this._isChanging;
    },

    handleSelect: function handleSelect(e, key) {
      e.preventDefault();

      if (this.props.onSelect) {
        this._isChanging = true;
        this.props.onSelect(key);
        this._isChanging = false;
      }

      if (this.state.activeKey === key) {
        key = null;
      }

      this.setState({
        activeKey: key
      });
    }
  });

  exports['default'] = PanelGroup;
  module.exports = exports['default'];
},{"./BootstrapMixin":122,"./utils/ValidComponentChildren":193,"babel-runtime/helpers/extends":208,"babel-runtime/helpers/interop-require-default":210,"babel-runtime/helpers/object-without-properties":212,"classnames":40,"react":482}],171:[function(require,module,exports){
  'use strict';

  var _extends = require('babel-runtime/helpers/extends')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _classnames = require('classnames');

  var _classnames2 = _interopRequireDefault(_classnames);

  var _BootstrapMixin = require('./BootstrapMixin');

  var _BootstrapMixin2 = _interopRequireDefault(_BootstrapMixin);

  var _utilsCustomPropTypes = require('./utils/CustomPropTypes');

  var _utilsCustomPropTypes2 = _interopRequireDefault(_utilsCustomPropTypes);

  var Popover = _react2['default'].createClass({
    displayName: 'Popover',

    mixins: [_BootstrapMixin2['default']],

    propTypes: {
      /**
       * An html id attribute, necessary for accessibility
       * @type {string}
       * @required
       */
      id: _utilsCustomPropTypes2['default'].isRequiredForA11y(_react2['default'].PropTypes.string),

      /**
       * Sets the direction the Popover is positioned towards.
       */
      placement: _react2['default'].PropTypes.oneOf(['top', 'right', 'bottom', 'left']),

      /**
       * The "left" position value for the Popover.
       */
      positionLeft: _react2['default'].PropTypes.number,
      /**
       * The "top" position value for the Popover.
       */
      positionTop: _react2['default'].PropTypes.number,
      /**
       * The "left" position value for the Popover arrow.
       */
      arrowOffsetLeft: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.number, _react2['default'].PropTypes.string]),
      /**
       * The "top" position value for the Popover arrow.
       */
      arrowOffsetTop: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.number, _react2['default'].PropTypes.string]),
      /**
       * Title text
       */
      title: _react2['default'].PropTypes.node
    },

    getDefaultProps: function getDefaultProps() {
      return {
        placement: 'right'
      };
    },

    render: function render() {
      var _classes;

      var classes = (_classes = {
        'popover': true
      }, _classes[this.props.placement] = true, _classes);

      var style = _extends({
        'left': this.props.positionLeft,
        'top': this.props.positionTop,
        'display': 'block'
      }, this.props.style);

      // eslint-disable-line react/prop-types
      var arrowStyle = {
        'left': this.props.arrowOffsetLeft,
        'top': this.props.arrowOffsetTop
      };

      return _react2['default'].createElement(
        'div',
        _extends({ role: 'tooltip' }, this.props, { className: _classnames2['default'](this.props.className, classes), style: style, title: null }),
        _react2['default'].createElement('div', { className: 'arrow', style: arrowStyle }),
        this.props.title ? this.renderTitle() : null,
        _react2['default'].createElement(
          'div',
          { className: 'popover-content' },
          this.props.children
        )
      );
    },

    renderTitle: function renderTitle() {
      return _react2['default'].createElement(
        'h3',
        { className: 'popover-title' },
        this.props.title
      );
    }
  });

  exports['default'] = Popover;
  module.exports = exports['default'];
  // we don't want to expose the `style` property
},{"./BootstrapMixin":122,"./utils/CustomPropTypes":190,"babel-runtime/helpers/extends":208,"babel-runtime/helpers/interop-require-default":210,"classnames":40,"react":482}],172:[function(require,module,exports){
  'use strict';

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _utilsDeprecationWarning = require('./utils/deprecationWarning');

  var _utilsDeprecationWarning2 = _interopRequireDefault(_utilsDeprecationWarning);

  var _reactOverlaysLibPortal = require('react-overlays/lib/Portal');

  var _reactOverlaysLibPortal2 = _interopRequireDefault(_reactOverlaysLibPortal);

  exports['default'] = _utilsDeprecationWarning2['default'].wrapper(_reactOverlaysLibPortal2['default'], {
    message: 'The Portal component is deprecated in react-bootstrap. It has been moved to a more generic library: react-overlays. ' + 'You can read more at: ' + 'http://react-bootstrap.github.io/react-overlays/examples/#portal and ' + 'https://github.com/react-bootstrap/react-bootstrap/issues/1084'
  });
  module.exports = exports['default'];
},{"./utils/deprecationWarning":199,"babel-runtime/helpers/interop-require-default":210,"react-overlays/lib/Portal":264}],173:[function(require,module,exports){
  'use strict';

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _utilsDeprecationWarning = require('./utils/deprecationWarning');

  var _utilsDeprecationWarning2 = _interopRequireDefault(_utilsDeprecationWarning);

  var _reactOverlaysLibPosition = require('react-overlays/lib/Position');

  var _reactOverlaysLibPosition2 = _interopRequireDefault(_reactOverlaysLibPosition);

  exports['default'] = _utilsDeprecationWarning2['default'].wrapper(_reactOverlaysLibPosition2['default'], {
    message: 'The Position component is deprecated in react-bootstrap. It has been moved to a more generic library: react-overlays. ' + 'You can read more at: ' + 'http://react-bootstrap.github.io/react-overlays/examples/#position and ' + 'https://github.com/react-bootstrap/react-bootstrap/issues/1084'
  });
  module.exports = exports['default'];
},{"./utils/deprecationWarning":199,"babel-runtime/helpers/interop-require-default":210,"react-overlays/lib/Position":265}],174:[function(require,module,exports){
  /* eslint react/prop-types: [2, {ignore: "bsStyle"}] */
  /* BootstrapMixin contains `bsStyle` type validation */

  'use strict';

  var _extends = require('babel-runtime/helpers/extends')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _Interpolate = require('./Interpolate');

  var _Interpolate2 = _interopRequireDefault(_Interpolate);

  var _BootstrapMixin = require('./BootstrapMixin');

  var _BootstrapMixin2 = _interopRequireDefault(_BootstrapMixin);

  var _classnames = require('classnames');

  var _classnames2 = _interopRequireDefault(_classnames);

  var _utilsValidComponentChildren = require('./utils/ValidComponentChildren');

  var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

  var ProgressBar = _react2['default'].createClass({
    displayName: 'ProgressBar',

    propTypes: {
      min: _react.PropTypes.number,
      now: _react.PropTypes.number,
      max: _react.PropTypes.number,
      label: _react.PropTypes.node,
      srOnly: _react.PropTypes.bool,
      striped: _react.PropTypes.bool,
      active: _react.PropTypes.bool,
      children: onlyProgressBar,
      className: _react2['default'].PropTypes.string,
      interpolateClass: _react.PropTypes.node,
      /**
       * @private
       */
      isChild: _react.PropTypes.bool
    },

    mixins: [_BootstrapMixin2['default']],

    getDefaultProps: function getDefaultProps() {
      return {
        bsClass: 'progress-bar',
        min: 0,
        max: 100,
        active: false,
        isChild: false,
        srOnly: false,
        striped: false
      };
    },

    getPercentage: function getPercentage(now, min, max) {
      var roundPrecision = 1000;
      return Math.round((now - min) / (max - min) * 100 * roundPrecision) / roundPrecision;
    },

    render: function render() {
      if (this.props.isChild) {
        return this.renderProgressBar();
      }

      var content = undefined;

      if (this.props.children) {
        content = _utilsValidComponentChildren2['default'].map(this.props.children, this.renderChildBar);
      } else {
        content = this.renderProgressBar();
      }

      return _react2['default'].createElement(
        'div',
        _extends({}, this.props, { className: _classnames2['default'](this.props.className, 'progress') }),
        content
      );
    },

    renderChildBar: function renderChildBar(child, index) {
      return _react.cloneElement(child, {
        isChild: true,
        key: child.key ? child.key : index
      });
    },

    renderProgressBar: function renderProgressBar() {
      var percentage = this.getPercentage(this.props.now, this.props.min, this.props.max);

      var label = undefined;

      if (typeof this.props.label === 'string') {
        label = this.renderLabel(percentage);
      } else {
        label = this.props.label;
      }

      if (this.props.srOnly) {
        label = _react2['default'].createElement(
          'span',
          { className: 'sr-only' },
          label
        );
      }

      var classes = _classnames2['default'](this.props.className, this.getBsClassSet(), {
        active: this.props.active,
        'progress-bar-striped': this.props.active || this.props.striped
      });

      return _react2['default'].createElement(
        'div',
        _extends({}, this.props, {
          className: classes,
          role: 'progressbar',
          style: { width: percentage + '%' },
          'aria-valuenow': this.props.now,
          'aria-valuemin': this.props.min,
          'aria-valuemax': this.props.max }),
        label
      );
    },

    renderLabel: function renderLabel(percentage) {
      var InterpolateClass = this.props.interpolateClass || _Interpolate2['default'];

      return _react2['default'].createElement(
        InterpolateClass,
        {
          now: this.props.now,
          min: this.props.min,
          max: this.props.max,
          percent: percentage,
          bsStyle: this.props.bsStyle },
        this.props.label
      );
    }
  });

  /**
   * Custom propTypes checker
   */
  function onlyProgressBar(props, propName, componentName) {
    if (props[propName]) {
      var _ret = (function () {
        var error = undefined,
          childIdentifier = undefined;

        _react2['default'].Children.forEach(props[propName], function (child) {
          if (child.type !== ProgressBar) {
            childIdentifier = child.type.displayName ? child.type.displayName : child.type;
            error = new Error('Children of ' + componentName + ' can contain only ProgressBar components. Found ' + childIdentifier);
          }
        });

        return {
          v: error
        };
      })();

      if (typeof _ret === 'object') return _ret.v;
    }
  }

  exports['default'] = ProgressBar;
  module.exports = exports['default'];
},{"./BootstrapMixin":122,"./Interpolate":146,"./utils/ValidComponentChildren":193,"babel-runtime/helpers/extends":208,"babel-runtime/helpers/interop-require-default":210,"classnames":40,"react":482}],175:[function(require,module,exports){
  'use strict';

  var _extends = require('babel-runtime/helpers/extends')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _classnames = require('classnames');

  var _classnames2 = _interopRequireDefault(_classnames);

  var _utilsCustomPropTypes = require('./utils/CustomPropTypes');

  var _utilsCustomPropTypes2 = _interopRequireDefault(_utilsCustomPropTypes);

  var Row = _react2['default'].createClass({
    displayName: 'Row',

    propTypes: {
      /**
       * You can use a custom element for this component
       */
      componentClass: _utilsCustomPropTypes2['default'].elementType
    },

    getDefaultProps: function getDefaultProps() {
      return {
        componentClass: 'div'
      };
    },

    render: function render() {
      var ComponentClass = this.props.componentClass;

      return _react2['default'].createElement(
        ComponentClass,
        _extends({}, this.props, { className: _classnames2['default'](this.props.className, 'row') }),
        this.props.children
      );
    }
  });

  exports['default'] = Row;
  module.exports = exports['default'];
},{"./utils/CustomPropTypes":190,"babel-runtime/helpers/extends":208,"babel-runtime/helpers/interop-require-default":210,"classnames":40,"react":482}],176:[function(require,module,exports){
  'use strict';

  var _inherits = require('babel-runtime/helpers/inherits')['default'];

  var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

  var _extends = require('babel-runtime/helpers/extends')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _utilsCreateChainedFunction = require('./utils/createChainedFunction');

  var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

  /**
   * Note: This is intended as a stop-gap for accessibility concerns that the
   * Bootstrap CSS does not address as they have styled anchors and not buttons
   * in many cases.
   */

  var SafeAnchor = (function (_React$Component) {
    _inherits(SafeAnchor, _React$Component);

    function SafeAnchor(props) {
      _classCallCheck(this, SafeAnchor);

      _React$Component.call(this, props);

      this.handleClick = this.handleClick.bind(this);
    }

    SafeAnchor.prototype.handleClick = function handleClick(event) {
      if (this.props.href === undefined) {
        event.preventDefault();
      }
    };

    SafeAnchor.prototype.render = function render() {
      return _react2['default'].createElement('a', _extends({ role: this.props.href ? undefined : 'button'
      }, this.props, {
        onClick: _utilsCreateChainedFunction2['default'](this.props.onClick, this.handleClick),
        href: this.props.href || '' }));
    };

    return SafeAnchor;
  })(_react2['default'].Component);

  exports['default'] = SafeAnchor;

  SafeAnchor.propTypes = {
    href: _react2['default'].PropTypes.string,
    onClick: _react2['default'].PropTypes.func
  };
  module.exports = exports['default'];
},{"./utils/createChainedFunction":196,"babel-runtime/helpers/class-call-check":207,"babel-runtime/helpers/extends":208,"babel-runtime/helpers/inherits":209,"babel-runtime/helpers/interop-require-default":210,"react":482}],177:[function(require,module,exports){
  'use strict';

  var _inherits = require('babel-runtime/helpers/inherits')['default'];

  var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

  var _extends = require('babel-runtime/helpers/extends')['default'];

  var _objectWithoutProperties = require('babel-runtime/helpers/object-without-properties')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _BootstrapMixin = require('./BootstrapMixin');

  var _BootstrapMixin2 = _interopRequireDefault(_BootstrapMixin);

  var _Button = require('./Button');

  var _Button2 = _interopRequireDefault(_Button);

  var _Dropdown = require('./Dropdown');

  var _Dropdown2 = _interopRequireDefault(_Dropdown);

  var _SplitToggle = require('./SplitToggle');

  var _SplitToggle2 = _interopRequireDefault(_SplitToggle);

  var SplitButton = (function (_React$Component) {
    _inherits(SplitButton, _React$Component);

    function SplitButton() {
      _classCallCheck(this, SplitButton);

      _React$Component.apply(this, arguments);
    }

    SplitButton.prototype.render = function render() {
      var _props = this.props;
      var children = _props.children;
      var title = _props.title;
      var onClick = _props.onClick;
      var target = _props.target;
      var href = _props.href;
      var
      // bsStyle is validated by 'Button' component
        bsStyle = _props.bsStyle;

      var props = _objectWithoutProperties(_props, ['children', 'title', 'onClick', 'target', 'href', 'bsStyle']);

      var disabled = props.disabled;

      var button = _react2['default'].createElement(
        _Button2['default'],
        {
          onClick: onClick,
          bsStyle: bsStyle,
          disabled: disabled,
          target: target,
          href: href
        },
        title
      );

      return _react2['default'].createElement(
        _Dropdown2['default'],
        props,
        button,
        _react2['default'].createElement(_SplitToggle2['default'], {
          'aria-label': title,
          bsStyle: bsStyle,
          disabled: disabled
        }),
        _react2['default'].createElement(
          _Dropdown2['default'].Menu,
          null,
          children
        )
      );
    };

    return SplitButton;
  })(_react2['default'].Component);

  SplitButton.propTypes = _extends({}, _Dropdown2['default'].propTypes, _BootstrapMixin2['default'].propTypes, {

    /**
     * @private
     */
    onClick: function onClick() {},
    target: _react2['default'].PropTypes.string,
    href: _react2['default'].PropTypes.string,
    /**
     * The content of the split button.
     */
    title: _react2['default'].PropTypes.node.isRequired
  });

  SplitButton.defaultProps = {
    disabled: false,
    dropup: false,
    pullRight: false
  };

  SplitButton.Toggle = _SplitToggle2['default'];

  exports['default'] = SplitButton;
  module.exports = exports['default'];
  // eslint-disable-line

  //dropup: React.PropTypes.bool,
},{"./BootstrapMixin":122,"./Button":123,"./Dropdown":133,"./SplitToggle":178,"babel-runtime/helpers/class-call-check":207,"babel-runtime/helpers/extends":208,"babel-runtime/helpers/inherits":209,"babel-runtime/helpers/interop-require-default":210,"babel-runtime/helpers/object-without-properties":212,"react":482}],178:[function(require,module,exports){
  'use strict';

  var _inherits = require('babel-runtime/helpers/inherits')['default'];

  var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

  var _extends = require('babel-runtime/helpers/extends')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _DropdownToggle = require('./DropdownToggle');

  var _DropdownToggle2 = _interopRequireDefault(_DropdownToggle);

  var SplitToggle = (function (_React$Component) {
    _inherits(SplitToggle, _React$Component);

    function SplitToggle() {
      _classCallCheck(this, SplitToggle);

      _React$Component.apply(this, arguments);
    }

    SplitToggle.prototype.render = function render() {
      return _react2['default'].createElement(_DropdownToggle2['default'], _extends({}, this.props, {
        useAnchor: false,
        noCaret: false
      }));
    };

    return SplitToggle;
  })(_react2['default'].Component);

  exports['default'] = SplitToggle;

  SplitToggle.defaultProps = _DropdownToggle2['default'].defaultProps;
  module.exports = exports['default'];
},{"./DropdownToggle":136,"babel-runtime/helpers/class-call-check":207,"babel-runtime/helpers/extends":208,"babel-runtime/helpers/inherits":209,"babel-runtime/helpers/interop-require-default":210,"react":482}],179:[function(require,module,exports){
  'use strict';

  var _extends = require('babel-runtime/helpers/extends')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _classnames = require('classnames');

  var _classnames2 = _interopRequireDefault(_classnames);

  var _utilsValidComponentChildren = require('./utils/ValidComponentChildren');

  var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

  var _utilsCreateChainedFunction = require('./utils/createChainedFunction');

  var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

  var _BootstrapMixin = require('./BootstrapMixin');

  var _BootstrapMixin2 = _interopRequireDefault(_BootstrapMixin);

  var _SafeAnchor = require('./SafeAnchor');

  var _SafeAnchor2 = _interopRequireDefault(_SafeAnchor);

  var SubNav = _react2['default'].createClass({
    displayName: 'SubNav',

    mixins: [_BootstrapMixin2['default']],

    propTypes: {
      onSelect: _react2['default'].PropTypes.func,
      active: _react2['default'].PropTypes.bool,
      activeHref: _react2['default'].PropTypes.string,
      activeKey: _react2['default'].PropTypes.any,
      disabled: _react2['default'].PropTypes.bool,
      eventKey: _react2['default'].PropTypes.any,
      href: _react2['default'].PropTypes.string,
      title: _react2['default'].PropTypes.string,
      text: _react2['default'].PropTypes.node,
      target: _react2['default'].PropTypes.string
    },

    getDefaultProps: function getDefaultProps() {
      return {
        bsClass: 'nav',
        active: false,
        disabled: false
      };
    },

    handleClick: function handleClick(e) {
      if (this.props.onSelect) {
        e.preventDefault();

        if (!this.props.disabled) {
          this.props.onSelect(this.props.eventKey, this.props.href, this.props.target);
        }
      }
    },

    isActive: function isActive() {
      return this.isChildActive(this);
    },

    isChildActive: function isChildActive(child) {
      if (child.props.active) {
        return true;
      }

      if (this.props.activeKey != null && this.props.activeKey === child.props.eventKey) {
        return true;
      }

      if (this.props.activeHref != null && this.props.activeHref === child.props.href) {
        return true;
      }

      if (child.props.children) {
        var isActive = false;

        _utilsValidComponentChildren2['default'].forEach(child.props.children, function (grandchild) {
          if (this.isChildActive(grandchild)) {
            isActive = true;
          }
        }, this);

        return isActive;
      }

      return false;
    },

    getChildActiveProp: function getChildActiveProp(child) {
      if (child.props.active) {
        return true;
      }
      if (this.props.activeKey != null) {
        if (child.props.eventKey === this.props.activeKey) {
          return true;
        }
      }
      if (this.props.activeHref != null) {
        if (child.props.href === this.props.activeHref) {
          return true;
        }
      }

      return child.props.active;
    },

    render: function render() {
      var classes = {
        'active': this.isActive(),
        'disabled': this.props.disabled
      };

      return _react2['default'].createElement(
        'li',
        _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }),
        _react2['default'].createElement(
          _SafeAnchor2['default'],
          {
            href: this.props.href,
            title: this.props.title,
            target: this.props.target,
            onClick: this.handleClick },
          this.props.text
        ),
        _react2['default'].createElement(
          'ul',
          { className: 'nav' },
          _utilsValidComponentChildren2['default'].map(this.props.children, this.renderNavItem)
        )
      );
    },

    renderNavItem: function renderNavItem(child, index) {
      return _react.cloneElement(child, {
        active: this.getChildActiveProp(child),
        onSelect: _utilsCreateChainedFunction2['default'](child.props.onSelect, this.props.onSelect),
        key: child.key ? child.key : index
      });
    }
  });

  exports['default'] = SubNav;
  module.exports = exports['default'];
},{"./BootstrapMixin":122,"./SafeAnchor":176,"./utils/ValidComponentChildren":193,"./utils/createChainedFunction":196,"babel-runtime/helpers/extends":208,"babel-runtime/helpers/interop-require-default":210,"classnames":40,"react":482}],180:[function(require,module,exports){
  'use strict';

  var _extends = require('babel-runtime/helpers/extends')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _classnames = require('classnames');

  var _classnames2 = _interopRequireDefault(_classnames);

  var _utilsTransitionEvents = require('./utils/TransitionEvents');

  var _utilsTransitionEvents2 = _interopRequireDefault(_utilsTransitionEvents);

  var Tab = _react2['default'].createClass({
    displayName: 'Tab',

    propTypes: {
      /**
       * @private
       */
      active: _react2['default'].PropTypes.bool,
      animation: _react2['default'].PropTypes.bool,
      onAnimateOutEnd: _react2['default'].PropTypes.func,
      disabled: _react2['default'].PropTypes.bool,
      title: _react2['default'].PropTypes.node
    },

    getDefaultProps: function getDefaultProps() {
      return {
        animation: true
      };
    },

    getInitialState: function getInitialState() {
      return {
        animateIn: false,
        animateOut: false
      };
    },

    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
      if (this.props.animation) {
        if (!this.state.animateIn && nextProps.active && !this.props.active) {
          this.setState({
            animateIn: true
          });
        } else if (!this.state.animateOut && !nextProps.active && this.props.active) {
          this.setState({
            animateOut: true
          });
        }
      }
    },

    componentDidUpdate: function componentDidUpdate() {
      if (this.state.animateIn) {
        setTimeout(this.startAnimateIn, 0);
      }
      if (this.state.animateOut) {
        _utilsTransitionEvents2['default'].addEndEventListener(_react2['default'].findDOMNode(this), this.stopAnimateOut);
      }
    },

    startAnimateIn: function startAnimateIn() {
      if (this.isMounted()) {
        this.setState({
          animateIn: false
        });
      }
    },

    stopAnimateOut: function stopAnimateOut() {
      if (this.isMounted()) {
        this.setState({
          animateOut: false
        });

        if (this.props.onAnimateOutEnd) {
          this.props.onAnimateOutEnd();
        }
      }
    },

    render: function render() {
      var classes = {
        'tab-pane': true,
        'fade': true,
        'active': this.props.active || this.state.animateOut,
        'in': this.props.active && !this.state.animateIn
      };

      return _react2['default'].createElement(
        'div',
        _extends({}, this.props, {
          role: 'tabpanel',
          'aria-hidden': !this.props.active,
          className: _classnames2['default'](this.props.className, classes)
        }),
        this.props.children
      );
    }
  });

  exports['default'] = Tab;
  module.exports = exports['default'];
},{"./utils/TransitionEvents":192,"babel-runtime/helpers/extends":208,"babel-runtime/helpers/interop-require-default":210,"classnames":40,"react":482}],181:[function(require,module,exports){
  'use strict';

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _utilsDeprecationWarning = require('./utils/deprecationWarning');

  var _utilsDeprecationWarning2 = _interopRequireDefault(_utilsDeprecationWarning);

  var _Tab = require('./Tab');

  var _Tab2 = _interopRequireDefault(_Tab);

  var TabPane = _react2['default'].createClass({
    displayName: 'TabPane',

    componentWillMount: function componentWillMount() {
      _utilsDeprecationWarning2['default']('TabPane', 'Tab', 'https://github.com/react-bootstrap/react-bootstrap/pull/1091');
    },

    render: function render() {
      return _react2['default'].createElement(_Tab2['default'], this.props);
    }
  });

  exports['default'] = TabPane;
  module.exports = exports['default'];
},{"./Tab":180,"./utils/deprecationWarning":199,"babel-runtime/helpers/interop-require-default":210,"react":482}],182:[function(require,module,exports){
  'use strict';

  var _objectWithoutProperties = require('babel-runtime/helpers/object-without-properties')['default'];

  var _extends = require('babel-runtime/helpers/extends')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _Tabs = require('./Tabs');

  var _Tabs2 = _interopRequireDefault(_Tabs);

  var _TabPane = require('./TabPane');

  var _TabPane2 = _interopRequireDefault(_TabPane);

  var _utilsValidComponentChildren = require('./utils/ValidComponentChildren');

  var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

  var _utilsDeprecationWarning = require('./utils/deprecationWarning');

  var _utilsDeprecationWarning2 = _interopRequireDefault(_utilsDeprecationWarning);

  var TabbedArea = _react2['default'].createClass({
    displayName: 'TabbedArea',

    componentWillMount: function componentWillMount() {
      _utilsDeprecationWarning2['default']('TabbedArea', 'Tabs', 'https://github.com/react-bootstrap/react-bootstrap/pull/1091');
    },

    render: function render() {
      var _props = this.props;
      var children = _props.children;

      var props = _objectWithoutProperties(_props, ['children']);

      var tabs = _utilsValidComponentChildren2['default'].map(children, function (child) {
        var _child$props = child.props;
        var title = _child$props.tab;

        var others = _objectWithoutProperties(_child$props, ['tab']);

        return _react2['default'].createElement(_TabPane2['default'], _extends({ title: title }, others));
      });

      return _react2['default'].createElement(
        _Tabs2['default'],
        props,
        tabs
      );
    }
  });

  exports['default'] = TabbedArea;
  module.exports = exports['default'];
},{"./TabPane":181,"./Tabs":184,"./utils/ValidComponentChildren":193,"./utils/deprecationWarning":199,"babel-runtime/helpers/extends":208,"babel-runtime/helpers/interop-require-default":210,"babel-runtime/helpers/object-without-properties":212,"react":482}],183:[function(require,module,exports){
  'use strict';

  var _extends = require('babel-runtime/helpers/extends')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _classnames = require('classnames');

  var _classnames2 = _interopRequireDefault(_classnames);

  var Table = _react2['default'].createClass({
    displayName: 'Table',

    propTypes: {
      striped: _react2['default'].PropTypes.bool,
      bordered: _react2['default'].PropTypes.bool,
      condensed: _react2['default'].PropTypes.bool,
      hover: _react2['default'].PropTypes.bool,
      responsive: _react2['default'].PropTypes.bool
    },

    getDefaultProps: function getDefaultProps() {
      return {
        bordered: false,
        condensed: false,
        hover: false,
        responsive: false,
        striped: false
      };
    },

    render: function render() {
      var classes = {
        'table': true,
        'table-striped': this.props.striped,
        'table-bordered': this.props.bordered,
        'table-condensed': this.props.condensed,
        'table-hover': this.props.hover
      };
      var table = _react2['default'].createElement(
        'table',
        _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }),
        this.props.children
      );

      return this.props.responsive ? _react2['default'].createElement(
        'div',
        { className: 'table-responsive' },
        table
      ) : table;
    }
  });

  exports['default'] = Table;
  module.exports = exports['default'];
},{"babel-runtime/helpers/extends":208,"babel-runtime/helpers/interop-require-default":210,"classnames":40,"react":482}],184:[function(require,module,exports){
  'use strict';

  var _extends = require('babel-runtime/helpers/extends')['default'];

  var _objectWithoutProperties = require('babel-runtime/helpers/object-without-properties')['default'];

  var _Object$keys = require('babel-runtime/core-js/object/keys')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _Col = require('./Col');

  var _Col2 = _interopRequireDefault(_Col);

  var _Grid = require('./Grid');

  var _Grid2 = _interopRequireDefault(_Grid);

  var _Nav = require('./Nav');

  var _Nav2 = _interopRequireDefault(_Nav);

  var _NavItem = require('./NavItem');

  var _NavItem2 = _interopRequireDefault(_NavItem);

  var _Row = require('./Row');

  var _Row2 = _interopRequireDefault(_Row);

  var _styleMaps = require('./styleMaps');

  var _styleMaps2 = _interopRequireDefault(_styleMaps);

  var _utilsValidComponentChildren = require('./utils/ValidComponentChildren');

  var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

  var paneId = function paneId(props, child) {
    return child.props.id ? child.props.id : props.id && props.id + '___pane___' + child.props.eventKey;
  };
  var tabId = function tabId(props, child) {
    return child.props.id ? child.props.id + '___tab' : props.id && props.id + '___tab___' + child.props.eventKey;
  };

  function getDefaultActiveKeyFromChildren(children) {
    var defaultActiveKey = undefined;

    _utilsValidComponentChildren2['default'].forEach(children, function (child) {
      if (defaultActiveKey == null) {
        defaultActiveKey = child.props.eventKey;
      }
    });

    return defaultActiveKey;
  }

  var Tabs = _react2['default'].createClass({
    displayName: 'Tabs',

    propTypes: {
      activeKey: _react2['default'].PropTypes.any,
      defaultActiveKey: _react2['default'].PropTypes.any,
      /**
       * Navigation style for tabs
       *
       * If not specified, it will be treated as `'tabs'` when vertically
       * positioned and `'pills'` when horizontally positioned.
       */
      bsStyle: _react2['default'].PropTypes.oneOf(['tabs', 'pills']),
      animation: _react2['default'].PropTypes.bool,
      id: _react2['default'].PropTypes.string,
      onSelect: _react2['default'].PropTypes.func,
      position: _react2['default'].PropTypes.oneOf(['top', 'left', 'right']),
      /**
       * Number of grid columns for the tabs if horizontally positioned
       *
       * This accepts either a single width or a mapping of size to width.
       */
      tabWidth: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.number, _react2['default'].PropTypes.object]),
      /**
       * Number of grid columns for the panes if horizontally positioned
       *
       * This accepts either a single width or a mapping of size to width. If not
       * specified, it will be treated as `styleMaps.GRID_COLUMNS` minus
       * `tabWidth`.
       */
      paneWidth: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.number, _react2['default'].PropTypes.object])
    },

    getDefaultProps: function getDefaultProps() {
      return {
        animation: true,
        tabWidth: 2,
        position: 'top'
      };
    },

    getInitialState: function getInitialState() {
      var defaultActiveKey = this.props.defaultActiveKey != null ? this.props.defaultActiveKey : getDefaultActiveKeyFromChildren(this.props.children);

      return {
        activeKey: defaultActiveKey,
        previousActiveKey: null
      };
    },

    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
      var _this = this;

      if (nextProps.activeKey != null && nextProps.activeKey !== this.props.activeKey) {
        (function () {
          // check if the 'previousActiveKey' child still exists
          var previousActiveKey = _this.props.activeKey;
          _react2['default'].Children.forEach(nextProps.children, function (child) {
            if (_react2['default'].isValidElement(child)) {
              if (child.props.eventKey === previousActiveKey) {
                _this.setState({
                  previousActiveKey: previousActiveKey
                });
                return;
              }
            }
          });
        })();
      }
    },

    handlePaneAnimateOutEnd: function handlePaneAnimateOutEnd() {
      this.setState({
        previousActiveKey: null
      });
    },

    render: function render() {
      var _props = this.props;
      var id = _props.id;
      var className = _props.className;
      var style = _props.style;
      var position = _props.position;
      var bsStyle = _props.bsStyle;
      var tabWidth = _props.tabWidth;
      var paneWidth = _props.paneWidth;
      var children = _props.children;

      var props = _objectWithoutProperties(_props, ['id', 'className', 'style', 'position', 'bsStyle', 'tabWidth', 'paneWidth', 'children']);

      var isHorizontal = position === 'left' || position === 'right';

      if (bsStyle == null) {
        bsStyle = isHorizontal ? 'pills' : 'tabs';
      }

      var containerProps = { id: id, className: className, style: style };

      var tabsProps = _extends({}, props, {
        bsStyle: bsStyle,
        stacked: isHorizontal,
        activeKey: this.getActiveKey(),
        onSelect: this.handleSelect,
        ref: 'tabs',
        role: 'tablist'
      });
      var childTabs = _utilsValidComponentChildren2['default'].map(children, this.renderTab);

      var panesProps = {
        className: 'tab-content',
        ref: 'panes'
      };
      var childPanes = _utilsValidComponentChildren2['default'].map(children, this.renderPane);

      if (isHorizontal) {
        var _getColProps = this.getColProps({ tabWidth: tabWidth, paneWidth: paneWidth });

        var tabsColProps = _getColProps.tabsColProps;
        var panesColProps = _getColProps.panesColProps;

        var tabs = _react2['default'].createElement(
          _Col2['default'],
          _extends({ componentClass: _Nav2['default'] }, tabsProps, tabsColProps),
          childTabs
        );
        var panes = _react2['default'].createElement(
          _Col2['default'],
          _extends({}, panesProps, panesColProps),
          childPanes
        );

        var body = undefined;
        if (position === 'left') {
          body = _react2['default'].createElement(
            _Row2['default'],
            containerProps,
            tabs,
            panes
          );
        } else {
          body = _react2['default'].createElement(
            _Row2['default'],
            containerProps,
            panes,
            tabs
          );
        }

        return _react2['default'].createElement(
          _Grid2['default'],
          null,
          body
        );
      } else {
        return _react2['default'].createElement(
          'div',
          containerProps,
          _react2['default'].createElement(
            _Nav2['default'],
            tabsProps,
            childTabs
          ),
          _react2['default'].createElement(
            'div',
            panesProps,
            childPanes
          )
        );
      }
    },

    getActiveKey: function getActiveKey() {
      return this.props.activeKey != null ? this.props.activeKey : this.state.activeKey;
    },

    renderPane: function renderPane(child, index) {
      var previousActiveKey = this.state.previousActiveKey;

      var shouldPaneBeSetActive = child.props.eventKey === this.getActiveKey();
      var thereIsNoActivePane = previousActiveKey == null;

      var paneIsAlreadyActive = previousActiveKey != null && child.props.eventKey === previousActiveKey;

      return _react.cloneElement(child, {
        active: shouldPaneBeSetActive && (thereIsNoActivePane || !this.props.animation),
        id: paneId(this.props, child),
        'aria-labelledby': tabId(this.props, child),
        key: child.key ? child.key : index,
        animation: this.props.animation,
        onAnimateOutEnd: paneIsAlreadyActive ? this.handlePaneAnimateOutEnd : null
      });
    },

    renderTab: function renderTab(child) {
      if (child.props.title == null) {
        return null;
      }

      var _child$props = child.props;
      var eventKey = _child$props.eventKey;
      var title = _child$props.title;
      var disabled = _child$props.disabled;

      return _react2['default'].createElement(
        _NavItem2['default'],
        {
          linkId: tabId(this.props, child),
          ref: 'tab' + eventKey,
          'aria-controls': paneId(this.props, child),
          eventKey: eventKey,
          disabled: disabled },
        title
      );
    },

    getColProps: function getColProps(_ref) {
      var tabWidth = _ref.tabWidth;
      var paneWidth = _ref.paneWidth;

      var tabsColProps = undefined;
      if (tabWidth instanceof Object) {
        tabsColProps = tabWidth;
      } else {
        tabsColProps = { xs: tabWidth };
      }

      var panesColProps = undefined;
      if (paneWidth == null) {
        panesColProps = {};
        _Object$keys(tabsColProps).forEach(function (size) {
          panesColProps[size] = _styleMaps2['default'].GRID_COLUMNS - tabsColProps[size];
        });
      } else if (paneWidth instanceof Object) {
        panesColProps = paneWidth;
      } else {
        panesColProps = { xs: paneWidth };
      }

      return { tabsColProps: tabsColProps, panesColProps: panesColProps };
    },

    shouldComponentUpdate: function shouldComponentUpdate() {
      // Defer any updates to this component during the `onSelect` handler.
      return !this._isChanging;
    },

    handleSelect: function handleSelect(selectedKey) {
      if (this.props.onSelect) {
        this._isChanging = true;
        this.props.onSelect(selectedKey);
        this._isChanging = false;
        return;
      }

      // if there is no external handler, then use embedded one
      var previousActiveKey = this.getActiveKey();
      if (selectedKey !== previousActiveKey) {
        this.setState({
          activeKey: selectedKey,
          previousActiveKey: previousActiveKey
        });
      }
    }
  });

  exports['default'] = Tabs;
  module.exports = exports['default'];
},{"./Col":129,"./Grid":143,"./Nav":158,"./NavItem":160,"./Row":175,"./styleMaps":189,"./utils/ValidComponentChildren":193,"babel-runtime/core-js/object/keys":205,"babel-runtime/helpers/extends":208,"babel-runtime/helpers/interop-require-default":210,"babel-runtime/helpers/object-without-properties":212,"react":482}],185:[function(require,module,exports){
  'use strict';

  var _extends = require('babel-runtime/helpers/extends')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _classnames = require('classnames');

  var _classnames2 = _interopRequireDefault(_classnames);

  var _BootstrapMixin = require('./BootstrapMixin');

  var _BootstrapMixin2 = _interopRequireDefault(_BootstrapMixin);

  var _SafeAnchor = require('./SafeAnchor');

  var _SafeAnchor2 = _interopRequireDefault(_SafeAnchor);

  var Thumbnail = _react2['default'].createClass({
    displayName: 'Thumbnail',

    mixins: [_BootstrapMixin2['default']],

    propTypes: {
      alt: _react2['default'].PropTypes.string,
      href: _react2['default'].PropTypes.string,
      src: _react2['default'].PropTypes.string
    },

    getDefaultProps: function getDefaultProps() {
      return {
        bsClass: 'thumbnail'
      };
    },

    render: function render() {
      var classes = this.getBsClassSet();

      if (this.props.href) {
        return _react2['default'].createElement(
          _SafeAnchor2['default'],
          _extends({}, this.props, { href: this.props.href, className: _classnames2['default'](this.props.className, classes) }),
          _react2['default'].createElement('img', { src: this.props.src, alt: this.props.alt })
        );
      } else {
        if (this.props.children) {
          return _react2['default'].createElement(
            'div',
            _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }),
            _react2['default'].createElement('img', { src: this.props.src, alt: this.props.alt }),
            _react2['default'].createElement(
              'div',
              { className: 'caption' },
              this.props.children
            )
          );
        } else {
          return _react2['default'].createElement(
            'div',
            _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }),
            _react2['default'].createElement('img', { src: this.props.src, alt: this.props.alt })
          );
        }
      }
    }
  });

  exports['default'] = Thumbnail;
  module.exports = exports['default'];
},{"./BootstrapMixin":122,"./SafeAnchor":176,"babel-runtime/helpers/extends":208,"babel-runtime/helpers/interop-require-default":210,"classnames":40,"react":482}],186:[function(require,module,exports){
  'use strict';

  var _extends = require('babel-runtime/helpers/extends')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _classnames = require('classnames');

  var _classnames2 = _interopRequireDefault(_classnames);

  var _BootstrapMixin = require('./BootstrapMixin');

  var _BootstrapMixin2 = _interopRequireDefault(_BootstrapMixin);

  var _utilsCustomPropTypes = require('./utils/CustomPropTypes');

  var _utilsCustomPropTypes2 = _interopRequireDefault(_utilsCustomPropTypes);

  var Tooltip = _react2['default'].createClass({
    displayName: 'Tooltip',

    mixins: [_BootstrapMixin2['default']],

    propTypes: {
      /**
       * An html id attribute, necessary for accessibility
       * @type {string}
       * @required
       */
      id: _utilsCustomPropTypes2['default'].isRequiredForA11y(_react2['default'].PropTypes.string),

      /**
       * Sets the direction the Tooltip is positioned towards.
       */
      placement: _react2['default'].PropTypes.oneOf(['top', 'right', 'bottom', 'left']),

      /**
       * The "left" position value for the Tooltip.
       */
      positionLeft: _react2['default'].PropTypes.number,
      /**
       * The "top" position value for the Tooltip.
       */
      positionTop: _react2['default'].PropTypes.number,
      /**
       * The "left" position value for the Tooltip arrow.
       */
      arrowOffsetLeft: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.number, _react2['default'].PropTypes.string]),
      /**
       * The "top" position value for the Tooltip arrow.
       */
      arrowOffsetTop: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.number, _react2['default'].PropTypes.string]),
      /**
       * Title text
       */
      title: _react2['default'].PropTypes.node
    },

    getDefaultProps: function getDefaultProps() {
      return {
        placement: 'right'
      };
    },

    render: function render() {
      var _classes;

      var classes = (_classes = {
        'tooltip': true
      }, _classes[this.props.placement] = true, _classes);

      var style = _extends({
        'left': this.props.positionLeft,
        'top': this.props.positionTop
      }, this.props.style);

      var arrowStyle = {
        'left': this.props.arrowOffsetLeft,
        'top': this.props.arrowOffsetTop
      };

      return _react2['default'].createElement(
        'div',
        _extends({ role: 'tooltip' }, this.props, { className: _classnames2['default'](this.props.className, classes), style: style }),
        _react2['default'].createElement('div', { className: 'tooltip-arrow', style: arrowStyle }),
        _react2['default'].createElement(
          'div',
          { className: 'tooltip-inner' },
          this.props.children
        )
      );
    }
  });

  exports['default'] = Tooltip;
  module.exports = exports['default'];
},{"./BootstrapMixin":122,"./utils/CustomPropTypes":190,"babel-runtime/helpers/extends":208,"babel-runtime/helpers/interop-require-default":210,"classnames":40,"react":482}],187:[function(require,module,exports){
  'use strict';

  var _extends = require('babel-runtime/helpers/extends')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _classnames = require('classnames');

  var _classnames2 = _interopRequireDefault(_classnames);

  var _BootstrapMixin = require('./BootstrapMixin');

  var _BootstrapMixin2 = _interopRequireDefault(_BootstrapMixin);

  var Well = _react2['default'].createClass({
    displayName: 'Well',

    mixins: [_BootstrapMixin2['default']],

    getDefaultProps: function getDefaultProps() {
      return {
        bsClass: 'well'
      };
    },

    render: function render() {
      var classes = this.getBsClassSet();

      return _react2['default'].createElement(
        'div',
        _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }),
        this.props.children
      );
    }
  });

  exports['default'] = Well;
  module.exports = exports['default'];
},{"./BootstrapMixin":122,"babel-runtime/helpers/extends":208,"babel-runtime/helpers/interop-require-default":210,"classnames":40,"react":482}],188:[function(require,module,exports){
  (function (process){
    'use strict';

    var _Object$keys = require('babel-runtime/core-js/object/keys')['default'];

    var _Object$defineProperty = require('babel-runtime/core-js/object/define-property')['default'];

    var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

    var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

    exports.__esModule = true;

    var _utilsDeprecationWarning = require('./utils/deprecationWarning');

    var _utilsDeprecationWarning2 = _interopRequireDefault(_utilsDeprecationWarning);

    var _utilsDomUtils = require('./utils/domUtils');

    var _utilsDomUtils2 = _interopRequireDefault(_utilsDomUtils);

    var _utilsChildrenValueInputValidation = require('./utils/childrenValueInputValidation');

    var _utilsChildrenValueInputValidation2 = _interopRequireDefault(_utilsChildrenValueInputValidation);

    var _utilsCreateChainedFunction = require('./utils/createChainedFunction');

    var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

    var _utilsValidComponentChildren = require('./utils/ValidComponentChildren');

    var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

    var _utilsCustomPropTypes = require('./utils/CustomPropTypes');

    var _utilsCustomPropTypes2 = _interopRequireDefault(_utilsCustomPropTypes);

    var _Accordion2 = require('./Accordion');

    var _Accordion3 = _interopRequireDefault(_Accordion2);

    exports.Accordion = _Accordion3['default'];

    var _Affix2 = require('./Affix');

    var _Affix3 = _interopRequireDefault(_Affix2);

    exports.Affix = _Affix3['default'];

    var _AffixMixin2 = require('./AffixMixin');

    var _AffixMixin3 = _interopRequireDefault(_AffixMixin2);

    exports.AffixMixin = _AffixMixin3['default'];

    var _Alert2 = require('./Alert');

    var _Alert3 = _interopRequireDefault(_Alert2);

    exports.Alert = _Alert3['default'];

    var _Badge2 = require('./Badge');

    var _Badge3 = _interopRequireDefault(_Badge2);

    exports.Badge = _Badge3['default'];

    var _BootstrapMixin2 = require('./BootstrapMixin');

    var _BootstrapMixin3 = _interopRequireDefault(_BootstrapMixin2);

    exports.BootstrapMixin = _BootstrapMixin3['default'];

    var _Button2 = require('./Button');

    var _Button3 = _interopRequireDefault(_Button2);

    exports.Button = _Button3['default'];

    var _ButtonGroup2 = require('./ButtonGroup');

    var _ButtonGroup3 = _interopRequireDefault(_ButtonGroup2);

    exports.ButtonGroup = _ButtonGroup3['default'];

    var _ButtonInput2 = require('./ButtonInput');

    var _ButtonInput3 = _interopRequireDefault(_ButtonInput2);

    exports.ButtonInput = _ButtonInput3['default'];

    var _ButtonToolbar2 = require('./ButtonToolbar');

    var _ButtonToolbar3 = _interopRequireDefault(_ButtonToolbar2);

    exports.ButtonToolbar = _ButtonToolbar3['default'];

    var _Carousel2 = require('./Carousel');

    var _Carousel3 = _interopRequireDefault(_Carousel2);

    exports.Carousel = _Carousel3['default'];

    var _CarouselItem2 = require('./CarouselItem');

    var _CarouselItem3 = _interopRequireDefault(_CarouselItem2);

    exports.CarouselItem = _CarouselItem3['default'];

    var _Col2 = require('./Col');

    var _Col3 = _interopRequireDefault(_Col2);

    exports.Col = _Col3['default'];

    var _CollapsibleMixin2 = require('./CollapsibleMixin');

    var _CollapsibleMixin3 = _interopRequireDefault(_CollapsibleMixin2);

    exports.CollapsibleMixin = _CollapsibleMixin3['default'];

    var _CollapsibleNav2 = require('./CollapsibleNav');

    var _CollapsibleNav3 = _interopRequireDefault(_CollapsibleNav2);

    exports.CollapsibleNav = _CollapsibleNav3['default'];

    var _Dropdown2 = require('./Dropdown');

    var _Dropdown3 = _interopRequireDefault(_Dropdown2);

    exports.Dropdown = _Dropdown3['default'];

    var _DropdownButton2 = require('./DropdownButton');

    var _DropdownButton3 = _interopRequireDefault(_DropdownButton2);

    exports.DropdownButton = _DropdownButton3['default'];

    var _NavDropdown2 = require('./NavDropdown');

    var _NavDropdown3 = _interopRequireDefault(_NavDropdown2);

    exports.NavDropdown = _NavDropdown3['default'];

    var _SplitButton3 = require('./SplitButton');

    var _SplitButton4 = _interopRequireDefault(_SplitButton3);

    exports.SplitButton = _SplitButton4['default'];

    var _FadeMixin2 = require('./FadeMixin');

    var _FadeMixin3 = _interopRequireDefault(_FadeMixin2);

    exports.FadeMixin = _FadeMixin3['default'];

    var _Glyphicon2 = require('./Glyphicon');

    var _Glyphicon3 = _interopRequireDefault(_Glyphicon2);

    exports.Glyphicon = _Glyphicon3['default'];

    var _Grid2 = require('./Grid');

    var _Grid3 = _interopRequireDefault(_Grid2);

    exports.Grid = _Grid3['default'];

    var _Input2 = require('./Input');

    var _Input3 = _interopRequireDefault(_Input2);

    exports.Input = _Input3['default'];

    var _Interpolate2 = require('./Interpolate');

    var _Interpolate3 = _interopRequireDefault(_Interpolate2);

    exports.Interpolate = _Interpolate3['default'];

    var _Jumbotron2 = require('./Jumbotron');

    var _Jumbotron3 = _interopRequireDefault(_Jumbotron2);

    exports.Jumbotron = _Jumbotron3['default'];

    var _Label2 = require('./Label');

    var _Label3 = _interopRequireDefault(_Label2);

    exports.Label = _Label3['default'];

    var _ListGroup2 = require('./ListGroup');

    var _ListGroup3 = _interopRequireDefault(_ListGroup2);

    exports.ListGroup = _ListGroup3['default'];

    var _ListGroupItem2 = require('./ListGroupItem');

    var _ListGroupItem3 = _interopRequireDefault(_ListGroupItem2);

    exports.ListGroupItem = _ListGroupItem3['default'];

    var _MenuItem2 = require('./MenuItem');

    var _MenuItem3 = _interopRequireDefault(_MenuItem2);

    exports.MenuItem = _MenuItem3['default'];

    var _Modal2 = require('./Modal');

    var _Modal3 = _interopRequireDefault(_Modal2);

    exports.Modal = _Modal3['default'];

    var _ModalHeader2 = require('./ModalHeader');

    var _ModalHeader3 = _interopRequireDefault(_ModalHeader2);

    exports.ModalHeader = _ModalHeader3['default'];

    var _ModalTitle2 = require('./ModalTitle');

    var _ModalTitle3 = _interopRequireDefault(_ModalTitle2);

    exports.ModalTitle = _ModalTitle3['default'];

    var _ModalBody2 = require('./ModalBody');

    var _ModalBody3 = _interopRequireDefault(_ModalBody2);

    exports.ModalBody = _ModalBody3['default'];

    var _ModalFooter2 = require('./ModalFooter');

    var _ModalFooter3 = _interopRequireDefault(_ModalFooter2);

    exports.ModalFooter = _ModalFooter3['default'];

    var _Nav2 = require('./Nav');

    var _Nav3 = _interopRequireDefault(_Nav2);

    exports.Nav = _Nav3['default'];

    var _Navbar2 = require('./Navbar');

    var _Navbar3 = _interopRequireDefault(_Navbar2);

    exports.Navbar = _Navbar3['default'];

    var _NavItem2 = require('./NavItem');

    var _NavItem3 = _interopRequireDefault(_NavItem2);

    exports.NavItem = _NavItem3['default'];

    var _Overlay2 = require('./Overlay');

    var _Overlay3 = _interopRequireDefault(_Overlay2);

    exports.Overlay = _Overlay3['default'];

    var _OverlayTrigger2 = require('./OverlayTrigger');

    var _OverlayTrigger3 = _interopRequireDefault(_OverlayTrigger2);

    exports.OverlayTrigger = _OverlayTrigger3['default'];

    var _PageHeader2 = require('./PageHeader');

    var _PageHeader3 = _interopRequireDefault(_PageHeader2);

    exports.PageHeader = _PageHeader3['default'];

    var _PageItem2 = require('./PageItem');

    var _PageItem3 = _interopRequireDefault(_PageItem2);

    exports.PageItem = _PageItem3['default'];

    var _Pager2 = require('./Pager');

    var _Pager3 = _interopRequireDefault(_Pager2);

    exports.Pager = _Pager3['default'];

    var _Pagination2 = require('./Pagination');

    var _Pagination3 = _interopRequireDefault(_Pagination2);

    exports.Pagination = _Pagination3['default'];

    var _Panel2 = require('./Panel');

    var _Panel3 = _interopRequireDefault(_Panel2);

    exports.Panel = _Panel3['default'];

    var _PanelGroup2 = require('./PanelGroup');

    var _PanelGroup3 = _interopRequireDefault(_PanelGroup2);

    exports.PanelGroup = _PanelGroup3['default'];

    var _Popover2 = require('./Popover');

    var _Popover3 = _interopRequireDefault(_Popover2);

    exports.Popover = _Popover3['default'];

    var _ProgressBar2 = require('./ProgressBar');

    var _ProgressBar3 = _interopRequireDefault(_ProgressBar2);

    exports.ProgressBar = _ProgressBar3['default'];

    var _Row2 = require('./Row');

    var _Row3 = _interopRequireDefault(_Row2);

    exports.Row = _Row3['default'];

    var _SafeAnchor2 = require('./SafeAnchor');

    var _SafeAnchor3 = _interopRequireDefault(_SafeAnchor2);

    exports.SafeAnchor = _SafeAnchor3['default'];

    var _SplitButton5 = _interopRequireDefault(_SplitButton3);

    exports.SplitButton = _SplitButton5['default'];

    var _styleMaps2 = require('./styleMaps');

    var _styleMaps3 = _interopRequireDefault(_styleMaps2);

    exports.styleMaps = _styleMaps3['default'];

    var _SubNav2 = require('./SubNav');

    var _SubNav3 = _interopRequireDefault(_SubNav2);

    exports.SubNav = _SubNav3['default'];

    var _Tab2 = require('./Tab');

    var _Tab3 = _interopRequireDefault(_Tab2);

    exports.Tab = _Tab3['default'];

    var _TabbedArea2 = require('./TabbedArea');

    var _TabbedArea3 = _interopRequireDefault(_TabbedArea2);

    exports.TabbedArea = _TabbedArea3['default'];

    var _Table2 = require('./Table');

    var _Table3 = _interopRequireDefault(_Table2);

    exports.Table = _Table3['default'];

    var _TabPane2 = require('./TabPane');

    var _TabPane3 = _interopRequireDefault(_TabPane2);

    exports.TabPane = _TabPane3['default'];

    var _Tabs2 = require('./Tabs');

    var _Tabs3 = _interopRequireDefault(_Tabs2);

    exports.Tabs = _Tabs3['default'];

    var _Thumbnail2 = require('./Thumbnail');

    var _Thumbnail3 = _interopRequireDefault(_Thumbnail2);

    exports.Thumbnail = _Thumbnail3['default'];

    var _Tooltip2 = require('./Tooltip');

    var _Tooltip3 = _interopRequireDefault(_Tooltip2);

    exports.Tooltip = _Tooltip3['default'];

    var _Well2 = require('./Well');

    var _Well3 = _interopRequireDefault(_Well2);

    exports.Well = _Well3['default'];

    var _Portal2 = require('./Portal');

    var _Portal3 = _interopRequireDefault(_Portal2);

    exports.Portal = _Portal3['default'];

    var _Position2 = require('./Position');

    var _Position3 = _interopRequireDefault(_Position2);

    exports.Position = _Position3['default'];

    var _Collapse2 = require('./Collapse');

    var _Collapse3 = _interopRequireDefault(_Collapse2);

    exports.Collapse = _Collapse3['default'];

    var _Fade2 = require('./Fade');

    var _Fade3 = _interopRequireDefault(_Fade2);

    exports.Fade = _Fade3['default'];

    var _FormControls2 = require('./FormControls');

    var _FormControls = _interopRequireWildcard(_FormControls2);

    exports.FormControls = _FormControls;
    var utils = {
      childrenValueInputValidation: _utilsChildrenValueInputValidation2['default'],
      createChainedFunction: _utilsCreateChainedFunction2['default'],
      ValidComponentChildren: _utilsValidComponentChildren2['default'],
      CustomPropTypes: _utilsCustomPropTypes2['default'],
      domUtils: createDeprecationWrapper(_utilsDomUtils2['default'], 'utils/domUtils', 'npm install dom-helpers')
    };

    exports.utils = utils;
    function createDeprecationWrapper(obj, deprecated, instead, link) {
      var wrapper = {};

      if (process.env.NODE_ENV === 'production') {
        return obj;
      }

      _Object$keys(obj).forEach(function (key) {
        _Object$defineProperty(wrapper, key, {
          get: function get() {
            _utilsDeprecationWarning2['default'](deprecated, instead, link);
            return obj[key];
          },
          set: function set(x) {
            obj[key] = x;
          }
        });
      });

      return wrapper;
    }
  }).call(this,require('_process'))
},{"./Accordion":117,"./Affix":118,"./AffixMixin":119,"./Alert":120,"./Badge":121,"./BootstrapMixin":122,"./Button":123,"./ButtonGroup":124,"./ButtonInput":125,"./ButtonToolbar":126,"./Carousel":127,"./CarouselItem":128,"./Col":129,"./Collapse":130,"./CollapsibleMixin":131,"./CollapsibleNav":132,"./Dropdown":133,"./DropdownButton":134,"./Fade":137,"./FadeMixin":138,"./FormControls":140,"./Glyphicon":142,"./Grid":143,"./Input":144,"./Interpolate":146,"./Jumbotron":147,"./Label":148,"./ListGroup":149,"./ListGroupItem":150,"./MenuItem":151,"./Modal":152,"./ModalBody":153,"./ModalFooter":155,"./ModalHeader":156,"./ModalTitle":157,"./Nav":158,"./NavDropdown":159,"./NavItem":160,"./Navbar":161,"./Overlay":162,"./OverlayTrigger":163,"./PageHeader":164,"./PageItem":165,"./Pager":166,"./Pagination":167,"./Panel":169,"./PanelGroup":170,"./Popover":171,"./Portal":172,"./Position":173,"./ProgressBar":174,"./Row":175,"./SafeAnchor":176,"./SplitButton":177,"./SubNav":179,"./Tab":180,"./TabPane":181,"./TabbedArea":182,"./Table":183,"./Tabs":184,"./Thumbnail":185,"./Tooltip":186,"./Well":187,"./styleMaps":189,"./utils/CustomPropTypes":190,"./utils/ValidComponentChildren":193,"./utils/childrenValueInputValidation":195,"./utils/createChainedFunction":196,"./utils/deprecationWarning":199,"./utils/domUtils":200,"_process":46,"babel-runtime/core-js/object/define-property":203,"babel-runtime/core-js/object/keys":205,"babel-runtime/helpers/interop-require-default":210,"babel-runtime/helpers/interop-require-wildcard":211}],189:[function(require,module,exports){
  'use strict';

  exports.__esModule = true;
  var styleMaps = {
    CLASSES: {
      'alert': 'alert',
      'button': 'btn',
      'button-group': 'btn-group',
      'button-toolbar': 'btn-toolbar',
      'column': 'col',
      'input-group': 'input-group',
      'form': 'form',
      'glyphicon': 'glyphicon',
      'label': 'label',
      'thumbnail': 'thumbnail',
      'list-group-item': 'list-group-item',
      'panel': 'panel',
      'panel-group': 'panel-group',
      'pagination': 'pagination',
      'progress-bar': 'progress-bar',
      'nav': 'nav',
      'navbar': 'navbar',
      'modal': 'modal',
      'row': 'row',
      'well': 'well'
    },
    STYLES: ['default', 'primary', 'success', 'info', 'warning', 'danger', 'link', 'inline', 'tabs', 'pills'],
    addStyle: function addStyle(name) {
      styleMaps.STYLES.push(name);
    },
    SIZES: {
      'large': 'lg',
      'medium': 'md',
      'small': 'sm',
      'xsmall': 'xs',
      'lg': 'lg',
      'md': 'md',
      'sm': 'sm',
      'xs': 'xs'
    },
    GRID_COLUMNS: 12
  };

  exports['default'] = styleMaps;
  module.exports = exports['default'];
},{}],190:[function(require,module,exports){
  'use strict';

  var _Object$keys = require('babel-runtime/core-js/object/keys')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _reactLibWarning = require('react/lib/warning');

  var _reactLibWarning2 = _interopRequireDefault(_reactLibWarning);

  var _childrenToArray = require('./childrenToArray');

  var _childrenToArray2 = _interopRequireDefault(_childrenToArray);

  var ANONYMOUS = '<<anonymous>>';

  /**
   * Create chain-able isRequired validator
   *
   * Largely copied directly from:
   *  https://github.com/facebook/react/blob/0.11-stable/src/core/ReactPropTypes.js#L94
   */
  function createChainableTypeChecker(validate) {
    function checkType(isRequired, props, propName, componentName) {
      componentName = componentName || ANONYMOUS;
      if (props[propName] == null) {
        if (isRequired) {
          return new Error('Required prop \'' + propName + '\' was not specified in \'' + componentName + '\'.');
        }
      } else {
        return validate(props, propName, componentName);
      }
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);

    return chainedCheckType;
  }

  var CustomPropTypes = {

    deprecated: function deprecated(propType, explanation) {
      return function (props, propName, componentName) {
        if (props[propName] != null) {
          _reactLibWarning2['default'](false, '"' + propName + '" property of "' + componentName + '" has been deprecated.\n' + explanation);
        }

        return propType(props, propName, componentName);
      };
    },

    isRequiredForA11y: function isRequiredForA11y(propType) {
      return function (props, propName, componentName) {
        if (props[propName] === null) {
          return new Error('The prop `' + propName + '` is required to make ' + componentName + ' accessible ' + 'for users using assistive technologies such as screen readers `');
        }

        return propType(props, propName, componentName);
      };
    },

    requiredRoles: function requiredRoles() {
      for (var _len = arguments.length, roles = Array(_len), _key = 0; _key < _len; _key++) {
        roles[_key] = arguments[_key];
      }

      return createChainableTypeChecker(function requiredRolesValidator(props, propName, component) {
        var missing = undefined;
        var children = _childrenToArray2['default'](props.children);

        var inRole = function inRole(role, child) {
          return role === child.props.bsRole;
        };

        roles.every(function (role) {
          if (!children.some(function (child) {
              return inRole(role, child);
            })) {
            missing = role;
            return false;
          }
          return true;
        });

        if (missing) {
          return new Error('(children) ' + component + ' - Missing a required child with bsRole: ' + missing + '. ' + (component + ' must have at least one child of each of the following bsRoles: ' + roles.join(', ')));
        }
      });
    },

    exclusiveRoles: function exclusiveRoles() {
      for (var _len2 = arguments.length, roles = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        roles[_key2] = arguments[_key2];
      }

      return createChainableTypeChecker(function exclusiveRolesValidator(props, propName, component) {
        var children = _childrenToArray2['default'](props.children);
        var duplicate = undefined;

        roles.every(function (role) {
          var childrenWithRole = children.filter(function (child) {
            return child.props.bsRole === role;
          });

          if (childrenWithRole.length > 1) {
            duplicate = role;
            return false;
          }
          return true;
        });

        if (duplicate) {
          return new Error('(children) ' + component + ' - Duplicate children detected of bsRole: ' + duplicate + '. ' + ('Only one child each allowed with the following bsRoles: ' + roles.join(', ')));
        }
      });
    },

    /**
     * Checks whether a prop provides a DOM element
     *
     * The element can be provided in two forms:
     * - Directly passed
     * - Or passed an object that has a `render` method
     *
     * @param props
     * @param propName
     * @param componentName
     * @returns {Error|undefined}
     */
    mountable: createMountableChecker(),

    /**
     * Checks whether a prop provides a type of element.
     *
     * The type of element can be provided in two forms:
     * - tag name (string)
     * - a return value of React.createClass(...)
     *
     * @param props
     * @param propName
     * @param componentName
     * @returns {Error|undefined}
     */
    elementType: createElementTypeChecker(),

    /**
     * Checks whether a prop matches a key of an associated object
     *
     * @param props
     * @param propName
     * @param componentName
     * @returns {Error|undefined}
     */
    keyOf: createKeyOfChecker,
    /**
     * Checks if only one of the listed properties is in use. An error is given
     * if multiple have a value
     *
     * @param props
     * @param propName
     * @param componentName
     * @returns {Error|undefined}
     */
    singlePropFrom: createSinglePropFromChecker,

    all: all
  };

  function errMsg(props, propName, componentName, msgContinuation) {
    return 'Invalid prop \'' + propName + '\' of value \'' + props[propName] + '\'' + (' supplied to \'' + componentName + '\'' + msgContinuation);
  }

  function createMountableChecker() {
    function validate(props, propName, componentName) {
      if (typeof props[propName] !== 'object' || typeof props[propName].render !== 'function' && props[propName].nodeType !== 1) {
        return new Error(errMsg(props, propName, componentName, ', expected a DOM element or an object that has a `render` method'));
      }
    }

    return createChainableTypeChecker(validate);
  }

  function createKeyOfChecker(obj) {
    function validate(props, propName, componentName) {
      var propValue = props[propName];
      if (!obj.hasOwnProperty(propValue)) {
        var valuesString = JSON.stringify(_Object$keys(obj));
        return new Error(errMsg(props, propName, componentName, ', expected one of ' + valuesString + '.'));
      }
    }
    return createChainableTypeChecker(validate);
  }

  function createSinglePropFromChecker(arrOfProps) {
    function validate(props, propName, componentName) {
      var usedPropCount = arrOfProps.map(function (listedProp) {
        return props[listedProp];
      }).reduce(function (acc, curr) {
        return acc + (curr !== undefined ? 1 : 0);
      }, 0);

      if (usedPropCount > 1) {
        var first = arrOfProps[0];
        var others = arrOfProps.slice(1);

        var message = others.join(', ') + ' and ' + first;
        return new Error('Invalid prop \'' + propName + '\', only one of the following ' + ('may be provided: ' + message));
      }
    }
    return validate;
  }

  function all(propTypes) {
    if (propTypes === undefined) {
      throw new Error('No validations provided');
    }

    if (!(propTypes instanceof Array)) {
      throw new Error('Invalid argument must be an array');
    }

    if (propTypes.length === 0) {
      throw new Error('No validations provided');
    }

    return function (props, propName, componentName) {
      for (var i = 0; i < propTypes.length; i++) {
        var result = propTypes[i](props, propName, componentName);

        if (result !== undefined && result !== null) {
          return result;
        }
      }
    };
  }

  function createElementTypeChecker() {
    function validate(props, propName, componentName) {
      var errBeginning = errMsg(props, propName, componentName, '. Expected an Element `type`');

      if (typeof props[propName] !== 'function') {
        if (_react2['default'].isValidElement(props[propName])) {
          return new Error(errBeginning + ', not an actual Element');
        }

        if (typeof props[propName] !== 'string') {
          return new Error(errBeginning + ' such as a tag name or return value of React.createClass(...)');
        }
      }
    }

    return createChainableTypeChecker(validate);
  }

  exports['default'] = CustomPropTypes;
  module.exports = exports['default'];
},{"./childrenToArray":194,"babel-runtime/core-js/object/keys":205,"babel-runtime/helpers/interop-require-default":210,"react":482,"react/lib/warning":481}],191:[function(require,module,exports){
  /**
   * Copyright 2013-2014 Facebook, Inc.
   *
   * This file contains a modified version of:
   * https://github.com/facebook/react/blob/v0.12.0/src/vendor/stubs/EventListener.js
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *
   * TODO: remove in favour of solution provided by:
   *  https://github.com/facebook/react/issues/285
   */

  /**
   * Does not take into account specific nature of platform.
   */
  'use strict';

  exports.__esModule = true;
  var EventListener = {
    /**
     * Listen to DOM events during the bubble phase.
     *
     * @param {DOMEventTarget} target DOM element to register listener on.
     * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
     * @param {function} callback Callback function.
     * @return {object} Object with a `remove` method.
     */
    listen: function listen(target, eventType, callback) {
      if (target.addEventListener) {
        target.addEventListener(eventType, callback, false);
        return {
          remove: function remove() {
            target.removeEventListener(eventType, callback, false);
          }
        };
      } else if (target.attachEvent) {
        target.attachEvent('on' + eventType, callback);
        return {
          remove: function remove() {
            target.detachEvent('on' + eventType, callback);
          }
        };
      }
    }
  };

  exports['default'] = EventListener;
  module.exports = exports['default'];
},{}],192:[function(require,module,exports){
  /**
   * Copyright 2013-2014, Facebook, Inc.
   * All rights reserved.
   *
   * This file contains a modified version of:
   * https://github.com/facebook/react/blob/v0.12.0/src/addons/transitions/ReactTransitionEvents.js
   *
   * This source code is licensed under the BSD-style license found here:
   * https://github.com/facebook/react/blob/v0.12.0/LICENSE
   * An additional grant of patent rights can be found here:
   * https://github.com/facebook/react/blob/v0.12.0/PATENTS
   */

  'use strict';

  exports.__esModule = true;
  var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

  /**
   * EVENT_NAME_MAP is used to determine which event fired when a
   * transition/animation ends, based on the style property used to
   * define that event.
   */
  var EVENT_NAME_MAP = {
    transitionend: {
      'transition': 'transitionend',
      'WebkitTransition': 'webkitTransitionEnd',
      'MozTransition': 'mozTransitionEnd',
      'OTransition': 'oTransitionEnd',
      'msTransition': 'MSTransitionEnd'
    },

    animationend: {
      'animation': 'animationend',
      'WebkitAnimation': 'webkitAnimationEnd',
      'MozAnimation': 'mozAnimationEnd',
      'OAnimation': 'oAnimationEnd',
      'msAnimation': 'MSAnimationEnd'
    }
  };

  var endEvents = [];

  function detectEvents() {
    var testEl = document.createElement('div');
    var style = testEl.style;

    // On some platforms, in particular some releases of Android 4.x,
    // the un-prefixed "animation" and "transition" properties are defined on the
    // style object but the events that fire will still be prefixed, so we need
    // to check if the un-prefixed events are useable, and if not remove them
    // from the map
    if (!('AnimationEvent' in window)) {
      delete EVENT_NAME_MAP.animationend.animation;
    }

    if (!('TransitionEvent' in window)) {
      delete EVENT_NAME_MAP.transitionend.transition;
    }

    for (var baseEventName in EVENT_NAME_MAP) {
      var baseEvents = EVENT_NAME_MAP[baseEventName];
      for (var styleName in baseEvents) {
        if (styleName in style) {
          endEvents.push(baseEvents[styleName]);
          break;
        }
      }
    }
  }

  if (canUseDOM) {
    detectEvents();
  }

  // We use the raw {add|remove}EventListener() call because EventListener
  // does not know how to remove event listeners and we really should
  // clean up. Also, these events are not triggered in older browsers
  // so we should be A-OK here.

  function addEventListener(node, eventName, eventListener) {
    node.addEventListener(eventName, eventListener, false);
  }

  function removeEventListener(node, eventName, eventListener) {
    node.removeEventListener(eventName, eventListener, false);
  }

  var ReactTransitionEvents = {
    addEndEventListener: function addEndEventListener(node, eventListener) {
      if (endEvents.length === 0) {
        // If CSS transitions are not supported, trigger an "end animation"
        // event immediately.
        window.setTimeout(eventListener, 0);
        return;
      }
      endEvents.forEach(function (endEvent) {
        addEventListener(node, endEvent, eventListener);
      });
    },

    removeEndEventListener: function removeEndEventListener(node, eventListener) {
      if (endEvents.length === 0) {
        return;
      }
      endEvents.forEach(function (endEvent) {
        removeEventListener(node, endEvent, eventListener);
      });
    }
  };

  exports['default'] = ReactTransitionEvents;
  module.exports = exports['default'];
},{}],193:[function(require,module,exports){
  'use strict';

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  /**
   * Maps children that are typically specified as `props.children`,
   * but only iterates over children that are "valid components".
   *
   * The mapFunction provided index will be normalised to the components mapped,
   * so an invalid component would not increase the index.
   *
   * @param {?*} children Children tree container.
   * @param {function(*, int)} mapFunction.
   * @param {*} mapContext Context for mapFunction.
   * @return {object} Object containing the ordered map of results.
   */
  function mapValidComponents(children, func, context) {
    var index = 0;

    return _react2['default'].Children.map(children, function (child) {
      if (_react2['default'].isValidElement(child)) {
        var lastIndex = index;
        index++;
        return func.call(context, child, lastIndex);
      }

      return child;
    });
  }

  /**
   * Iterates through children that are typically specified as `props.children`,
   * but only iterates over children that are "valid components".
   *
   * The provided forEachFunc(child, index) will be called for each
   * leaf child with the index reflecting the position relative to "valid components".
   *
   * @param {?*} children Children tree container.
   * @param {function(*, int)} forEachFunc.
   * @param {*} forEachContext Context for forEachContext.
   */
  function forEachValidComponents(children, func, context) {
    var index = 0;

    return _react2['default'].Children.forEach(children, function (child) {
      if (_react2['default'].isValidElement(child)) {
        func.call(context, child, index);
        index++;
      }
    });
  }

  /**
   * Count the number of "valid components" in the Children container.
   *
   * @param {?*} children Children tree container.
   * @returns {number}
   */
  function numberOfValidComponents(children) {
    var count = 0;

    _react2['default'].Children.forEach(children, function (child) {
      if (_react2['default'].isValidElement(child)) {
        count++;
      }
    });

    return count;
  }

  /**
   * Determine if the Child container has one or more "valid components".
   *
   * @param {?*} children Children tree container.
   * @returns {boolean}
   */
  function hasValidComponent(children) {
    var hasValid = false;

    _react2['default'].Children.forEach(children, function (child) {
      if (!hasValid && _react2['default'].isValidElement(child)) {
        hasValid = true;
      }
    });

    return hasValid;
  }

  exports['default'] = {
    map: mapValidComponents,
    forEach: forEachValidComponents,
    numberOf: numberOfValidComponents,
    hasValidComponent: hasValidComponent
  };
  module.exports = exports['default'];
},{"babel-runtime/helpers/interop-require-default":210,"react":482}],194:[function(require,module,exports){
  'use strict';

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;
  exports['default'] = childrenAsArray;

  var _ValidComponentChildren = require('./ValidComponentChildren');

  var _ValidComponentChildren2 = _interopRequireDefault(_ValidComponentChildren);

  function childrenAsArray(children) {
    var result = [];

    if (children === undefined) {
      return result;
    }

    _ValidComponentChildren2['default'].forEach(children, function (child) {
      result.push(child);
    });

    return result;
  }

  module.exports = exports['default'];
},{"./ValidComponentChildren":193,"babel-runtime/helpers/interop-require-default":210}],195:[function(require,module,exports){
  'use strict';

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;
  exports['default'] = valueValidation;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _CustomPropTypes = require('./CustomPropTypes');

  var propList = ['children', 'value'];
  var typeList = [_react2['default'].PropTypes.number, _react2['default'].PropTypes.string];

  function valueValidation(props, propName, componentName) {
    var error = _CustomPropTypes.singlePropFrom(propList)(props, propName, componentName);
    if (!error) {
      var oneOfType = _react2['default'].PropTypes.oneOfType(typeList);
      error = oneOfType(props, propName, componentName);
    }
    return error;
  }

  module.exports = exports['default'];
},{"./CustomPropTypes":190,"babel-runtime/helpers/interop-require-default":210,"react":482}],196:[function(require,module,exports){
  /**
   * Safe chained function
   *
   * Will only create a new function if needed,
   * otherwise will pass back existing functions or null.
   *
   * @param {function} functions to chain
   * @returns {function|null}
   */
  'use strict';

  exports.__esModule = true;
  function createChainedFunction() {
    for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
      funcs[_key] = arguments[_key];
    }

    return funcs.filter(function (f) {
      return f != null;
    }).reduce(function (acc, f) {
      if (typeof f !== 'function') {
        throw new Error('Invalid Argument Type, must only provide functions, undefined, or null.');
      }

      if (acc === null) {
        return f;
      }

      return function chainedFunction() {
        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        acc.apply(this, args);
        f.apply(this, args);
      };
    }, null);
  }

  exports['default'] = createChainedFunction;
  module.exports = exports['default'];
},{}],197:[function(require,module,exports){
  'use strict';

  var _inherits = require('babel-runtime/helpers/inherits')['default'];

  var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

  var _extends = require('babel-runtime/helpers/extends')['default'];

  var _objectWithoutProperties = require('babel-runtime/helpers/object-without-properties')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;
  exports['default'] = createContextWrapper;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  /**
   * Creates new trigger class that injects context into overlay.
   */

  function createContextWrapper(Trigger, propName) {
    return function (contextTypes) {
      var ContextWrapper = (function (_React$Component) {
        _inherits(ContextWrapper, _React$Component);

        function ContextWrapper() {
          _classCallCheck(this, ContextWrapper);

          _React$Component.apply(this, arguments);
        }

        ContextWrapper.prototype.getChildContext = function getChildContext() {
          return this.props.context;
        };

        ContextWrapper.prototype.render = function render() {
          // Strip injected props from below.
          var _props = this.props;
          var wrapped = _props.wrapped;
          var context = _props.context;

          var props = _objectWithoutProperties(_props, ['wrapped', 'context']);

          return _react2['default'].cloneElement(wrapped, props);
        };

        return ContextWrapper;
      })(_react2['default'].Component);

      ContextWrapper.childContextTypes = contextTypes;

      var TriggerWithContext = (function () {
        function TriggerWithContext() {
          _classCallCheck(this, TriggerWithContext);
        }

        TriggerWithContext.prototype.render = function render() {
          var props = _extends({}, this.props);
          props[propName] = this.getWrappedOverlay();

          return _react2['default'].createElement(
            Trigger,
            props,
            this.props.children
          );
        };

        TriggerWithContext.prototype.getWrappedOverlay = function getWrappedOverlay() {
          return _react2['default'].createElement(ContextWrapper, {
            context: this.context,
            wrapped: this.props[propName]
          });
        };

        return TriggerWithContext;
      })();

      TriggerWithContext.contextTypes = contextTypes;

      return TriggerWithContext;
    };
  }

  module.exports = exports['default'];
},{"babel-runtime/helpers/class-call-check":207,"babel-runtime/helpers/extends":208,"babel-runtime/helpers/inherits":209,"babel-runtime/helpers/interop-require-default":210,"babel-runtime/helpers/object-without-properties":212,"react":482}],198:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports["default"] = createSelectedEvent;

  function createSelectedEvent(eventKey) {
    var selectionPrevented = false;

    return {
      eventKey: eventKey,

      preventSelection: function preventSelection() {
        selectionPrevented = true;
      },

      isSelectionPrevented: function isSelectionPrevented() {
        return selectionPrevented;
      }
    };
  }

  module.exports = exports["default"];
},{}],199:[function(require,module,exports){
  'use strict';

  var _inherits = require('babel-runtime/helpers/inherits')['default'];

  var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _reactLibWarning = require('react/lib/warning');

  var _reactLibWarning2 = _interopRequireDefault(_reactLibWarning);

  var warned = {};

  function deprecationWarning(oldname, newname, link) {
    var message = undefined;

    if (typeof oldname === 'object') {
      message = oldname.message;
    } else {
      message = oldname + ' is deprecated. Use ' + newname + ' instead.';

      if (link) {
        message += '\nYou can read more about it at ' + link;
      }
    }

    if (warned[message]) {
      return;
    }

    _reactLibWarning2['default'](false, message);
    warned[message] = true;
  }

  deprecationWarning.wrapper = function (Component) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    return (function (_Component) {
      _inherits(DeprecatedComponent, _Component);

      function DeprecatedComponent() {
        _classCallCheck(this, DeprecatedComponent);

        _Component.apply(this, arguments);
      }

      DeprecatedComponent.prototype.componentWillMount = function componentWillMount() {
        deprecationWarning.apply(undefined, args);

        if (_Component.prototype.componentWillMount) {
          var _Component$prototype$componentWillMount;

          for (var _len2 = arguments.length, methodArgs = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            methodArgs[_key2] = arguments[_key2];
          }

          (_Component$prototype$componentWillMount = _Component.prototype.componentWillMount).call.apply(_Component$prototype$componentWillMount, [this].concat(methodArgs));
        }
      };

      return DeprecatedComponent;
    })(Component);
  };

  exports['default'] = deprecationWarning;
  module.exports = exports['default'];
},{"babel-runtime/helpers/class-call-check":207,"babel-runtime/helpers/inherits":209,"babel-runtime/helpers/interop-require-default":210,"react/lib/warning":481}],200:[function(require,module,exports){
  'use strict';

  var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

  exports.__esModule = true;

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _domHelpersUtilInDOM = require('dom-helpers/util/inDOM');

  var _domHelpersUtilInDOM2 = _interopRequireDefault(_domHelpersUtilInDOM);

  var _domHelpersOwnerDocument = require('dom-helpers/ownerDocument');

  var _domHelpersOwnerDocument2 = _interopRequireDefault(_domHelpersOwnerDocument);

  var _domHelpersOwnerWindow = require('dom-helpers/ownerWindow');

  var _domHelpersOwnerWindow2 = _interopRequireDefault(_domHelpersOwnerWindow);

  var _domHelpersQueryContains = require('dom-helpers/query/contains');

  var _domHelpersQueryContains2 = _interopRequireDefault(_domHelpersQueryContains);

  var _domHelpersActiveElement = require('dom-helpers/activeElement');

  var _domHelpersActiveElement2 = _interopRequireDefault(_domHelpersActiveElement);

  var _domHelpersQueryOffset = require('dom-helpers/query/offset');

  var _domHelpersQueryOffset2 = _interopRequireDefault(_domHelpersQueryOffset);

  var _domHelpersQueryOffsetParent = require('dom-helpers/query/offsetParent');

  var _domHelpersQueryOffsetParent2 = _interopRequireDefault(_domHelpersQueryOffsetParent);

  var _domHelpersQueryPosition = require('dom-helpers/query/position');

  var _domHelpersQueryPosition2 = _interopRequireDefault(_domHelpersQueryPosition);

  var _domHelpersStyle = require('dom-helpers/style');

  var _domHelpersStyle2 = _interopRequireDefault(_domHelpersStyle);

  function ownerDocument(componentOrElement) {
    var elem = _react2['default'].findDOMNode(componentOrElement);
    return _domHelpersOwnerDocument2['default'](elem && elem.ownerDocument || document);
  }

  function ownerWindow(componentOrElement) {
    var doc = ownerDocument(componentOrElement);
    return _domHelpersOwnerWindow2['default'](doc);
  }

  //TODO remove in 0.26
  function getComputedStyles(elem) {
    return ownerDocument(elem).defaultView.getComputedStyle(elem, null);
  }

  /**
   * Get the height of the document
   *
   * @returns {documentHeight: number}
   */
  function getDocumentHeight() {
    return Math.max(document.documentElement.offsetHeight, document.height, document.body.scrollHeight, document.body.offsetHeight);
  }

  /**
   * Get an element's size
   *
   * @param {HTMLElement} elem
   * @returns {{width: number, height: number}}
   */
  function getSize(elem) {
    var rect = {
      width: elem.offsetWidth || 0,
      height: elem.offsetHeight || 0
    };
    if (typeof elem.getBoundingClientRect !== 'undefined') {
      var _elem$getBoundingClientRect = elem.getBoundingClientRect();

      var width = _elem$getBoundingClientRect.width;
      var height = _elem$getBoundingClientRect.height;

      rect.width = width || rect.width;
      rect.height = height || rect.height;
    }
    return rect;
  }

  exports['default'] = {
    canUseDom: _domHelpersUtilInDOM2['default'],
    css: _domHelpersStyle2['default'],
    getComputedStyles: getComputedStyles,
    contains: _domHelpersQueryContains2['default'],
    ownerWindow: ownerWindow,
    ownerDocument: ownerDocument,
    getOffset: _domHelpersQueryOffset2['default'],
    getDocumentHeight: getDocumentHeight,
    getPosition: _domHelpersQueryPosition2['default'],
    getSize: getSize,
    activeElement: _domHelpersActiveElement2['default'],
    offsetParent: _domHelpersQueryOffsetParent2['default']
  };
  module.exports = exports['default'];
},{"babel-runtime/helpers/interop-require-default":210,"dom-helpers/activeElement":239,"dom-helpers/ownerDocument":242,"dom-helpers/ownerWindow":243,"dom-helpers/query/contains":244,"dom-helpers/query/offset":246,"dom-helpers/query/offsetParent":247,"dom-helpers/query/position":248,"dom-helpers/style":252,"dom-helpers/util/inDOM":260,"react":482}],201:[function(require,module,exports){
  module.exports = { "default": require("core-js/library/fn/object/assign"), __esModule: true };
},{"core-js/library/fn/object/assign":213}],202:[function(require,module,exports){
  module.exports = { "default": require("core-js/library/fn/object/create"), __esModule: true };
},{"core-js/library/fn/object/create":214}],203:[function(require,module,exports){
  module.exports = { "default": require("core-js/library/fn/object/define-property"), __esModule: true };
},{"core-js/library/fn/object/define-property":215}],204:[function(require,module,exports){
  module.exports = { "default": require("core-js/library/fn/object/is-frozen"), __esModule: true };
},{"core-js/library/fn/object/is-frozen":216}],205:[function(require,module,exports){
  module.exports = { "default": require("core-js/library/fn/object/keys"), __esModule: true };
},{"core-js/library/fn/object/keys":217}],206:[function(require,module,exports){
  module.exports = { "default": require("core-js/library/fn/object/set-prototype-of"), __esModule: true };
},{"core-js/library/fn/object/set-prototype-of":218}],207:[function(require,module,exports){
  "use strict";

  exports["default"] = function (instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };

  exports.__esModule = true;
},{}],208:[function(require,module,exports){
  "use strict";

  var _Object$assign = require("babel-runtime/core-js/object/assign")["default"];

  exports["default"] = _Object$assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

  exports.__esModule = true;
},{"babel-runtime/core-js/object/assign":201}],209:[function(require,module,exports){
  "use strict";

  var _Object$create = require("babel-runtime/core-js/object/create")["default"];

  var _Object$setPrototypeOf = require("babel-runtime/core-js/object/set-prototype-of")["default"];

  exports["default"] = function (subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = _Object$create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _Object$setPrototypeOf ? _Object$setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  };

  exports.__esModule = true;
},{"babel-runtime/core-js/object/create":202,"babel-runtime/core-js/object/set-prototype-of":206}],210:[function(require,module,exports){
  "use strict";

  exports["default"] = function (obj) {
    return obj && obj.__esModule ? obj : {
      "default": obj
    };
  };

  exports.__esModule = true;
},{}],211:[function(require,module,exports){
  "use strict";

  exports["default"] = function (obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj["default"] = obj;
      return newObj;
    }
  };

  exports.__esModule = true;
},{}],212:[function(require,module,exports){
  "use strict";

  exports["default"] = function (obj, keys) {
    var target = {};

    for (var i in obj) {
      if (keys.indexOf(i) >= 0) continue;
      if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
      target[i] = obj[i];
    }

    return target;
  };

  exports.__esModule = true;
},{}],213:[function(require,module,exports){
  require('../../modules/es6.object.assign');
  module.exports = require('../../modules/$.core').Object.assign;
},{"../../modules/$.core":223,"../../modules/es6.object.assign":235}],214:[function(require,module,exports){
  var $ = require('../../modules/$');
  module.exports = function create(P, D){
    return $.create(P, D);
  };
},{"../../modules/$":231}],215:[function(require,module,exports){
  var $ = require('../../modules/$');
  module.exports = function defineProperty(it, key, desc){
    return $.setDesc(it, key, desc);
  };
},{"../../modules/$":231}],216:[function(require,module,exports){
  require('../../modules/es6.object.is-frozen');
  module.exports = require('../../modules/$.core').Object.isFrozen;
},{"../../modules/$.core":223,"../../modules/es6.object.is-frozen":236}],217:[function(require,module,exports){
  require('../../modules/es6.object.keys');
  module.exports = require('../../modules/$.core').Object.keys;
},{"../../modules/$.core":223,"../../modules/es6.object.keys":237}],218:[function(require,module,exports){
  require('../../modules/es6.object.set-prototype-of');
  module.exports = require('../../modules/$.core').Object.setPrototypeOf;
},{"../../modules/$.core":223,"../../modules/es6.object.set-prototype-of":238}],219:[function(require,module,exports){
  module.exports = function(it){
    if(typeof it != 'function')throw TypeError(it + ' is not a function!');
    return it;
  };
},{}],220:[function(require,module,exports){
  var isObject = require('./$.is-object');
  module.exports = function(it){
    if(!isObject(it))throw TypeError(it + ' is not an object!');
    return it;
  };
},{"./$.is-object":230}],221:[function(require,module,exports){
  // 19.1.2.1 Object.assign(target, source, ...)
  var $        = require('./$')
    , toObject = require('./$.to-object')
    , IObject  = require('./$.iobject');

  // should work with symbols and should have deterministic property order (V8 bug)
  module.exports = require('./$.fails')(function(){
    var a = Object.assign
      , A = {}
      , B = {}
      , S = Symbol()
      , K = 'abcdefghijklmnopqrst';
    A[S] = 7;
    K.split('').forEach(function(k){ B[k] = k; });
    return a({}, A)[S] != 7 || Object.keys(a({}, B)).join('') != K;
  }) ? function assign(target, source){ // eslint-disable-line no-unused-vars
    var T     = toObject(target)
      , $$    = arguments
      , $$len = $$.length
      , index = 1
      , getKeys    = $.getKeys
      , getSymbols = $.getSymbols
      , isEnum     = $.isEnum;
    while($$len > index){
      var S      = IObject($$[index++])
        , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)
        , length = keys.length
        , j      = 0
        , key;
      while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];
    }
    return T;
  } : Object.assign;
},{"./$":231,"./$.fails":227,"./$.iobject":229,"./$.to-object":234}],222:[function(require,module,exports){
  var toString = {}.toString;

  module.exports = function(it){
    return toString.call(it).slice(8, -1);
  };
},{}],223:[function(require,module,exports){
  var core = module.exports = {version: '1.2.3'};
  if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef
},{}],224:[function(require,module,exports){
  // optional / simple context binding
  var aFunction = require('./$.a-function');
  module.exports = function(fn, that, length){
    aFunction(fn);
    if(that === undefined)return fn;
    switch(length){
      case 1: return function(a){
        return fn.call(that, a);
      };
      case 2: return function(a, b){
        return fn.call(that, a, b);
      };
      case 3: return function(a, b, c){
        return fn.call(that, a, b, c);
      };
    }
    return function(/* ...args */){
      return fn.apply(that, arguments);
    };
  };
},{"./$.a-function":219}],225:[function(require,module,exports){
  var global    = require('./$.global')
    , core      = require('./$.core')
    , PROTOTYPE = 'prototype';
  var ctx = function(fn, that){
    return function(){
      return fn.apply(that, arguments);
    };
  };
  var $def = function(type, name, source){
    var key, own, out, exp
      , isGlobal = type & $def.G
      , isProto  = type & $def.P
      , target   = isGlobal ? global : type & $def.S
      ? global[name] : (global[name] || {})[PROTOTYPE]
      , exports  = isGlobal ? core : core[name] || (core[name] = {});
    if(isGlobal)source = name;
    for(key in source){
      // contains in native
      own = !(type & $def.F) && target && key in target;
      if(own && key in exports)continue;
      // export native or passed
      out = own ? target[key] : source[key];
      // prevent global pollution for namespaces
      if(isGlobal && typeof target[key] != 'function')exp = source[key];
      // bind timers to global for call from export context
      else if(type & $def.B && own)exp = ctx(out, global);
      // wrap global constructors for prevent change them in library
      else if(type & $def.W && target[key] == out)!function(C){
        exp = function(param){
          return this instanceof C ? new C(param) : C(param);
        };
        exp[PROTOTYPE] = C[PROTOTYPE];
      }(out);
      else exp = isProto && typeof out == 'function' ? ctx(Function.call, out) : out;
      // export
      exports[key] = exp;
      if(isProto)(exports[PROTOTYPE] || (exports[PROTOTYPE] = {}))[key] = out;
    }
  };
  // type bitmap
  $def.F = 1;  // forced
  $def.G = 2;  // global
  $def.S = 4;  // static
  $def.P = 8;  // proto
  $def.B = 16; // bind
  $def.W = 32; // wrap
  module.exports = $def;
},{"./$.core":223,"./$.global":228}],226:[function(require,module,exports){
  // 7.2.1 RequireObjectCoercible(argument)
  module.exports = function(it){
    if(it == undefined)throw TypeError("Can't call method on  " + it);
    return it;
  };
},{}],227:[function(require,module,exports){
  module.exports = function(exec){
    try {
      return !!exec();
    } catch(e){
      return true;
    }
  };
},{}],228:[function(require,module,exports){
  // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
  var global = module.exports = typeof window != 'undefined' && window.Math == Math
    ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
  if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef
},{}],229:[function(require,module,exports){
  // fallback for non-array-like ES3 and non-enumerable old V8 strings
  var cof = require('./$.cof');
  module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
    return cof(it) == 'String' ? it.split('') : Object(it);
  };
},{"./$.cof":222}],230:[function(require,module,exports){
  module.exports = function(it){
    return typeof it === 'object' ? it !== null : typeof it === 'function';
  };
},{}],231:[function(require,module,exports){
  var $Object = Object;
  module.exports = {
    create:     $Object.create,
    getProto:   $Object.getPrototypeOf,
    isEnum:     {}.propertyIsEnumerable,
    getDesc:    $Object.getOwnPropertyDescriptor,
    setDesc:    $Object.defineProperty,
    setDescs:   $Object.defineProperties,
    getKeys:    $Object.keys,
    getNames:   $Object.getOwnPropertyNames,
    getSymbols: $Object.getOwnPropertySymbols,
    each:       [].forEach
  };
},{}],232:[function(require,module,exports){
  // most Object methods by ES6 should accept primitives
  module.exports = function(KEY, exec){
    var $def = require('./$.def')
      , fn   = (require('./$.core').Object || {})[KEY] || Object[KEY]
      , exp  = {};
    exp[KEY] = exec(fn);
    $def($def.S + $def.F * require('./$.fails')(function(){ fn(1); }), 'Object', exp);
  };
},{"./$.core":223,"./$.def":225,"./$.fails":227}],233:[function(require,module,exports){
  // Works with __proto__ only. Old v8 can't work with null proto objects.
  /* eslint-disable no-proto */
  var getDesc  = require('./$').getDesc
    , isObject = require('./$.is-object')
    , anObject = require('./$.an-object');
  var check = function(O, proto){
    anObject(O);
    if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
  };
  module.exports = {
    set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
      function(test, buggy, set){
        try {
          set = require('./$.ctx')(Function.call, getDesc(Object.prototype, '__proto__').set, 2);
          set(test, []);
          buggy = !(test instanceof Array);
        } catch(e){ buggy = true; }
        return function setPrototypeOf(O, proto){
          check(O, proto);
          if(buggy)O.__proto__ = proto;
          else set(O, proto);
          return O;
        };
      }({}, false) : undefined),
    check: check
  };
},{"./$":231,"./$.an-object":220,"./$.ctx":224,"./$.is-object":230}],234:[function(require,module,exports){
  // 7.1.13 ToObject(argument)
  var defined = require('./$.defined');
  module.exports = function(it){
    return Object(defined(it));
  };
},{"./$.defined":226}],235:[function(require,module,exports){
  // 19.1.3.1 Object.assign(target, source)
  var $def = require('./$.def');

  $def($def.S + $def.F, 'Object', {assign: require('./$.assign')});
},{"./$.assign":221,"./$.def":225}],236:[function(require,module,exports){
  // 19.1.2.12 Object.isFrozen(O)
  var isObject = require('./$.is-object');

  require('./$.object-sap')('isFrozen', function($isFrozen){
    return function isFrozen(it){
      return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
    };
  });
},{"./$.is-object":230,"./$.object-sap":232}],237:[function(require,module,exports){
  // 19.1.2.14 Object.keys(O)
  var toObject = require('./$.to-object');

  require('./$.object-sap')('keys', function($keys){
    return function keys(it){
      return $keys(toObject(it));
    };
  });
},{"./$.object-sap":232,"./$.to-object":234}],238:[function(require,module,exports){
  // 19.1.3.19 Object.setPrototypeOf(O, proto)
  var $def = require('./$.def');
  $def($def.S, 'Object', {setPrototypeOf: require('./$.set-proto').set});
},{"./$.def":225,"./$.set-proto":233}],239:[function(require,module,exports){
  'use strict';

  var babelHelpers = require('./util/babelHelpers.js');

  exports.__esModule = true;

  /**
   * document.activeElement
   */
  exports['default'] = activeElement;

  var _ownerDocument = require('./ownerDocument');

  var _ownerDocument2 = babelHelpers.interopRequireDefault(_ownerDocument);

  function activeElement() {
    var doc = arguments[0] === undefined ? document : arguments[0];

    try {
      return doc.activeElement;
    } catch (e) {}
  }

  module.exports = exports['default'];
},{"./ownerDocument":242,"./util/babelHelpers.js":255}],240:[function(require,module,exports){
  'use strict';
  var canUseDOM = require('../util/inDOM');
  var off = function off() {};

  if (canUseDOM) {

    off = (function () {

      if (document.addEventListener) return function (node, eventName, handler, capture) {
        return node.removeEventListener(eventName, handler, capture || false);
      };else if (document.attachEvent) return function (node, eventName, handler) {
        return node.detachEvent('on' + eventName, handler);
      };
    })();
  }

  module.exports = off;
},{"../util/inDOM":260}],241:[function(require,module,exports){
  'use strict';
  var canUseDOM = require('../util/inDOM');
  var on = function on() {};

  if (canUseDOM) {
    on = (function () {

      if (document.addEventListener) return function (node, eventName, handler, capture) {
        return node.addEventListener(eventName, handler, capture || false);
      };else if (document.attachEvent) return function (node, eventName, handler) {
        return node.attachEvent('on' + eventName, handler);
      };
    })();
  }

  module.exports = on;
},{"../util/inDOM":260}],242:[function(require,module,exports){
  "use strict";

  exports.__esModule = true;
  exports["default"] = ownerDocument;

  function ownerDocument(node) {
    return node && node.ownerDocument || document;
  }

  module.exports = exports["default"];
},{}],243:[function(require,module,exports){
  'use strict';

  var babelHelpers = require('./util/babelHelpers.js');

  exports.__esModule = true;
  exports['default'] = ownerWindow;

  var _ownerDocument = require('./ownerDocument');

  var _ownerDocument2 = babelHelpers.interopRequireDefault(_ownerDocument);

  function ownerWindow(node) {
    var doc = (0, _ownerDocument2['default'])(node);
    return doc && doc.defaultView || doc.parentWindow;
  }

  module.exports = exports['default'];
},{"./ownerDocument":242,"./util/babelHelpers.js":255}],244:[function(require,module,exports){
  'use strict';
  var canUseDOM = require('../util/inDOM');

  var contains = (function () {
    var root = canUseDOM && document.documentElement;

    return root && root.contains ? function (context, node) {
      return context.contains(node);
    } : root && root.compareDocumentPosition ? function (context, node) {
      return context === node || !!(context.compareDocumentPosition(node) & 16);
    } : function (context, node) {
      if (node) do {
        if (node === context) return true;
      } while (node = node.parentNode);

      return false;
    };
  })();

  module.exports = contains;
},{"../util/inDOM":260}],245:[function(require,module,exports){
  'use strict';

  module.exports = function getWindow(node) {
    return node === node.window ? node : node.nodeType === 9 ? node.defaultView || node.parentWindow : false;
  };
},{}],246:[function(require,module,exports){
  'use strict';
  var contains = require('./contains'),
    getWindow = require('./isWindow'),
    ownerDocument = require('../ownerDocument');

  module.exports = function offset(node) {
    var doc = ownerDocument(node),
      win = getWindow(doc),
      docElem = doc && doc.documentElement,
      box = { top: 0, left: 0, height: 0, width: 0 };

    if (!doc) return;

    // Make sure it's not a disconnected DOM node
    if (!contains(docElem, node)) return box;

    if (node.getBoundingClientRect !== undefined) box = node.getBoundingClientRect();

    if (box.width || box.height) {

      box = {
        top: box.top + (win.pageYOffset || docElem.scrollTop) - (docElem.clientTop || 0),
        left: box.left + (win.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || 0),
        width: (box.width == null ? node.offsetWidth : box.width) || 0,
        height: (box.height == null ? node.offsetHeight : box.height) || 0
      };
    }

    return box;
  };
},{"../ownerDocument":242,"./contains":244,"./isWindow":245}],247:[function(require,module,exports){
  'use strict';

  var babelHelpers = require('../util/babelHelpers.js');

  exports.__esModule = true;
  exports['default'] = offsetParent;

  var _ownerDocument = require('../ownerDocument');

  var _ownerDocument2 = babelHelpers.interopRequireDefault(_ownerDocument);

  var _style = require('../style');

  var _style2 = babelHelpers.interopRequireDefault(_style);

  function nodeName(node) {
    return node.nodeName && node.nodeName.toLowerCase();
  }

  function offsetParent(node) {
    var doc = (0, _ownerDocument2['default'])(node),
      offsetParent = node && node.offsetParent;

    while (offsetParent && nodeName(node) !== 'html' && (0, _style2['default'])(offsetParent, 'position') === 'static') {
      offsetParent = offsetParent.offsetParent;
    }

    return offsetParent || doc.documentElement;
  }

  module.exports = exports['default'];
},{"../ownerDocument":242,"../style":252,"../util/babelHelpers.js":255}],248:[function(require,module,exports){
  'use strict';

  var babelHelpers = require('../util/babelHelpers.js');

  exports.__esModule = true;
  exports['default'] = position;

  var _offset = require('./offset');

  var _offset2 = babelHelpers.interopRequireDefault(_offset);

  var _offsetParent = require('./offsetParent');

  var _offsetParent2 = babelHelpers.interopRequireDefault(_offsetParent);

  var _scrollTop = require('./scrollTop');

  var _scrollTop2 = babelHelpers.interopRequireDefault(_scrollTop);

  var _scrollLeft = require('./scrollLeft');

  var _scrollLeft2 = babelHelpers.interopRequireDefault(_scrollLeft);

  var _style = require('../style');

  var _style2 = babelHelpers.interopRequireDefault(_style);

  function nodeName(node) {
    return node.nodeName && node.nodeName.toLowerCase();
  }

  function position(node, offsetParent) {
    var parentOffset = { top: 0, left: 0 },
      offset;

    // Fixed elements are offset from window (parentOffset = {top:0, left: 0},
    // because it is its only offset parent
    if ((0, _style2['default'])(node, 'position') === 'fixed') {
      offset = node.getBoundingClientRect();
    } else {
      offsetParent = offsetParent || (0, _offsetParent2['default'])(node);
      offset = (0, _offset2['default'])(node);

      if (nodeName(offsetParent) !== 'html') parentOffset = (0, _offset2['default'])(offsetParent);

      parentOffset.top += parseInt((0, _style2['default'])(offsetParent, 'borderTopWidth'), 10) - (0, _scrollTop2['default'])(offsetParent) || 0;
      parentOffset.left += parseInt((0, _style2['default'])(offsetParent, 'borderLeftWidth'), 10) - (0, _scrollLeft2['default'])(offsetParent) || 0;
    }

    // Subtract parent offsets and node margins
    return babelHelpers._extends({}, offset, {
      top: offset.top - parentOffset.top - (parseInt((0, _style2['default'])(node, 'marginTop'), 10) || 0),
      left: offset.left - parentOffset.left - (parseInt((0, _style2['default'])(node, 'marginLeft'), 10) || 0)
    });
  }

  module.exports = exports['default'];
},{"../style":252,"../util/babelHelpers.js":255,"./offset":246,"./offsetParent":247,"./scrollLeft":249,"./scrollTop":250}],249:[function(require,module,exports){
  'use strict';
  var getWindow = require('./isWindow');

  module.exports = function scrollTop(node, val) {
    var win = getWindow(node);

    if (val === undefined) return win ? 'pageXOffset' in win ? win.pageXOffset : win.document.documentElement.scrollLeft : node.scrollLeft;

    if (win) win.scrollTo(val, 'pageYOffset' in win ? win.pageYOffset : win.document.documentElement.scrollTop);else node.scrollLeft = val;
  };
},{"./isWindow":245}],250:[function(require,module,exports){
  'use strict';
  var getWindow = require('./isWindow');

  module.exports = function scrollTop(node, val) {
    var win = getWindow(node);

    if (val === undefined) return win ? 'pageYOffset' in win ? win.pageYOffset : win.document.documentElement.scrollTop : node.scrollTop;

    if (win) win.scrollTo('pageXOffset' in win ? win.pageXOffset : win.document.documentElement.scrollLeft, val);else node.scrollTop = val;
  };
},{"./isWindow":245}],251:[function(require,module,exports){
  'use strict';

  var babelHelpers = require('../util/babelHelpers.js');

  var _utilCamelizeStyle = require('../util/camelizeStyle');

  var _utilCamelizeStyle2 = babelHelpers.interopRequireDefault(_utilCamelizeStyle);

  var rposition = /^(top|right|bottom|left)$/;
  var rnumnonpx = /^([+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|))(?!px)[a-z%]+$/i;

  module.exports = function _getComputedStyle(node) {
    if (!node) throw new TypeError('No Element passed to `getComputedStyle()`');
    var doc = node.ownerDocument;

    return 'defaultView' in doc ? doc.defaultView.opener ? node.ownerDocument.defaultView.getComputedStyle(node, null) : window.getComputedStyle(node, null) : { //ie 8 "magic" from: https://github.com/jquery/jquery/blob/1.11-stable/src/css/curCSS.js#L72
      getPropertyValue: function getPropertyValue(prop) {
        var style = node.style;

        prop = (0, _utilCamelizeStyle2['default'])(prop);

        if (prop == 'float') prop = 'styleFloat';

        var current = node.currentStyle[prop] || null;

        if (current == null && style && style[prop]) current = style[prop];

        if (rnumnonpx.test(current) && !rposition.test(prop)) {
          // Remember the original values
          var left = style.left;
          var runStyle = node.runtimeStyle;
          var rsLeft = runStyle && runStyle.left;

          // Put in the new values to get a computed value out
          if (rsLeft) runStyle.left = node.currentStyle.left;

          style.left = prop === 'fontSize' ? '1em' : current;
          current = style.pixelLeft + 'px';

          // Revert the changed values
          style.left = left;
          if (rsLeft) runStyle.left = rsLeft;
        }

        return current;
      }
    };
  };
},{"../util/babelHelpers.js":255,"../util/camelizeStyle":257}],252:[function(require,module,exports){
  'use strict';

  var camelize = require('../util/camelizeStyle'),
    hyphenate = require('../util/hyphenateStyle'),
    _getComputedStyle = require('./getComputedStyle'),
    removeStyle = require('./removeStyle');

  var has = Object.prototype.hasOwnProperty;

  module.exports = function style(node, property, value) {
    var css = '',
      props = property;

    if (typeof property === 'string') {

      if (value === undefined) return node.style[camelize(property)] || _getComputedStyle(node).getPropertyValue(hyphenate(property));else (props = {})[property] = value;
    }

    for (var key in props) if (has.call(props, key)) {
      !props[key] && props[key] !== 0 ? removeStyle(node, hyphenate(key)) : css += hyphenate(key) + ':' + props[key] + ';';
    }

    node.style.cssText += ';' + css;
  };
},{"../util/camelizeStyle":257,"../util/hyphenateStyle":259,"./getComputedStyle":251,"./removeStyle":253}],253:[function(require,module,exports){
  'use strict';

  module.exports = function removeStyle(node, key) {
    return 'removeProperty' in node.style ? node.style.removeProperty(key) : node.style.removeAttribute(key);
  };
},{}],254:[function(require,module,exports){
  'use strict';
  var canUseDOM = require('../util/inDOM');

  var has = Object.prototype.hasOwnProperty,
    transform = 'transform',
    transition = {},
    transitionTiming,
    transitionDuration,
    transitionProperty,
    transitionDelay;

  if (canUseDOM) {
    transition = getTransitionProperties();

    transform = transition.prefix + transform;

    transitionProperty = transition.prefix + 'transition-property';
    transitionDuration = transition.prefix + 'transition-duration';
    transitionDelay = transition.prefix + 'transition-delay';
    transitionTiming = transition.prefix + 'transition-timing-function';
  }

  module.exports = {
    transform: transform,
    end: transition.end,
    property: transitionProperty,
    timing: transitionTiming,
    delay: transitionDelay,
    duration: transitionDuration
  };

  function getTransitionProperties() {
    var endEvent,
      prefix = '',
      transitions = {
        O: 'otransitionend',
        Moz: 'transitionend',
        Webkit: 'webkitTransitionEnd',
        ms: 'MSTransitionEnd'
      };

    var element = document.createElement('div');

    for (var vendor in transitions) if (has.call(transitions, vendor)) {
      if (element.style[vendor + 'TransitionProperty'] !== undefined) {
        prefix = '-' + vendor.toLowerCase() + '-';
        endEvent = transitions[vendor];
        break;
      }
    }

    if (!endEvent && element.style.transitionProperty !== undefined) endEvent = 'transitionend';

    return { end: endEvent, prefix: prefix };
  }
},{"../util/inDOM":260}],255:[function(require,module,exports){
  (function (root, factory) {
    if (typeof define === "function" && define.amd) {
      define(["exports"], factory);
    } else if (typeof exports === "object") {
      factory(exports);
    } else {
      factory(root.babelHelpers = {});
    }
  })(this, function (global) {
    var babelHelpers = global;

    babelHelpers.interopRequireDefault = function (obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    };

    babelHelpers._extends = Object.assign || function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];

          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }

        return target;
      };
  })
},{}],256:[function(require,module,exports){
  "use strict";

  var rHyphen = /-(.)/g;

  module.exports = function camelize(string) {
    return string.replace(rHyphen, function (_, chr) {
      return chr.toUpperCase();
    });
  };
},{}],257:[function(require,module,exports){
  /**
   * Copyright 2014-2015, Facebook, Inc.
   * All rights reserved.
   * https://github.com/facebook/react/blob/2aeb8a2a6beb00617a4217f7f8284924fa2ad819/src/vendor/core/camelizeStyleName.js
   */

  'use strict';
  var camelize = require('./camelize');
  var msPattern = /^-ms-/;

  module.exports = function camelizeStyleName(string) {
    return camelize(string.replace(msPattern, 'ms-'));
  };
},{"./camelize":256}],258:[function(require,module,exports){
  'use strict';

  var rUpper = /([A-Z])/g;

  module.exports = function hyphenate(string) {
    return string.replace(rUpper, '-$1').toLowerCase();
  };
},{}],259:[function(require,module,exports){
  /**
   * Copyright 2013-2014, Facebook, Inc.
   * All rights reserved.
   * https://github.com/facebook/react/blob/2aeb8a2a6beb00617a4217f7f8284924fa2ad819/src/vendor/core/hyphenateStyleName.js
   */

  "use strict";

  var hyphenate = require("./hyphenate");
  var msPattern = /^ms-/;

  module.exports = function hyphenateStyleName(string) {
    return hyphenate(string).replace(msPattern, "-ms-");
  };
},{"./hyphenate":258}],260:[function(require,module,exports){
  'use strict';
  module.exports = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
},{}],261:[function(require,module,exports){
  'use strict';

  var canUseDOM = require('./inDOM');

  var size;

  module.exports = function (recalc) {
    if (!size || recalc) {
      if (canUseDOM) {
        var scrollDiv = document.createElement('div');

        scrollDiv.style.position = 'absolute';
        scrollDiv.style.top = '-9999px';
        scrollDiv.style.width = '50px';
        scrollDiv.style.height = '50px';
        scrollDiv.style.overflow = 'scroll';

        document.body.appendChild(scrollDiv);
        size = scrollDiv.offsetWidth - scrollDiv.clientWidth;
        document.body.removeChild(scrollDiv);
      }
    }

    return size;
  };
},{"./inDOM":260}],262:[function(require,module,exports){
  // Source: http://jsfiddle.net/vWx8V/
  // http://stackoverflow.com/questions/5603195/full-list-of-javascript-keycodes



  /**
   * Conenience method returns corresponding value for given keyName or keyCode.
   *
   * @param {Mixed} keyCode {Number} or keyName {String}
   * @return {Mixed}
   * @api public
   */

  exports = module.exports = function(searchInput) {
    // Keyboard Events
    if (searchInput && 'object' === typeof searchInput) {
      var hasKeyCode = searchInput.which || searchInput.keyCode || searchInput.charCode
      if (hasKeyCode) searchInput = hasKeyCode
    }

    // Numbers
    if ('number' === typeof searchInput) return names[searchInput]

    // Everything else (cast to string)
    var search = String(searchInput)

    // check codes
    var foundNamedKey = codes[search.toLowerCase()]
    if (foundNamedKey) return foundNamedKey

    // check aliases
    var foundNamedKey = aliases[search.toLowerCase()]
    if (foundNamedKey) return foundNamedKey

    // weird character?
    if (search.length === 1) return search.charCodeAt(0)

    return undefined
  }

  /**
   * Get by name
   *
   *   exports.code['enter'] // => 13
   */

  var codes = exports.code = exports.codes = {
    'backspace': 8,
    'tab': 9,
    'enter': 13,
    'shift': 16,
    'ctrl': 17,
    'alt': 18,
    'pause/break': 19,
    'caps lock': 20,
    'esc': 27,
    'space': 32,
    'page up': 33,
    'page down': 34,
    'end': 35,
    'home': 36,
    'left': 37,
    'up': 38,
    'right': 39,
    'down': 40,
    'insert': 45,
    'delete': 46,
    'command': 91,
    'right click': 93,
    'numpad *': 106,
    'numpad +': 107,
    'numpad -': 109,
    'numpad .': 110,
    'numpad /': 111,
    'num lock': 144,
    'scroll lock': 145,
    'my computer': 182,
    'my calculator': 183,
    ';': 186,
    '=': 187,
    ',': 188,
    '-': 189,
    '.': 190,
    '/': 191,
    '`': 192,
    '[': 219,
    '\\': 220,
    ']': 221,
    "'": 222,
  }

  // Helper aliases

  var aliases = exports.aliases = {
    'windows': 91,
    '⇧': 16,
    '⌥': 18,
    '⌃': 17,
    '⌘': 91,
    'ctl': 17,
    'control': 17,
    'option': 18,
    'pause': 19,
    'break': 19,
    'caps': 20,
    'return': 13,
    'escape': 27,
    'spc': 32,
    'pgup': 33,
    'pgdn': 33,
    'ins': 45,
    'del': 46,
    'cmd': 91
  }


  /*!
   * Programatically add the following
   */

  // lower case chars
  for (i = 97; i < 123; i++) codes[String.fromCharCode(i)] = i - 32

  // numbers
  for (var i = 48; i < 58; i++) codes[i - 48] = i

  // function keys
  for (i = 1; i < 13; i++) codes['f'+i] = i + 111

  // numpad keys
  for (i = 0; i < 10; i++) codes['numpad '+i] = i + 96

  /**
   * Get by code
   *
   *   exports.name[13] // => 'Enter'
   */

  var names = exports.names = exports.title = {} // title for backward compat

  // Create reverse mapping
  for (i in codes) names[codes[i]] = i

  // Add aliases
  for (var alias in aliases) {
    codes[alias] = aliases[alias]
  }

},{}],263:[function(require,module,exports){
  'use strict';

  exports.__esModule = true;

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _Portal = require('./Portal');

  var _Portal2 = _interopRequireDefault(_Portal);

  var _Position = require('./Position');

  var _Position2 = _interopRequireDefault(_Position);

  var _RootCloseWrapper = require('./RootCloseWrapper');

  var _RootCloseWrapper2 = _interopRequireDefault(_RootCloseWrapper);

  var _reactPropTypesLibElementType = require('react-prop-types/lib/elementType');

  var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

  /**
   * Built on top of `<Position/>` and `<Portal/>`, the overlay component is great for custom tooltip overlays.
   */

  var Overlay = (function (_React$Component) {
    function Overlay(props, context) {
      _classCallCheck(this, Overlay);

      _React$Component.call(this, props, context);

      this.state = { exited: !props.show };
      this.onHiddenListener = this.handleHidden.bind(this);
    }

    _inherits(Overlay, _React$Component);

    Overlay.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
      if (nextProps.show) {
        this.setState({ exited: false });
      } else if (!nextProps.transition) {
        // Otherwise let handleHidden take care of marking exited.
        this.setState({ exited: true });
      }
    };

    Overlay.prototype.render = function render() {
      var _props = this.props;
      var container = _props.container;
      var containerPadding = _props.containerPadding;
      var target = _props.target;
      var placement = _props.placement;
      var rootClose = _props.rootClose;
      var children = _props.children;
      var Transition = _props.transition;

      var props = _objectWithoutProperties(_props, ['container', 'containerPadding', 'target', 'placement', 'rootClose', 'children', 'transition']);

      // Don't un-render the overlay while it's transitioning out.
      var mountOverlay = props.show || Transition && !this.state.exited;
      if (!mountOverlay) {
        // Don't bother showing anything if we don't have to.
        return null;
      }

      var child = children;

      // Position is be inner-most because it adds inline styles into the child,
      // which the other wrappers don't forward correctly.
      child = _react2['default'].createElement(
        _Position2['default'],
        { container: container, containerPadding: containerPadding, target: target, placement: placement },
        child
      );

      if (Transition) {
        var onExit = props.onExit;
        var onExiting = props.onExiting;
        var onEnter = props.onEnter;
        var onEntering = props.onEntering;
        var onEntered = props.onEntered;

        // This animates the child node by injecting props, so it must precede
        // anything that adds a wrapping div.
        child = _react2['default'].createElement(
          Transition,
          {
            'in': props.show,
            transitionAppear: true,
            onExit: onExit,
            onExiting: onExiting,
            onExited: this.onHiddenListener,
            onEnter: onEnter,
            onEntering: onEntering,
            onEntered: onEntered
          },
          child
        );
      }

      // This goes after everything else because it adds a wrapping div.
      if (rootClose) {
        child = _react2['default'].createElement(
          _RootCloseWrapper2['default'],
          { onRootClose: props.onHide },
          child
        );
      }

      return _react2['default'].createElement(
        _Portal2['default'],
        { container: container },
        child
      );
    };

    Overlay.prototype.handleHidden = function handleHidden() {
      this.setState({ exited: true });

      if (this.props.onExited) {
        var _props2;

        (_props2 = this.props).onExited.apply(_props2, arguments);
      }
    };

    return Overlay;
  })(_react2['default'].Component);

  Overlay.propTypes = _extends({}, _Portal2['default'].propTypes, _Position2['default'].propTypes, {
    /**
     * Set the visibility of the Overlay
     */
    show: _react2['default'].PropTypes.bool,
    /**
     * Specify whether the overlay should trigger onHide when the user clicks outside the overlay
     */
    rootClose: _react2['default'].PropTypes.bool,
    /**
     * A Callback fired by the Overlay when it wishes to be hidden.
     */
    onHide: _react2['default'].PropTypes.func,

    /**
     * A `<Transition/>` component used to animate the overlay changes visibility.
     */
    transition: _reactPropTypesLibElementType2['default'],

    /**
     * Callback fired before the Overlay transitions in
     */
    onEnter: _react2['default'].PropTypes.func,

    /**
     * Callback fired as the Overlay begins to transition in
     */
    onEntering: _react2['default'].PropTypes.func,

    /**
     * Callback fired after the Overlay finishes transitioning in
     */
    onEntered: _react2['default'].PropTypes.func,

    /**
     * Callback fired right before the Overlay transitions out
     */
    onExit: _react2['default'].PropTypes.func,

    /**
     * Callback fired as the Overlay begins to transition out
     */
    onExiting: _react2['default'].PropTypes.func,

    /**
     * Callback fired after the Overlay finishes transitioning out
     */
    onExited: _react2['default'].PropTypes.func
  });

  exports['default'] = Overlay;
  module.exports = exports['default'];
},{"./Portal":264,"./Position":265,"./RootCloseWrapper":266,"react":482,"react-prop-types/lib/elementType":274}],264:[function(require,module,exports){
  'use strict';

  exports.__esModule = true;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _reactPropTypesLibMountable = require('react-prop-types/lib/mountable');

  var _reactPropTypesLibMountable2 = _interopRequireDefault(_reactPropTypesLibMountable);

  var _utilsOwnerDocument = require('./utils/ownerDocument');

  var _utilsOwnerDocument2 = _interopRequireDefault(_utilsOwnerDocument);

  var _utilsGetContainer = require('./utils/getContainer');

  var _utilsGetContainer2 = _interopRequireDefault(_utilsGetContainer);

  /**
   * The `<Portal/>` component renders its children into a new "subtree" outside of current component hierarchy.
   * You can think of it as a declarative `appendChild()`, or jQuery's `$.fn.appendTo()`.
   * The children of `<Portal/>` component will be appended to the `container` specified.
   */
  var Portal = _react2['default'].createClass({

    displayName: 'Portal',

    propTypes: {
      /**
       * A Node, Component instance, or function that returns either. The `container` will have the Portal children
       * appended to it.
       */
      container: _react2['default'].PropTypes.oneOfType([_reactPropTypesLibMountable2['default'], _react2['default'].PropTypes.func])
    },

    componentDidMount: function componentDidMount() {
      this._renderOverlay();
    },

    componentDidUpdate: function componentDidUpdate() {
      this._renderOverlay();
    },

    componentWillUnmount: function componentWillUnmount() {
      this._unrenderOverlay();
      this._unmountOverlayTarget();
    },

    _mountOverlayTarget: function _mountOverlayTarget() {
      if (!this._overlayTarget) {
        this._overlayTarget = document.createElement('div');
        this.getContainerDOMNode().appendChild(this._overlayTarget);
      }
    },

    _unmountOverlayTarget: function _unmountOverlayTarget() {
      if (this._overlayTarget) {
        this.getContainerDOMNode().removeChild(this._overlayTarget);
        this._overlayTarget = null;
      }
    },

    _renderOverlay: function _renderOverlay() {

      var overlay = !this.props.children ? null : _react2['default'].Children.only(this.props.children);

      // Save reference for future access.
      if (overlay !== null) {
        this._mountOverlayTarget();
        this._overlayInstance = _react2['default'].render(overlay, this._overlayTarget);
      } else {
        // Unrender if the component is null for transitions to null
        this._unrenderOverlay();
        this._unmountOverlayTarget();
      }
    },

    _unrenderOverlay: function _unrenderOverlay() {
      if (this._overlayTarget) {
        _react2['default'].unmountComponentAtNode(this._overlayTarget);
        this._overlayInstance = null;
      }
    },

    render: function render() {
      return null;
    },

    getOverlayDOMNode: function getOverlayDOMNode() {
      if (!this.isMounted()) {
        throw new Error('getOverlayDOMNode(): A component must be mounted to have a DOM node.');
      }

      if (this._overlayInstance) {
        if (this._overlayInstance.getWrappedDOMNode) {
          return this._overlayInstance.getWrappedDOMNode();
        } else {
          return _react2['default'].findDOMNode(this._overlayInstance);
        }
      }

      return null;
    },

    getContainerDOMNode: function getContainerDOMNode() {
      return _utilsGetContainer2['default'](this.props.container, _utilsOwnerDocument2['default'](this).body);
    }
  });

  exports['default'] = Portal;
  module.exports = exports['default'];
},{"./utils/getContainer":270,"./utils/ownerDocument":272,"react":482,"react-prop-types/lib/mountable":275}],265:[function(require,module,exports){
  'use strict';

  exports.__esModule = true;

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _classnames = require('classnames');

  var _classnames2 = _interopRequireDefault(_classnames);

  var _utilsOwnerDocument = require('./utils/ownerDocument');

  var _utilsOwnerDocument2 = _interopRequireDefault(_utilsOwnerDocument);

  var _utilsGetContainer = require('./utils/getContainer');

  var _utilsGetContainer2 = _interopRequireDefault(_utilsGetContainer);

  var _utilsOverlayPositionUtils = require('./utils/overlayPositionUtils');

  var _reactPropTypesLibMountable = require('react-prop-types/lib/mountable');

  var _reactPropTypesLibMountable2 = _interopRequireDefault(_reactPropTypesLibMountable);

  /**
   * The Position component calulates the corrdinates for its child, to
   * position it relative to a `target` component or node. Useful for creating callouts and tooltips,
   * the Position component injects a `style` props with `left` and `top` values for positioning your component.
   *
   * It also injects "arrow" `left`, and `top` values for styling callout arrows for giving your components
   * a sense of directionality.
   */

  var Position = (function (_React$Component) {
    function Position(props, context) {
      _classCallCheck(this, Position);

      _React$Component.call(this, props, context);

      this.state = {
        positionLeft: null,
        positionTop: null,
        arrowOffsetLeft: null,
        arrowOffsetTop: null
      };

      this._needsFlush = false;
      this._lastTarget = null;
    }

    _inherits(Position, _React$Component);

    Position.prototype.componentDidMount = function componentDidMount() {
      this.updatePosition();
    };

    Position.prototype.componentWillReceiveProps = function componentWillReceiveProps() {
      this._needsFlush = true;
    };

    Position.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
      if (this._needsFlush) {
        this._needsFlush = false;
        this.updatePosition(prevProps.placement !== this.props.placement);
      }
    };

    Position.prototype.componentWillUnmount = function componentWillUnmount() {
      // Probably not necessary, but just in case holding a reference to the
      // target causes problems somewhere.
      this._lastTarget = null;
    };

    Position.prototype.render = function render() {
      var _props = this.props;
      var children = _props.children;
      var className = _props.className;

      var props = _objectWithoutProperties(_props, ['children', 'className']);

      var _state = this.state;
      var positionLeft = _state.positionLeft;
      var positionTop = _state.positionTop;

      var arrowPosition = _objectWithoutProperties(_state, ['positionLeft', 'positionTop']);

      var child = _react2['default'].Children.only(children);
      return _react.cloneElement(child, _extends({}, props, arrowPosition, {
        //do we need to also forward positionLeft and positionTop if they are set to style?
        positionLeft: positionLeft,
        positionTop: positionTop,
        className: _classnames2['default'](className, child.props.className),
        style: _extends({}, child.props.style, {
          left: positionLeft,
          top: positionTop
        })
      }));
    };

    Position.prototype.getTargetSafe = function getTargetSafe() {
      if (!this.props.target) {
        return null;
      }

      var target = this.props.target(this.props);
      if (!target) {
        // This is so we can just use === check below on all falsy targets.
        return null;
      }

      return target;
    };

    Position.prototype.updatePosition = function updatePosition(placementChanged) {
      var target = this.getTargetSafe();

      if (target === this._lastTarget && !placementChanged) {
        return;
      }

      this._lastTarget = target;

      if (!target) {
        this.setState({
          positionLeft: null,
          positionTop: null,
          arrowOffsetLeft: null,
          arrowOffsetTop: null
        });

        return;
      }

      var overlay = _react2['default'].findDOMNode(this);
      var container = _utilsGetContainer2['default'](this.props.container, _utilsOwnerDocument2['default'](this).body);

      this.setState(_utilsOverlayPositionUtils.calcOverlayPosition(this.props.placement, overlay, target, container, this.props.containerPadding));
    };

    return Position;
  })(_react2['default'].Component);

  Position.propTypes = {
    /**
     * Function mapping props to a DOM node the component is positioned next to
     */
    target: _react2['default'].PropTypes.func,
    /**
     * "offsetParent" of the component
     */
    container: _reactPropTypesLibMountable2['default'],
    /**
     * Minimum spacing in pixels between container border and component border
     */
    containerPadding: _react2['default'].PropTypes.number,
    /**
     * How to position the component relative to the target
     */
    placement: _react2['default'].PropTypes.oneOf(['top', 'right', 'bottom', 'left'])
  };

  Position.displayName = 'Position';

  Position.defaultProps = {
    containerPadding: 0,
    placement: 'right'
  };

  exports['default'] = Position;
  module.exports = exports['default'];
},{"./utils/getContainer":270,"./utils/overlayPositionUtils":271,"./utils/ownerDocument":272,"classnames":40,"react":482,"react-prop-types/lib/mountable":275}],266:[function(require,module,exports){
  'use strict';

  exports.__esModule = true;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _utilsAddEventListener = require('./utils/addEventListener');

  var _utilsAddEventListener2 = _interopRequireDefault(_utilsAddEventListener);

  var _utilsCreateChainedFunction = require('./utils/createChainedFunction');

  var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

  var _utilsOwnerDocument = require('./utils/ownerDocument');

  var _utilsOwnerDocument2 = _interopRequireDefault(_utilsOwnerDocument);

  // TODO: Consider using an ES6 symbol here, once we use babel-runtime.
  var CLICK_WAS_INSIDE = '__click_was_inside';

  function suppressRootClose(event) {
    // Tag the native event to prevent the root close logic on document click.
    // This seems safer than using event.nativeEvent.stopImmediatePropagation(),
    // which is only supported in IE >= 9.
    event.nativeEvent[CLICK_WAS_INSIDE] = true;
  }

  var RootCloseWrapper = (function (_React$Component) {
    function RootCloseWrapper(props) {
      _classCallCheck(this, RootCloseWrapper);

      _React$Component.call(this, props);

      this.handleDocumentClick = this.handleDocumentClick.bind(this);
      this.handleDocumentKeyUp = this.handleDocumentKeyUp.bind(this);
    }

    _inherits(RootCloseWrapper, _React$Component);

    RootCloseWrapper.prototype.bindRootCloseHandlers = function bindRootCloseHandlers() {
      var doc = _utilsOwnerDocument2['default'](this);

      this._onDocumentClickListener = _utilsAddEventListener2['default'](doc, 'click', this.handleDocumentClick);

      this._onDocumentKeyupListener = _utilsAddEventListener2['default'](doc, 'keyup', this.handleDocumentKeyUp);
    };

    RootCloseWrapper.prototype.handleDocumentClick = function handleDocumentClick(e) {
      // This is now the native event.
      if (e[CLICK_WAS_INSIDE]) {
        return;
      }

      this.props.onRootClose();
    };

    RootCloseWrapper.prototype.handleDocumentKeyUp = function handleDocumentKeyUp(e) {
      if (e.keyCode === 27) {
        this.props.onRootClose();
      }
    };

    RootCloseWrapper.prototype.unbindRootCloseHandlers = function unbindRootCloseHandlers() {
      if (this._onDocumentClickListener) {
        this._onDocumentClickListener.remove();
      }

      if (this._onDocumentKeyupListener) {
        this._onDocumentKeyupListener.remove();
      }
    };

    RootCloseWrapper.prototype.componentDidMount = function componentDidMount() {
      this.bindRootCloseHandlers();
    };

    RootCloseWrapper.prototype.render = function render() {
      var _props = this.props;
      var noWrap = _props.noWrap;
      var children = _props.children;

      var child = _react2['default'].Children.only(children);

      if (noWrap) {
        return _react2['default'].cloneElement(child, {
          onClick: _utilsCreateChainedFunction2['default'](suppressRootClose, child.props.onClick)
        });
      }

      // Wrap the child in a new element, so the child won't have to handle
      // potentially combining multiple onClick listeners.
      return _react2['default'].createElement(
        'div',
        { onClick: suppressRootClose },
        child
      );
    };

    RootCloseWrapper.prototype.getWrappedDOMNode = function getWrappedDOMNode() {
      // We can't use a ref to identify the wrapped child, since we might be
      // stealing the ref from the owner, but we know exactly the DOM structure
      // that will be rendered, so we can just do this to get the child's DOM
      // node for doing size calculations in OverlayMixin.
      var node = _react2['default'].findDOMNode(this);
      return this.props.noWrap ? node : node.firstChild;
    };

    RootCloseWrapper.prototype.componentWillUnmount = function componentWillUnmount() {
      this.unbindRootCloseHandlers();
    };

    return RootCloseWrapper;
  })(_react2['default'].Component);

  exports['default'] = RootCloseWrapper;

  RootCloseWrapper.displayName = 'RootCloseWrapper';

  RootCloseWrapper.propTypes = {
    onRootClose: _react2['default'].PropTypes.func.isRequired,

    /**
     * Passes the suppress click handler directly to the child component instead
     * of placing it on a wrapping div. Only use when you can be sure the child
     * properly handle the click event.
     */
    noWrap: _react2['default'].PropTypes.bool
  };
  module.exports = exports['default'];
},{"./utils/addEventListener":268,"./utils/createChainedFunction":269,"./utils/ownerDocument":272,"react":482}],267:[function(require,module,exports){
  'use strict';

  exports.__esModule = true;

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _domHelpersTransitionProperties = require('dom-helpers/transition/properties');

  var _domHelpersTransitionProperties2 = _interopRequireDefault(_domHelpersTransitionProperties);

  var _domHelpersEventsOn = require('dom-helpers/events/on');

  var _domHelpersEventsOn2 = _interopRequireDefault(_domHelpersEventsOn);

  var _classnames = require('classnames');

  var _classnames2 = _interopRequireDefault(_classnames);

  var transitionEndEvent = _domHelpersTransitionProperties2['default'].end;

  var UNMOUNTED = 0;
  exports.UNMOUNTED = UNMOUNTED;
  var EXITED = 1;
  exports.EXITED = EXITED;
  var ENTERING = 2;
  exports.ENTERING = ENTERING;
  var ENTERED = 3;
  exports.ENTERED = ENTERED;
  var EXITING = 4;

  exports.EXITING = EXITING;
  /**
   * The Transition component lets you define and run css transitions with a simple declarative api.
   * It works similar to React's own [CSSTransitionGroup](http://facebook.github.io/react/docs/animation.html#high-level-api-reactcsstransitiongroup)
   * but is specifically optimized for transitioning a single child "in" or "out".
   *
   * You don't even need to use class based css transitions if you don't want to (but it is easiest).
   * The extensive set of lifecyle callbacks means you have control over
   * the transitioning now at each step of the way.
   */

  var Transition = (function (_React$Component) {
    function Transition(props, context) {
      _classCallCheck(this, Transition);

      _React$Component.call(this, props, context);

      var initialStatus = undefined;
      if (props['in']) {
        // Start enter transition in componentDidMount.
        initialStatus = props.transitionAppear ? EXITED : ENTERED;
      } else {
        initialStatus = props.unmountOnExit ? UNMOUNTED : EXITED;
      }
      this.state = { status: initialStatus };

      this.nextCallback = null;
    }

    _inherits(Transition, _React$Component);

    Transition.prototype.componentDidMount = function componentDidMount() {
      if (this.props.transitionAppear && this.props['in']) {
        this.performEnter(this.props);
      }
    };

    Transition.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
      var status = this.state.status;
      if (nextProps['in']) {
        if (status === EXITING) {
          this.performEnter(nextProps);
        } else if (this.props.unmountOnExit) {
          if (status === UNMOUNTED) {
            // Start enter transition in componentDidUpdate.
            this.setState({ status: EXITED });
          }
        } else if (status === EXITED) {
          this.performEnter(nextProps);
        }

        // Otherwise we're already entering or entered.
      } else {
        if (status === ENTERING || status === ENTERED) {
          this.performExit(nextProps);
        }

        // Otherwise we're already exited or exiting.
      }
    };

    Transition.prototype.componentDidUpdate = function componentDidUpdate() {
      if (this.props.unmountOnExit && this.state.status === EXITED) {
        // EXITED is always a transitional state to either ENTERING or UNMOUNTED
        // when using unmountOnExit.
        if (this.props['in']) {
          this.performEnter(this.props);
        } else {
          this.setState({ status: UNMOUNTED });
        }
      }
    };

    Transition.prototype.componentWillUnmount = function componentWillUnmount() {
      this.cancelNextCallback();
    };

    Transition.prototype.performEnter = function performEnter(props) {
      var _this = this;

      this.cancelNextCallback();
      var node = _react2['default'].findDOMNode(this);

      // Not this.props, because we might be about to receive new props.
      props.onEnter(node);

      this.safeSetState({ status: ENTERING }, function () {
        _this.props.onEntering(node);

        _this.onTransitionEnd(node, function () {
          _this.safeSetState({ status: ENTERED }, function () {
            _this.props.onEntered(node);
          });
        });
      });
    };

    Transition.prototype.performExit = function performExit(props) {
      var _this2 = this;

      this.cancelNextCallback();
      var node = _react2['default'].findDOMNode(this);

      // Not this.props, because we might be about to receive new props.
      props.onExit(node);

      this.safeSetState({ status: EXITING }, function () {
        _this2.props.onExiting(node);

        _this2.onTransitionEnd(node, function () {
          _this2.safeSetState({ status: EXITED }, function () {
            _this2.props.onExited(node);
          });
        });
      });
    };

    Transition.prototype.cancelNextCallback = function cancelNextCallback() {
      if (this.nextCallback !== null) {
        this.nextCallback.cancel();
        this.nextCallback = null;
      }
    };

    Transition.prototype.safeSetState = function safeSetState(nextState, callback) {
      // This shouldn't be necessary, but there are weird race conditions with
      // setState callbacks and unmounting in testing, so always make sure that
      // we can cancel any pending setState callbacks after we unmount.
      this.setState(nextState, this.setNextCallback(callback));
    };

    Transition.prototype.setNextCallback = function setNextCallback(callback) {
      var _this3 = this;

      var active = true;

      this.nextCallback = function (event) {
        if (active) {
          active = false;
          _this3.nextCallback = null;

          callback(event);
        }
      };

      this.nextCallback.cancel = function () {
        active = false;
      };

      return this.nextCallback;
    };

    Transition.prototype.onTransitionEnd = function onTransitionEnd(node, handler) {
      this.setNextCallback(handler);

      if (node) {
        _domHelpersEventsOn2['default'](node, transitionEndEvent, this.nextCallback);
        setTimeout(this.nextCallback, this.props.timeout);
      } else {
        setTimeout(this.nextCallback, 0);
      }
    };

    Transition.prototype.render = function render() {
      var status = this.state.status;
      if (status === UNMOUNTED) {
        return null;
      }

      var _props = this.props;
      var children = _props.children;
      var className = _props.className;

      var childProps = _objectWithoutProperties(_props, ['children', 'className']);

      Object.keys(Transition.propTypes).forEach(function (key) {
        return delete childProps[key];
      });

      var transitionClassName = undefined;
      if (status === EXITED) {
        transitionClassName = this.props.exitedClassName;
      } else if (status === ENTERING) {
        transitionClassName = this.props.enteringClassName;
      } else if (status === ENTERED) {
        transitionClassName = this.props.enteredClassName;
      } else if (status === EXITING) {
        transitionClassName = this.props.exitingClassName;
      }

      var child = _react2['default'].Children.only(children);
      return _react2['default'].cloneElement(child, _extends({}, childProps, {
        className: _classnames2['default'](child.props.className, className, transitionClassName)
      }));
    };

    return Transition;
  })(_react2['default'].Component);

  Transition.propTypes = {
    /**
     * Show the component; triggers the enter or exit animation
     */
    'in': _react2['default'].PropTypes.bool,

    /**
     * Unmount the component (remove it from the DOM) when it is not shown
     */
    unmountOnExit: _react2['default'].PropTypes.bool,

    /**
     * Run the enter animation when the component mounts, if it is initially
     * shown
     */
    transitionAppear: _react2['default'].PropTypes.bool,

    /**
     * A Timeout for the animation, in milliseconds, to ensure that a node doesn't
     * transition indefinately if the browser transitionEnd events are
     * canceled or interrupted.
     *
     * By default this is set to a high number (5 seconds) as a failsafe. You should consider
     * setting this to the duration of your animation (or a bit above it).
     */
    timeout: _react2['default'].PropTypes.number,

    /**
     * CSS class or classes applied when the component is exited
     */
    exitedClassName: _react2['default'].PropTypes.string,
    /**
     * CSS class or classes applied while the component is exiting
     */
    exitingClassName: _react2['default'].PropTypes.string,
    /**
     * CSS class or classes applied when the component is entered
     */
    enteredClassName: _react2['default'].PropTypes.string,
    /**
     * CSS class or classes applied while the component is entering
     */
    enteringClassName: _react2['default'].PropTypes.string,

    /**
     * Callback fired before the "entering" classes are applied
     */
    onEnter: _react2['default'].PropTypes.func,
    /**
     * Callback fired after the "entering" classes are applied
     */
    onEntering: _react2['default'].PropTypes.func,
    /**
     * Callback fired after the "enter" classes are applied
     */
    onEntered: _react2['default'].PropTypes.func,
    /**
     * Callback fired before the "exiting" classes are applied
     */
    onExit: _react2['default'].PropTypes.func,
    /**
     * Callback fired after the "exiting" classes are applied
     */
    onExiting: _react2['default'].PropTypes.func,
    /**
     * Callback fired after the "exited" classes are applied
     */
    onExited: _react2['default'].PropTypes.func
  };

  // Name the function so it is clearer in the documentation
  function noop() {}

  Transition.displayName = 'Transition';

  Transition.defaultProps = {
    'in': false,
    unmountOnExit: false,
    transitionAppear: false,

    timeout: 5000,

    onEnter: noop,
    onEntering: noop,
    onEntered: noop,

    onExit: noop,
    onExiting: noop,
    onExited: noop
  };

  exports['default'] = Transition;
},{"classnames":40,"dom-helpers/events/on":241,"dom-helpers/transition/properties":254,"react":482}],268:[function(require,module,exports){
  'use strict';

  exports.__esModule = true;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  var _domHelpersEventsOn = require('dom-helpers/events/on');

  var _domHelpersEventsOn2 = _interopRequireDefault(_domHelpersEventsOn);

  var _domHelpersEventsOff = require('dom-helpers/events/off');

  var _domHelpersEventsOff2 = _interopRequireDefault(_domHelpersEventsOff);

  exports['default'] = function (node, event, handler) {
    _domHelpersEventsOn2['default'](node, event, handler);
    return {
      remove: function remove() {
        _domHelpersEventsOff2['default'](node, event, handler);
      }
    };
  };

  module.exports = exports['default'];
},{"dom-helpers/events/off":240,"dom-helpers/events/on":241}],269:[function(require,module,exports){
  /**
   * Safe chained function
   *
   * Will only create a new function if needed,
   * otherwise will pass back existing functions or null.
   *
   * @param {function} functions to chain
   * @returns {function|null}
   */
  'use strict';

  exports.__esModule = true;
  function createChainedFunction() {
    for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
      funcs[_key] = arguments[_key];
    }

    return funcs.filter(function (f) {
      return f != null;
    }).reduce(function (acc, f) {
      if (typeof f !== 'function') {
        throw new Error('Invalid Argument Type, must only provide functions, undefined, or null.');
      }

      if (acc === null) {
        return f;
      }

      return function chainedFunction() {
        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        acc.apply(this, args);
        f.apply(this, args);
      };
    }, null);
  }

  exports['default'] = createChainedFunction;
  module.exports = exports['default'];
},{}],270:[function(require,module,exports){
  'use strict';

  exports.__esModule = true;
  exports['default'] = getContainer;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  function getContainer(container, defaultContainer) {
    container = typeof container === 'function' ? container() : container;
    return _react2['default'].findDOMNode(container) || defaultContainer;
  }

  module.exports = exports['default'];
},{"react":482}],271:[function(require,module,exports){
  'use strict';

  exports.__esModule = true;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  var _ownerDocument = require('./ownerDocument');

  var _ownerDocument2 = _interopRequireDefault(_ownerDocument);

  var _domHelpersQueryOffset = require('dom-helpers/query/offset');

  var _domHelpersQueryOffset2 = _interopRequireDefault(_domHelpersQueryOffset);

  var _domHelpersQueryPosition = require('dom-helpers/query/position');

  var _domHelpersQueryPosition2 = _interopRequireDefault(_domHelpersQueryPosition);

  var _domHelpersQueryScrollTop = require('dom-helpers/query/scrollTop');

  var _domHelpersQueryScrollTop2 = _interopRequireDefault(_domHelpersQueryScrollTop);

  var utils = {

    getContainerDimensions: function getContainerDimensions(containerNode) {
      var width = undefined,
        height = undefined,
        scroll = undefined;

      if (containerNode.tagName === 'BODY') {
        width = window.innerWidth;
        height = window.innerHeight;

        scroll = _domHelpersQueryScrollTop2['default'](_ownerDocument2['default'](containerNode).documentElement) || _domHelpersQueryScrollTop2['default'](containerNode);
      } else {
        var _getOffset = _domHelpersQueryOffset2['default'](containerNode);

        width = _getOffset.width;
        height = _getOffset.height;

        scroll = _domHelpersQueryScrollTop2['default'](containerNode);
      }

      return { width: width, height: height, scroll: scroll };
    },

    getPosition: function getPosition(target, container) {
      var offset = container.tagName === 'BODY' ? _domHelpersQueryOffset2['default'](target) : _domHelpersQueryPosition2['default'](target, container);

      return offset;
    },

    calcOverlayPosition: function calcOverlayPosition(placement, overlayNode, target, container, padding) {
      var childOffset = utils.getPosition(target, container);

      var _getOffset2 = _domHelpersQueryOffset2['default'](overlayNode);

      var overlayHeight = _getOffset2.height;
      var overlayWidth = _getOffset2.width;

      var positionLeft = undefined,
        positionTop = undefined,
        arrowOffsetLeft = undefined,
        arrowOffsetTop = undefined;

      if (placement === 'left' || placement === 'right') {
        positionTop = childOffset.top + (childOffset.height - overlayHeight) / 2;

        if (placement === 'left') {
          positionLeft = childOffset.left - overlayWidth;
        } else {
          positionLeft = childOffset.left + childOffset.width;
        }

        var topDelta = getTopDelta(positionTop, overlayHeight, container, padding);

        positionTop += topDelta;
        arrowOffsetTop = 50 * (1 - 2 * topDelta / overlayHeight) + '%';
        arrowOffsetLeft = void 0;
      } else if (placement === 'top' || placement === 'bottom') {
        positionLeft = childOffset.left + (childOffset.width - overlayWidth) / 2;

        if (placement === 'top') {
          positionTop = childOffset.top - overlayHeight;
        } else {
          positionTop = childOffset.top + childOffset.height;
        }

        var leftDelta = getLeftDelta(positionLeft, overlayWidth, container, padding);
        positionLeft += leftDelta;
        arrowOffsetLeft = 50 * (1 - 2 * leftDelta / overlayWidth) + '%';
        arrowOffsetTop = void 0;
      } else {
        throw new Error('calcOverlayPosition(): No such placement of "' + placement + '" found.');
      }

      return { positionLeft: positionLeft, positionTop: positionTop, arrowOffsetLeft: arrowOffsetLeft, arrowOffsetTop: arrowOffsetTop };
    }
  };

  function getTopDelta(top, overlayHeight, container, padding) {
    var containerDimensions = utils.getContainerDimensions(container);
    var containerScroll = containerDimensions.scroll;
    var containerHeight = containerDimensions.height;

    var topEdgeOffset = top - padding - containerScroll;
    var bottomEdgeOffset = top + padding - containerScroll + overlayHeight;

    if (topEdgeOffset < 0) {
      return -topEdgeOffset;
    } else if (bottomEdgeOffset > containerHeight) {
      return containerHeight - bottomEdgeOffset;
    } else {
      return 0;
    }
  }

  function getLeftDelta(left, overlayWidth, container, padding) {
    var containerDimensions = utils.getContainerDimensions(container);
    var containerWidth = containerDimensions.width;

    var leftEdgeOffset = left - padding;
    var rightEdgeOffset = left + padding + overlayWidth;

    if (leftEdgeOffset < 0) {
      return -leftEdgeOffset;
    } else if (rightEdgeOffset > containerWidth) {
      return containerWidth - rightEdgeOffset;
    } else {
      return 0;
    }
  }
  exports['default'] = utils;
  module.exports = exports['default'];
},{"./ownerDocument":272,"dom-helpers/query/offset":246,"dom-helpers/query/position":248,"dom-helpers/query/scrollTop":250}],272:[function(require,module,exports){
  'use strict';

  exports.__esModule = true;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _domHelpersOwnerDocument = require('dom-helpers/ownerDocument');

  var _domHelpersOwnerDocument2 = _interopRequireDefault(_domHelpersOwnerDocument);

  exports['default'] = function (componentOrElement) {
    return _domHelpersOwnerDocument2['default'](_react2['default'].findDOMNode(componentOrElement));
  };

  module.exports = exports['default'];
},{"dom-helpers/ownerDocument":242,"react":482}],273:[function(require,module,exports){
  'use strict';

  exports.__esModule = true;
  exports.errMsg = errMsg;
  exports.createChainableTypeChecker = createChainableTypeChecker;

  function errMsg(props, propName, componentName, msgContinuation) {
    return 'Invalid prop \'' + propName + '\' of value \'' + props[propName] + '\'' + (' supplied to \'' + componentName + '\'' + msgContinuation);
  }

  /**
   * Create chain-able isRequired validator
   *
   * Largely copied directly from:
   *  https://github.com/facebook/react/blob/0.11-stable/src/core/ReactPropTypes.js#L94
   */

  function createChainableTypeChecker(validate) {
    function checkType(isRequired, props, propName, componentName) {
      componentName = componentName || '<<anonymous>>';
      if (props[propName] == null) {
        if (isRequired) {
          return new Error('Required prop \'' + propName + '\' was not specified in \'' + componentName + '\'.');
        }
      } else {
        return validate(props, propName, componentName);
      }
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);

    return chainedCheckType;
  }
},{}],274:[function(require,module,exports){
  'use strict';

  exports.__esModule = true;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _common = require('./common');

  /**
   * Checks whether a prop provides a type of element.
   *
   * The type of element can be provided in two forms:
   * - tag name (string)
   * - a return value of React.createClass(...)
   *
   * @param props
   * @param propName
   * @param componentName
   * @returns {Error|undefined}
   */

  function validate(props, propName, componentName) {
    var errBeginning = _common.errMsg(props, propName, componentName, '. Expected an Element `type`');

    if (typeof props[propName] !== 'function') {
      if (_react2['default'].isValidElement(props[propName])) {
        return new Error(errBeginning + ', not an actual Element');
      }

      if (typeof props[propName] !== 'string') {
        return new Error(errBeginning + ' such as a tag name or return value of React.createClass(...)');
      }
    }
  }

  exports['default'] = _common.createChainableTypeChecker(validate);
  module.exports = exports['default'];
},{"./common":273,"react":482}],275:[function(require,module,exports){
  'use strict';

  exports.__esModule = true;

  var _common = require('./common');

  /**
   * Checks whether a prop provides a DOM element
   *
   * The element can be provided in two forms:
   * - Directly passed
   * - Or passed an object that has a `render` method
   *
   * @param props
   * @param propName
   * @param componentName
   * @returns {Error|undefined}
   */

  function validate(props, propName, componentName) {
    if (typeof props[propName] !== 'object' || typeof props[propName].render !== 'function' && props[propName].nodeType !== 1) {
      return new Error(_common.errMsg(props, propName, componentName, ', expected a DOM element or an object that has a `render` method'));
    }
  }

  exports['default'] = _common.createChainableTypeChecker(validate);
  module.exports = exports['default'];
},{"./common":273}],276:[function(require,module,exports){
  'use strict';

  exports.__esModule = true;

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  exports['default'] = createUncontrollable;

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _utils = require('./utils');

  var utils = _interopRequireWildcard(_utils);

  function createUncontrollable(mixins, set) {

    return uncontrollable;

    function uncontrollable(Component, controlledValues) {
      var methods = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];

      var displayName = Component.displayName || Component.name || 'Component',
        basePropTypes = utils.getType(Component).propTypes,
        propTypes;

      propTypes = utils.uncontrolledPropTypes(controlledValues, basePropTypes, displayName);

      methods = utils.transform(methods, function (obj, method) {
        obj[method] = function () {
          var _refs$inner;

          return (_refs$inner = this.refs.inner)[method].apply(_refs$inner, arguments);
        };
      }, {});

      var component = _react2['default'].createClass(_extends({

        displayName: 'Uncontrolled(' + displayName + ')',

        mixins: mixins,

        propTypes: propTypes

      }, methods, {

        componentWillMount: function componentWillMount() {
          var props = this.props,
            keys = Object.keys(controlledValues);

          this._values = utils.transform(keys, function (values, key) {
            values[key] = props[utils.defaultKey(key)];
          }, {});
        },

        /**
         * If a prop switches from controlled to Uncontrolled
         * reset its value to the defaultValue
         */
        componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
          var _this = this;

          var props = this.props,
            keys = Object.keys(controlledValues);

          keys.forEach(function (key) {
            if (utils.getValue(nextProps, key) === undefined && utils.getValue(props, key) !== undefined) {
              _this._values[key] = nextProps[utils.defaultKey(key)];
            }
          });
        },

        render: function render() {
          var _this2 = this;

          var newProps = {};
          var _props = this.props;
          var valueLink = _props.valueLink;
          var checkedLink = _props.checkedLink;

          var props = _objectWithoutProperties(_props, ['valueLink', 'checkedLink']);

          utils.each(controlledValues, function (handle, propName) {
            var linkPropName = utils.getLinkName(propName),
              prop = _this2.props[propName];

            if (linkPropName && !isProp(_this2.props, propName) && isProp(_this2.props, linkPropName)) {
              prop = _this2.props[linkPropName].value;
            }

            newProps[propName] = prop !== undefined ? prop : _this2._values[propName];

            newProps[handle] = setAndNotify.bind(_this2, propName);
          });

          newProps = _extends({}, props, newProps, { ref: 'inner' });

          return _react2['default'].createElement(Component, newProps);
        }

      }));

      component.ControlledComponent = Component;

      return component;

      function setAndNotify(propName, value) {
        var linkName = utils.getLinkName(propName),
          handler = this.props[controlledValues[propName]];

        if (linkName && isProp(this.props, linkName) && !handler) {
          handler = this.props[linkName].requestChange;
        }

        for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          args[_key - 2] = arguments[_key];
        }

        set(this, propName, handler, value, args);
      }

      function isProp(props, prop) {
        return props[prop] !== undefined;
      }
    }
  }

  module.exports = exports['default'];
},{"./utils":279,"react":482}],277:[function(require,module,exports){
  'use strict';

  exports.__esModule = true;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  var _createUncontrollable = require('./createUncontrollable');

  var _createUncontrollable2 = _interopRequireDefault(_createUncontrollable);

  var mixin = {
    shouldComponentUpdate: function shouldComponentUpdate() {
      //let the forceUpdate trigger the update
      return !this._notifying;
    }
  };

  function set(component, propName, handler, value, args) {
    if (handler) {
      component._notifying = true;
      handler.call.apply(handler, [component, value].concat(args));
      component._notifying = false;
    }

    component._values[propName] = value;
    component.forceUpdate();
  }

  exports['default'] = _createUncontrollable2['default']([mixin], set);
  module.exports = exports['default'];
},{"./createUncontrollable":276}],278:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule invariant
   */

  'use strict';

  /**
   * Use invariant() to assert state which your program assumes to be true.
   *
   * Provide sprintf-style format (only %s is supported) and arguments
   * to provide information about what broke and what you were
   * expecting.
   *
   * The invariant message will be stripped in production, but the invariant
   * will remain to ensure logic does not differ in production.
   */

  var invariant = function(condition, format, a, b, c, d, e, f) {
    if ("development" !== 'production') {
      if (format === undefined) {
        throw new Error('invariant requires an error message argument');
      }
    }

    if (!condition) {
      var error;
      if (format === undefined) {
        error = new Error(
          'Minified exception occurred; use the non-minified dev environment ' +
          'for the full error message and additional helpful warnings.'
        );
      } else {
        var args = [a, b, c, d, e, f];
        var argIndex = 0;
        error = new Error(
          'Invariant Violation: ' +
          format.replace(/%s/g, function() { return args[argIndex++]; })
        );
      }

      error.framesToPop = 1; // we don't care about invariant's own frame
      throw error;
    }
  };

  module.exports = invariant;

},{}],279:[function(require,module,exports){
  (function (process){
    'use strict';

    exports.__esModule = true;
    exports.customPropType = customPropType;
    exports.uncontrolledPropTypes = uncontrolledPropTypes;
    exports.getType = getType;
    exports.getValue = getValue;
    exports.getLinkName = getLinkName;
    exports.defaultKey = defaultKey;
    exports.chain = chain;
    exports.transform = transform;
    exports.each = each;
    exports.has = has;

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    var _react = require('react');

    var _react2 = _interopRequireDefault(_react);

    var _invariant = require('invariant');

    var _invariant2 = _interopRequireDefault(_invariant);

    function customPropType(handler, propType, name) {

      return function (props, propName) {

        if (props[propName] !== undefined) {
          if (!props[handler]) {
            return new Error('You have provided a `' + propName + '` prop to ' + '`' + name + '` without an `' + handler + '` handler. This will render a read-only field. ' + 'If the field should be mutable use `' + defaultKey(propName) + '`. Otherwise, set `' + handler + '`');
          }

          return propType && propType(props, propName, name);
        }
      };
    }

    function uncontrolledPropTypes(controlledValues, basePropTypes, displayName) {
      var propTypes = {};

      if (process.env.NODE_ENV !== 'production' && basePropTypes) {
        transform(controlledValues, function (obj, handler, prop) {
          var type = basePropTypes[prop];

          _invariant2['default'](typeof handler === 'string' && handler.trim().length, 'Uncontrollable - [%s]: the prop `%s` needs a valid handler key name in order to make it uncontrollable', displayName, prop);

          obj[prop] = customPropType(handler, type, displayName);

          if (type !== undefined) obj[defaultKey(prop)] = type;
        }, propTypes);
      }

      return propTypes;
    }

    var version = _react2['default'].version.split('.').map(parseFloat);

    exports.version = version;

    function getType(component) {
      if (version[0] === 0 && version[1] >= 13) return component;

      return component.type;
    }

    function getValue(props, name) {
      var linkPropName = getLinkName(name);

      if (linkPropName && !isProp(props, name) && isProp(props, linkPropName)) return props[linkPropName].value;

      return props[name];
    }

    function isProp(props, prop) {
      return props[prop] !== undefined;
    }

    function getLinkName(name) {
      return name === 'value' ? 'valueLink' : name === 'checked' ? 'checkedLink' : null;
    }

    function defaultKey(key) {
      return 'default' + key.charAt(0).toUpperCase() + key.substr(1);
    }

    function chain(thisArg, a, b) {
      return function chainedFunction() {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        a && a.call.apply(a, [thisArg].concat(args));
        b && b.call.apply(b, [thisArg].concat(args));
      };
    }

    function transform(obj, cb, seed) {
      each(obj, cb.bind(null, seed = seed || (Array.isArray(obj) ? [] : {})));
      return seed;
    }

    function each(obj, cb, thisArg) {
      if (Array.isArray(obj)) return obj.forEach(cb, thisArg);

      for (var key in obj) if (has(obj, key)) cb.call(thisArg, obj[key], key, obj);
    }

    function has(o, k) {
      return o ? Object.prototype.hasOwnProperty.call(o, k) : false;
    }
  }).call(this,require('_process'))
},{"_process":46,"invariant":278,"react":482}],280:[function(require,module,exports){
  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _reactBootstrapLibButton = require('react-bootstrap/lib/Button');

  var _reactBootstrapLibButton2 = _interopRequireDefault(_reactBootstrapLibButton);

  var _LinkMixin = require('./LinkMixin');

  var _LinkMixin2 = _interopRequireDefault(_LinkMixin);

  var ButtonLink = _react2['default'].createClass({
    displayName: 'ButtonLink',

    mixins: [_LinkMixin2['default']],

    render: function render() {
      return _react2['default'].createElement(
        _reactBootstrapLibButton2['default'],
        _extends({}, this.getLinkProps(), { ref: 'button' }),
        this.props.children
      );
    }
  });

  exports['default'] = ButtonLink;
  module.exports = exports['default'];
},{"./LinkMixin":281,"react":482,"react-bootstrap/lib/Button":123}],281:[function(require,module,exports){
  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  function isLeftClickEvent(event) {
    return event.button === 0;
  }

  function isModifiedEvent(event) {
    return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
  }

  exports['default'] = {
    propTypes: {
      active: _react2['default'].PropTypes.bool,
      activeClassName: _react2['default'].PropTypes.string.isRequired,
      disabled: _react2['default'].PropTypes.bool,
      to: _react2['default'].PropTypes.string.isRequired,
      params: _react2['default'].PropTypes.object,
      query: _react2['default'].PropTypes.object,
      onClick: _react2['default'].PropTypes.func
    },
    contextTypes: {
      router: _react2['default'].PropTypes.func.isRequired
    },

    getDefaultProps: function getDefaultProps() {
      return {
        activeClassName: 'active'
      };
    },

    /**
     * Returns props except those used by this Mixin
     * Gets "active" from router if needed.
     * Gets the value of the "href" attribute to use on the DOM element.
     * Sets "onClick" to "handleRouteTo".
     */
    getLinkProps: function getLinkProps() {
      var _props = this.props;
      var to = _props.to;
      var params = _props.params;
      var query = _props.query;

      var props = _objectWithoutProperties(_props, ['to', 'params', 'query']);

      if (this.props.active === undefined) {
        props.active = this.context.router.isActive(to, params, query);
      }

      props.href = this.context.router.makeHref(to, params, query);

      props.onClick = this.handleRouteTo;

      return props;
    },

    handleRouteTo: function handleRouteTo(event) {
      var allowTransition = true;
      var clickResult = undefined;

      if (this.props.disabled) {
        event.preventDefault();
        return;
      }

      if (this.props.onClick) {
        clickResult = this.props.onClick(event);
      }

      if (isModifiedEvent(event) || !isLeftClickEvent(event)) {
        return;
      }

      if (clickResult === false || event.defaultPrevented === true) {
        allowTransition = false;
      }

      event.preventDefault();

      if (allowTransition) {
        this.context.router.transitionTo(this.props.to, this.props.params, this.props.query);
      }
    }
  };
  module.exports = exports['default'];
},{"react":482}],282:[function(require,module,exports){
  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _reactBootstrapLibListGroupItem = require('react-bootstrap/lib/ListGroupItem');

  var _reactBootstrapLibListGroupItem2 = _interopRequireDefault(_reactBootstrapLibListGroupItem);

  var _LinkMixin = require('./LinkMixin');

  var _LinkMixin2 = _interopRequireDefault(_LinkMixin);

  var LinkGroupItemLink = _react2['default'].createClass({
    displayName: 'LinkGroupItemLink',

    mixins: [_LinkMixin2['default']],

    render: function render() {
      return _react2['default'].createElement(
        _reactBootstrapLibListGroupItem2['default'],
        _extends({}, this.getLinkProps(), { ref: 'listGroupItem' }),
        this.props.children
      );
    }
  });

  exports['default'] = LinkGroupItemLink;
  module.exports = exports['default'];
},{"./LinkMixin":281,"react":482,"react-bootstrap/lib/ListGroupItem":150}],283:[function(require,module,exports){
  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _reactBootstrapLibMenuItem = require('react-bootstrap/lib/MenuItem');

  var _reactBootstrapLibMenuItem2 = _interopRequireDefault(_reactBootstrapLibMenuItem);

  var _LinkMixin = require('./LinkMixin');

  var _LinkMixin2 = _interopRequireDefault(_LinkMixin);

  var MenuItemLink = _react2['default'].createClass({
    displayName: 'MenuItemLink',

    mixins: [_LinkMixin2['default']],

    render: function render() {
      var props = this.getLinkProps();
      delete props.onSelect; // this is done on the copy of this.props

      return _react2['default'].createElement(
        _reactBootstrapLibMenuItem2['default'],
        _extends({}, props, { ref: 'menuItem' }),
        this.props.children
      );
    }
  });

  exports['default'] = MenuItemLink;
  module.exports = exports['default'];
},{"./LinkMixin":281,"react":482,"react-bootstrap/lib/MenuItem":151}],284:[function(require,module,exports){
  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _reactBootstrapLibNavItem = require('react-bootstrap/lib/NavItem');

  var _reactBootstrapLibNavItem2 = _interopRequireDefault(_reactBootstrapLibNavItem);

  var _LinkMixin = require('./LinkMixin');

  var _LinkMixin2 = _interopRequireDefault(_LinkMixin);

  var NavItemLink = _react2['default'].createClass({
    displayName: 'NavItemLink',

    mixins: [_LinkMixin2['default']],

    render: function render() {
      return _react2['default'].createElement(
        _reactBootstrapLibNavItem2['default'],
        _extends({}, this.getLinkProps(), { ref: 'navItem' }),
        this.props.children
      );
    }
  });

  exports['default'] = NavItemLink;
  module.exports = exports['default'];
},{"./LinkMixin":281,"react":482,"react-bootstrap/lib/NavItem":160}],285:[function(require,module,exports){
  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _reactBootstrapLibPageItem = require('react-bootstrap/lib/PageItem');

  var _reactBootstrapLibPageItem2 = _interopRequireDefault(_reactBootstrapLibPageItem);

  var _LinkMixin = require('./LinkMixin');

  var _LinkMixin2 = _interopRequireDefault(_LinkMixin);

  var PageItemLink = _react2['default'].createClass({
    displayName: 'PageItemLink',

    mixins: [_LinkMixin2['default']],

    render: function render() {
      return _react2['default'].createElement(
        _reactBootstrapLibPageItem2['default'],
        _extends({}, this.getLinkProps(), { ref: 'pageItem' }),
        this.props.children
      );
    }
  });

  exports['default'] = PageItemLink;
  module.exports = exports['default'];
},{"./LinkMixin":281,"react":482,"react-bootstrap/lib/PageItem":165}],286:[function(require,module,exports){
  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _reactBootstrapLibOverlayTrigger = require('react-bootstrap/lib/OverlayTrigger');

  var _reactBootstrapLibOverlayTrigger2 = _interopRequireDefault(_reactBootstrapLibOverlayTrigger);

  exports['default'] = _reactBootstrapLibOverlayTrigger2['default'].withContext({
    router: _react2['default'].PropTypes.func
  });
  module.exports = exports['default'];
},{"react":482,"react-bootstrap/lib/OverlayTrigger":163}],287:[function(require,module,exports){
  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  var _react = require('react');

  var _react2 = _interopRequireDefault(_react);

  var _reactBootstrapLibThumbnail = require('react-bootstrap/lib/Thumbnail');

  var _reactBootstrapLibThumbnail2 = _interopRequireDefault(_reactBootstrapLibThumbnail);

  var _LinkMixin = require('./LinkMixin');

  var _LinkMixin2 = _interopRequireDefault(_LinkMixin);

  var ThumbnailLink = _react2['default'].createClass({
    displayName: 'ThumbnailLink',

    mixins: [_LinkMixin2['default']],

    render: function render() {
      return _react2['default'].createElement(
        _reactBootstrapLibThumbnail2['default'],
        _extends({}, this.getLinkProps(), { ref: 'thumbnail' }),
        this.props.children
      );
    }
  });

  exports['default'] = ThumbnailLink;
  module.exports = exports['default'];
},{"./LinkMixin":281,"react":482,"react-bootstrap/lib/Thumbnail":185}],288:[function(require,module,exports){
  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  var _ButtonLink2 = require('./ButtonLink');

  var _ButtonLink3 = _interopRequireDefault(_ButtonLink2);

  exports.ButtonLink = _ButtonLink3['default'];

  var _ListGroupItemLink2 = require('./ListGroupItemLink');

  var _ListGroupItemLink3 = _interopRequireDefault(_ListGroupItemLink2);

  exports.ListGroupItemLink = _ListGroupItemLink3['default'];

  var _MenuItemLink2 = require('./MenuItemLink');

  var _MenuItemLink3 = _interopRequireDefault(_MenuItemLink2);

  exports.MenuItemLink = _MenuItemLink3['default'];

  var _NavItemLink2 = require('./NavItemLink');

  var _NavItemLink3 = _interopRequireDefault(_NavItemLink2);

  exports.NavItemLink = _NavItemLink3['default'];

  var _PageItemLink2 = require('./PageItemLink');

  var _PageItemLink3 = _interopRequireDefault(_PageItemLink2);

  exports.PageItemLink = _PageItemLink3['default'];

  var _RouterOverlayTrigger2 = require('./RouterOverlayTrigger');

  var _RouterOverlayTrigger3 = _interopRequireDefault(_RouterOverlayTrigger2);

  exports.RouterOverlayTrigger = _RouterOverlayTrigger3['default'];

  var _ThumbnailLink2 = require('./ThumbnailLink');

  var _ThumbnailLink3 = _interopRequireDefault(_ThumbnailLink2);

  exports.ThumbnailLink = _ThumbnailLink3['default'];
},{"./ButtonLink":280,"./ListGroupItemLink":282,"./MenuItemLink":283,"./NavItemLink":284,"./PageItemLink":285,"./RouterOverlayTrigger":286,"./ThumbnailLink":287}],289:[function(require,module,exports){
  /**
   * Represents a cancellation caused by navigating away
   * before the previous transition has fully resolved.
   */
  "use strict";

  function Cancellation() {}

  module.exports = Cancellation;
},{}],290:[function(require,module,exports){
  'use strict';

  var invariant = require('react/lib/invariant');
  var canUseDOM = require('react/lib/ExecutionEnvironment').canUseDOM;

  var History = {

    /**
     * The current number of entries in the history.
     *
     * Note: This property is read-only.
     */
    length: 1,

    /**
     * Sends the browser back one entry in the history.
     */
    back: function back() {
      invariant(canUseDOM, 'Cannot use History.back without a DOM');

      // Do this first so that History.length will
      // be accurate in location change listeners.
      History.length -= 1;

      window.history.back();
    }

  };

  module.exports = History;
},{"react/lib/ExecutionEnvironment":347,"react/lib/invariant":462}],291:[function(require,module,exports){
  /* jshint -W084 */
  'use strict';

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  var PathUtils = require('./PathUtils');

  function deepSearch(route, pathname, query) {
    // Check the subtree first to find the most deeply-nested match.
    var childRoutes = route.childRoutes;
    if (childRoutes) {
      var match, childRoute;
      for (var i = 0, len = childRoutes.length; i < len; ++i) {
        childRoute = childRoutes[i];

        if (childRoute.isDefault || childRoute.isNotFound) continue; // Check these in order later.

        if (match = deepSearch(childRoute, pathname, query)) {
          // A route in the subtree matched! Add this route and we're done.
          match.routes.unshift(route);
          return match;
        }
      }
    }

    // No child routes matched; try the default route.
    var defaultRoute = route.defaultRoute;
    if (defaultRoute && (params = PathUtils.extractParams(defaultRoute.path, pathname))) return new Match(pathname, params, query, [route, defaultRoute]);

    // Does the "not found" route match?
    var notFoundRoute = route.notFoundRoute;
    if (notFoundRoute && (params = PathUtils.extractParams(notFoundRoute.path, pathname))) return new Match(pathname, params, query, [route, notFoundRoute]);

    // Last attempt: check this route.
    var params = PathUtils.extractParams(route.path, pathname);
    if (params) return new Match(pathname, params, query, [route]);

    return null;
  }

  var Match = (function () {
    _createClass(Match, null, [{
      key: 'findMatch',

      /**
       * Attempts to match depth-first a route in the given route's
       * subtree against the given path and returns the match if it
       * succeeds, null if no match can be made.
       */
      value: function findMatch(routes, path) {
        var pathname = PathUtils.withoutQuery(path);
        var query = PathUtils.extractQuery(path);
        var match = null;

        for (var i = 0, len = routes.length; match == null && i < len; ++i) match = deepSearch(routes[i], pathname, query);

        return match;
      }
    }]);

    function Match(pathname, params, query, routes) {
      _classCallCheck(this, Match);

      this.pathname = pathname;
      this.params = params;
      this.query = query;
      this.routes = routes;
    }

    return Match;
  })();

  module.exports = Match;
},{"./PathUtils":293}],292:[function(require,module,exports){
  'use strict';

  var PropTypes = require('./PropTypes');

  /**
   * A mixin for components that modify the URL.
   *
   * Example:
   *
   *   var MyLink = React.createClass({
 *     mixins: [ Router.Navigation ],
 *     handleClick(event) {
 *       event.preventDefault();
 *       this.transitionTo('aRoute', { the: 'params' }, { the: 'query' });
 *     },
 *     render() {
 *       return (
 *         <a onClick={this.handleClick}>Click me!</a>
 *       );
 *     }
 *   });
   */
  var Navigation = {

    contextTypes: {
      router: PropTypes.router.isRequired
    },

    /**
     * Returns an absolute URL path created from the given route
     * name, URL parameters, and query values.
     */
    makePath: function makePath(to, params, query) {
      return this.context.router.makePath(to, params, query);
    },

    /**
     * Returns a string that may safely be used as the href of a
     * link to the route with the given name.
     */
    makeHref: function makeHref(to, params, query) {
      return this.context.router.makeHref(to, params, query);
    },

    /**
     * Transitions to the URL specified in the arguments by pushing
     * a new URL onto the history stack.
     */
    transitionTo: function transitionTo(to, params, query) {
      this.context.router.transitionTo(to, params, query);
    },

    /**
     * Transitions to the URL specified in the arguments by replacing
     * the current URL in the history stack.
     */
    replaceWith: function replaceWith(to, params, query) {
      this.context.router.replaceWith(to, params, query);
    },

    /**
     * Transitions to the previous URL.
     */
    goBack: function goBack() {
      return this.context.router.goBack();
    }

  };

  module.exports = Navigation;
},{"./PropTypes":294}],293:[function(require,module,exports){
  'use strict';

  var invariant = require('react/lib/invariant');
  var assign = require('object-assign');
  var qs = require('qs');

  var paramCompileMatcher = /:([a-zA-Z_$][a-zA-Z0-9_$]*)|[*.()\[\]\\+|{}^$]/g;
  var paramInjectMatcher = /:([a-zA-Z_$][a-zA-Z0-9_$?]*[?]?)|[*]/g;
  var paramInjectTrailingSlashMatcher = /\/\/\?|\/\?\/|\/\?(?![^\/=]+=.*$)/g;
  var queryMatcher = /\?(.*)$/;

  var _compiledPatterns = {};

  function compilePattern(pattern) {
    if (!(pattern in _compiledPatterns)) {
      var paramNames = [];
      var source = pattern.replace(paramCompileMatcher, function (match, paramName) {
        if (paramName) {
          paramNames.push(paramName);
          return '([^/?#]+)';
        } else if (match === '*') {
          paramNames.push('splat');
          return '(.*?)';
        } else {
          return '\\' + match;
        }
      });

      _compiledPatterns[pattern] = {
        matcher: new RegExp('^' + source + '$', 'i'),
        paramNames: paramNames
      };
    }

    return _compiledPatterns[pattern];
  }

  var PathUtils = {

    /**
     * Returns true if the given path is absolute.
     */
    isAbsolute: function isAbsolute(path) {
      return path.charAt(0) === '/';
    },

    /**
     * Joins two URL paths together.
     */
    join: function join(a, b) {
      return a.replace(/\/*$/, '/') + b;
    },

    /**
     * Returns an array of the names of all parameters in the given pattern.
     */
    extractParamNames: function extractParamNames(pattern) {
      return compilePattern(pattern).paramNames;
    },

    /**
     * Extracts the portions of the given URL path that match the given pattern
     * and returns an object of param name => value pairs. Returns null if the
     * pattern does not match the given path.
     */
    extractParams: function extractParams(pattern, path) {
      var _compilePattern = compilePattern(pattern);

      var matcher = _compilePattern.matcher;
      var paramNames = _compilePattern.paramNames;

      var match = path.match(matcher);

      if (!match) return null;

      var params = {};

      paramNames.forEach(function (paramName, index) {
        params[paramName] = match[index + 1];
      });

      return params;
    },

    /**
     * Returns a version of the given route path with params interpolated. Throws
     * if there is a dynamic segment of the route path for which there is no param.
     */
    injectParams: function injectParams(pattern, params) {
      params = params || {};

      var splatIndex = 0;

      return pattern.replace(paramInjectMatcher, function (match, paramName) {
        paramName = paramName || 'splat';

        // If param is optional don't check for existence
        if (paramName.slice(-1) === '?') {
          paramName = paramName.slice(0, -1);

          if (params[paramName] == null) return '';
        } else {
          invariant(params[paramName] != null, 'Missing "%s" parameter for path "%s"', paramName, pattern);
        }

        var segment;
        if (paramName === 'splat' && Array.isArray(params[paramName])) {
          segment = params[paramName][splatIndex++];

          invariant(segment != null, 'Missing splat # %s for path "%s"', splatIndex, pattern);
        } else {
          segment = params[paramName];
        }

        return segment;
      }).replace(paramInjectTrailingSlashMatcher, '/');
    },

    /**
     * Returns an object that is the result of parsing any query string contained
     * in the given path, null if the path contains no query string.
     */
    extractQuery: function extractQuery(path) {
      var match = path.match(queryMatcher);
      return match && qs.parse(match[1]);
    },

    /**
     * Returns a version of the given path without the query string.
     */
    withoutQuery: function withoutQuery(path) {
      return path.replace(queryMatcher, '');
    },

    /**
     * Returns a version of the given path with the parameters in the given
     * query merged into the query string.
     */
    withQuery: function withQuery(path, query) {
      var existingQuery = PathUtils.extractQuery(path);

      if (existingQuery) query = query ? assign(existingQuery, query) : existingQuery;

      var queryString = qs.stringify(query, { arrayFormat: 'brackets' });

      if (queryString) return PathUtils.withoutQuery(path) + '?' + queryString;

      return PathUtils.withoutQuery(path);
    }

  };

  module.exports = PathUtils;
},{"object-assign":322,"qs":323,"react/lib/invariant":462}],294:[function(require,module,exports){
  'use strict';

  var assign = require('react/lib/Object.assign');
  var ReactPropTypes = require('react').PropTypes;
  var Route = require('./Route');

  var PropTypes = assign({}, ReactPropTypes, {

    /**
     * Indicates that a prop should be falsy.
     */
    falsy: function falsy(props, propName, componentName) {
      if (props[propName]) return new Error('<' + componentName + '> should not have a "' + propName + '" prop');
    },

    /**
     * Indicates that a prop should be a Route object.
     */
    route: ReactPropTypes.instanceOf(Route),

    /**
     * Indicates that a prop should be a Router object.
     */
    //router: ReactPropTypes.instanceOf(Router) // TODO
    router: ReactPropTypes.func

  });

  module.exports = PropTypes;
},{"./Route":296,"react":482,"react/lib/Object.assign":353}],295:[function(require,module,exports){
  /**
   * Encapsulates a redirect to the given route.
   */
  "use strict";

  function Redirect(to, params, query) {
    this.to = to;
    this.params = params;
    this.query = query;
  }

  module.exports = Redirect;
},{}],296:[function(require,module,exports){
  'use strict';

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  var assign = require('react/lib/Object.assign');
  var invariant = require('react/lib/invariant');
  var warning = require('react/lib/warning');
  var PathUtils = require('./PathUtils');

  var _currentRoute;

  var Route = (function () {
    _createClass(Route, null, [{
      key: 'createRoute',

      /**
       * Creates and returns a new route. Options may be a URL pathname string
       * with placeholders for named params or an object with any of the following
       * properties:
       *
       * - name                     The name of the route. This is used to lookup a
       *                            route relative to its parent route and should be
       *                            unique among all child routes of the same parent
       * - path                     A URL pathname string with optional placeholders
       *                            that specify the names of params to extract from
       *                            the URL when the path matches. Defaults to `/${name}`
       *                            when there is a name given, or the path of the parent
       *                            route, or /
       * - ignoreScrollBehavior     True to make this route (and all descendants) ignore
       *                            the scroll behavior of the router
       * - isDefault                True to make this route the default route among all
       *                            its siblings
       * - isNotFound               True to make this route the "not found" route among
       *                            all its siblings
       * - onEnter                  A transition hook that will be called when the
       *                            router is going to enter this route
       * - onLeave                  A transition hook that will be called when the
       *                            router is going to leave this route
       * - handler                  A React component that will be rendered when
       *                            this route is active
       * - parentRoute              The parent route to use for this route. This option
       *                            is automatically supplied when creating routes inside
       *                            the callback to another invocation of createRoute. You
       *                            only ever need to use this when declaring routes
       *                            independently of one another to manually piece together
       *                            the route hierarchy
       *
       * The callback may be used to structure your route hierarchy. Any call to
       * createRoute, createDefaultRoute, createNotFoundRoute, or createRedirect
       * inside the callback automatically uses this route as its parent.
       */
      value: function createRoute(options, callback) {
        options = options || {};

        if (typeof options === 'string') options = { path: options };

        var parentRoute = _currentRoute;

        if (parentRoute) {
          warning(options.parentRoute == null || options.parentRoute === parentRoute, 'You should not use parentRoute with createRoute inside another route\'s child callback; it is ignored');
        } else {
          parentRoute = options.parentRoute;
        }

        var name = options.name;
        var path = options.path || name;

        if (path && !(options.isDefault || options.isNotFound)) {
          if (PathUtils.isAbsolute(path)) {
            if (parentRoute) {
              invariant(path === parentRoute.path || parentRoute.paramNames.length === 0, 'You cannot nest path "%s" inside "%s"; the parent requires URL parameters', path, parentRoute.path);
            }
          } else if (parentRoute) {
            // Relative paths extend their parent.
            path = PathUtils.join(parentRoute.path, path);
          } else {
            path = '/' + path;
          }
        } else {
          path = parentRoute ? parentRoute.path : '/';
        }

        if (options.isNotFound && !/\*$/.test(path)) path += '*'; // Auto-append * to the path of not found routes.

        var route = new Route(name, path, options.ignoreScrollBehavior, options.isDefault, options.isNotFound, options.onEnter, options.onLeave, options.handler);

        if (parentRoute) {
          if (route.isDefault) {
            invariant(parentRoute.defaultRoute == null, '%s may not have more than one default route', parentRoute);

            parentRoute.defaultRoute = route;
          } else if (route.isNotFound) {
            invariant(parentRoute.notFoundRoute == null, '%s may not have more than one not found route', parentRoute);

            parentRoute.notFoundRoute = route;
          }

          parentRoute.appendChild(route);
        }

        // Any routes created in the callback
        // use this route as their parent.
        if (typeof callback === 'function') {
          var currentRoute = _currentRoute;
          _currentRoute = route;
          callback.call(route, route);
          _currentRoute = currentRoute;
        }

        return route;
      }

      /**
       * Creates and returns a route that is rendered when its parent matches
       * the current URL.
       */
    }, {
      key: 'createDefaultRoute',
      value: function createDefaultRoute(options) {
        return Route.createRoute(assign({}, options, { isDefault: true }));
      }

      /**
       * Creates and returns a route that is rendered when its parent matches
       * the current URL but none of its siblings do.
       */
    }, {
      key: 'createNotFoundRoute',
      value: function createNotFoundRoute(options) {
        return Route.createRoute(assign({}, options, { isNotFound: true }));
      }

      /**
       * Creates and returns a route that automatically redirects the transition
       * to another route. In addition to the normal options to createRoute, this
       * function accepts the following options:
       *
       * - from         An alias for the `path` option. Defaults to *
       * - to           The path/route/route name to redirect to
       * - params       The params to use in the redirect URL. Defaults
       *                to using the current params
       * - query        The query to use in the redirect URL. Defaults
       *                to using the current query
       */
    }, {
      key: 'createRedirect',
      value: function createRedirect(options) {
        return Route.createRoute(assign({}, options, {
          path: options.path || options.from || '*',
          onEnter: function onEnter(transition, params, query) {
            transition.redirect(options.to, options.params || params, options.query || query);
          }
        }));
      }
    }]);

    function Route(name, path, ignoreScrollBehavior, isDefault, isNotFound, onEnter, onLeave, handler) {
      _classCallCheck(this, Route);

      this.name = name;
      this.path = path;
      this.paramNames = PathUtils.extractParamNames(this.path);
      this.ignoreScrollBehavior = !!ignoreScrollBehavior;
      this.isDefault = !!isDefault;
      this.isNotFound = !!isNotFound;
      this.onEnter = onEnter;
      this.onLeave = onLeave;
      this.handler = handler;
    }

    /**
     * Appends the given route to this route's child routes.
     */

    _createClass(Route, [{
      key: 'appendChild',
      value: function appendChild(route) {
        invariant(route instanceof Route, 'route.appendChild must use a valid Route');

        if (!this.childRoutes) this.childRoutes = [];

        this.childRoutes.push(route);
      }
    }, {
      key: 'toString',
      value: function toString() {
        var string = '<Route';

        if (this.name) string += ' name="' + this.name + '"';

        string += ' path="' + this.path + '">';

        return string;
      }
    }]);

    return Route;
  })();

  module.exports = Route;
},{"./PathUtils":293,"react/lib/Object.assign":353,"react/lib/invariant":462,"react/lib/warning":481}],297:[function(require,module,exports){
  'use strict';

  var invariant = require('react/lib/invariant');
  var canUseDOM = require('react/lib/ExecutionEnvironment').canUseDOM;
  var getWindowScrollPosition = require('./getWindowScrollPosition');

  function shouldUpdateScroll(state, prevState) {
    if (!prevState) return true;

    // Don't update scroll position when only the query has changed.
    if (state.pathname === prevState.pathname) return false;

    var routes = state.routes;
    var prevRoutes = prevState.routes;

    var sharedAncestorRoutes = routes.filter(function (route) {
      return prevRoutes.indexOf(route) !== -1;
    });

    return !sharedAncestorRoutes.some(function (route) {
      return route.ignoreScrollBehavior;
    });
  }

  /**
   * Provides the router with the ability to manage window scroll position
   * according to its scroll behavior.
   */
  var ScrollHistory = {

    statics: {

      /**
       * Records curent scroll position as the last known position for the given URL path.
       */
      recordScrollPosition: function recordScrollPosition(path) {
        if (!this.scrollHistory) this.scrollHistory = {};

        this.scrollHistory[path] = getWindowScrollPosition();
      },

      /**
       * Returns the last known scroll position for the given URL path.
       */
      getScrollPosition: function getScrollPosition(path) {
        if (!this.scrollHistory) this.scrollHistory = {};

        return this.scrollHistory[path] || null;
      }

    },

    componentWillMount: function componentWillMount() {
      invariant(this.constructor.getScrollBehavior() == null || canUseDOM, 'Cannot use scroll behavior without a DOM');
    },

    componentDidMount: function componentDidMount() {
      this._updateScroll();
    },

    componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
      this._updateScroll(prevState);
    },

    _updateScroll: function _updateScroll(prevState) {
      if (!shouldUpdateScroll(this.state, prevState)) return;

      var scrollBehavior = this.constructor.getScrollBehavior();

      if (scrollBehavior) scrollBehavior.updateScrollPosition(this.constructor.getScrollPosition(this.state.path), this.state.action);
    }

  };

  module.exports = ScrollHistory;
},{"./getWindowScrollPosition":312,"react/lib/ExecutionEnvironment":347,"react/lib/invariant":462}],298:[function(require,module,exports){
  'use strict';

  var PropTypes = require('./PropTypes');

  /**
   * A mixin for components that need to know the path, routes, URL
   * params and query that are currently active.
   *
   * Example:
   *
   *   var AboutLink = React.createClass({
 *     mixins: [ Router.State ],
 *     render() {
 *       var className = this.props.className;
 *
 *       if (this.isActive('about'))
 *         className += ' is-active';
 *
 *       return React.DOM.a({ className: className }, this.props.children);
 *     }
 *   });
   */
  var State = {

    contextTypes: {
      router: PropTypes.router.isRequired
    },

    /**
     * Returns the current URL path.
     */
    getPath: function getPath() {
      return this.context.router.getCurrentPath();
    },

    /**
     * Returns the current URL path without the query string.
     */
    getPathname: function getPathname() {
      return this.context.router.getCurrentPathname();
    },

    /**
     * Returns an object of the URL params that are currently active.
     */
    getParams: function getParams() {
      return this.context.router.getCurrentParams();
    },

    /**
     * Returns an object of the query params that are currently active.
     */
    getQuery: function getQuery() {
      return this.context.router.getCurrentQuery();
    },

    /**
     * Returns an array of the routes that are currently active.
     */
    getRoutes: function getRoutes() {
      return this.context.router.getCurrentRoutes();
    },

    /**
     * A helper method to determine if a given route, params, and query
     * are active.
     */
    isActive: function isActive(to, params, query) {
      return this.context.router.isActive(to, params, query);
    }

  };

  module.exports = State;
},{"./PropTypes":294}],299:[function(require,module,exports){
  /* jshint -W058 */

  'use strict';

  var Cancellation = require('./Cancellation');
  var Redirect = require('./Redirect');

  /**
   * Encapsulates a transition to a given path.
   *
   * The willTransitionTo and willTransitionFrom handlers receive
   * an instance of this class as their first argument.
   */
  function Transition(path, retry) {
    this.path = path;
    this.abortReason = null;
    // TODO: Change this to router.retryTransition(transition)
    this.retry = retry.bind(this);
  }

  Transition.prototype.abort = function (reason) {
    if (this.abortReason == null) this.abortReason = reason || 'ABORT';
  };

  Transition.prototype.redirect = function (to, params, query) {
    this.abort(new Redirect(to, params, query));
  };

  Transition.prototype.cancel = function () {
    this.abort(new Cancellation());
  };

  Transition.from = function (transition, routes, components, callback) {
    routes.reduce(function (callback, route, index) {
      return function (error) {
        if (error || transition.abortReason) {
          callback(error);
        } else if (route.onLeave) {
          try {
            route.onLeave(transition, components[index], callback);

            // If there is no callback in the argument list, call it automatically.
            if (route.onLeave.length < 3) callback();
          } catch (e) {
            callback(e);
          }
        } else {
          callback();
        }
      };
    }, callback)();
  };

  Transition.to = function (transition, routes, params, query, callback) {
    routes.reduceRight(function (callback, route) {
      return function (error) {
        if (error || transition.abortReason) {
          callback(error);
        } else if (route.onEnter) {
          try {
            route.onEnter(transition, params, query, callback);

            // If there is no callback in the argument list, call it automatically.
            if (route.onEnter.length < 4) callback();
          } catch (e) {
            callback(e);
          }
        } else {
          callback();
        }
      };
    }, callback)();
  };

  module.exports = Transition;
},{"./Cancellation":289,"./Redirect":295}],300:[function(require,module,exports){
  /**
   * Actions that modify the URL.
   */
  'use strict';

  var LocationActions = {

    /**
     * Indicates a new location is being pushed to the history stack.
     */
    PUSH: 'push',

    /**
     * Indicates the current location should be replaced.
     */
    REPLACE: 'replace',

    /**
     * Indicates the most recent entry should be removed from the history stack.
     */
    POP: 'pop'

  };

  module.exports = LocationActions;
},{}],301:[function(require,module,exports){
  'use strict';

  var LocationActions = require('../actions/LocationActions');

  /**
   * A scroll behavior that attempts to imitate the default behavior
   * of modern browsers.
   */
  var ImitateBrowserBehavior = {

    updateScrollPosition: function updateScrollPosition(position, actionType) {
      switch (actionType) {
        case LocationActions.PUSH:
        case LocationActions.REPLACE:
          window.scrollTo(0, 0);
          break;
        case LocationActions.POP:
          if (position) {
            window.scrollTo(position.x, position.y);
          } else {
            window.scrollTo(0, 0);
          }
          break;
      }
    }

  };

  module.exports = ImitateBrowserBehavior;
},{"../actions/LocationActions":300}],302:[function(require,module,exports){
  /**
   * A scroll behavior that always scrolls to the top of the page
   * after a transition.
   */
  "use strict";

  var ScrollToTopBehavior = {

    updateScrollPosition: function updateScrollPosition() {
      window.scrollTo(0, 0);
    }

  };

  module.exports = ScrollToTopBehavior;
},{}],303:[function(require,module,exports){
  /**
   * This component is necessary to get around a context warning
   * present in React 0.13.0. It sovles this by providing a separation
   * between the "owner" and "parent" contexts.
   */

  'use strict';

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var React = require('react');

  var ContextWrapper = (function (_React$Component) {
    _inherits(ContextWrapper, _React$Component);

    function ContextWrapper() {
      _classCallCheck(this, ContextWrapper);

      _get(Object.getPrototypeOf(ContextWrapper.prototype), 'constructor', this).apply(this, arguments);
    }

    _createClass(ContextWrapper, [{
      key: 'render',
      value: function render() {
        return this.props.children;
      }
    }]);

    return ContextWrapper;
  })(React.Component);

  module.exports = ContextWrapper;
},{"react":482}],304:[function(require,module,exports){
  'use strict';

  var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var PropTypes = require('../PropTypes');
  var RouteHandler = require('./RouteHandler');
  var Route = require('./Route');

  /**
   * A <DefaultRoute> component is a special kind of <Route> that
   * renders when its parent matches but none of its siblings do.
   * Only one such route may be used at any given level in the
   * route hierarchy.
   */

  var DefaultRoute = (function (_Route) {
    _inherits(DefaultRoute, _Route);

    function DefaultRoute() {
      _classCallCheck(this, DefaultRoute);

      _get(Object.getPrototypeOf(DefaultRoute.prototype), 'constructor', this).apply(this, arguments);
    }

    // TODO: Include these in the above class definition
    // once we can use ES7 property initializers.
    // https://github.com/babel/babel/issues/619

    return DefaultRoute;
  })(Route);

  DefaultRoute.propTypes = {
    name: PropTypes.string,
    path: PropTypes.falsy,
    children: PropTypes.falsy,
    handler: PropTypes.func.isRequired
  };

  DefaultRoute.defaultProps = {
    handler: RouteHandler
  };

  module.exports = DefaultRoute;
},{"../PropTypes":294,"./Route":308,"./RouteHandler":309}],305:[function(require,module,exports){
  'use strict';

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var React = require('react');
  var assign = require('react/lib/Object.assign');
  var PropTypes = require('../PropTypes');

  function isLeftClickEvent(event) {
    return event.button === 0;
  }

  function isModifiedEvent(event) {
    return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
  }

  /**
   * <Link> components are used to create an <a> element that links to a route.
   * When that route is active, the link gets an "active" class name (or the
   * value of its `activeClassName` prop).
   *
   * For example, assuming you have the following route:
   *
   *   <Route name="showPost" path="/posts/:postID" handler={Post}/>
   *
   * You could use the following component to link to that route:
   *
   *   <Link to="showPost" params={{ postID: "123" }} />
   *
   * In addition to params, links may pass along query string parameters
   * using the `query` prop.
   *
   *   <Link to="showPost" params={{ postID: "123" }} query={{ show:true }}/>
   */

  var Link = (function (_React$Component) {
    _inherits(Link, _React$Component);

    function Link() {
      _classCallCheck(this, Link);

      _get(Object.getPrototypeOf(Link.prototype), 'constructor', this).apply(this, arguments);
    }

    // TODO: Include these in the above class definition
    // once we can use ES7 property initializers.
    // https://github.com/babel/babel/issues/619

    _createClass(Link, [{
      key: 'handleClick',
      value: function handleClick(event) {
        var allowTransition = true;
        var clickResult;

        if (this.props.onClick) clickResult = this.props.onClick(event);

        if (isModifiedEvent(event) || !isLeftClickEvent(event)) return;

        if (clickResult === false || event.defaultPrevented === true) allowTransition = false;

        event.preventDefault();

        if (allowTransition) this.context.router.transitionTo(this.props.to, this.props.params, this.props.query);
      }

      /**
       * Returns the value of the "href" attribute to use on the DOM element.
       */
    }, {
      key: 'getHref',
      value: function getHref() {
        return this.context.router.makeHref(this.props.to, this.props.params, this.props.query);
      }

      /**
       * Returns the value of the "class" attribute to use on the DOM element, which contains
       * the value of the activeClassName property when this <Link> is active.
       */
    }, {
      key: 'getClassName',
      value: function getClassName() {
        var className = this.props.className;

        if (this.getActiveState()) className += ' ' + this.props.activeClassName;

        return className;
      }
    }, {
      key: 'getActiveState',
      value: function getActiveState() {
        return this.context.router.isActive(this.props.to, this.props.params, this.props.query);
      }
    }, {
      key: 'render',
      value: function render() {
        var props = assign({}, this.props, {
          href: this.getHref(),
          className: this.getClassName(),
          onClick: this.handleClick.bind(this)
        });

        if (props.activeStyle && this.getActiveState()) props.style = props.activeStyle;

        return React.DOM.a(props, this.props.children);
      }
    }]);

    return Link;
  })(React.Component);

  Link.contextTypes = {
    router: PropTypes.router.isRequired
  };

  Link.propTypes = {
    activeClassName: PropTypes.string.isRequired,
    to: PropTypes.oneOfType([PropTypes.string, PropTypes.route]).isRequired,
    params: PropTypes.object,
    query: PropTypes.object,
    activeStyle: PropTypes.object,
    onClick: PropTypes.func
  };

  Link.defaultProps = {
    activeClassName: 'active',
    className: ''
  };

  module.exports = Link;
},{"../PropTypes":294,"react":482,"react/lib/Object.assign":353}],306:[function(require,module,exports){
  'use strict';

  var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var PropTypes = require('../PropTypes');
  var RouteHandler = require('./RouteHandler');
  var Route = require('./Route');

  /**
   * A <NotFoundRoute> is a special kind of <Route> that
   * renders when the beginning of its parent's path matches
   * but none of its siblings do, including any <DefaultRoute>.
   * Only one such route may be used at any given level in the
   * route hierarchy.
   */

  var NotFoundRoute = (function (_Route) {
    _inherits(NotFoundRoute, _Route);

    function NotFoundRoute() {
      _classCallCheck(this, NotFoundRoute);

      _get(Object.getPrototypeOf(NotFoundRoute.prototype), 'constructor', this).apply(this, arguments);
    }

    // TODO: Include these in the above class definition
    // once we can use ES7 property initializers.
    // https://github.com/babel/babel/issues/619

    return NotFoundRoute;
  })(Route);

  NotFoundRoute.propTypes = {
    name: PropTypes.string,
    path: PropTypes.falsy,
    children: PropTypes.falsy,
    handler: PropTypes.func.isRequired
  };

  NotFoundRoute.defaultProps = {
    handler: RouteHandler
  };

  module.exports = NotFoundRoute;
},{"../PropTypes":294,"./Route":308,"./RouteHandler":309}],307:[function(require,module,exports){
  'use strict';

  var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var PropTypes = require('../PropTypes');
  var Route = require('./Route');

  /**
   * A <Redirect> component is a special kind of <Route> that always
   * redirects to another route when it matches.
   */

  var Redirect = (function (_Route) {
    _inherits(Redirect, _Route);

    function Redirect() {
      _classCallCheck(this, Redirect);

      _get(Object.getPrototypeOf(Redirect.prototype), 'constructor', this).apply(this, arguments);
    }

    // TODO: Include these in the above class definition
    // once we can use ES7 property initializers.
    // https://github.com/babel/babel/issues/619

    return Redirect;
  })(Route);

  Redirect.propTypes = {
    path: PropTypes.string,
    from: PropTypes.string, // Alias for path.
    to: PropTypes.string,
    handler: PropTypes.falsy
  };

  // Redirects should not have a default handler
  Redirect.defaultProps = {};

  module.exports = Redirect;
},{"../PropTypes":294,"./Route":308}],308:[function(require,module,exports){
  'use strict';

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var React = require('react');
  var invariant = require('react/lib/invariant');
  var PropTypes = require('../PropTypes');
  var RouteHandler = require('./RouteHandler');

  /**
   * <Route> components specify components that are rendered to the page when the
   * URL matches a given pattern.
   *
   * Routes are arranged in a nested tree structure. When a new URL is requested,
   * the tree is searched depth-first to find a route whose path matches the URL.
   * When one is found, all routes in the tree that lead to it are considered
   * "active" and their components are rendered into the DOM, nested in the same
   * order as they are in the tree.
   *
   * The preferred way to configure a router is using JSX. The XML-like syntax is
   * a great way to visualize how routes are laid out in an application.
   *
   *   var routes = [
   *     <Route handler={App}>
   *       <Route name="login" handler={Login}/>
   *       <Route name="logout" handler={Logout}/>
   *       <Route name="about" handler={About}/>
   *     </Route>
   *   ];
   *
   *   Router.run(routes, function (Handler) {
 *     React.render(<Handler/>, document.body);
 *   });
   *
   * Handlers for Route components that contain children can render their active
   * child route using a <RouteHandler> element.
   *
   *   var App = React.createClass({
 *     render: function () {
 *       return (
 *         <div className="application">
 *           <RouteHandler/>
 *         </div>
 *       );
 *     }
 *   });
   *
   * If no handler is provided for the route, it will render a matched child route.
   */

  var Route = (function (_React$Component) {
    _inherits(Route, _React$Component);

    function Route() {
      _classCallCheck(this, Route);

      _get(Object.getPrototypeOf(Route.prototype), 'constructor', this).apply(this, arguments);
    }

    // TODO: Include these in the above class definition
    // once we can use ES7 property initializers.
    // https://github.com/babel/babel/issues/619

    _createClass(Route, [{
      key: 'render',
      value: function render() {
        invariant(false, '%s elements are for router configuration only and should not be rendered', this.constructor.name);
      }
    }]);

    return Route;
  })(React.Component);

  Route.propTypes = {
    name: PropTypes.string,
    path: PropTypes.string,
    handler: PropTypes.func,
    ignoreScrollBehavior: PropTypes.bool
  };

  Route.defaultProps = {
    handler: RouteHandler
  };

  module.exports = Route;
},{"../PropTypes":294,"./RouteHandler":309,"react":482,"react/lib/invariant":462}],309:[function(require,module,exports){
  'use strict';

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var React = require('react');
  var ContextWrapper = require('./ContextWrapper');
  var assign = require('react/lib/Object.assign');
  var PropTypes = require('../PropTypes');

  var REF_NAME = '__routeHandler__';

  /**
   * A <RouteHandler> component renders the active child route handler
   * when routes are nested.
   */

  var RouteHandler = (function (_React$Component) {
    _inherits(RouteHandler, _React$Component);

    function RouteHandler() {
      _classCallCheck(this, RouteHandler);

      _get(Object.getPrototypeOf(RouteHandler.prototype), 'constructor', this).apply(this, arguments);
    }

    // TODO: Include these in the above class definition
    // once we can use ES7 property initializers.
    // https://github.com/babel/babel/issues/619

    _createClass(RouteHandler, [{
      key: 'getChildContext',
      value: function getChildContext() {
        return {
          routeDepth: this.context.routeDepth + 1
        };
      }
    }, {
      key: 'componentDidMount',
      value: function componentDidMount() {
        this._updateRouteComponent(this.refs[REF_NAME]);
      }
    }, {
      key: 'componentDidUpdate',
      value: function componentDidUpdate() {
        this._updateRouteComponent(this.refs[REF_NAME]);
      }
    }, {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        this._updateRouteComponent(null);
      }
    }, {
      key: '_updateRouteComponent',
      value: function _updateRouteComponent(component) {
        this.context.router.setRouteComponentAtDepth(this.getRouteDepth(), component);
      }
    }, {
      key: 'getRouteDepth',
      value: function getRouteDepth() {
        return this.context.routeDepth;
      }
    }, {
      key: 'createChildRouteHandler',
      value: function createChildRouteHandler(props) {
        var route = this.context.router.getRouteAtDepth(this.getRouteDepth());

        if (route == null) return null;

        var childProps = assign({}, props || this.props, {
          ref: REF_NAME,
          params: this.context.router.getCurrentParams(),
          query: this.context.router.getCurrentQuery()
        });

        return React.createElement(route.handler, childProps);
      }
    }, {
      key: 'render',
      value: function render() {
        var handler = this.createChildRouteHandler();
        // <script/> for things like <CSSTransitionGroup/> that don't like null
        return handler ? React.createElement(
          ContextWrapper,
          null,
          handler
        ) : React.createElement('script', null);
      }
    }]);

    return RouteHandler;
  })(React.Component);

  RouteHandler.contextTypes = {
    routeDepth: PropTypes.number.isRequired,
    router: PropTypes.router.isRequired
  };

  RouteHandler.childContextTypes = {
    routeDepth: PropTypes.number.isRequired
  };

  module.exports = RouteHandler;
},{"../PropTypes":294,"./ContextWrapper":303,"react":482,"react/lib/Object.assign":353}],310:[function(require,module,exports){
  (function (process){
    /* jshint -W058 */
    'use strict';

    var React = require('react');
    var warning = require('react/lib/warning');
    var invariant = require('react/lib/invariant');
    var canUseDOM = require('react/lib/ExecutionEnvironment').canUseDOM;
    var LocationActions = require('./actions/LocationActions');
    var ImitateBrowserBehavior = require('./behaviors/ImitateBrowserBehavior');
    var HashLocation = require('./locations/HashLocation');
    var HistoryLocation = require('./locations/HistoryLocation');
    var RefreshLocation = require('./locations/RefreshLocation');
    var StaticLocation = require('./locations/StaticLocation');
    var ScrollHistory = require('./ScrollHistory');
    var createRoutesFromReactChildren = require('./createRoutesFromReactChildren');
    var isReactChildren = require('./isReactChildren');
    var Transition = require('./Transition');
    var PropTypes = require('./PropTypes');
    var Redirect = require('./Redirect');
    var History = require('./History');
    var Cancellation = require('./Cancellation');
    var Match = require('./Match');
    var Route = require('./Route');
    var supportsHistory = require('./supportsHistory');
    var PathUtils = require('./PathUtils');

    /**
     * The default location for new routers.
     */
    var DEFAULT_LOCATION = canUseDOM ? HashLocation : '/';

    /**
     * The default scroll behavior for new routers.
     */
    var DEFAULT_SCROLL_BEHAVIOR = canUseDOM ? ImitateBrowserBehavior : null;

    function hasProperties(object, properties) {
      for (var propertyName in properties) if (properties.hasOwnProperty(propertyName) && object[propertyName] !== properties[propertyName]) return false;

      return true;
    }

    function hasMatch(routes, route, prevParams, nextParams, prevQuery, nextQuery) {
      return routes.some(function (r) {
        if (r !== route) return false;

        var paramNames = route.paramNames;
        var paramName;

        // Ensure that all params the route cares about did not change.
        for (var i = 0, len = paramNames.length; i < len; ++i) {
          paramName = paramNames[i];

          if (nextParams[paramName] !== prevParams[paramName]) return false;
        }

        // Ensure the query hasn't changed.
        return hasProperties(prevQuery, nextQuery) && hasProperties(nextQuery, prevQuery);
      });
    }

    function addRoutesToNamedRoutes(routes, namedRoutes) {
      var route;
      for (var i = 0, len = routes.length; i < len; ++i) {
        route = routes[i];

        if (route.name) {
          invariant(namedRoutes[route.name] == null, 'You may not have more than one route named "%s"', route.name);

          namedRoutes[route.name] = route;
        }

        if (route.childRoutes) addRoutesToNamedRoutes(route.childRoutes, namedRoutes);
      }
    }

    function routeIsActive(activeRoutes, routeName) {
      return activeRoutes.some(function (route) {
        return route.name === routeName;
      });
    }

    function paramsAreActive(activeParams, params) {
      for (var property in params) if (String(activeParams[property]) !== String(params[property])) return false;

      return true;
    }

    function queryIsActive(activeQuery, query) {
      for (var property in query) if (String(activeQuery[property]) !== String(query[property])) return false;

      return true;
    }

    /**
     * Creates and returns a new router using the given options. A router
     * is a ReactComponent class that knows how to react to changes in the
     * URL and keep the contents of the page in sync.
     *
     * Options may be any of the following:
     *
     * - routes           (required) The route config
     * - location         The location to use. Defaults to HashLocation when
     *                    the DOM is available, "/" otherwise
     * - scrollBehavior   The scroll behavior to use. Defaults to ImitateBrowserBehavior
     *                    when the DOM is available, null otherwise
     * - onError          A function that is used to handle errors
     * - onAbort          A function that is used to handle aborted transitions
     *
     * When rendering in a server-side environment, the location should simply
     * be the URL path that was used in the request, including the query string.
     */
    function createRouter(options) {
      options = options || {};

      if (isReactChildren(options)) options = { routes: options };

      var mountedComponents = [];
      var location = options.location || DEFAULT_LOCATION;
      var scrollBehavior = options.scrollBehavior || DEFAULT_SCROLL_BEHAVIOR;
      var state = {};
      var nextState = {};
      var pendingTransition = null;
      var dispatchHandler = null;

      if (typeof location === 'string') location = new StaticLocation(location);

      if (location instanceof StaticLocation) {
        warning(!canUseDOM || process.env.NODE_ENV === 'test', 'You should not use a static location in a DOM environment because ' + 'the router will not be kept in sync with the current URL');
      } else {
        invariant(canUseDOM || location.needsDOM === false, 'You cannot use %s without a DOM', location);
      }

      // Automatically fall back to full page refreshes in
      // browsers that don't support the HTML history API.
      if (location === HistoryLocation && !supportsHistory()) location = RefreshLocation;

      var Router = React.createClass({

        displayName: 'Router',

        statics: {

          isRunning: false,

          cancelPendingTransition: function cancelPendingTransition() {
            if (pendingTransition) {
              pendingTransition.cancel();
              pendingTransition = null;
            }
          },

          clearAllRoutes: function clearAllRoutes() {
            Router.cancelPendingTransition();
            Router.namedRoutes = {};
            Router.routes = [];
          },

          /**
           * Adds routes to this router from the given children object (see ReactChildren).
           */
          addRoutes: function addRoutes(routes) {
            if (isReactChildren(routes)) routes = createRoutesFromReactChildren(routes);

            addRoutesToNamedRoutes(routes, Router.namedRoutes);

            Router.routes.push.apply(Router.routes, routes);
          },

          /**
           * Replaces routes of this router from the given children object (see ReactChildren).
           */
          replaceRoutes: function replaceRoutes(routes) {
            Router.clearAllRoutes();
            Router.addRoutes(routes);
            Router.refresh();
          },

          /**
           * Performs a match of the given path against this router and returns an object
           * with the { routes, params, pathname, query } that match. Returns null if no
           * match can be made.
           */
          match: function match(path) {
            return Match.findMatch(Router.routes, path);
          },

          /**
           * Returns an absolute URL path created from the given route
           * name, URL parameters, and query.
           */
          makePath: function makePath(to, params, query) {
            var path;
            if (PathUtils.isAbsolute(to)) {
              path = to;
            } else {
              var route = to instanceof Route ? to : Router.namedRoutes[to];

              invariant(route instanceof Route, 'Cannot find a route named "%s"', to);

              path = route.path;
            }

            return PathUtils.withQuery(PathUtils.injectParams(path, params), query);
          },

          /**
           * Returns a string that may safely be used as the href of a link
           * to the route with the given name, URL parameters, and query.
           */
          makeHref: function makeHref(to, params, query) {
            var path = Router.makePath(to, params, query);
            return location === HashLocation ? '#' + path : path;
          },

          /**
           * Transitions to the URL specified in the arguments by pushing
           * a new URL onto the history stack.
           */
          transitionTo: function transitionTo(to, params, query) {
            var path = Router.makePath(to, params, query);

            if (pendingTransition) {
              // Replace so pending location does not stay in history.
              location.replace(path);
            } else {
              location.push(path);
            }
          },

          /**
           * Transitions to the URL specified in the arguments by replacing
           * the current URL in the history stack.
           */
          replaceWith: function replaceWith(to, params, query) {
            location.replace(Router.makePath(to, params, query));
          },

          /**
           * Transitions to the previous URL if one is available. Returns true if the
           * router was able to go back, false otherwise.
           *
           * Note: The router only tracks history entries in your application, not the
           * current browser session, so you can safely call this function without guarding
           * against sending the user back to some other site. However, when using
           * RefreshLocation (which is the fallback for HistoryLocation in browsers that
           * don't support HTML5 history) this method will *always* send the client back
           * because we cannot reliably track history length.
           */
          goBack: function goBack() {
            if (History.length > 1 || location === RefreshLocation) {
              location.pop();
              return true;
            }

            warning(false, 'goBack() was ignored because there is no router history');

            return false;
          },

          handleAbort: options.onAbort || function (abortReason) {
            if (location instanceof StaticLocation) throw new Error('Unhandled aborted transition! Reason: ' + abortReason);

            if (abortReason instanceof Cancellation) {
              return;
            } else if (abortReason instanceof Redirect) {
              location.replace(Router.makePath(abortReason.to, abortReason.params, abortReason.query));
            } else {
              location.pop();
            }
          },

          handleError: options.onError || function (error) {
            // Throw so we don't silently swallow async errors.
            throw error; // This error probably originated in a transition hook.
          },

          handleLocationChange: function handleLocationChange(change) {
            Router.dispatch(change.path, change.type);
          },

          /**
           * Performs a transition to the given path and calls callback(error, abortReason)
           * when the transition is finished. If both arguments are null the router's state
           * was updated. Otherwise the transition did not complete.
           *
           * In a transition, a router first determines which routes are involved by beginning
           * with the current route, up the route tree to the first parent route that is shared
           * with the destination route, and back down the tree to the destination route. The
           * willTransitionFrom hook is invoked on all route handlers we're transitioning away
           * from, in reverse nesting order. Likewise, the willTransitionTo hook is invoked on
           * all route handlers we're transitioning to.
           *
           * Both willTransitionFrom and willTransitionTo hooks may either abort or redirect the
           * transition. To resolve asynchronously, they may use the callback argument. If no
           * hooks wait, the transition is fully synchronous.
           */
          dispatch: function dispatch(path, action) {
            Router.cancelPendingTransition();

            var prevPath = state.path;
            var isRefreshing = action == null;

            if (prevPath === path && !isRefreshing) return; // Nothing to do!

            // Record the scroll position as early as possible to
            // get it before browsers try update it automatically.
            if (prevPath && action === LocationActions.PUSH) Router.recordScrollPosition(prevPath);

            var match = Router.match(path);

            warning(match != null, 'No route matches path "%s". Make sure you have <Route path="%s"> somewhere in your routes', path, path);

            if (match == null) match = {};

            var prevRoutes = state.routes || [];
            var prevParams = state.params || {};
            var prevQuery = state.query || {};

            var nextRoutes = match.routes || [];
            var nextParams = match.params || {};
            var nextQuery = match.query || {};

            var fromRoutes, toRoutes;
            if (prevRoutes.length) {
              fromRoutes = prevRoutes.filter(function (route) {
                return !hasMatch(nextRoutes, route, prevParams, nextParams, prevQuery, nextQuery);
              });

              toRoutes = nextRoutes.filter(function (route) {
                return !hasMatch(prevRoutes, route, prevParams, nextParams, prevQuery, nextQuery);
              });
            } else {
              fromRoutes = [];
              toRoutes = nextRoutes;
            }

            var transition = new Transition(path, Router.replaceWith.bind(Router, path));
            pendingTransition = transition;

            var fromComponents = mountedComponents.slice(prevRoutes.length - fromRoutes.length);

            Transition.from(transition, fromRoutes, fromComponents, function (error) {
              if (error || transition.abortReason) return dispatchHandler.call(Router, error, transition); // No need to continue.

              Transition.to(transition, toRoutes, nextParams, nextQuery, function (error) {
                dispatchHandler.call(Router, error, transition, {
                  path: path,
                  action: action,
                  pathname: match.pathname,
                  routes: nextRoutes,
                  params: nextParams,
                  query: nextQuery
                });
              });
            });
          },

          /**
           * Starts this router and calls callback(router, state) when the route changes.
           *
           * If the router's location is static (i.e. a URL path in a server environment)
           * the callback is called only once. Otherwise, the location should be one of the
           * Router.*Location objects (e.g. Router.HashLocation or Router.HistoryLocation).
           */
          run: function run(callback) {
            invariant(!Router.isRunning, 'Router is already running');

            dispatchHandler = function (error, transition, newState) {
              if (error) Router.handleError(error);

              if (pendingTransition !== transition) return;

              pendingTransition = null;

              if (transition.abortReason) {
                Router.handleAbort(transition.abortReason);
              } else {
                callback.call(Router, Router, nextState = newState);
              }
            };

            if (!(location instanceof StaticLocation)) {
              if (location.addChangeListener) location.addChangeListener(Router.handleLocationChange);

              Router.isRunning = true;
            }

            // Bootstrap using the current path.
            Router.refresh();
          },

          refresh: function refresh() {
            Router.dispatch(location.getCurrentPath(), null);
          },

          stop: function stop() {
            Router.cancelPendingTransition();

            if (location.removeChangeListener) location.removeChangeListener(Router.handleLocationChange);

            Router.isRunning = false;
          },

          getLocation: function getLocation() {
            return location;
          },

          getScrollBehavior: function getScrollBehavior() {
            return scrollBehavior;
          },

          getRouteAtDepth: function getRouteAtDepth(routeDepth) {
            var routes = state.routes;
            return routes && routes[routeDepth];
          },

          setRouteComponentAtDepth: function setRouteComponentAtDepth(routeDepth, component) {
            mountedComponents[routeDepth] = component;
          },

          /**
           * Returns the current URL path + query string.
           */
          getCurrentPath: function getCurrentPath() {
            return state.path;
          },

          /**
           * Returns the current URL path without the query string.
           */
          getCurrentPathname: function getCurrentPathname() {
            return state.pathname;
          },

          /**
           * Returns an object of the currently active URL parameters.
           */
          getCurrentParams: function getCurrentParams() {
            return state.params;
          },

          /**
           * Returns an object of the currently active query parameters.
           */
          getCurrentQuery: function getCurrentQuery() {
            return state.query;
          },

          /**
           * Returns an array of the currently active routes.
           */
          getCurrentRoutes: function getCurrentRoutes() {
            return state.routes;
          },

          /**
           * Returns true if the given route, params, and query are active.
           */
          isActive: function isActive(to, params, query) {
            if (PathUtils.isAbsolute(to)) return to === state.path;

            return routeIsActive(state.routes, to) && paramsAreActive(state.params, params) && (query == null || queryIsActive(state.query, query));
          }

        },

        mixins: [ScrollHistory],

        propTypes: {
          children: PropTypes.falsy
        },

        childContextTypes: {
          routeDepth: PropTypes.number.isRequired,
          router: PropTypes.router.isRequired
        },

        getChildContext: function getChildContext() {
          return {
            routeDepth: 1,
            router: Router
          };
        },

        getInitialState: function getInitialState() {
          return state = nextState;
        },

        componentWillReceiveProps: function componentWillReceiveProps() {
          this.setState(state = nextState);
        },

        componentWillUnmount: function componentWillUnmount() {
          Router.stop();
        },

        render: function render() {
          var route = Router.getRouteAtDepth(0);
          return route ? React.createElement(route.handler, this.props) : null;
        }

      });

      Router.clearAllRoutes();

      if (options.routes) Router.addRoutes(options.routes);

      return Router;
    }

    module.exports = createRouter;
  }).call(this,require('_process'))
},{"./Cancellation":289,"./History":290,"./Match":291,"./PathUtils":293,"./PropTypes":294,"./Redirect":295,"./Route":296,"./ScrollHistory":297,"./Transition":299,"./actions/LocationActions":300,"./behaviors/ImitateBrowserBehavior":301,"./createRoutesFromReactChildren":311,"./isReactChildren":314,"./locations/HashLocation":315,"./locations/HistoryLocation":316,"./locations/RefreshLocation":317,"./locations/StaticLocation":318,"./supportsHistory":321,"_process":46,"react":482,"react/lib/ExecutionEnvironment":347,"react/lib/invariant":462,"react/lib/warning":481}],311:[function(require,module,exports){
  /* jshint -W084 */
  'use strict';

  var React = require('react');
  var assign = require('react/lib/Object.assign');
  var warning = require('react/lib/warning');
  var DefaultRoute = require('./components/DefaultRoute');
  var NotFoundRoute = require('./components/NotFoundRoute');
  var Redirect = require('./components/Redirect');
  var Route = require('./Route');

  function checkPropTypes(componentName, propTypes, props) {
    componentName = componentName || 'UnknownComponent';

    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        var error = propTypes[propName](props, propName, componentName);

        if (error instanceof Error) warning(false, error.message);
      }
    }
  }

  function createRouteOptions(props) {
    var options = assign({}, props);
    var handler = options.handler;

    if (handler) {
      options.onEnter = handler.willTransitionTo;
      options.onLeave = handler.willTransitionFrom;
    }

    return options;
  }

  function createRouteFromReactElement(element) {
    if (!React.isValidElement(element)) return;

    var type = element.type;
    var props = assign({}, type.defaultProps, element.props);

    if (type.propTypes) checkPropTypes(type.displayName, type.propTypes, props);

    if (type === DefaultRoute) return Route.createDefaultRoute(createRouteOptions(props));

    if (type === NotFoundRoute) return Route.createNotFoundRoute(createRouteOptions(props));

    if (type === Redirect) return Route.createRedirect(createRouteOptions(props));

    return Route.createRoute(createRouteOptions(props), function () {
      if (props.children) createRoutesFromReactChildren(props.children);
    });
  }

  /**
   * Creates and returns an array of routes created from the given
   * ReactChildren, all of which should be one of <Route>, <DefaultRoute>,
   * <NotFoundRoute>, or <Redirect>, e.g.:
   *
   *   var { createRoutesFromReactChildren, Route, Redirect } = require('react-router');
   *
   *   var routes = createRoutesFromReactChildren(
   *     <Route path="/" handler={App}>
   *       <Route name="user" path="/user/:userId" handler={User}>
   *         <Route name="task" path="tasks/:taskId" handler={Task}/>
   *         <Redirect from="todos/:taskId" to="task"/>
   *       </Route>
   *     </Route>
   *   );
   */
  function createRoutesFromReactChildren(children) {
    var routes = [];

    React.Children.forEach(children, function (child) {
      if (child = createRouteFromReactElement(child)) routes.push(child);
    });

    return routes;
  }

  module.exports = createRoutesFromReactChildren;
},{"./Route":296,"./components/DefaultRoute":304,"./components/NotFoundRoute":306,"./components/Redirect":307,"react":482,"react/lib/Object.assign":353,"react/lib/warning":481}],312:[function(require,module,exports){
  'use strict';

  var invariant = require('react/lib/invariant');
  var canUseDOM = require('react/lib/ExecutionEnvironment').canUseDOM;

  /**
   * Returns the current scroll position of the window as { x, y }.
   */
  function getWindowScrollPosition() {
    invariant(canUseDOM, 'Cannot get current scroll position without a DOM');

    return {
      x: window.pageXOffset || document.documentElement.scrollLeft,
      y: window.pageYOffset || document.documentElement.scrollTop
    };
  }

  module.exports = getWindowScrollPosition;
},{"react/lib/ExecutionEnvironment":347,"react/lib/invariant":462}],313:[function(require,module,exports){
  'use strict';

  exports.DefaultRoute = require('./components/DefaultRoute');
  exports.Link = require('./components/Link');
  exports.NotFoundRoute = require('./components/NotFoundRoute');
  exports.Redirect = require('./components/Redirect');
  exports.Route = require('./components/Route');
  exports.ActiveHandler = require('./components/RouteHandler');
  exports.RouteHandler = exports.ActiveHandler;

  exports.HashLocation = require('./locations/HashLocation');
  exports.HistoryLocation = require('./locations/HistoryLocation');
  exports.RefreshLocation = require('./locations/RefreshLocation');
  exports.StaticLocation = require('./locations/StaticLocation');
  exports.TestLocation = require('./locations/TestLocation');

  exports.ImitateBrowserBehavior = require('./behaviors/ImitateBrowserBehavior');
  exports.ScrollToTopBehavior = require('./behaviors/ScrollToTopBehavior');

  exports.History = require('./History');
  exports.Navigation = require('./Navigation');
  exports.State = require('./State');

  exports.createRoute = require('./Route').createRoute;
  exports.createDefaultRoute = require('./Route').createDefaultRoute;
  exports.createNotFoundRoute = require('./Route').createNotFoundRoute;
  exports.createRedirect = require('./Route').createRedirect;
  exports.createRoutesFromReactChildren = require('./createRoutesFromReactChildren');

  exports.create = require('./createRouter');
  exports.run = require('./runRouter');
},{"./History":290,"./Navigation":292,"./Route":296,"./State":298,"./behaviors/ImitateBrowserBehavior":301,"./behaviors/ScrollToTopBehavior":302,"./components/DefaultRoute":304,"./components/Link":305,"./components/NotFoundRoute":306,"./components/Redirect":307,"./components/Route":308,"./components/RouteHandler":309,"./createRouter":310,"./createRoutesFromReactChildren":311,"./locations/HashLocation":315,"./locations/HistoryLocation":316,"./locations/RefreshLocation":317,"./locations/StaticLocation":318,"./locations/TestLocation":319,"./runRouter":320}],314:[function(require,module,exports){
  'use strict';

  var React = require('react');

  function isValidChild(object) {
    return object == null || React.isValidElement(object);
  }

  function isReactChildren(object) {
    return isValidChild(object) || Array.isArray(object) && object.every(isValidChild);
  }

  module.exports = isReactChildren;
},{"react":482}],315:[function(require,module,exports){
  'use strict';

  var LocationActions = require('../actions/LocationActions');
  var History = require('../History');

  var _listeners = [];
  var _isListening = false;
  var _actionType;

  function notifyChange(type) {
    if (type === LocationActions.PUSH) History.length += 1;

    var change = {
      path: HashLocation.getCurrentPath(),
      type: type
    };

    _listeners.forEach(function (listener) {
      listener.call(HashLocation, change);
    });
  }

  function ensureSlash() {
    var path = HashLocation.getCurrentPath();

    if (path.charAt(0) === '/') return true;

    HashLocation.replace('/' + path);

    return false;
  }

  function onHashChange() {
    if (ensureSlash()) {
      // If we don't have an _actionType then all we know is the hash
      // changed. It was probably caused by the user clicking the Back
      // button, but may have also been the Forward button or manual
      // manipulation. So just guess 'pop'.
      var curActionType = _actionType;
      _actionType = null;
      notifyChange(curActionType || LocationActions.POP);
    }
  }

  /**
   * A Location that uses `window.location.hash`.
   */
  var HashLocation = {

    addChangeListener: function addChangeListener(listener) {
      _listeners.push(listener);

      // Do this BEFORE listening for hashchange.
      ensureSlash();

      if (!_isListening) {
        if (window.addEventListener) {
          window.addEventListener('hashchange', onHashChange, false);
        } else {
          window.attachEvent('onhashchange', onHashChange);
        }

        _isListening = true;
      }
    },

    removeChangeListener: function removeChangeListener(listener) {
      _listeners = _listeners.filter(function (l) {
        return l !== listener;
      });

      if (_listeners.length === 0) {
        if (window.removeEventListener) {
          window.removeEventListener('hashchange', onHashChange, false);
        } else {
          window.removeEvent('onhashchange', onHashChange);
        }

        _isListening = false;
      }
    },

    push: function push(path) {
      _actionType = LocationActions.PUSH;
      window.location.hash = path;
    },

    replace: function replace(path) {
      _actionType = LocationActions.REPLACE;
      window.location.replace(window.location.pathname + window.location.search + '#' + path);
    },

    pop: function pop() {
      _actionType = LocationActions.POP;
      History.back();
    },

    getCurrentPath: function getCurrentPath() {
      return decodeURI(
        // We can't use window.location.hash here because it's not
        // consistent across browsers - Firefox will pre-decode it!
        window.location.href.split('#')[1] || '');
    },

    toString: function toString() {
      return '<HashLocation>';
    }

  };

  module.exports = HashLocation;
},{"../History":290,"../actions/LocationActions":300}],316:[function(require,module,exports){
  'use strict';

  var LocationActions = require('../actions/LocationActions');
  var History = require('../History');

  var _listeners = [];
  var _isListening = false;

  function notifyChange(type) {
    var change = {
      path: HistoryLocation.getCurrentPath(),
      type: type
    };

    _listeners.forEach(function (listener) {
      listener.call(HistoryLocation, change);
    });
  }

  function onPopState(event) {
    if (event.state === undefined) return; // Ignore extraneous popstate events in WebKit.

    notifyChange(LocationActions.POP);
  }

  /**
   * A Location that uses HTML5 history.
   */
  var HistoryLocation = {

    addChangeListener: function addChangeListener(listener) {
      _listeners.push(listener);

      if (!_isListening) {
        if (window.addEventListener) {
          window.addEventListener('popstate', onPopState, false);
        } else {
          window.attachEvent('onpopstate', onPopState);
        }

        _isListening = true;
      }
    },

    removeChangeListener: function removeChangeListener(listener) {
      _listeners = _listeners.filter(function (l) {
        return l !== listener;
      });

      if (_listeners.length === 0) {
        if (window.addEventListener) {
          window.removeEventListener('popstate', onPopState, false);
        } else {
          window.removeEvent('onpopstate', onPopState);
        }

        _isListening = false;
      }
    },

    push: function push(path) {
      window.history.pushState({ path: path }, '', path);
      History.length += 1;
      notifyChange(LocationActions.PUSH);
    },

    replace: function replace(path) {
      window.history.replaceState({ path: path }, '', path);
      notifyChange(LocationActions.REPLACE);
    },

    pop: History.back,

    getCurrentPath: function getCurrentPath() {
      return decodeURI(window.location.pathname + window.location.search);
    },

    toString: function toString() {
      return '<HistoryLocation>';
    }

  };

  module.exports = HistoryLocation;
},{"../History":290,"../actions/LocationActions":300}],317:[function(require,module,exports){
  'use strict';

  var HistoryLocation = require('./HistoryLocation');
  var History = require('../History');

  /**
   * A Location that uses full page refreshes. This is used as
   * the fallback for HistoryLocation in browsers that do not
   * support the HTML5 history API.
   */
  var RefreshLocation = {

    push: function push(path) {
      window.location = path;
    },

    replace: function replace(path) {
      window.location.replace(path);
    },

    pop: History.back,

    getCurrentPath: HistoryLocation.getCurrentPath,

    toString: function toString() {
      return '<RefreshLocation>';
    }

  };

  module.exports = RefreshLocation;
},{"../History":290,"./HistoryLocation":316}],318:[function(require,module,exports){
  'use strict';

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  var invariant = require('react/lib/invariant');

  function throwCannotModify() {
    invariant(false, 'You cannot modify a static location');
  }

  /**
   * A location that only ever contains a single path. Useful in
   * stateless environments like servers where there is no path history,
   * only the path that was used in the request.
   */

  var StaticLocation = (function () {
    function StaticLocation(path) {
      _classCallCheck(this, StaticLocation);

      this.path = path;
    }

    // TODO: Include these in the above class definition
    // once we can use ES7 property initializers.
    // https://github.com/babel/babel/issues/619

    _createClass(StaticLocation, [{
      key: 'getCurrentPath',
      value: function getCurrentPath() {
        return this.path;
      }
    }, {
      key: 'toString',
      value: function toString() {
        return '<StaticLocation path="' + this.path + '">';
      }
    }]);

    return StaticLocation;
  })();

  StaticLocation.prototype.push = throwCannotModify;
  StaticLocation.prototype.replace = throwCannotModify;
  StaticLocation.prototype.pop = throwCannotModify;

  module.exports = StaticLocation;
},{"react/lib/invariant":462}],319:[function(require,module,exports){
  'use strict';

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  var invariant = require('react/lib/invariant');
  var LocationActions = require('../actions/LocationActions');
  var History = require('../History');

  /**
   * A location that is convenient for testing and does not require a DOM.
   */

  var TestLocation = (function () {
    function TestLocation(history) {
      _classCallCheck(this, TestLocation);

      this.history = history || [];
      this.listeners = [];
      this.needsDOM = false;
      this._updateHistoryLength();
    }

    _createClass(TestLocation, [{
      key: '_updateHistoryLength',
      value: function _updateHistoryLength() {
        History.length = this.history.length;
      }
    }, {
      key: '_notifyChange',
      value: function _notifyChange(type) {
        var change = {
          path: this.getCurrentPath(),
          type: type
        };

        for (var i = 0, len = this.listeners.length; i < len; ++i) this.listeners[i].call(this, change);
      }
    }, {
      key: 'addChangeListener',
      value: function addChangeListener(listener) {
        this.listeners.push(listener);
      }
    }, {
      key: 'removeChangeListener',
      value: function removeChangeListener(listener) {
        this.listeners = this.listeners.filter(function (l) {
          return l !== listener;
        });
      }
    }, {
      key: 'push',
      value: function push(path) {
        this.history.push(path);
        this._updateHistoryLength();
        this._notifyChange(LocationActions.PUSH);
      }
    }, {
      key: 'replace',
      value: function replace(path) {
        invariant(this.history.length, 'You cannot replace the current path with no history');

        this.history[this.history.length - 1] = path;

        this._notifyChange(LocationActions.REPLACE);
      }
    }, {
      key: 'pop',
      value: function pop() {
        this.history.pop();
        this._updateHistoryLength();
        this._notifyChange(LocationActions.POP);
      }
    }, {
      key: 'getCurrentPath',
      value: function getCurrentPath() {
        return this.history[this.history.length - 1];
      }
    }, {
      key: 'toString',
      value: function toString() {
        return '<TestLocation>';
      }
    }]);

    return TestLocation;
  })();

  module.exports = TestLocation;
},{"../History":290,"../actions/LocationActions":300,"react/lib/invariant":462}],320:[function(require,module,exports){
  'use strict';

  var createRouter = require('./createRouter');

  /**
   * A high-level convenience method that creates, configures, and
   * runs a router in one shot. The method signature is:
   *
   *   Router.run(routes[, location ], callback);
   *
   * Using `window.location.hash` to manage the URL, you could do:
   *
   *   Router.run(routes, function (Handler) {
 *     React.render(<Handler/>, document.body);
 *   });
   *
   * Using HTML5 history and a custom "cursor" prop:
   *
   *   Router.run(routes, Router.HistoryLocation, function (Handler) {
 *     React.render(<Handler cursor={cursor}/>, document.body);
 *   });
   *
   * Returns the newly created router.
   *
   * Note: If you need to specify further options for your router such
   * as error/abort handling or custom scroll behavior, use Router.create
   * instead.
   *
   *   var router = Router.create(options);
   *   router.run(function (Handler) {
 *     // ...
 *   });
   */
  function runRouter(routes, location, callback) {
    if (typeof location === 'function') {
      callback = location;
      location = null;
    }

    var router = createRouter({
      routes: routes,
      location: location
    });

    router.run(callback);

    return router;
  }

  module.exports = runRouter;
},{"./createRouter":310}],321:[function(require,module,exports){
  'use strict';

  function supportsHistory() {
    /*! taken from modernizr
     * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
     * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
     * changed to avoid false negatives for Windows Phones: https://github.com/rackt/react-router/issues/586
     */
    var ua = navigator.userAgent;
    if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) {
      return false;
    }
    return window.history && 'pushState' in window.history;
  }

  module.exports = supportsHistory;
},{}],322:[function(require,module,exports){
  'use strict';

  function ToObject(val) {
    if (val == null) {
      throw new TypeError('Object.assign cannot be called with null or undefined');
    }

    return Object(val);
  }

  module.exports = Object.assign || function (target, source) {
      var from;
      var keys;
      var to = ToObject(target);

      for (var s = 1; s < arguments.length; s++) {
        from = arguments[s];
        keys = Object.keys(Object(from));

        for (var i = 0; i < keys.length; i++) {
          to[keys[i]] = from[keys[i]];
        }
      }

      return to;
    };

},{}],323:[function(require,module,exports){
  module.exports = require('./lib/');

},{"./lib/":324}],324:[function(require,module,exports){
  // Load modules

  var Stringify = require('./stringify');
  var Parse = require('./parse');


  // Declare internals

  var internals = {};


  module.exports = {
    stringify: Stringify,
    parse: Parse
  };

},{"./parse":325,"./stringify":326}],325:[function(require,module,exports){
  // Load modules

  var Utils = require('./utils');


  // Declare internals

  var internals = {
    delimiter: '&',
    depth: 5,
    arrayLimit: 20,
    parameterLimit: 1000
  };


  internals.parseValues = function (str, options) {

    var obj = {};
    var parts = str.split(options.delimiter, options.parameterLimit === Infinity ? undefined : options.parameterLimit);

    for (var i = 0, il = parts.length; i < il; ++i) {
      var part = parts[i];
      var pos = part.indexOf(']=') === -1 ? part.indexOf('=') : part.indexOf(']=') + 1;

      if (pos === -1) {
        obj[Utils.decode(part)] = '';
      }
      else {
        var key = Utils.decode(part.slice(0, pos));
        var val = Utils.decode(part.slice(pos + 1));

        if (Object.prototype.hasOwnProperty(key)) {
          continue;
        }

        if (!obj.hasOwnProperty(key)) {
          obj[key] = val;
        }
        else {
          obj[key] = [].concat(obj[key]).concat(val);
        }
      }
    }

    return obj;
  };


  internals.parseObject = function (chain, val, options) {

    if (!chain.length) {
      return val;
    }

    var root = chain.shift();

    var obj = {};
    if (root === '[]') {
      obj = [];
      obj = obj.concat(internals.parseObject(chain, val, options));
    }
    else {
      var cleanRoot = root[0] === '[' && root[root.length - 1] === ']' ? root.slice(1, root.length - 1) : root;
      var index = parseInt(cleanRoot, 10);
      var indexString = '' + index;
      if (!isNaN(index) &&
        root !== cleanRoot &&
        indexString === cleanRoot &&
        index >= 0 &&
        index <= options.arrayLimit) {

        obj = [];
        obj[index] = internals.parseObject(chain, val, options);
      }
      else {
        obj[cleanRoot] = internals.parseObject(chain, val, options);
      }
    }

    return obj;
  };


  internals.parseKeys = function (key, val, options) {

    if (!key) {
      return;
    }

    // The regex chunks

    var parent = /^([^\[\]]*)/;
    var child = /(\[[^\[\]]*\])/g;

    // Get the parent

    var segment = parent.exec(key);

    // Don't allow them to overwrite object prototype properties

    if (Object.prototype.hasOwnProperty(segment[1])) {
      return;
    }

    // Stash the parent if it exists

    var keys = [];
    if (segment[1]) {
      keys.push(segment[1]);
    }

    // Loop through children appending to the array until we hit depth

    var i = 0;
    while ((segment = child.exec(key)) !== null && i < options.depth) {

      ++i;
      if (!Object.prototype.hasOwnProperty(segment[1].replace(/\[|\]/g, ''))) {
        keys.push(segment[1]);
      }
    }

    // If there's a remainder, just add whatever is left

    if (segment) {
      keys.push('[' + key.slice(segment.index) + ']');
    }

    return internals.parseObject(keys, val, options);
  };


  module.exports = function (str, options) {

    if (str === '' ||
      str === null ||
      typeof str === 'undefined') {

      return {};
    }

    options = options || {};
    options.delimiter = typeof options.delimiter === 'string' || Utils.isRegExp(options.delimiter) ? options.delimiter : internals.delimiter;
    options.depth = typeof options.depth === 'number' ? options.depth : internals.depth;
    options.arrayLimit = typeof options.arrayLimit === 'number' ? options.arrayLimit : internals.arrayLimit;
    options.parameterLimit = typeof options.parameterLimit === 'number' ? options.parameterLimit : internals.parameterLimit;

    var tempObj = typeof str === 'string' ? internals.parseValues(str, options) : str;
    var obj = {};

    // Iterate over the keys and setup the new object

    var keys = Object.keys(tempObj);
    for (var i = 0, il = keys.length; i < il; ++i) {
      var key = keys[i];
      var newObj = internals.parseKeys(key, tempObj[key], options);
      obj = Utils.merge(obj, newObj);
    }

    return Utils.compact(obj);
  };

},{"./utils":327}],326:[function(require,module,exports){
  // Load modules

  var Utils = require('./utils');


  // Declare internals

  var internals = {
    delimiter: '&',
    arrayPrefixGenerators: {
      brackets: function (prefix, key) {
        return prefix + '[]';
      },
      indices: function (prefix, key) {
        return prefix + '[' + key + ']';
      },
      repeat: function (prefix, key) {
        return prefix;
      }
    }
  };


  internals.stringify = function (obj, prefix, generateArrayPrefix) {

    if (Utils.isBuffer(obj)) {
      obj = obj.toString();
    }
    else if (obj instanceof Date) {
      obj = obj.toISOString();
    }
    else if (obj === null) {
      obj = '';
    }

    if (typeof obj === 'string' ||
      typeof obj === 'number' ||
      typeof obj === 'boolean') {

      return [encodeURIComponent(prefix) + '=' + encodeURIComponent(obj)];
    }

    var values = [];

    if (typeof obj === 'undefined') {
      return values;
    }

    var objKeys = Object.keys(obj);
    for (var i = 0, il = objKeys.length; i < il; ++i) {
      var key = objKeys[i];
      if (Array.isArray(obj)) {
        values = values.concat(internals.stringify(obj[key], generateArrayPrefix(prefix, key), generateArrayPrefix));
      }
      else {
        values = values.concat(internals.stringify(obj[key], prefix + '[' + key + ']', generateArrayPrefix));
      }
    }

    return values;
  };


  module.exports = function (obj, options) {

    options = options || {};
    var delimiter = typeof options.delimiter === 'undefined' ? internals.delimiter : options.delimiter;

    var keys = [];

    if (typeof obj !== 'object' ||
      obj === null) {

      return '';
    }

    var arrayFormat;
    if (options.arrayFormat in internals.arrayPrefixGenerators) {
      arrayFormat = options.arrayFormat;
    }
    else if ('indices' in options) {
      arrayFormat = options.indices ? 'indices' : 'repeat';
    }
    else {
      arrayFormat = 'indices';
    }

    var generateArrayPrefix = internals.arrayPrefixGenerators[arrayFormat];

    var objKeys = Object.keys(obj);
    for (var i = 0, il = objKeys.length; i < il; ++i) {
      var key = objKeys[i];
      keys = keys.concat(internals.stringify(obj[key], key, generateArrayPrefix));
    }

    return keys.join(delimiter);
  };

},{"./utils":327}],327:[function(require,module,exports){
  // Load modules


  // Declare internals

  var internals = {};


  exports.arrayToObject = function (source) {

    var obj = {};
    for (var i = 0, il = source.length; i < il; ++i) {
      if (typeof source[i] !== 'undefined') {

        obj[i] = source[i];
      }
    }

    return obj;
  };


  exports.merge = function (target, source) {

    if (!source) {
      return target;
    }

    if (typeof source !== 'object') {
      if (Array.isArray(target)) {
        target.push(source);
      }
      else {
        target[source] = true;
      }

      return target;
    }

    if (typeof target !== 'object') {
      target = [target].concat(source);
      return target;
    }

    if (Array.isArray(target) &&
      !Array.isArray(source)) {

      target = exports.arrayToObject(target);
    }

    var keys = Object.keys(source);
    for (var k = 0, kl = keys.length; k < kl; ++k) {
      var key = keys[k];
      var value = source[key];

      if (!target[key]) {
        target[key] = value;
      }
      else {
        target[key] = exports.merge(target[key], value);
      }
    }

    return target;
  };


  exports.decode = function (str) {

    try {
      return decodeURIComponent(str.replace(/\+/g, ' '));
    } catch (e) {
      return str;
    }
  };


  exports.compact = function (obj, refs) {

    if (typeof obj !== 'object' ||
      obj === null) {

      return obj;
    }

    refs = refs || [];
    var lookup = refs.indexOf(obj);
    if (lookup !== -1) {
      return refs[lookup];
    }

    refs.push(obj);

    if (Array.isArray(obj)) {
      var compacted = [];

      for (var i = 0, il = obj.length; i < il; ++i) {
        if (typeof obj[i] !== 'undefined') {
          compacted.push(obj[i]);
        }
      }

      return compacted;
    }

    var keys = Object.keys(obj);
    for (i = 0, il = keys.length; i < il; ++i) {
      var key = keys[i];
      obj[key] = exports.compact(obj[key], refs);
    }

    return obj;
  };


  exports.isRegExp = function (obj) {
    return Object.prototype.toString.call(obj) === '[object RegExp]';
  };


  exports.isBuffer = function (obj) {

    if (obj === null ||
      typeof obj === 'undefined') {

      return false;
    }

    return !!(obj.constructor &&
    obj.constructor.isBuffer &&
    obj.constructor.isBuffer(obj));
  };

},{}],328:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule AutoFocusMixin
   * @typechecks static-only
   */

  'use strict';

  var focusNode = require("./focusNode");

  var AutoFocusMixin = {
    componentDidMount: function() {
      if (this.props.autoFocus) {
        focusNode(this.getDOMNode());
      }
    }
  };

  module.exports = AutoFocusMixin;

},{"./focusNode":446}],329:[function(require,module,exports){
  /**
   * Copyright 2013-2015 Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule BeforeInputEventPlugin
   * @typechecks static-only
   */

  'use strict';

  var EventConstants = require("./EventConstants");
  var EventPropagators = require("./EventPropagators");
  var ExecutionEnvironment = require("./ExecutionEnvironment");
  var FallbackCompositionState = require("./FallbackCompositionState");
  var SyntheticCompositionEvent = require("./SyntheticCompositionEvent");
  var SyntheticInputEvent = require("./SyntheticInputEvent");

  var keyOf = require("./keyOf");

  var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
  var START_KEYCODE = 229;

  var canUseCompositionEvent = (
    ExecutionEnvironment.canUseDOM &&
    'CompositionEvent' in window
  );

  var documentMode = null;
  if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
    documentMode = document.documentMode;
  }

  // Webkit offers a very useful `textInput` event that can be used to
  // directly represent `beforeInput`. The IE `textinput` event is not as
  // useful, so we don't use it.
  var canUseTextInputEvent = (
    ExecutionEnvironment.canUseDOM &&
    'TextEvent' in window &&
    !documentMode &&
    !isPresto()
  );

  // In IE9+, we have access to composition events, but the data supplied
  // by the native compositionend event may be incorrect. Japanese ideographic
  // spaces, for instance (\u3000) are not recorded correctly.
  var useFallbackCompositionData = (
    ExecutionEnvironment.canUseDOM &&
    (
      (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11)
    )
  );

  /**
   * Opera <= 12 includes TextEvent in window, but does not fire
   * text input events. Rely on keypress instead.
   */
  function isPresto() {
    var opera = window.opera;
    return (
      typeof opera === 'object' &&
      typeof opera.version === 'function' &&
      parseInt(opera.version(), 10) <= 12
    );
  }

  var SPACEBAR_CODE = 32;
  var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

  var topLevelTypes = EventConstants.topLevelTypes;

  // Events and their corresponding property names.
  var eventTypes = {
    beforeInput: {
      phasedRegistrationNames: {
        bubbled: keyOf({onBeforeInput: null}),
        captured: keyOf({onBeforeInputCapture: null})
      },
      dependencies: [
        topLevelTypes.topCompositionEnd,
        topLevelTypes.topKeyPress,
        topLevelTypes.topTextInput,
        topLevelTypes.topPaste
      ]
    },
    compositionEnd: {
      phasedRegistrationNames: {
        bubbled: keyOf({onCompositionEnd: null}),
        captured: keyOf({onCompositionEndCapture: null})
      },
      dependencies: [
        topLevelTypes.topBlur,
        topLevelTypes.topCompositionEnd,
        topLevelTypes.topKeyDown,
        topLevelTypes.topKeyPress,
        topLevelTypes.topKeyUp,
        topLevelTypes.topMouseDown
      ]
    },
    compositionStart: {
      phasedRegistrationNames: {
        bubbled: keyOf({onCompositionStart: null}),
        captured: keyOf({onCompositionStartCapture: null})
      },
      dependencies: [
        topLevelTypes.topBlur,
        topLevelTypes.topCompositionStart,
        topLevelTypes.topKeyDown,
        topLevelTypes.topKeyPress,
        topLevelTypes.topKeyUp,
        topLevelTypes.topMouseDown
      ]
    },
    compositionUpdate: {
      phasedRegistrationNames: {
        bubbled: keyOf({onCompositionUpdate: null}),
        captured: keyOf({onCompositionUpdateCapture: null})
      },
      dependencies: [
        topLevelTypes.topBlur,
        topLevelTypes.topCompositionUpdate,
        topLevelTypes.topKeyDown,
        topLevelTypes.topKeyPress,
        topLevelTypes.topKeyUp,
        topLevelTypes.topMouseDown
      ]
    }
  };

  // Track whether we've ever handled a keypress on the space key.
  var hasSpaceKeypress = false;

  /**
   * Return whether a native keypress event is assumed to be a command.
   * This is required because Firefox fires `keypress` events for key commands
   * (cut, copy, select-all, etc.) even though no character is inserted.
   */
  function isKeypressCommand(nativeEvent) {
    return (
      (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
      // ctrlKey && altKey is equivalent to AltGr, and is not a command.
      !(nativeEvent.ctrlKey && nativeEvent.altKey)
    );
  }


  /**
   * Translate native top level events into event types.
   *
   * @param {string} topLevelType
   * @return {object}
   */
  function getCompositionEventType(topLevelType) {
    switch (topLevelType) {
      case topLevelTypes.topCompositionStart:
        return eventTypes.compositionStart;
      case topLevelTypes.topCompositionEnd:
        return eventTypes.compositionEnd;
      case topLevelTypes.topCompositionUpdate:
        return eventTypes.compositionUpdate;
    }
  }

  /**
   * Does our fallback best-guess model think this event signifies that
   * composition has begun?
   *
   * @param {string} topLevelType
   * @param {object} nativeEvent
   * @return {boolean}
   */
  function isFallbackCompositionStart(topLevelType, nativeEvent) {
    return (
      topLevelType === topLevelTypes.topKeyDown &&
      nativeEvent.keyCode === START_KEYCODE
    );
  }

  /**
   * Does our fallback mode think that this event is the end of composition?
   *
   * @param {string} topLevelType
   * @param {object} nativeEvent
   * @return {boolean}
   */
  function isFallbackCompositionEnd(topLevelType, nativeEvent) {
    switch (topLevelType) {
      case topLevelTypes.topKeyUp:
        // Command keys insert or clear IME input.
        return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);
      case topLevelTypes.topKeyDown:
        // Expect IME keyCode on each keydown. If we get any other
        // code we must have exited earlier.
        return (nativeEvent.keyCode !== START_KEYCODE);
      case topLevelTypes.topKeyPress:
      case topLevelTypes.topMouseDown:
      case topLevelTypes.topBlur:
        // Events are not possible without cancelling IME.
        return true;
      default:
        return false;
    }
  }

  /**
   * Google Input Tools provides composition data via a CustomEvent,
   * with the `data` property populated in the `detail` object. If this
   * is available on the event object, use it. If not, this is a plain
   * composition event and we have nothing special to extract.
   *
   * @param {object} nativeEvent
   * @return {?string}
   */
  function getDataFromCustomEvent(nativeEvent) {
    var detail = nativeEvent.detail;
    if (typeof detail === 'object' && 'data' in detail) {
      return detail.data;
    }
    return null;
  }

  // Track the current IME composition fallback object, if any.
  var currentComposition = null;

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {?object} A SyntheticCompositionEvent.
   */
  function extractCompositionEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID,
    nativeEvent
  ) {
    var eventType;
    var fallbackData;

    if (canUseCompositionEvent) {
      eventType = getCompositionEventType(topLevelType);
    } else if (!currentComposition) {
      if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
        eventType = eventTypes.compositionStart;
      }
    } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionEnd;
    }

    if (!eventType) {
      return null;
    }

    if (useFallbackCompositionData) {
      // The current composition is stored statically and must not be
      // overwritten while composition continues.
      if (!currentComposition && eventType === eventTypes.compositionStart) {
        currentComposition = FallbackCompositionState.getPooled(topLevelTarget);
      } else if (eventType === eventTypes.compositionEnd) {
        if (currentComposition) {
          fallbackData = currentComposition.getData();
        }
      }
    }

    var event = SyntheticCompositionEvent.getPooled(
      eventType,
      topLevelTargetID,
      nativeEvent
    );

    if (fallbackData) {
      // Inject data generated from fallback path into the synthetic event.
      // This matches the property of native CompositionEventInterface.
      event.data = fallbackData;
    } else {
      var customData = getDataFromCustomEvent(nativeEvent);
      if (customData !== null) {
        event.data = customData;
      }
    }

    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  }

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {object} nativeEvent Native browser event.
   * @return {?string} The string corresponding to this `beforeInput` event.
   */
  function getNativeBeforeInputChars(topLevelType, nativeEvent) {
    switch (topLevelType) {
      case topLevelTypes.topCompositionEnd:
        return getDataFromCustomEvent(nativeEvent);
      case topLevelTypes.topKeyPress:
        /**
         * If native `textInput` events are available, our goal is to make
         * use of them. However, there is a special case: the spacebar key.
         * In Webkit, preventing default on a spacebar `textInput` event
         * cancels character insertion, but it *also* causes the browser
         * to fall back to its default spacebar behavior of scrolling the
         * page.
         *
         * Tracking at:
         * https://code.google.com/p/chromium/issues/detail?id=355103
         *
         * To avoid this issue, use the keypress event as if no `textInput`
         * event is available.
         */
        var which = nativeEvent.which;
        if (which !== SPACEBAR_CODE) {
          return null;
        }

        hasSpaceKeypress = true;
        return SPACEBAR_CHAR;

      case topLevelTypes.topTextInput:
        // Record the characters to be added to the DOM.
        var chars = nativeEvent.data;

        // If it's a spacebar character, assume that we have already handled
        // it at the keypress level and bail immediately. Android Chrome
        // doesn't give us keycodes, so we need to blacklist it.
        if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
          return null;
        }

        return chars;

      default:
        // For other native event types, do nothing.
        return null;
    }
  }

  /**
   * For browsers that do not provide the `textInput` event, extract the
   * appropriate string to use for SyntheticInputEvent.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {object} nativeEvent Native browser event.
   * @return {?string} The fallback string for this `beforeInput` event.
   */
  function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
    // If we are currently composing (IME) and using a fallback to do so,
    // try to extract the composed characters from the fallback object.
    if (currentComposition) {
      if (
        topLevelType === topLevelTypes.topCompositionEnd ||
        isFallbackCompositionEnd(topLevelType, nativeEvent)
      ) {
        var chars = currentComposition.getData();
        FallbackCompositionState.release(currentComposition);
        currentComposition = null;
        return chars;
      }
      return null;
    }

    switch (topLevelType) {
      case topLevelTypes.topPaste:
        // If a paste event occurs after a keypress, throw out the input
        // chars. Paste events should not lead to BeforeInput events.
        return null;
      case topLevelTypes.topKeyPress:
        /**
         * As of v27, Firefox may fire keypress events even when no character
         * will be inserted. A few possibilities:
         *
         * - `which` is `0`. Arrow keys, Esc key, etc.
         *
         * - `which` is the pressed key code, but no char is available.
         *   Ex: 'AltGr + d` in Polish. There is no modified character for
         *   this key combination and no character is inserted into the
         *   document, but FF fires the keypress for char code `100` anyway.
         *   No `input` event will occur.
         *
         * - `which` is the pressed key code, but a command combination is
         *   being used. Ex: `Cmd+C`. No character is inserted, and no
         *   `input` event will occur.
         */
        if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
          return String.fromCharCode(nativeEvent.which);
        }
        return null;
      case topLevelTypes.topCompositionEnd:
        return useFallbackCompositionData ? null : nativeEvent.data;
      default:
        return null;
    }
  }

  /**
   * Extract a SyntheticInputEvent for `beforeInput`, based on either native
   * `textInput` or fallback behavior.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {?object} A SyntheticInputEvent.
   */
  function extractBeforeInputEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID,
    nativeEvent
  ) {
    var chars;

    if (canUseTextInputEvent) {
      chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
    } else {
      chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
    }

    // If no characters are being inserted, no BeforeInput event should
    // be fired.
    if (!chars) {
      return null;
    }

    var event = SyntheticInputEvent.getPooled(
      eventTypes.beforeInput,
      topLevelTargetID,
      nativeEvent
    );

    event.data = chars;
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  }

  /**
   * Create an `onBeforeInput` event to match
   * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
   *
   * This event plugin is based on the native `textInput` event
   * available in Chrome, Safari, Opera, and IE. This event fires after
   * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
   *
   * `beforeInput` is spec'd but not implemented in any browsers, and
   * the `input` event does not provide any useful information about what has
   * actually been added, contrary to the spec. Thus, `textInput` is the best
   * available event to identify the characters that have actually been inserted
   * into the target node.
   *
   * This plugin is also responsible for emitting `composition` events, thus
   * allowing us to share composition fallback code for both `beforeInput` and
   * `composition` event types.
   */
  var BeforeInputEventPlugin = {

    eventTypes: eventTypes,

    /**
     * @param {string} topLevelType Record from `EventConstants`.
     * @param {DOMEventTarget} topLevelTarget The listening component root node.
     * @param {string} topLevelTargetID ID of `topLevelTarget`.
     * @param {object} nativeEvent Native browser event.
     * @return {*} An accumulation of synthetic events.
     * @see {EventPluginHub.extractEvents}
     */
    extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent
    ) {
      return [
        extractCompositionEvent(
          topLevelType,
          topLevelTarget,
          topLevelTargetID,
          nativeEvent
        ),
        extractBeforeInputEvent(
          topLevelType,
          topLevelTarget,
          topLevelTargetID,
          nativeEvent
        )
      ];
    }
  };

  module.exports = BeforeInputEventPlugin;

},{"./EventConstants":341,"./EventPropagators":346,"./ExecutionEnvironment":347,"./FallbackCompositionState":348,"./SyntheticCompositionEvent":420,"./SyntheticInputEvent":424,"./keyOf":468}],330:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule CSSProperty
   */

  'use strict';

  /**
   * CSS properties which accept numbers but are not in units of "px".
   */
  var isUnitlessNumber = {
    boxFlex: true,
    boxFlexGroup: true,
    columnCount: true,
    flex: true,
    flexGrow: true,
    flexPositive: true,
    flexShrink: true,
    flexNegative: true,
    fontWeight: true,
    lineClamp: true,
    lineHeight: true,
    opacity: true,
    order: true,
    orphans: true,
    widows: true,
    zIndex: true,
    zoom: true,

    // SVG-related properties
    fillOpacity: true,
    strokeDashoffset: true,
    strokeOpacity: true,
    strokeWidth: true
  };

  /**
   * @param {string} prefix vendor-specific prefix, eg: Webkit
   * @param {string} key style name, eg: transitionDuration
   * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
   * WebkitTransitionDuration
   */
  function prefixKey(prefix, key) {
    return prefix + key.charAt(0).toUpperCase() + key.substring(1);
  }

  /**
   * Support style names that may come passed in prefixed by adding permutations
   * of vendor prefixes.
   */
  var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

  // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
  // infinite loop, because it iterates over the newly added props too.
  Object.keys(isUnitlessNumber).forEach(function(prop) {
    prefixes.forEach(function(prefix) {
      isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
    });
  });

  /**
   * Most style properties can be unset by doing .style[prop] = '' but IE8
   * doesn't like doing that with shorthand properties so for the properties that
   * IE8 breaks on, which are listed here, we instead unset each of the
   * individual properties. See http://bugs.jquery.com/ticket/12385.
   * The 4-value 'clock' properties like margin, padding, border-width seem to
   * behave without any problems. Curiously, list-style works too without any
   * special prodding.
   */
  var shorthandPropertyExpansions = {
    background: {
      backgroundImage: true,
      backgroundPosition: true,
      backgroundRepeat: true,
      backgroundColor: true
    },
    border: {
      borderWidth: true,
      borderStyle: true,
      borderColor: true
    },
    borderBottom: {
      borderBottomWidth: true,
      borderBottomStyle: true,
      borderBottomColor: true
    },
    borderLeft: {
      borderLeftWidth: true,
      borderLeftStyle: true,
      borderLeftColor: true
    },
    borderRight: {
      borderRightWidth: true,
      borderRightStyle: true,
      borderRightColor: true
    },
    borderTop: {
      borderTopWidth: true,
      borderTopStyle: true,
      borderTopColor: true
    },
    font: {
      fontStyle: true,
      fontVariant: true,
      fontWeight: true,
      fontSize: true,
      lineHeight: true,
      fontFamily: true
    }
  };

  var CSSProperty = {
    isUnitlessNumber: isUnitlessNumber,
    shorthandPropertyExpansions: shorthandPropertyExpansions
  };

  module.exports = CSSProperty;

},{}],331:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule CSSPropertyOperations
   * @typechecks static-only
   */

  'use strict';

  var CSSProperty = require("./CSSProperty");
  var ExecutionEnvironment = require("./ExecutionEnvironment");

  var camelizeStyleName = require("./camelizeStyleName");
  var dangerousStyleValue = require("./dangerousStyleValue");
  var hyphenateStyleName = require("./hyphenateStyleName");
  var memoizeStringOnly = require("./memoizeStringOnly");
  var warning = require("./warning");

  var processStyleName = memoizeStringOnly(function(styleName) {
    return hyphenateStyleName(styleName);
  });

  var styleFloatAccessor = 'cssFloat';
  if (ExecutionEnvironment.canUseDOM) {
    // IE8 only supports accessing cssFloat (standard) as styleFloat
    if (document.documentElement.style.cssFloat === undefined) {
      styleFloatAccessor = 'styleFloat';
    }
  }

  if ("production" !== "development") {
    // 'msTransform' is correct, but the other prefixes should be capitalized
    var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

    // style values shouldn't contain a semicolon
    var badStyleValueWithSemicolonPattern = /;\s*$/;

    var warnedStyleNames = {};
    var warnedStyleValues = {};

    var warnHyphenatedStyleName = function(name) {
      if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
        return;
      }

      warnedStyleNames[name] = true;
      ("production" !== "development" ? warning(
        false,
        'Unsupported style property %s. Did you mean %s?',
        name,
        camelizeStyleName(name)
      ) : null);
    };

    var warnBadVendoredStyleName = function(name) {
      if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
        return;
      }

      warnedStyleNames[name] = true;
      ("production" !== "development" ? warning(
        false,
        'Unsupported vendor-prefixed style property %s. Did you mean %s?',
        name,
        name.charAt(0).toUpperCase() + name.slice(1)
      ) : null);
    };

    var warnStyleValueWithSemicolon = function(name, value) {
      if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
        return;
      }

      warnedStyleValues[value] = true;
      ("production" !== "development" ? warning(
        false,
        'Style property values shouldn\'t contain a semicolon. ' +
        'Try "%s: %s" instead.',
        name,
        value.replace(badStyleValueWithSemicolonPattern, '')
      ) : null);
    };

    /**
     * @param {string} name
     * @param {*} value
     */
    var warnValidStyle = function(name, value) {
      if (name.indexOf('-') > -1) {
        warnHyphenatedStyleName(name);
      } else if (badVendoredStyleNamePattern.test(name)) {
        warnBadVendoredStyleName(name);
      } else if (badStyleValueWithSemicolonPattern.test(value)) {
        warnStyleValueWithSemicolon(name, value);
      }
    };
  }

  /**
   * Operations for dealing with CSS properties.
   */
  var CSSPropertyOperations = {

    /**
     * Serializes a mapping of style properties for use as inline styles:
     *
     *   > createMarkupForStyles({width: '200px', height: 0})
     *   "width:200px;height:0;"
     *
     * Undefined values are ignored so that declarative programming is easier.
     * The result should be HTML-escaped before insertion into the DOM.
     *
     * @param {object} styles
     * @return {?string}
     */
    createMarkupForStyles: function(styles) {
      var serialized = '';
      for (var styleName in styles) {
        if (!styles.hasOwnProperty(styleName)) {
          continue;
        }
        var styleValue = styles[styleName];
        if ("production" !== "development") {
          warnValidStyle(styleName, styleValue);
        }
        if (styleValue != null) {
          serialized += processStyleName(styleName) + ':';
          serialized += dangerousStyleValue(styleName, styleValue) + ';';
        }
      }
      return serialized || null;
    },

    /**
     * Sets the value for multiple styles on a node.  If a value is specified as
     * '' (empty string), the corresponding style property will be unset.
     *
     * @param {DOMElement} node
     * @param {object} styles
     */
    setValueForStyles: function(node, styles) {
      var style = node.style;
      for (var styleName in styles) {
        if (!styles.hasOwnProperty(styleName)) {
          continue;
        }
        if ("production" !== "development") {
          warnValidStyle(styleName, styles[styleName]);
        }
        var styleValue = dangerousStyleValue(styleName, styles[styleName]);
        if (styleName === 'float') {
          styleName = styleFloatAccessor;
        }
        if (styleValue) {
          style[styleName] = styleValue;
        } else {
          var expansion = CSSProperty.shorthandPropertyExpansions[styleName];
          if (expansion) {
            // Shorthand property that IE8 won't like unsetting, so unset each
            // component to placate it
            for (var individualStyleName in expansion) {
              style[individualStyleName] = '';
            }
          } else {
            style[styleName] = '';
          }
        }
      }
    }

  };

  module.exports = CSSPropertyOperations;

},{"./CSSProperty":330,"./ExecutionEnvironment":347,"./camelizeStyleName":435,"./dangerousStyleValue":440,"./hyphenateStyleName":460,"./memoizeStringOnly":470,"./warning":481}],332:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule CallbackQueue
   */

  'use strict';

  var PooledClass = require("./PooledClass");

  var assign = require("./Object.assign");
  var invariant = require("./invariant");

  /**
   * A specialized pseudo-event module to help keep track of components waiting to
   * be notified when their DOM representations are available for use.
   *
   * This implements `PooledClass`, so you should never need to instantiate this.
   * Instead, use `CallbackQueue.getPooled()`.
   *
   * @class ReactMountReady
   * @implements PooledClass
   * @internal
   */
  function CallbackQueue() {
    this._callbacks = null;
    this._contexts = null;
  }

  assign(CallbackQueue.prototype, {

    /**
     * Enqueues a callback to be invoked when `notifyAll` is invoked.
     *
     * @param {function} callback Invoked when `notifyAll` is invoked.
     * @param {?object} context Context to call `callback` with.
     * @internal
     */
    enqueue: function(callback, context) {
      this._callbacks = this._callbacks || [];
      this._contexts = this._contexts || [];
      this._callbacks.push(callback);
      this._contexts.push(context);
    },

    /**
     * Invokes all enqueued callbacks and clears the queue. This is invoked after
     * the DOM representation of a component has been created or updated.
     *
     * @internal
     */
    notifyAll: function() {
      var callbacks = this._callbacks;
      var contexts = this._contexts;
      if (callbacks) {
        ("production" !== "development" ? invariant(
          callbacks.length === contexts.length,
          'Mismatched list of contexts in callback queue'
        ) : invariant(callbacks.length === contexts.length));
        this._callbacks = null;
        this._contexts = null;
        for (var i = 0, l = callbacks.length; i < l; i++) {
          callbacks[i].call(contexts[i]);
        }
        callbacks.length = 0;
        contexts.length = 0;
      }
    },

    /**
     * Resets the internal queue.
     *
     * @internal
     */
    reset: function() {
      this._callbacks = null;
      this._contexts = null;
    },

    /**
     * `PooledClass` looks for this.
     */
    destructor: function() {
      this.reset();
    }

  });

  PooledClass.addPoolingTo(CallbackQueue);

  module.exports = CallbackQueue;

},{"./Object.assign":353,"./PooledClass":354,"./invariant":462}],333:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ChangeEventPlugin
   */

  'use strict';

  var EventConstants = require("./EventConstants");
  var EventPluginHub = require("./EventPluginHub");
  var EventPropagators = require("./EventPropagators");
  var ExecutionEnvironment = require("./ExecutionEnvironment");
  var ReactUpdates = require("./ReactUpdates");
  var SyntheticEvent = require("./SyntheticEvent");

  var isEventSupported = require("./isEventSupported");
  var isTextInputElement = require("./isTextInputElement");
  var keyOf = require("./keyOf");

  var topLevelTypes = EventConstants.topLevelTypes;

  var eventTypes = {
    change: {
      phasedRegistrationNames: {
        bubbled: keyOf({onChange: null}),
        captured: keyOf({onChangeCapture: null})
      },
      dependencies: [
        topLevelTypes.topBlur,
        topLevelTypes.topChange,
        topLevelTypes.topClick,
        topLevelTypes.topFocus,
        topLevelTypes.topInput,
        topLevelTypes.topKeyDown,
        topLevelTypes.topKeyUp,
        topLevelTypes.topSelectionChange
      ]
    }
  };

  /**
   * For IE shims
   */
  var activeElement = null;
  var activeElementID = null;
  var activeElementValue = null;
  var activeElementValueProp = null;

  /**
   * SECTION: handle `change` event
   */
  function shouldUseChangeEvent(elem) {
    return (
      elem.nodeName === 'SELECT' ||
      (elem.nodeName === 'INPUT' && elem.type === 'file')
    );
  }

  var doesChangeEventBubble = false;
  if (ExecutionEnvironment.canUseDOM) {
    // See `handleChange` comment below
    doesChangeEventBubble = isEventSupported('change') && (
        (!('documentMode' in document) || document.documentMode > 8)
      );
  }

  function manualDispatchChangeEvent(nativeEvent) {
    var event = SyntheticEvent.getPooled(
      eventTypes.change,
      activeElementID,
      nativeEvent
    );
    EventPropagators.accumulateTwoPhaseDispatches(event);

    // If change and propertychange bubbled, we'd just bind to it like all the
    // other events and have it go through ReactBrowserEventEmitter. Since it
    // doesn't, we manually listen for the events and so we have to enqueue and
    // process the abstract event manually.
    //
    // Batching is necessary here in order to ensure that all event handlers run
    // before the next rerender (including event handlers attached to ancestor
    // elements instead of directly on the input). Without this, controlled
    // components don't work properly in conjunction with event bubbling because
    // the component is rerendered and the value reverted before all the event
    // handlers can run. See https://github.com/facebook/react/issues/708.
    ReactUpdates.batchedUpdates(runEventInBatch, event);
  }

  function runEventInBatch(event) {
    EventPluginHub.enqueueEvents(event);
    EventPluginHub.processEventQueue();
  }

  function startWatchingForChangeEventIE8(target, targetID) {
    activeElement = target;
    activeElementID = targetID;
    activeElement.attachEvent('onchange', manualDispatchChangeEvent);
  }

  function stopWatchingForChangeEventIE8() {
    if (!activeElement) {
      return;
    }
    activeElement.detachEvent('onchange', manualDispatchChangeEvent);
    activeElement = null;
    activeElementID = null;
  }

  function getTargetIDForChangeEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
    if (topLevelType === topLevelTypes.topChange) {
      return topLevelTargetID;
    }
  }
  function handleEventsForChangeEventIE8(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
    if (topLevelType === topLevelTypes.topFocus) {
      // stopWatching() should be a noop here but we call it just in case we
      // missed a blur event somehow.
      stopWatchingForChangeEventIE8();
      startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
    } else if (topLevelType === topLevelTypes.topBlur) {
      stopWatchingForChangeEventIE8();
    }
  }


  /**
   * SECTION: handle `input` event
   */
  var isInputEventSupported = false;
  if (ExecutionEnvironment.canUseDOM) {
    // IE9 claims to support the input event but fails to trigger it when
    // deleting text, so we ignore its input events
    isInputEventSupported = isEventSupported('input') && (
        (!('documentMode' in document) || document.documentMode > 9)
      );
  }

  /**
   * (For old IE.) Replacement getter/setter for the `value` property that gets
   * set on the active element.
   */
  var newValueProp =  {
    get: function() {
      return activeElementValueProp.get.call(this);
    },
    set: function(val) {
      // Cast to a string so we can do equality checks.
      activeElementValue = '' + val;
      activeElementValueProp.set.call(this, val);
    }
  };

  /**
   * (For old IE.) Starts tracking propertychange events on the passed-in element
   * and override the value property so that we can distinguish user events from
   * value changes in JS.
   */
  function startWatchingForValueChange(target, targetID) {
    activeElement = target;
    activeElementID = targetID;
    activeElementValue = target.value;
    activeElementValueProp = Object.getOwnPropertyDescriptor(
      target.constructor.prototype,
      'value'
    );

    Object.defineProperty(activeElement, 'value', newValueProp);
    activeElement.attachEvent('onpropertychange', handlePropertyChange);
  }

  /**
   * (For old IE.) Removes the event listeners from the currently-tracked element,
   * if any exists.
   */
  function stopWatchingForValueChange() {
    if (!activeElement) {
      return;
    }

    // delete restores the original property definition
    delete activeElement.value;
    activeElement.detachEvent('onpropertychange', handlePropertyChange);

    activeElement = null;
    activeElementID = null;
    activeElementValue = null;
    activeElementValueProp = null;
  }

  /**
   * (For old IE.) Handles a propertychange event, sending a `change` event if
   * the value of the active element has changed.
   */
  function handlePropertyChange(nativeEvent) {
    if (nativeEvent.propertyName !== 'value') {
      return;
    }
    var value = nativeEvent.srcElement.value;
    if (value === activeElementValue) {
      return;
    }
    activeElementValue = value;

    manualDispatchChangeEvent(nativeEvent);
  }

  /**
   * If a `change` event should be fired, returns the target's ID.
   */
  function getTargetIDForInputEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
    if (topLevelType === topLevelTypes.topInput) {
      // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
      // what we want so fall through here and trigger an abstract event
      return topLevelTargetID;
    }
  }

  // For IE8 and IE9.
  function handleEventsForInputEventIE(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
    if (topLevelType === topLevelTypes.topFocus) {
      // In IE8, we can capture almost all .value changes by adding a
      // propertychange handler and looking for events with propertyName
      // equal to 'value'
      // In IE9, propertychange fires for most input events but is buggy and
      // doesn't fire when text is deleted, but conveniently, selectionchange
      // appears to fire in all of the remaining cases so we catch those and
      // forward the event if the value has changed
      // In either case, we don't want to call the event handler if the value
      // is changed from JS so we redefine a setter for `.value` that updates
      // our activeElementValue variable, allowing us to ignore those changes
      //
      // stopWatching() should be a noop here but we call it just in case we
      // missed a blur event somehow.
      stopWatchingForValueChange();
      startWatchingForValueChange(topLevelTarget, topLevelTargetID);
    } else if (topLevelType === topLevelTypes.topBlur) {
      stopWatchingForValueChange();
    }
  }

  // For IE8 and IE9.
  function getTargetIDForInputEventIE(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
    if (topLevelType === topLevelTypes.topSelectionChange ||
      topLevelType === topLevelTypes.topKeyUp ||
      topLevelType === topLevelTypes.topKeyDown) {
      // On the selectionchange event, the target is just document which isn't
      // helpful for us so just check activeElement instead.
      //
      // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
      // propertychange on the first input event after setting `value` from a
      // script and fires only keydown, keypress, keyup. Catching keyup usually
      // gets it and catching keydown lets us fire an event for the first
      // keystroke if user does a key repeat (it'll be a little delayed: right
      // before the second keystroke). Other input methods (e.g., paste) seem to
      // fire selectionchange normally.
      if (activeElement && activeElement.value !== activeElementValue) {
        activeElementValue = activeElement.value;
        return activeElementID;
      }
    }
  }


  /**
   * SECTION: handle `click` event
   */
  function shouldUseClickEvent(elem) {
    // Use the `click` event to detect changes to checkbox and radio inputs.
    // This approach works across all browsers, whereas `change` does not fire
    // until `blur` in IE8.
    return (
      elem.nodeName === 'INPUT' &&
      (elem.type === 'checkbox' || elem.type === 'radio')
    );
  }

  function getTargetIDForClickEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
    if (topLevelType === topLevelTypes.topClick) {
      return topLevelTargetID;
    }
  }

  /**
   * This plugin creates an `onChange` event that normalizes change events
   * across form elements. This event fires at a time when it's possible to
   * change the element's value without seeing a flicker.
   *
   * Supported elements are:
   * - input (see `isTextInputElement`)
   * - textarea
   * - select
   */
  var ChangeEventPlugin = {

    eventTypes: eventTypes,

    /**
     * @param {string} topLevelType Record from `EventConstants`.
     * @param {DOMEventTarget} topLevelTarget The listening component root node.
     * @param {string} topLevelTargetID ID of `topLevelTarget`.
     * @param {object} nativeEvent Native browser event.
     * @return {*} An accumulation of synthetic events.
     * @see {EventPluginHub.extractEvents}
     */
    extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

      var getTargetIDFunc, handleEventFunc;
      if (shouldUseChangeEvent(topLevelTarget)) {
        if (doesChangeEventBubble) {
          getTargetIDFunc = getTargetIDForChangeEvent;
        } else {
          handleEventFunc = handleEventsForChangeEventIE8;
        }
      } else if (isTextInputElement(topLevelTarget)) {
        if (isInputEventSupported) {
          getTargetIDFunc = getTargetIDForInputEvent;
        } else {
          getTargetIDFunc = getTargetIDForInputEventIE;
          handleEventFunc = handleEventsForInputEventIE;
        }
      } else if (shouldUseClickEvent(topLevelTarget)) {
        getTargetIDFunc = getTargetIDForClickEvent;
      }

      if (getTargetIDFunc) {
        var targetID = getTargetIDFunc(
          topLevelType,
          topLevelTarget,
          topLevelTargetID
        );
        if (targetID) {
          var event = SyntheticEvent.getPooled(
            eventTypes.change,
            targetID,
            nativeEvent
          );
          EventPropagators.accumulateTwoPhaseDispatches(event);
          return event;
        }
      }

      if (handleEventFunc) {
        handleEventFunc(
          topLevelType,
          topLevelTarget,
          topLevelTargetID
        );
      }
    }

  };

  module.exports = ChangeEventPlugin;

},{"./EventConstants":341,"./EventPluginHub":343,"./EventPropagators":346,"./ExecutionEnvironment":347,"./ReactUpdates":414,"./SyntheticEvent":422,"./isEventSupported":463,"./isTextInputElement":465,"./keyOf":468}],334:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ClientReactRootIndex
   * @typechecks
   */

  'use strict';

  var nextReactRootIndex = 0;

  var ClientReactRootIndex = {
    createReactRootIndex: function() {
      return nextReactRootIndex++;
    }
  };

  module.exports = ClientReactRootIndex;

},{}],335:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule DOMChildrenOperations
   * @typechecks static-only
   */

  'use strict';

  var Danger = require("./Danger");
  var ReactMultiChildUpdateTypes = require("./ReactMultiChildUpdateTypes");

  var setTextContent = require("./setTextContent");
  var invariant = require("./invariant");

  /**
   * Inserts `childNode` as a child of `parentNode` at the `index`.
   *
   * @param {DOMElement} parentNode Parent node in which to insert.
   * @param {DOMElement} childNode Child node to insert.
   * @param {number} index Index at which to insert the child.
   * @internal
   */
  function insertChildAt(parentNode, childNode, index) {
    // By exploiting arrays returning `undefined` for an undefined index, we can
    // rely exclusively on `insertBefore(node, null)` instead of also using
    // `appendChild(node)`. However, using `undefined` is not allowed by all
    // browsers so we must replace it with `null`.
    parentNode.insertBefore(
      childNode,
      parentNode.childNodes[index] || null
    );
  }

  /**
   * Operations for updating with DOM children.
   */
  var DOMChildrenOperations = {

    dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

    updateTextContent: setTextContent,

    /**
     * Updates a component's children by processing a series of updates. The
     * update configurations are each expected to have a `parentNode` property.
     *
     * @param {array<object>} updates List of update configurations.
     * @param {array<string>} markupList List of markup strings.
     * @internal
     */
    processUpdates: function(updates, markupList) {
      var update;
      // Mapping from parent IDs to initial child orderings.
      var initialChildren = null;
      // List of children that will be moved or removed.
      var updatedChildren = null;

      for (var i = 0; i < updates.length; i++) {
        update = updates[i];
        if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING ||
          update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
          var updatedIndex = update.fromIndex;
          var updatedChild = update.parentNode.childNodes[updatedIndex];
          var parentID = update.parentID;

          ("production" !== "development" ? invariant(
            updatedChild,
            'processUpdates(): Unable to find child %s of element. This ' +
            'probably means the DOM was unexpectedly mutated (e.g., by the ' +
            'browser), usually due to forgetting a <tbody> when using tables, ' +
            'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' +
            'in an <svg> parent. Try inspecting the child nodes of the element ' +
            'with React ID `%s`.',
            updatedIndex,
            parentID
          ) : invariant(updatedChild));

          initialChildren = initialChildren || {};
          initialChildren[parentID] = initialChildren[parentID] || [];
          initialChildren[parentID][updatedIndex] = updatedChild;

          updatedChildren = updatedChildren || [];
          updatedChildren.push(updatedChild);
        }
      }

      var renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);

      // Remove updated children first so that `toIndex` is consistent.
      if (updatedChildren) {
        for (var j = 0; j < updatedChildren.length; j++) {
          updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
        }
      }

      for (var k = 0; k < updates.length; k++) {
        update = updates[k];
        switch (update.type) {
          case ReactMultiChildUpdateTypes.INSERT_MARKUP:
            insertChildAt(
              update.parentNode,
              renderedMarkup[update.markupIndex],
              update.toIndex
            );
            break;
          case ReactMultiChildUpdateTypes.MOVE_EXISTING:
            insertChildAt(
              update.parentNode,
              initialChildren[update.parentID][update.fromIndex],
              update.toIndex
            );
            break;
          case ReactMultiChildUpdateTypes.TEXT_CONTENT:
            setTextContent(
              update.parentNode,
              update.textContent
            );
            break;
          case ReactMultiChildUpdateTypes.REMOVE_NODE:
            // Already removed by the for-loop above.
            break;
        }
      }
    }

  };

  module.exports = DOMChildrenOperations;

},{"./Danger":338,"./ReactMultiChildUpdateTypes":399,"./invariant":462,"./setTextContent":476}],336:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule DOMProperty
   * @typechecks static-only
   */

  /*jslint bitwise: true */

  'use strict';

  var invariant = require("./invariant");

  function checkMask(value, bitmask) {
    return (value & bitmask) === bitmask;
  }

  var DOMPropertyInjection = {
    /**
     * Mapping from normalized, camelcased property names to a configuration that
     * specifies how the associated DOM property should be accessed or rendered.
     */
    MUST_USE_ATTRIBUTE: 0x1,
    MUST_USE_PROPERTY: 0x2,
    HAS_SIDE_EFFECTS: 0x4,
    HAS_BOOLEAN_VALUE: 0x8,
    HAS_NUMERIC_VALUE: 0x10,
    HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
    HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,

    /**
     * Inject some specialized knowledge about the DOM. This takes a config object
     * with the following properties:
     *
     * isCustomAttribute: function that given an attribute name will return true
     * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
     * attributes where it's impossible to enumerate all of the possible
     * attribute names,
     *
     * Properties: object mapping DOM property name to one of the
     * DOMPropertyInjection constants or null. If your attribute isn't in here,
     * it won't get written to the DOM.
     *
     * DOMAttributeNames: object mapping React attribute name to the DOM
     * attribute name. Attribute names not specified use the **lowercase**
     * normalized name.
     *
     * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
     * Property names not specified use the normalized name.
     *
     * DOMMutationMethods: Properties that require special mutation methods. If
     * `value` is undefined, the mutation method should unset the property.
     *
     * @param {object} domPropertyConfig the config as described above.
     */
    injectDOMPropertyConfig: function(domPropertyConfig) {
      var Properties = domPropertyConfig.Properties || {};
      var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
      var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
      var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

      if (domPropertyConfig.isCustomAttribute) {
        DOMProperty._isCustomAttributeFunctions.push(
          domPropertyConfig.isCustomAttribute
        );
      }

      for (var propName in Properties) {
        ("production" !== "development" ? invariant(
          !DOMProperty.isStandardName.hasOwnProperty(propName),
          'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' +
          '\'%s\' which has already been injected. You may be accidentally ' +
          'injecting the same DOM property config twice, or you may be ' +
          'injecting two configs that have conflicting property names.',
          propName
        ) : invariant(!DOMProperty.isStandardName.hasOwnProperty(propName)));

        DOMProperty.isStandardName[propName] = true;

        var lowerCased = propName.toLowerCase();
        DOMProperty.getPossibleStandardName[lowerCased] = propName;

        if (DOMAttributeNames.hasOwnProperty(propName)) {
          var attributeName = DOMAttributeNames[propName];
          DOMProperty.getPossibleStandardName[attributeName] = propName;
          DOMProperty.getAttributeName[propName] = attributeName;
        } else {
          DOMProperty.getAttributeName[propName] = lowerCased;
        }

        DOMProperty.getPropertyName[propName] =
          DOMPropertyNames.hasOwnProperty(propName) ?
            DOMPropertyNames[propName] :
            propName;

        if (DOMMutationMethods.hasOwnProperty(propName)) {
          DOMProperty.getMutationMethod[propName] = DOMMutationMethods[propName];
        } else {
          DOMProperty.getMutationMethod[propName] = null;
        }

        var propConfig = Properties[propName];
        DOMProperty.mustUseAttribute[propName] =
          checkMask(propConfig, DOMPropertyInjection.MUST_USE_ATTRIBUTE);
        DOMProperty.mustUseProperty[propName] =
          checkMask(propConfig, DOMPropertyInjection.MUST_USE_PROPERTY);
        DOMProperty.hasSideEffects[propName] =
          checkMask(propConfig, DOMPropertyInjection.HAS_SIDE_EFFECTS);
        DOMProperty.hasBooleanValue[propName] =
          checkMask(propConfig, DOMPropertyInjection.HAS_BOOLEAN_VALUE);
        DOMProperty.hasNumericValue[propName] =
          checkMask(propConfig, DOMPropertyInjection.HAS_NUMERIC_VALUE);
        DOMProperty.hasPositiveNumericValue[propName] =
          checkMask(propConfig, DOMPropertyInjection.HAS_POSITIVE_NUMERIC_VALUE);
        DOMProperty.hasOverloadedBooleanValue[propName] =
          checkMask(propConfig, DOMPropertyInjection.HAS_OVERLOADED_BOOLEAN_VALUE);

        ("production" !== "development" ? invariant(
          !DOMProperty.mustUseAttribute[propName] ||
          !DOMProperty.mustUseProperty[propName],
          'DOMProperty: Cannot require using both attribute and property: %s',
          propName
        ) : invariant(!DOMProperty.mustUseAttribute[propName] ||
          !DOMProperty.mustUseProperty[propName]));
        ("production" !== "development" ? invariant(
          DOMProperty.mustUseProperty[propName] ||
          !DOMProperty.hasSideEffects[propName],
          'DOMProperty: Properties that have side effects must use property: %s',
          propName
        ) : invariant(DOMProperty.mustUseProperty[propName] ||
          !DOMProperty.hasSideEffects[propName]));
        ("production" !== "development" ? invariant(
          !!DOMProperty.hasBooleanValue[propName] +
          !!DOMProperty.hasNumericValue[propName] +
          !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1,
          'DOMProperty: Value can be one of boolean, overloaded boolean, or ' +
          'numeric value, but not a combination: %s',
          propName
        ) : invariant(!!DOMProperty.hasBooleanValue[propName] +
          !!DOMProperty.hasNumericValue[propName] +
          !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1));
      }
    }
  };
  var defaultValueCache = {};

  /**
   * DOMProperty exports lookup objects that can be used like functions:
   *
   *   > DOMProperty.isValid['id']
   *   true
   *   > DOMProperty.isValid['foobar']
   *   undefined
   *
   * Although this may be confusing, it performs better in general.
   *
   * @see http://jsperf.com/key-exists
   * @see http://jsperf.com/key-missing
   */
  var DOMProperty = {

    ID_ATTRIBUTE_NAME: 'data-reactid',

    /**
     * Checks whether a property name is a standard property.
     * @type {Object}
     */
    isStandardName: {},

    /**
     * Mapping from lowercase property names to the properly cased version, used
     * to warn in the case of missing properties.
     * @type {Object}
     */
    getPossibleStandardName: {},

    /**
     * Mapping from normalized names to attribute names that differ. Attribute
     * names are used when rendering markup or with `*Attribute()`.
     * @type {Object}
     */
    getAttributeName: {},

    /**
     * Mapping from normalized names to properties on DOM node instances.
     * (This includes properties that mutate due to external factors.)
     * @type {Object}
     */
    getPropertyName: {},

    /**
     * Mapping from normalized names to mutation methods. This will only exist if
     * mutation cannot be set simply by the property or `setAttribute()`.
     * @type {Object}
     */
    getMutationMethod: {},

    /**
     * Whether the property must be accessed and mutated as an object property.
     * @type {Object}
     */
    mustUseAttribute: {},

    /**
     * Whether the property must be accessed and mutated using `*Attribute()`.
     * (This includes anything that fails `<propName> in <element>`.)
     * @type {Object}
     */
    mustUseProperty: {},

    /**
     * Whether or not setting a value causes side effects such as triggering
     * resources to be loaded or text selection changes. We must ensure that
     * the value is only set if it has changed.
     * @type {Object}
     */
    hasSideEffects: {},

    /**
     * Whether the property should be removed when set to a falsey value.
     * @type {Object}
     */
    hasBooleanValue: {},

    /**
     * Whether the property must be numeric or parse as a
     * numeric and should be removed when set to a falsey value.
     * @type {Object}
     */
    hasNumericValue: {},

    /**
     * Whether the property must be positive numeric or parse as a positive
     * numeric and should be removed when set to a falsey value.
     * @type {Object}
     */
    hasPositiveNumericValue: {},

    /**
     * Whether the property can be used as a flag as well as with a value. Removed
     * when strictly equal to false; present without a value when strictly equal
     * to true; present with a value otherwise.
     * @type {Object}
     */
    hasOverloadedBooleanValue: {},

    /**
     * All of the isCustomAttribute() functions that have been injected.
     */
    _isCustomAttributeFunctions: [],

    /**
     * Checks whether a property name is a custom attribute.
     * @method
     */
    isCustomAttribute: function(attributeName) {
      for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
        var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
        if (isCustomAttributeFn(attributeName)) {
          return true;
        }
      }
      return false;
    },

    /**
     * Returns the default property value for a DOM property (i.e., not an
     * attribute). Most default values are '' or false, but not all. Worse yet,
     * some (in particular, `type`) vary depending on the type of element.
     *
     * TODO: Is it better to grab all the possible properties when creating an
     * element to avoid having to create the same element twice?
     */
    getDefaultValueForProperty: function(nodeName, prop) {
      var nodeDefaults = defaultValueCache[nodeName];
      var testElement;
      if (!nodeDefaults) {
        defaultValueCache[nodeName] = nodeDefaults = {};
      }
      if (!(prop in nodeDefaults)) {
        testElement = document.createElement(nodeName);
        nodeDefaults[prop] = testElement[prop];
      }
      return nodeDefaults[prop];
    },

    injection: DOMPropertyInjection
  };

  module.exports = DOMProperty;

},{"./invariant":462}],337:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule DOMPropertyOperations
   * @typechecks static-only
   */

  'use strict';

  var DOMProperty = require("./DOMProperty");

  var quoteAttributeValueForBrowser = require("./quoteAttributeValueForBrowser");
  var warning = require("./warning");

  function shouldIgnoreValue(name, value) {
    return value == null ||
      (DOMProperty.hasBooleanValue[name] && !value) ||
      (DOMProperty.hasNumericValue[name] && isNaN(value)) ||
      (DOMProperty.hasPositiveNumericValue[name] && (value < 1)) ||
      (DOMProperty.hasOverloadedBooleanValue[name] && value === false);
  }

  if ("production" !== "development") {
    var reactProps = {
      children: true,
      dangerouslySetInnerHTML: true,
      key: true,
      ref: true
    };
    var warnedProperties = {};

    var warnUnknownProperty = function(name) {
      if (reactProps.hasOwnProperty(name) && reactProps[name] ||
        warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
        return;
      }

      warnedProperties[name] = true;
      var lowerCasedName = name.toLowerCase();

      // data-* attributes should be lowercase; suggest the lowercase version
      var standardName = (
        DOMProperty.isCustomAttribute(lowerCasedName) ?
          lowerCasedName :
          DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ?
            DOMProperty.getPossibleStandardName[lowerCasedName] :
            null
      );

      // For now, only warn when we have a suggested correction. This prevents
      // logging too much when using transferPropsTo.
      ("production" !== "development" ? warning(
        standardName == null,
        'Unknown DOM property %s. Did you mean %s?',
        name,
        standardName
      ) : null);

    };
  }

  /**
   * Operations for dealing with DOM properties.
   */
  var DOMPropertyOperations = {

    /**
     * Creates markup for the ID property.
     *
     * @param {string} id Unescaped ID.
     * @return {string} Markup string.
     */
    createMarkupForID: function(id) {
      return DOMProperty.ID_ATTRIBUTE_NAME + '=' +
        quoteAttributeValueForBrowser(id);
    },

    /**
     * Creates markup for a property.
     *
     * @param {string} name
     * @param {*} value
     * @return {?string} Markup string, or null if the property was invalid.
     */
    createMarkupForProperty: function(name, value) {
      if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
        if (shouldIgnoreValue(name, value)) {
          return '';
        }
        var attributeName = DOMProperty.getAttributeName[name];
        if (DOMProperty.hasBooleanValue[name] ||
          (DOMProperty.hasOverloadedBooleanValue[name] && value === true)) {
          return attributeName;
        }
        return attributeName + '=' + quoteAttributeValueForBrowser(value);
      } else if (DOMProperty.isCustomAttribute(name)) {
        if (value == null) {
          return '';
        }
        return name + '=' + quoteAttributeValueForBrowser(value);
      } else if ("production" !== "development") {
        warnUnknownProperty(name);
      }
      return null;
    },

    /**
     * Sets the value for a property on a node.
     *
     * @param {DOMElement} node
     * @param {string} name
     * @param {*} value
     */
    setValueForProperty: function(node, name, value) {
      if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
        var mutationMethod = DOMProperty.getMutationMethod[name];
        if (mutationMethod) {
          mutationMethod(node, value);
        } else if (shouldIgnoreValue(name, value)) {
          this.deleteValueForProperty(node, name);
        } else if (DOMProperty.mustUseAttribute[name]) {
          // `setAttribute` with objects becomes only `[object]` in IE8/9,
          // ('' + value) makes it output the correct toString()-value.
          node.setAttribute(DOMProperty.getAttributeName[name], '' + value);
        } else {
          var propName = DOMProperty.getPropertyName[name];
          // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
          // property type before comparing; only `value` does and is string.
          if (!DOMProperty.hasSideEffects[name] ||
            ('' + node[propName]) !== ('' + value)) {
            // Contrary to `setAttribute`, object properties are properly
            // `toString`ed by IE8/9.
            node[propName] = value;
          }
        }
      } else if (DOMProperty.isCustomAttribute(name)) {
        if (value == null) {
          node.removeAttribute(name);
        } else {
          node.setAttribute(name, '' + value);
        }
      } else if ("production" !== "development") {
        warnUnknownProperty(name);
      }
    },

    /**
     * Deletes the value for a property on a node.
     *
     * @param {DOMElement} node
     * @param {string} name
     */
    deleteValueForProperty: function(node, name) {
      if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
        var mutationMethod = DOMProperty.getMutationMethod[name];
        if (mutationMethod) {
          mutationMethod(node, undefined);
        } else if (DOMProperty.mustUseAttribute[name]) {
          node.removeAttribute(DOMProperty.getAttributeName[name]);
        } else {
          var propName = DOMProperty.getPropertyName[name];
          var defaultValue = DOMProperty.getDefaultValueForProperty(
            node.nodeName,
            propName
          );
          if (!DOMProperty.hasSideEffects[name] ||
            ('' + node[propName]) !== defaultValue) {
            node[propName] = defaultValue;
          }
        }
      } else if (DOMProperty.isCustomAttribute(name)) {
        node.removeAttribute(name);
      } else if ("production" !== "development") {
        warnUnknownProperty(name);
      }
    }

  };

  module.exports = DOMPropertyOperations;

},{"./DOMProperty":336,"./quoteAttributeValueForBrowser":474,"./warning":481}],338:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule Danger
   * @typechecks static-only
   */

  /*jslint evil: true, sub: true */

  'use strict';

  var ExecutionEnvironment = require("./ExecutionEnvironment");

  var createNodesFromMarkup = require("./createNodesFromMarkup");
  var emptyFunction = require("./emptyFunction");
  var getMarkupWrap = require("./getMarkupWrap");
  var invariant = require("./invariant");

  var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
  var RESULT_INDEX_ATTR = 'data-danger-index';

  /**
   * Extracts the `nodeName` from a string of markup.
   *
   * NOTE: Extracting the `nodeName` does not require a regular expression match
   * because we make assumptions about React-generated markup (i.e. there are no
   * spaces surrounding the opening tag and there is at least one attribute).
   *
   * @param {string} markup String of markup.
   * @return {string} Node name of the supplied markup.
   * @see http://jsperf.com/extract-nodename
   */
  function getNodeName(markup) {
    return markup.substring(1, markup.indexOf(' '));
  }

  var Danger = {

    /**
     * Renders markup into an array of nodes. The markup is expected to render
     * into a list of root nodes. Also, the length of `resultList` and
     * `markupList` should be the same.
     *
     * @param {array<string>} markupList List of markup strings to render.
     * @return {array<DOMElement>} List of rendered nodes.
     * @internal
     */
    dangerouslyRenderMarkup: function(markupList) {
      ("production" !== "development" ? invariant(
        ExecutionEnvironment.canUseDOM,
        'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' +
        'thread. Make sure `window` and `document` are available globally ' +
        'before requiring React when unit testing or use ' +
        'React.renderToString for server rendering.'
      ) : invariant(ExecutionEnvironment.canUseDOM));
      var nodeName;
      var markupByNodeName = {};
      // Group markup by `nodeName` if a wrap is necessary, else by '*'.
      for (var i = 0; i < markupList.length; i++) {
        ("production" !== "development" ? invariant(
          markupList[i],
          'dangerouslyRenderMarkup(...): Missing markup.'
        ) : invariant(markupList[i]));
        nodeName = getNodeName(markupList[i]);
        nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
        markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
        markupByNodeName[nodeName][i] = markupList[i];
      }
      var resultList = [];
      var resultListAssignmentCount = 0;
      for (nodeName in markupByNodeName) {
        if (!markupByNodeName.hasOwnProperty(nodeName)) {
          continue;
        }
        var markupListByNodeName = markupByNodeName[nodeName];

        // This for-in loop skips the holes of the sparse array. The order of
        // iteration should follow the order of assignment, which happens to match
        // numerical index order, but we don't rely on that.
        var resultIndex;
        for (resultIndex in markupListByNodeName) {
          if (markupListByNodeName.hasOwnProperty(resultIndex)) {
            var markup = markupListByNodeName[resultIndex];

            // Push the requested markup with an additional RESULT_INDEX_ATTR
            // attribute.  If the markup does not start with a < character, it
            // will be discarded below (with an appropriate console.error).
            markupListByNodeName[resultIndex] = markup.replace(
              OPEN_TAG_NAME_EXP,
              // This index will be parsed back out below.
              '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" '
            );
          }
        }

        // Render each group of markup with similar wrapping `nodeName`.
        var renderNodes = createNodesFromMarkup(
          markupListByNodeName.join(''),
          emptyFunction // Do nothing special with <script> tags.
        );

        for (var j = 0; j < renderNodes.length; ++j) {
          var renderNode = renderNodes[j];
          if (renderNode.hasAttribute &&
            renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

            resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
            renderNode.removeAttribute(RESULT_INDEX_ATTR);

            ("production" !== "development" ? invariant(
              !resultList.hasOwnProperty(resultIndex),
              'Danger: Assigning to an already-occupied result index.'
            ) : invariant(!resultList.hasOwnProperty(resultIndex)));

            resultList[resultIndex] = renderNode;

            // This should match resultList.length and markupList.length when
            // we're done.
            resultListAssignmentCount += 1;

          } else if ("production" !== "development") {
            console.error(
              'Danger: Discarding unexpected node:',
              renderNode
            );
          }
        }
      }

      // Although resultList was populated out of order, it should now be a dense
      // array.
      ("production" !== "development" ? invariant(
        resultListAssignmentCount === resultList.length,
        'Danger: Did not assign to every index of resultList.'
      ) : invariant(resultListAssignmentCount === resultList.length));

      ("production" !== "development" ? invariant(
        resultList.length === markupList.length,
        'Danger: Expected markup to render %s nodes, but rendered %s.',
        markupList.length,
        resultList.length
      ) : invariant(resultList.length === markupList.length));

      return resultList;
    },

    /**
     * Replaces a node with a string of markup at its current position within its
     * parent. The markup must render into a single root node.
     *
     * @param {DOMElement} oldChild Child node to replace.
     * @param {string} markup Markup to render in place of the child node.
     * @internal
     */
    dangerouslyReplaceNodeWithMarkup: function(oldChild, markup) {
      ("production" !== "development" ? invariant(
        ExecutionEnvironment.canUseDOM,
        'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' +
        'worker thread. Make sure `window` and `document` are available ' +
        'globally before requiring React when unit testing or use ' +
        'React.renderToString for server rendering.'
      ) : invariant(ExecutionEnvironment.canUseDOM));
      ("production" !== "development" ? invariant(markup, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(markup));
      ("production" !== "development" ? invariant(
        oldChild.tagName.toLowerCase() !== 'html',
        'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' +
        '<html> node. This is because browser quirks make this unreliable ' +
        'and/or slow. If you want to render to the root you must use ' +
        'server rendering. See React.renderToString().'
      ) : invariant(oldChild.tagName.toLowerCase() !== 'html'));

      var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
      oldChild.parentNode.replaceChild(newChild, oldChild);
    }

  };

  module.exports = Danger;

},{"./ExecutionEnvironment":347,"./createNodesFromMarkup":439,"./emptyFunction":441,"./getMarkupWrap":454,"./invariant":462}],339:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule DefaultEventPluginOrder
   */

  'use strict';

  var keyOf = require("./keyOf");

  /**
   * Module that is injectable into `EventPluginHub`, that specifies a
   * deterministic ordering of `EventPlugin`s. A convenient way to reason about
   * plugins, without having to package every one of them. This is better than
   * having plugins be ordered in the same order that they are injected because
   * that ordering would be influenced by the packaging order.
   * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
   * preventing default on events is convenient in `SimpleEventPlugin` handlers.
   */
  var DefaultEventPluginOrder = [
    keyOf({ResponderEventPlugin: null}),
    keyOf({SimpleEventPlugin: null}),
    keyOf({TapEventPlugin: null}),
    keyOf({EnterLeaveEventPlugin: null}),
    keyOf({ChangeEventPlugin: null}),
    keyOf({SelectEventPlugin: null}),
    keyOf({BeforeInputEventPlugin: null}),
    keyOf({AnalyticsEventPlugin: null}),
    keyOf({MobileSafariClickEventPlugin: null})
  ];

  module.exports = DefaultEventPluginOrder;

},{"./keyOf":468}],340:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule EnterLeaveEventPlugin
   * @typechecks static-only
   */

  'use strict';

  var EventConstants = require("./EventConstants");
  var EventPropagators = require("./EventPropagators");
  var SyntheticMouseEvent = require("./SyntheticMouseEvent");

  var ReactMount = require("./ReactMount");
  var keyOf = require("./keyOf");

  var topLevelTypes = EventConstants.topLevelTypes;
  var getFirstReactDOM = ReactMount.getFirstReactDOM;

  var eventTypes = {
    mouseEnter: {
      registrationName: keyOf({onMouseEnter: null}),
      dependencies: [
        topLevelTypes.topMouseOut,
        topLevelTypes.topMouseOver
      ]
    },
    mouseLeave: {
      registrationName: keyOf({onMouseLeave: null}),
      dependencies: [
        topLevelTypes.topMouseOut,
        topLevelTypes.topMouseOver
      ]
    }
  };

  var extractedEvents = [null, null];

  var EnterLeaveEventPlugin = {

    eventTypes: eventTypes,

    /**
     * For almost every interaction we care about, there will be both a top-level
     * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
     * we do not extract duplicate events. However, moving the mouse into the
     * browser from outside will not fire a `mouseout` event. In this case, we use
     * the `mouseover` top-level event.
     *
     * @param {string} topLevelType Record from `EventConstants`.
     * @param {DOMEventTarget} topLevelTarget The listening component root node.
     * @param {string} topLevelTargetID ID of `topLevelTarget`.
     * @param {object} nativeEvent Native browser event.
     * @return {*} An accumulation of synthetic events.
     * @see {EventPluginHub.extractEvents}
     */
    extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
      if (topLevelType === topLevelTypes.topMouseOver &&
        (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
        return null;
      }
      if (topLevelType !== topLevelTypes.topMouseOut &&
        topLevelType !== topLevelTypes.topMouseOver) {
        // Must not be a mouse in or mouse out - ignoring.
        return null;
      }

      var win;
      if (topLevelTarget.window === topLevelTarget) {
        // `topLevelTarget` is probably a window object.
        win = topLevelTarget;
      } else {
        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
        var doc = topLevelTarget.ownerDocument;
        if (doc) {
          win = doc.defaultView || doc.parentWindow;
        } else {
          win = window;
        }
      }

      var from, to;
      if (topLevelType === topLevelTypes.topMouseOut) {
        from = topLevelTarget;
        to =
          getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement) ||
          win;
      } else {
        from = win;
        to = topLevelTarget;
      }

      if (from === to) {
        // Nothing pertains to our managed components.
        return null;
      }

      var fromID = from ? ReactMount.getID(from) : '';
      var toID = to ? ReactMount.getID(to) : '';

      var leave = SyntheticMouseEvent.getPooled(
        eventTypes.mouseLeave,
        fromID,
        nativeEvent
      );
      leave.type = 'mouseleave';
      leave.target = from;
      leave.relatedTarget = to;

      var enter = SyntheticMouseEvent.getPooled(
        eventTypes.mouseEnter,
        toID,
        nativeEvent
      );
      enter.type = 'mouseenter';
      enter.target = to;
      enter.relatedTarget = from;

      EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

      extractedEvents[0] = leave;
      extractedEvents[1] = enter;

      return extractedEvents;
    }

  };

  module.exports = EnterLeaveEventPlugin;

},{"./EventConstants":341,"./EventPropagators":346,"./ReactMount":397,"./SyntheticMouseEvent":426,"./keyOf":468}],341:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule EventConstants
   */

  'use strict';

  var keyMirror = require("./keyMirror");

  var PropagationPhases = keyMirror({bubbled: null, captured: null});

  /**
   * Types of raw signals from the browser caught at the top level.
   */
  var topLevelTypes = keyMirror({
    topBlur: null,
    topChange: null,
    topClick: null,
    topCompositionEnd: null,
    topCompositionStart: null,
    topCompositionUpdate: null,
    topContextMenu: null,
    topCopy: null,
    topCut: null,
    topDoubleClick: null,
    topDrag: null,
    topDragEnd: null,
    topDragEnter: null,
    topDragExit: null,
    topDragLeave: null,
    topDragOver: null,
    topDragStart: null,
    topDrop: null,
    topError: null,
    topFocus: null,
    topInput: null,
    topKeyDown: null,
    topKeyPress: null,
    topKeyUp: null,
    topLoad: null,
    topMouseDown: null,
    topMouseMove: null,
    topMouseOut: null,
    topMouseOver: null,
    topMouseUp: null,
    topPaste: null,
    topReset: null,
    topScroll: null,
    topSelectionChange: null,
    topSubmit: null,
    topTextInput: null,
    topTouchCancel: null,
    topTouchEnd: null,
    topTouchMove: null,
    topTouchStart: null,
    topWheel: null
  });

  var EventConstants = {
    topLevelTypes: topLevelTypes,
    PropagationPhases: PropagationPhases
  };

  module.exports = EventConstants;

},{"./keyMirror":467}],342:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *
   * @providesModule EventListener
   * @typechecks
   */

  var emptyFunction = require("./emptyFunction");

  /**
   * Upstream version of event listener. Does not take into account specific
   * nature of platform.
   */
  var EventListener = {
    /**
     * Listen to DOM events during the bubble phase.
     *
     * @param {DOMEventTarget} target DOM element to register listener on.
     * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
     * @param {function} callback Callback function.
     * @return {object} Object with a `remove` method.
     */
    listen: function(target, eventType, callback) {
      if (target.addEventListener) {
        target.addEventListener(eventType, callback, false);
        return {
          remove: function() {
            target.removeEventListener(eventType, callback, false);
          }
        };
      } else if (target.attachEvent) {
        target.attachEvent('on' + eventType, callback);
        return {
          remove: function() {
            target.detachEvent('on' + eventType, callback);
          }
        };
      }
    },

    /**
     * Listen to DOM events during the capture phase.
     *
     * @param {DOMEventTarget} target DOM element to register listener on.
     * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
     * @param {function} callback Callback function.
     * @return {object} Object with a `remove` method.
     */
    capture: function(target, eventType, callback) {
      if (!target.addEventListener) {
        if ("production" !== "development") {
          console.error(
            'Attempted to listen to events during the capture phase on a ' +
            'browser that does not support the capture phase. Your application ' +
            'will not receive some events.'
          );
        }
        return {
          remove: emptyFunction
        };
      } else {
        target.addEventListener(eventType, callback, true);
        return {
          remove: function() {
            target.removeEventListener(eventType, callback, true);
          }
        };
      }
    },

    registerDefault: function() {}
  };

  module.exports = EventListener;

},{"./emptyFunction":441}],343:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule EventPluginHub
   */

  'use strict';

  var EventPluginRegistry = require("./EventPluginRegistry");
  var EventPluginUtils = require("./EventPluginUtils");

  var accumulateInto = require("./accumulateInto");
  var forEachAccumulated = require("./forEachAccumulated");
  var invariant = require("./invariant");

  /**
   * Internal store for event listeners
   */
  var listenerBank = {};

  /**
   * Internal queue of events that have accumulated their dispatches and are
   * waiting to have their dispatches executed.
   */
  var eventQueue = null;

  /**
   * Dispatches an event and releases it back into the pool, unless persistent.
   *
   * @param {?object} event Synthetic event to be dispatched.
   * @private
   */
  var executeDispatchesAndRelease = function(event) {
    if (event) {
      var executeDispatch = EventPluginUtils.executeDispatch;
      // Plugins can provide custom behavior when dispatching events.
      var PluginModule = EventPluginRegistry.getPluginModuleForEvent(event);
      if (PluginModule && PluginModule.executeDispatch) {
        executeDispatch = PluginModule.executeDispatch;
      }
      EventPluginUtils.executeDispatchesInOrder(event, executeDispatch);

      if (!event.isPersistent()) {
        event.constructor.release(event);
      }
    }
  };

  /**
   * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
   *   hierarchy given ids of the logical DOM elements involved.
   */
  var InstanceHandle = null;

  function validateInstanceHandle() {
    var valid =
      InstanceHandle &&
      InstanceHandle.traverseTwoPhase &&
      InstanceHandle.traverseEnterLeave;
    ("production" !== "development" ? invariant(
      valid,
      'InstanceHandle not injected before use!'
    ) : invariant(valid));
  }

  /**
   * This is a unified interface for event plugins to be installed and configured.
   *
   * Event plugins can implement the following properties:
   *
   *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
   *     Required. When a top-level event is fired, this method is expected to
   *     extract synthetic events that will in turn be queued and dispatched.
   *
   *   `eventTypes` {object}
   *     Optional, plugins that fire events must publish a mapping of registration
   *     names that are used to register listeners. Values of this mapping must
   *     be objects that contain `registrationName` or `phasedRegistrationNames`.
   *
   *   `executeDispatch` {function(object, function, string)}
   *     Optional, allows plugins to override how an event gets dispatched. By
   *     default, the listener is simply invoked.
   *
   * Each plugin that is injected into `EventsPluginHub` is immediately operable.
   *
   * @public
   */
  var EventPluginHub = {

    /**
     * Methods for injecting dependencies.
     */
    injection: {

      /**
       * @param {object} InjectedMount
       * @public
       */
      injectMount: EventPluginUtils.injection.injectMount,

      /**
       * @param {object} InjectedInstanceHandle
       * @public
       */
      injectInstanceHandle: function(InjectedInstanceHandle) {
        InstanceHandle = InjectedInstanceHandle;
        if ("production" !== "development") {
          validateInstanceHandle();
        }
      },

      getInstanceHandle: function() {
        if ("production" !== "development") {
          validateInstanceHandle();
        }
        return InstanceHandle;
      },

      /**
       * @param {array} InjectedEventPluginOrder
       * @public
       */
      injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

      /**
       * @param {object} injectedNamesToPlugins Map from names to plugin modules.
       */
      injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

    },

    eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

    registrationNameModules: EventPluginRegistry.registrationNameModules,

    /**
     * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
     *
     * @param {string} id ID of the DOM element.
     * @param {string} registrationName Name of listener (e.g. `onClick`).
     * @param {?function} listener The callback to store.
     */
    putListener: function(id, registrationName, listener) {
      ("production" !== "development" ? invariant(
        !listener || typeof listener === 'function',
        'Expected %s listener to be a function, instead got type %s',
        registrationName, typeof listener
      ) : invariant(!listener || typeof listener === 'function'));

      var bankForRegistrationName =
        listenerBank[registrationName] || (listenerBank[registrationName] = {});
      bankForRegistrationName[id] = listener;
    },

    /**
     * @param {string} id ID of the DOM element.
     * @param {string} registrationName Name of listener (e.g. `onClick`).
     * @return {?function} The stored callback.
     */
    getListener: function(id, registrationName) {
      var bankForRegistrationName = listenerBank[registrationName];
      return bankForRegistrationName && bankForRegistrationName[id];
    },

    /**
     * Deletes a listener from the registration bank.
     *
     * @param {string} id ID of the DOM element.
     * @param {string} registrationName Name of listener (e.g. `onClick`).
     */
    deleteListener: function(id, registrationName) {
      var bankForRegistrationName = listenerBank[registrationName];
      if (bankForRegistrationName) {
        delete bankForRegistrationName[id];
      }
    },

    /**
     * Deletes all listeners for the DOM element with the supplied ID.
     *
     * @param {string} id ID of the DOM element.
     */
    deleteAllListeners: function(id) {
      for (var registrationName in listenerBank) {
        delete listenerBank[registrationName][id];
      }
    },

    /**
     * Allows registered plugins an opportunity to extract events from top-level
     * native browser events.
     *
     * @param {string} topLevelType Record from `EventConstants`.
     * @param {DOMEventTarget} topLevelTarget The listening component root node.
     * @param {string} topLevelTargetID ID of `topLevelTarget`.
     * @param {object} nativeEvent Native browser event.
     * @return {*} An accumulation of synthetic events.
     * @internal
     */
    extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
      var events;
      var plugins = EventPluginRegistry.plugins;
      for (var i = 0, l = plugins.length; i < l; i++) {
        // Not every plugin in the ordering may be loaded at runtime.
        var possiblePlugin = plugins[i];
        if (possiblePlugin) {
          var extractedEvents = possiblePlugin.extractEvents(
            topLevelType,
            topLevelTarget,
            topLevelTargetID,
            nativeEvent
          );
          if (extractedEvents) {
            events = accumulateInto(events, extractedEvents);
          }
        }
      }
      return events;
    },

    /**
     * Enqueues a synthetic event that should be dispatched when
     * `processEventQueue` is invoked.
     *
     * @param {*} events An accumulation of synthetic events.
     * @internal
     */
    enqueueEvents: function(events) {
      if (events) {
        eventQueue = accumulateInto(eventQueue, events);
      }
    },

    /**
     * Dispatches all synthetic events on the event queue.
     *
     * @internal
     */
    processEventQueue: function() {
      // Set `eventQueue` to null before processing it so that we can tell if more
      // events get enqueued while processing.
      var processingEventQueue = eventQueue;
      eventQueue = null;
      forEachAccumulated(processingEventQueue, executeDispatchesAndRelease);
      ("production" !== "development" ? invariant(
        !eventQueue,
        'processEventQueue(): Additional events were enqueued while processing ' +
        'an event queue. Support for this has not yet been implemented.'
      ) : invariant(!eventQueue));
    },

    /**
     * These are needed for tests only. Do not use!
     */
    __purge: function() {
      listenerBank = {};
    },

    __getListenerBank: function() {
      return listenerBank;
    }

  };

  module.exports = EventPluginHub;

},{"./EventPluginRegistry":344,"./EventPluginUtils":345,"./accumulateInto":432,"./forEachAccumulated":447,"./invariant":462}],344:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule EventPluginRegistry
   * @typechecks static-only
   */

  'use strict';

  var invariant = require("./invariant");

  /**
   * Injectable ordering of event plugins.
   */
  var EventPluginOrder = null;

  /**
   * Injectable mapping from names to event plugin modules.
   */
  var namesToPlugins = {};

  /**
   * Recomputes the plugin list using the injected plugins and plugin ordering.
   *
   * @private
   */
  function recomputePluginOrdering() {
    if (!EventPluginOrder) {
      // Wait until an `EventPluginOrder` is injected.
      return;
    }
    for (var pluginName in namesToPlugins) {
      var PluginModule = namesToPlugins[pluginName];
      var pluginIndex = EventPluginOrder.indexOf(pluginName);
      ("production" !== "development" ? invariant(
        pluginIndex > -1,
        'EventPluginRegistry: Cannot inject event plugins that do not exist in ' +
        'the plugin ordering, `%s`.',
        pluginName
      ) : invariant(pluginIndex > -1));
      if (EventPluginRegistry.plugins[pluginIndex]) {
        continue;
      }
      ("production" !== "development" ? invariant(
        PluginModule.extractEvents,
        'EventPluginRegistry: Event plugins must implement an `extractEvents` ' +
        'method, but `%s` does not.',
        pluginName
      ) : invariant(PluginModule.extractEvents));
      EventPluginRegistry.plugins[pluginIndex] = PluginModule;
      var publishedEvents = PluginModule.eventTypes;
      for (var eventName in publishedEvents) {
        ("production" !== "development" ? invariant(
          publishEventForPlugin(
            publishedEvents[eventName],
            PluginModule,
            eventName
          ),
          'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.',
          eventName,
          pluginName
        ) : invariant(publishEventForPlugin(
          publishedEvents[eventName],
          PluginModule,
          eventName
        )));
      }
    }
  }

  /**
   * Publishes an event so that it can be dispatched by the supplied plugin.
   *
   * @param {object} dispatchConfig Dispatch configuration for the event.
   * @param {object} PluginModule Plugin publishing the event.
   * @return {boolean} True if the event was successfully published.
   * @private
   */
  function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
    ("production" !== "development" ? invariant(
      !EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName),
      'EventPluginHub: More than one plugin attempted to publish the same ' +
      'event name, `%s`.',
      eventName
    ) : invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName)));
    EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

    var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
    if (phasedRegistrationNames) {
      for (var phaseName in phasedRegistrationNames) {
        if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
          var phasedRegistrationName = phasedRegistrationNames[phaseName];
          publishRegistrationName(
            phasedRegistrationName,
            PluginModule,
            eventName
          );
        }
      }
      return true;
    } else if (dispatchConfig.registrationName) {
      publishRegistrationName(
        dispatchConfig.registrationName,
        PluginModule,
        eventName
      );
      return true;
    }
    return false;
  }

  /**
   * Publishes a registration name that is used to identify dispatched events and
   * can be used with `EventPluginHub.putListener` to register listeners.
   *
   * @param {string} registrationName Registration name to add.
   * @param {object} PluginModule Plugin publishing the event.
   * @private
   */
  function publishRegistrationName(registrationName, PluginModule, eventName) {
    ("production" !== "development" ? invariant(
      !EventPluginRegistry.registrationNameModules[registrationName],
      'EventPluginHub: More than one plugin attempted to publish the same ' +
      'registration name, `%s`.',
      registrationName
    ) : invariant(!EventPluginRegistry.registrationNameModules[registrationName]));
    EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
    EventPluginRegistry.registrationNameDependencies[registrationName] =
      PluginModule.eventTypes[eventName].dependencies;
  }

  /**
   * Registers plugins so that they can extract and dispatch events.
   *
   * @see {EventPluginHub}
   */
  var EventPluginRegistry = {

    /**
     * Ordered list of injected plugins.
     */
    plugins: [],

    /**
     * Mapping from event name to dispatch config
     */
    eventNameDispatchConfigs: {},

    /**
     * Mapping from registration name to plugin module
     */
    registrationNameModules: {},

    /**
     * Mapping from registration name to event name
     */
    registrationNameDependencies: {},

    /**
     * Injects an ordering of plugins (by plugin name). This allows the ordering
     * to be decoupled from injection of the actual plugins so that ordering is
     * always deterministic regardless of packaging, on-the-fly injection, etc.
     *
     * @param {array} InjectedEventPluginOrder
     * @internal
     * @see {EventPluginHub.injection.injectEventPluginOrder}
     */
    injectEventPluginOrder: function(InjectedEventPluginOrder) {
      ("production" !== "development" ? invariant(
        !EventPluginOrder,
        'EventPluginRegistry: Cannot inject event plugin ordering more than ' +
        'once. You are likely trying to load more than one copy of React.'
      ) : invariant(!EventPluginOrder));
      // Clone the ordering so it cannot be dynamically mutated.
      EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
      recomputePluginOrdering();
    },

    /**
     * Injects plugins to be used by `EventPluginHub`. The plugin names must be
     * in the ordering injected by `injectEventPluginOrder`.
     *
     * Plugins can be injected as part of page initialization or on-the-fly.
     *
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
     * @internal
     * @see {EventPluginHub.injection.injectEventPluginsByName}
     */
    injectEventPluginsByName: function(injectedNamesToPlugins) {
      var isOrderingDirty = false;
      for (var pluginName in injectedNamesToPlugins) {
        if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
          continue;
        }
        var PluginModule = injectedNamesToPlugins[pluginName];
        if (!namesToPlugins.hasOwnProperty(pluginName) ||
          namesToPlugins[pluginName] !== PluginModule) {
          ("production" !== "development" ? invariant(
            !namesToPlugins[pluginName],
            'EventPluginRegistry: Cannot inject two different event plugins ' +
            'using the same name, `%s`.',
            pluginName
          ) : invariant(!namesToPlugins[pluginName]));
          namesToPlugins[pluginName] = PluginModule;
          isOrderingDirty = true;
        }
      }
      if (isOrderingDirty) {
        recomputePluginOrdering();
      }
    },

    /**
     * Looks up the plugin for the supplied event.
     *
     * @param {object} event A synthetic event.
     * @return {?object} The plugin that created the supplied event.
     * @internal
     */
    getPluginModuleForEvent: function(event) {
      var dispatchConfig = event.dispatchConfig;
      if (dispatchConfig.registrationName) {
        return EventPluginRegistry.registrationNameModules[
            dispatchConfig.registrationName
            ] || null;
      }
      for (var phase in dispatchConfig.phasedRegistrationNames) {
        if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
          continue;
        }
        var PluginModule = EventPluginRegistry.registrationNameModules[
          dispatchConfig.phasedRegistrationNames[phase]
          ];
        if (PluginModule) {
          return PluginModule;
        }
      }
      return null;
    },

    /**
     * Exposed for unit testing.
     * @private
     */
    _resetEventPlugins: function() {
      EventPluginOrder = null;
      for (var pluginName in namesToPlugins) {
        if (namesToPlugins.hasOwnProperty(pluginName)) {
          delete namesToPlugins[pluginName];
        }
      }
      EventPluginRegistry.plugins.length = 0;

      var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
      for (var eventName in eventNameDispatchConfigs) {
        if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
          delete eventNameDispatchConfigs[eventName];
        }
      }

      var registrationNameModules = EventPluginRegistry.registrationNameModules;
      for (var registrationName in registrationNameModules) {
        if (registrationNameModules.hasOwnProperty(registrationName)) {
          delete registrationNameModules[registrationName];
        }
      }
    }

  };

  module.exports = EventPluginRegistry;

},{"./invariant":462}],345:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule EventPluginUtils
   */

  'use strict';

  var EventConstants = require("./EventConstants");

  var invariant = require("./invariant");

  /**
   * Injected dependencies:
   */

  /**
   * - `Mount`: [required] Module that can convert between React dom IDs and
   *   actual node references.
   */
  var injection = {
    Mount: null,
    injectMount: function(InjectedMount) {
      injection.Mount = InjectedMount;
      if ("production" !== "development") {
        ("production" !== "development" ? invariant(
          InjectedMount && InjectedMount.getNode,
          'EventPluginUtils.injection.injectMount(...): Injected Mount module ' +
          'is missing getNode.'
        ) : invariant(InjectedMount && InjectedMount.getNode));
      }
    }
  };

  var topLevelTypes = EventConstants.topLevelTypes;

  function isEndish(topLevelType) {
    return topLevelType === topLevelTypes.topMouseUp ||
      topLevelType === topLevelTypes.topTouchEnd ||
      topLevelType === topLevelTypes.topTouchCancel;
  }

  function isMoveish(topLevelType) {
    return topLevelType === topLevelTypes.topMouseMove ||
      topLevelType === topLevelTypes.topTouchMove;
  }
  function isStartish(topLevelType) {
    return topLevelType === topLevelTypes.topMouseDown ||
      topLevelType === topLevelTypes.topTouchStart;
  }


  var validateEventDispatches;
  if ("production" !== "development") {
    validateEventDispatches = function(event) {
      var dispatchListeners = event._dispatchListeners;
      var dispatchIDs = event._dispatchIDs;

      var listenersIsArr = Array.isArray(dispatchListeners);
      var idsIsArr = Array.isArray(dispatchIDs);
      var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
      var listenersLen = listenersIsArr ?
        dispatchListeners.length :
        dispatchListeners ? 1 : 0;

      ("production" !== "development" ? invariant(
        idsIsArr === listenersIsArr && IDsLen === listenersLen,
        'EventPluginUtils: Invalid `event`.'
      ) : invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen));
    };
  }

  /**
   * Invokes `cb(event, listener, id)`. Avoids using call if no scope is
   * provided. The `(listener,id)` pair effectively forms the "dispatch" but are
   * kept separate to conserve memory.
   */
  function forEachEventDispatch(event, cb) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchIDs = event._dispatchIDs;
    if ("production" !== "development") {
      validateEventDispatches(event);
    }
    if (Array.isArray(dispatchListeners)) {
      for (var i = 0; i < dispatchListeners.length; i++) {
        if (event.isPropagationStopped()) {
          break;
        }
        // Listeners and IDs are two parallel arrays that are always in sync.
        cb(event, dispatchListeners[i], dispatchIDs[i]);
      }
    } else if (dispatchListeners) {
      cb(event, dispatchListeners, dispatchIDs);
    }
  }

  /**
   * Default implementation of PluginModule.executeDispatch().
   * @param {SyntheticEvent} SyntheticEvent to handle
   * @param {function} Application-level callback
   * @param {string} domID DOM id to pass to the callback.
   */
  function executeDispatch(event, listener, domID) {
    event.currentTarget = injection.Mount.getNode(domID);
    var returnValue = listener(event, domID);
    event.currentTarget = null;
    return returnValue;
  }

  /**
   * Standard/simple iteration through an event's collected dispatches.
   */
  function executeDispatchesInOrder(event, cb) {
    forEachEventDispatch(event, cb);
    event._dispatchListeners = null;
    event._dispatchIDs = null;
  }

  /**
   * Standard/simple iteration through an event's collected dispatches, but stops
   * at the first dispatch execution returning true, and returns that id.
   *
   * @return id of the first dispatch execution who's listener returns true, or
   * null if no listener returned true.
   */
  function executeDispatchesInOrderStopAtTrueImpl(event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchIDs = event._dispatchIDs;
    if ("production" !== "development") {
      validateEventDispatches(event);
    }
    if (Array.isArray(dispatchListeners)) {
      for (var i = 0; i < dispatchListeners.length; i++) {
        if (event.isPropagationStopped()) {
          break;
        }
        // Listeners and IDs are two parallel arrays that are always in sync.
        if (dispatchListeners[i](event, dispatchIDs[i])) {
          return dispatchIDs[i];
        }
      }
    } else if (dispatchListeners) {
      if (dispatchListeners(event, dispatchIDs)) {
        return dispatchIDs;
      }
    }
    return null;
  }

  /**
   * @see executeDispatchesInOrderStopAtTrueImpl
   */
  function executeDispatchesInOrderStopAtTrue(event) {
    var ret = executeDispatchesInOrderStopAtTrueImpl(event);
    event._dispatchIDs = null;
    event._dispatchListeners = null;
    return ret;
  }

  /**
   * Execution of a "direct" dispatch - there must be at most one dispatch
   * accumulated on the event or it is considered an error. It doesn't really make
   * sense for an event with multiple dispatches (bubbled) to keep track of the
   * return values at each dispatch execution, but it does tend to make sense when
   * dealing with "direct" dispatches.
   *
   * @return The return value of executing the single dispatch.
   */
  function executeDirectDispatch(event) {
    if ("production" !== "development") {
      validateEventDispatches(event);
    }
    var dispatchListener = event._dispatchListeners;
    var dispatchID = event._dispatchIDs;
    ("production" !== "development" ? invariant(
      !Array.isArray(dispatchListener),
      'executeDirectDispatch(...): Invalid `event`.'
    ) : invariant(!Array.isArray(dispatchListener)));
    var res = dispatchListener ?
      dispatchListener(event, dispatchID) :
      null;
    event._dispatchListeners = null;
    event._dispatchIDs = null;
    return res;
  }

  /**
   * @param {SyntheticEvent} event
   * @return {bool} True iff number of dispatches accumulated is greater than 0.
   */
  function hasDispatches(event) {
    return !!event._dispatchListeners;
  }

  /**
   * General utilities that are useful in creating custom Event Plugins.
   */
  var EventPluginUtils = {
    isEndish: isEndish,
    isMoveish: isMoveish,
    isStartish: isStartish,

    executeDirectDispatch: executeDirectDispatch,
    executeDispatch: executeDispatch,
    executeDispatchesInOrder: executeDispatchesInOrder,
    executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
    hasDispatches: hasDispatches,
    injection: injection,
    useTouchEvents: false
  };

  module.exports = EventPluginUtils;

},{"./EventConstants":341,"./invariant":462}],346:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule EventPropagators
   */

  'use strict';

  var EventConstants = require("./EventConstants");
  var EventPluginHub = require("./EventPluginHub");

  var accumulateInto = require("./accumulateInto");
  var forEachAccumulated = require("./forEachAccumulated");

  var PropagationPhases = EventConstants.PropagationPhases;
  var getListener = EventPluginHub.getListener;

  /**
   * Some event types have a notion of different registration names for different
   * "phases" of propagation. This finds listeners by a given phase.
   */
  function listenerAtPhase(id, event, propagationPhase) {
    var registrationName =
      event.dispatchConfig.phasedRegistrationNames[propagationPhase];
    return getListener(id, registrationName);
  }

  /**
   * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
   * here, allows us to not have to bind or create functions for each event.
   * Mutating the event's members allows us to not have to create a wrapping
   * "dispatch" object that pairs the event with the listener.
   */
  function accumulateDirectionalDispatches(domID, upwards, event) {
    if ("production" !== "development") {
      if (!domID) {
        throw new Error('Dispatching id must not be null');
      }
    }
    var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
    var listener = listenerAtPhase(domID, event, phase);
    if (listener) {
      event._dispatchListeners =
        accumulateInto(event._dispatchListeners, listener);
      event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
    }
  }

  /**
   * Collect dispatches (must be entirely collected before dispatching - see unit
   * tests). Lazily allocate the array to conserve memory.  We must loop through
   * each event and perform the traversal for each one. We can not perform a
   * single traversal for the entire collection of events because each event may
   * have a different target.
   */
  function accumulateTwoPhaseDispatchesSingle(event) {
    if (event && event.dispatchConfig.phasedRegistrationNames) {
      EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(
        event.dispatchMarker,
        accumulateDirectionalDispatches,
        event
      );
    }
  }


  /**
   * Accumulates without regard to direction, does not look for phased
   * registration names. Same as `accumulateDirectDispatchesSingle` but without
   * requiring that the `dispatchMarker` be the same as the dispatched ID.
   */
  function accumulateDispatches(id, ignoredDirection, event) {
    if (event && event.dispatchConfig.registrationName) {
      var registrationName = event.dispatchConfig.registrationName;
      var listener = getListener(id, registrationName);
      if (listener) {
        event._dispatchListeners =
          accumulateInto(event._dispatchListeners, listener);
        event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
      }
    }
  }

  /**
   * Accumulates dispatches on an `SyntheticEvent`, but only for the
   * `dispatchMarker`.
   * @param {SyntheticEvent} event
   */
  function accumulateDirectDispatchesSingle(event) {
    if (event && event.dispatchConfig.registrationName) {
      accumulateDispatches(event.dispatchMarker, null, event);
    }
  }

  function accumulateTwoPhaseDispatches(events) {
    forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
  }

  function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
    EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(
      fromID,
      toID,
      accumulateDispatches,
      leave,
      enter
    );
  }


  function accumulateDirectDispatches(events) {
    forEachAccumulated(events, accumulateDirectDispatchesSingle);
  }



  /**
   * A small set of propagation patterns, each of which will accept a small amount
   * of information, and generate a set of "dispatch ready event objects" - which
   * are sets of events that have already been annotated with a set of dispatched
   * listener functions/ids. The API is designed this way to discourage these
   * propagation strategies from actually executing the dispatches, since we
   * always want to collect the entire set of dispatches before executing event a
   * single one.
   *
   * @constructor EventPropagators
   */
  var EventPropagators = {
    accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
    accumulateDirectDispatches: accumulateDirectDispatches,
    accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
  };

  module.exports = EventPropagators;

},{"./EventConstants":341,"./EventPluginHub":343,"./accumulateInto":432,"./forEachAccumulated":447}],347:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ExecutionEnvironment
   */

  /*jslint evil: true */

  "use strict";

  var canUseDOM = !!(
    (typeof window !== 'undefined' &&
    window.document && window.document.createElement)
  );

  /**
   * Simple, lightweight module assisting with the detection and context of
   * Worker. Helps avoid circular dependencies and allows code to reason about
   * whether or not they are in a Worker, even if they never include the main
   * `ReactWorker` dependency.
   */
  var ExecutionEnvironment = {

    canUseDOM: canUseDOM,

    canUseWorkers: typeof Worker !== 'undefined',

    canUseEventListeners:
    canUseDOM && !!(window.addEventListener || window.attachEvent),

    canUseViewport: canUseDOM && !!window.screen,

    isInWorker: !canUseDOM // For now, this is true - might change in the future.

  };

  module.exports = ExecutionEnvironment;

},{}],348:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule FallbackCompositionState
   * @typechecks static-only
   */

  'use strict';

  var PooledClass = require("./PooledClass");

  var assign = require("./Object.assign");
  var getTextContentAccessor = require("./getTextContentAccessor");

  /**
   * This helper class stores information about text content of a target node,
   * allowing comparison of content before and after a given event.
   *
   * Identify the node where selection currently begins, then observe
   * both its text content and its current position in the DOM. Since the
   * browser may natively replace the target node during composition, we can
   * use its position to find its replacement.
   *
   * @param {DOMEventTarget} root
   */
  function FallbackCompositionState(root) {
    this._root = root;
    this._startText = this.getText();
    this._fallbackText = null;
  }

  assign(FallbackCompositionState.prototype, {
    /**
     * Get current text of input.
     *
     * @return {string}
     */
    getText: function() {
      if ('value' in this._root) {
        return this._root.value;
      }
      return this._root[getTextContentAccessor()];
    },

    /**
     * Determine the differing substring between the initially stored
     * text content and the current content.
     *
     * @return {string}
     */
    getData: function() {
      if (this._fallbackText) {
        return this._fallbackText;
      }

      var start;
      var startValue = this._startText;
      var startLength = startValue.length;
      var end;
      var endValue = this.getText();
      var endLength = endValue.length;

      for (start = 0; start < startLength; start++) {
        if (startValue[start] !== endValue[start]) {
          break;
        }
      }

      var minEnd = startLength - start;
      for (end = 1; end <= minEnd; end++) {
        if (startValue[startLength - end] !== endValue[endLength - end]) {
          break;
        }
      }

      var sliceTail = end > 1 ? 1 - end : undefined;
      this._fallbackText = endValue.slice(start, sliceTail);
      return this._fallbackText;
    }
  });

  PooledClass.addPoolingTo(FallbackCompositionState);

  module.exports = FallbackCompositionState;

},{"./Object.assign":353,"./PooledClass":354,"./getTextContentAccessor":457}],349:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule HTMLDOMPropertyConfig
   */

  /*jslint bitwise: true*/

  'use strict';

  var DOMProperty = require("./DOMProperty");
  var ExecutionEnvironment = require("./ExecutionEnvironment");

  var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
  var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
  var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
  var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
  var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
  var HAS_POSITIVE_NUMERIC_VALUE =
    DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
  var HAS_OVERLOADED_BOOLEAN_VALUE =
    DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

  var hasSVG;
  if (ExecutionEnvironment.canUseDOM) {
    var implementation = document.implementation;
    hasSVG = (
      implementation &&
      implementation.hasFeature &&
      implementation.hasFeature(
        'http://www.w3.org/TR/SVG11/feature#BasicStructure',
        '1.1'
      )
    );
  }


  var HTMLDOMPropertyConfig = {
    isCustomAttribute: RegExp.prototype.test.bind(
      /^(data|aria)-[a-z_][a-z\d_.\-]*$/
    ),
    Properties: {
      /**
       * Standard Properties
       */
      accept: null,
      acceptCharset: null,
      accessKey: null,
      action: null,
      allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
      allowTransparency: MUST_USE_ATTRIBUTE,
      alt: null,
      async: HAS_BOOLEAN_VALUE,
      autoComplete: null,
      // autoFocus is polyfilled/normalized by AutoFocusMixin
      // autoFocus: HAS_BOOLEAN_VALUE,
      autoPlay: HAS_BOOLEAN_VALUE,
      cellPadding: null,
      cellSpacing: null,
      charSet: MUST_USE_ATTRIBUTE,
      checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
      classID: MUST_USE_ATTRIBUTE,
      // To set className on SVG elements, it's necessary to use .setAttribute;
      // this works on HTML elements too in all browsers except IE8. Conveniently,
      // IE8 doesn't support SVG and so we can simply use the attribute in
      // browsers that support SVG and the property in browsers that don't,
      // regardless of whether the element is HTML or SVG.
      className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
      cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
      colSpan: null,
      content: null,
      contentEditable: null,
      contextMenu: MUST_USE_ATTRIBUTE,
      controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
      coords: null,
      crossOrigin: null,
      data: null, // For `<object />` acts as `src`.
      dateTime: MUST_USE_ATTRIBUTE,
      defer: HAS_BOOLEAN_VALUE,
      dir: null,
      disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
      download: HAS_OVERLOADED_BOOLEAN_VALUE,
      draggable: null,
      encType: null,
      form: MUST_USE_ATTRIBUTE,
      formAction: MUST_USE_ATTRIBUTE,
      formEncType: MUST_USE_ATTRIBUTE,
      formMethod: MUST_USE_ATTRIBUTE,
      formNoValidate: HAS_BOOLEAN_VALUE,
      formTarget: MUST_USE_ATTRIBUTE,
      frameBorder: MUST_USE_ATTRIBUTE,
      headers: null,
      height: MUST_USE_ATTRIBUTE,
      hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
      high: null,
      href: null,
      hrefLang: null,
      htmlFor: null,
      httpEquiv: null,
      icon: null,
      id: MUST_USE_PROPERTY,
      label: null,
      lang: null,
      list: MUST_USE_ATTRIBUTE,
      loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
      low: null,
      manifest: MUST_USE_ATTRIBUTE,
      marginHeight: null,
      marginWidth: null,
      max: null,
      maxLength: MUST_USE_ATTRIBUTE,
      media: MUST_USE_ATTRIBUTE,
      mediaGroup: null,
      method: null,
      min: null,
      multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
      muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
      name: null,
      noValidate: HAS_BOOLEAN_VALUE,
      open: HAS_BOOLEAN_VALUE,
      optimum: null,
      pattern: null,
      placeholder: null,
      poster: null,
      preload: null,
      radioGroup: null,
      readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
      rel: null,
      required: HAS_BOOLEAN_VALUE,
      role: MUST_USE_ATTRIBUTE,
      rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
      rowSpan: null,
      sandbox: null,
      scope: null,
      scoped: HAS_BOOLEAN_VALUE,
      scrolling: null,
      seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
      selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
      shape: null,
      size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
      sizes: MUST_USE_ATTRIBUTE,
      span: HAS_POSITIVE_NUMERIC_VALUE,
      spellCheck: null,
      src: null,
      srcDoc: MUST_USE_PROPERTY,
      srcSet: MUST_USE_ATTRIBUTE,
      start: HAS_NUMERIC_VALUE,
      step: null,
      style: null,
      tabIndex: null,
      target: null,
      title: null,
      type: null,
      useMap: null,
      value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
      width: MUST_USE_ATTRIBUTE,
      wmode: MUST_USE_ATTRIBUTE,

      /**
       * Non-standard Properties
       */
      // autoCapitalize and autoCorrect are supported in Mobile Safari for
      // keyboard hints.
      autoCapitalize: null,
      autoCorrect: null,
      // itemProp, itemScope, itemType are for
      // Microdata support. See http://schema.org/docs/gs.html
      itemProp: MUST_USE_ATTRIBUTE,
      itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
      itemType: MUST_USE_ATTRIBUTE,
      // itemID and itemRef are for Microdata support as well but
      // only specified in the the WHATWG spec document. See
      // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
      itemID: MUST_USE_ATTRIBUTE,
      itemRef: MUST_USE_ATTRIBUTE,
      // property is supported for OpenGraph in meta tags.
      property: null,
      // IE-only attribute that controls focus behavior
      unselectable: MUST_USE_ATTRIBUTE
    },
    DOMAttributeNames: {
      acceptCharset: 'accept-charset',
      className: 'class',
      htmlFor: 'for',
      httpEquiv: 'http-equiv'
    },
    DOMPropertyNames: {
      autoCapitalize: 'autocapitalize',
      autoComplete: 'autocomplete',
      autoCorrect: 'autocorrect',
      autoFocus: 'autofocus',
      autoPlay: 'autoplay',
      // `encoding` is equivalent to `enctype`, IE8 lacks an `enctype` setter.
      // http://www.w3.org/TR/html5/forms.html#dom-fs-encoding
      encType: 'encoding',
      hrefLang: 'hreflang',
      radioGroup: 'radiogroup',
      spellCheck: 'spellcheck',
      srcDoc: 'srcdoc',
      srcSet: 'srcset'
    }
  };

  module.exports = HTMLDOMPropertyConfig;

},{"./DOMProperty":336,"./ExecutionEnvironment":347}],350:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule LinkedValueUtils
   * @typechecks static-only
   */

  'use strict';

  var ReactPropTypes = require("./ReactPropTypes");

  var invariant = require("./invariant");

  var hasReadOnlyValue = {
    'button': true,
    'checkbox': true,
    'image': true,
    'hidden': true,
    'radio': true,
    'reset': true,
    'submit': true
  };

  function _assertSingleLink(input) {
    ("production" !== "development" ? invariant(
      input.props.checkedLink == null || input.props.valueLink == null,
      'Cannot provide a checkedLink and a valueLink. If you want to use ' +
      'checkedLink, you probably don\'t want to use valueLink and vice versa.'
    ) : invariant(input.props.checkedLink == null || input.props.valueLink == null));
  }
  function _assertValueLink(input) {
    _assertSingleLink(input);
    ("production" !== "development" ? invariant(
      input.props.value == null && input.props.onChange == null,
      'Cannot provide a valueLink and a value or onChange event. If you want ' +
      'to use value or onChange, you probably don\'t want to use valueLink.'
    ) : invariant(input.props.value == null && input.props.onChange == null));
  }

  function _assertCheckedLink(input) {
    _assertSingleLink(input);
    ("production" !== "development" ? invariant(
      input.props.checked == null && input.props.onChange == null,
      'Cannot provide a checkedLink and a checked property or onChange event. ' +
      'If you want to use checked or onChange, you probably don\'t want to ' +
      'use checkedLink'
    ) : invariant(input.props.checked == null && input.props.onChange == null));
  }

  /**
   * @param {SyntheticEvent} e change event to handle
   */
  function _handleLinkedValueChange(e) {
    /*jshint validthis:true */
    this.props.valueLink.requestChange(e.target.value);
  }

  /**
   * @param {SyntheticEvent} e change event to handle
   */
  function _handleLinkedCheckChange(e) {
    /*jshint validthis:true */
    this.props.checkedLink.requestChange(e.target.checked);
  }

  /**
   * Provide a linked `value` attribute for controlled forms. You should not use
   * this outside of the ReactDOM controlled form components.
   */
  var LinkedValueUtils = {
    Mixin: {
      propTypes: {
        value: function(props, propName, componentName) {
          if (!props[propName] ||
            hasReadOnlyValue[props.type] ||
            props.onChange ||
            props.readOnly ||
            props.disabled) {
            return null;
          }
          return new Error(
            'You provided a `value` prop to a form field without an ' +
            '`onChange` handler. This will render a read-only field. If ' +
            'the field should be mutable use `defaultValue`. Otherwise, ' +
            'set either `onChange` or `readOnly`.'
          );
        },
        checked: function(props, propName, componentName) {
          if (!props[propName] ||
            props.onChange ||
            props.readOnly ||
            props.disabled) {
            return null;
          }
          return new Error(
            'You provided a `checked` prop to a form field without an ' +
            '`onChange` handler. This will render a read-only field. If ' +
            'the field should be mutable use `defaultChecked`. Otherwise, ' +
            'set either `onChange` or `readOnly`.'
          );
        },
        onChange: ReactPropTypes.func
      }
    },

    /**
     * @param {ReactComponent} input Form component
     * @return {*} current value of the input either from value prop or link.
     */
    getValue: function(input) {
      if (input.props.valueLink) {
        _assertValueLink(input);
        return input.props.valueLink.value;
      }
      return input.props.value;
    },

    /**
     * @param {ReactComponent} input Form component
     * @return {*} current checked status of the input either from checked prop
     *             or link.
     */
    getChecked: function(input) {
      if (input.props.checkedLink) {
        _assertCheckedLink(input);
        return input.props.checkedLink.value;
      }
      return input.props.checked;
    },

    /**
     * @param {ReactComponent} input Form component
     * @return {function} change callback either from onChange prop or link.
     */
    getOnChange: function(input) {
      if (input.props.valueLink) {
        _assertValueLink(input);
        return _handleLinkedValueChange;
      } else if (input.props.checkedLink) {
        _assertCheckedLink(input);
        return _handleLinkedCheckChange;
      }
      return input.props.onChange;
    }
  };

  module.exports = LinkedValueUtils;

},{"./ReactPropTypes":405,"./invariant":462}],351:[function(require,module,exports){
  /**
   * Copyright 2014-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule LocalEventTrapMixin
   */

  'use strict';

  var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");

  var accumulateInto = require("./accumulateInto");
  var forEachAccumulated = require("./forEachAccumulated");
  var invariant = require("./invariant");

  function remove(event) {
    event.remove();
  }

  var LocalEventTrapMixin = {
    trapBubbledEvent:function(topLevelType, handlerBaseName) {
      ("production" !== "development" ? invariant(this.isMounted(), 'Must be mounted to trap events') : invariant(this.isMounted()));
      // If a component renders to null or if another component fatals and causes
      // the state of the tree to be corrupted, `node` here can be null.
      var node = this.getDOMNode();
      ("production" !== "development" ? invariant(
        node,
        'LocalEventTrapMixin.trapBubbledEvent(...): Requires node to be rendered.'
      ) : invariant(node));
      var listener = ReactBrowserEventEmitter.trapBubbledEvent(
        topLevelType,
        handlerBaseName,
        node
      );
      this._localEventListeners =
        accumulateInto(this._localEventListeners, listener);
    },

    // trapCapturedEvent would look nearly identical. We don't implement that
    // method because it isn't currently needed.

    componentWillUnmount:function() {
      if (this._localEventListeners) {
        forEachAccumulated(this._localEventListeners, remove);
      }
    }
  };

  module.exports = LocalEventTrapMixin;

},{"./ReactBrowserEventEmitter":357,"./accumulateInto":432,"./forEachAccumulated":447,"./invariant":462}],352:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule MobileSafariClickEventPlugin
   * @typechecks static-only
   */

  'use strict';

  var EventConstants = require("./EventConstants");

  var emptyFunction = require("./emptyFunction");

  var topLevelTypes = EventConstants.topLevelTypes;

  /**
   * Mobile Safari does not fire properly bubble click events on non-interactive
   * elements, which means delegated click listeners do not fire. The workaround
   * for this bug involves attaching an empty click listener on the target node.
   *
   * This particular plugin works around the bug by attaching an empty click
   * listener on `touchstart` (which does fire on every element).
   */
  var MobileSafariClickEventPlugin = {

    eventTypes: null,

    /**
     * @param {string} topLevelType Record from `EventConstants`.
     * @param {DOMEventTarget} topLevelTarget The listening component root node.
     * @param {string} topLevelTargetID ID of `topLevelTarget`.
     * @param {object} nativeEvent Native browser event.
     * @return {*} An accumulation of synthetic events.
     * @see {EventPluginHub.extractEvents}
     */
    extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
      if (topLevelType === topLevelTypes.topTouchStart) {
        var target = nativeEvent.target;
        if (target && !target.onclick) {
          target.onclick = emptyFunction;
        }
      }
    }

  };

  module.exports = MobileSafariClickEventPlugin;

},{"./EventConstants":341,"./emptyFunction":441}],353:[function(require,module,exports){
  /**
   * Copyright 2014-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule Object.assign
   */

  // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign

  'use strict';

  function assign(target, sources) {
    if (target == null) {
      throw new TypeError('Object.assign target cannot be null or undefined');
    }

    var to = Object(target);
    var hasOwnProperty = Object.prototype.hasOwnProperty;

    for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
      var nextSource = arguments[nextIndex];
      if (nextSource == null) {
        continue;
      }

      var from = Object(nextSource);

      // We don't currently support accessors nor proxies. Therefore this
      // copy cannot throw. If we ever supported this then we must handle
      // exceptions and side-effects. We don't support symbols so they won't
      // be transferred.

      for (var key in from) {
        if (hasOwnProperty.call(from, key)) {
          to[key] = from[key];
        }
      }
    }

    return to;
  }

  module.exports = assign;

},{}],354:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule PooledClass
   */

  'use strict';

  var invariant = require("./invariant");

  /**
   * Static poolers. Several custom versions for each potential number of
   * arguments. A completely generic pooler is easy to implement, but would
   * require accessing the `arguments` object. In each of these, `this` refers to
   * the Class itself, not an instance. If any others are needed, simply add them
   * here, or in their own files.
   */
  var oneArgumentPooler = function(copyFieldsFrom) {
    var Klass = this;
    if (Klass.instancePool.length) {
      var instance = Klass.instancePool.pop();
      Klass.call(instance, copyFieldsFrom);
      return instance;
    } else {
      return new Klass(copyFieldsFrom);
    }
  };

  var twoArgumentPooler = function(a1, a2) {
    var Klass = this;
    if (Klass.instancePool.length) {
      var instance = Klass.instancePool.pop();
      Klass.call(instance, a1, a2);
      return instance;
    } else {
      return new Klass(a1, a2);
    }
  };

  var threeArgumentPooler = function(a1, a2, a3) {
    var Klass = this;
    if (Klass.instancePool.length) {
      var instance = Klass.instancePool.pop();
      Klass.call(instance, a1, a2, a3);
      return instance;
    } else {
      return new Klass(a1, a2, a3);
    }
  };

  var fiveArgumentPooler = function(a1, a2, a3, a4, a5) {
    var Klass = this;
    if (Klass.instancePool.length) {
      var instance = Klass.instancePool.pop();
      Klass.call(instance, a1, a2, a3, a4, a5);
      return instance;
    } else {
      return new Klass(a1, a2, a3, a4, a5);
    }
  };

  var standardReleaser = function(instance) {
    var Klass = this;
    ("production" !== "development" ? invariant(
      instance instanceof Klass,
      'Trying to release an instance into a pool of a different type.'
    ) : invariant(instance instanceof Klass));
    if (instance.destructor) {
      instance.destructor();
    }
    if (Klass.instancePool.length < Klass.poolSize) {
      Klass.instancePool.push(instance);
    }
  };

  var DEFAULT_POOL_SIZE = 10;
  var DEFAULT_POOLER = oneArgumentPooler;

  /**
   * Augments `CopyConstructor` to be a poolable class, augmenting only the class
   * itself (statically) not adding any prototypical fields. Any CopyConstructor
   * you give this may have a `poolSize` property, and will look for a
   * prototypical `destructor` on instances (optional).
   *
   * @param {Function} CopyConstructor Constructor that can be used to reset.
   * @param {Function} pooler Customizable pooler.
   */
  var addPoolingTo = function(CopyConstructor, pooler) {
    var NewKlass = CopyConstructor;
    NewKlass.instancePool = [];
    NewKlass.getPooled = pooler || DEFAULT_POOLER;
    if (!NewKlass.poolSize) {
      NewKlass.poolSize = DEFAULT_POOL_SIZE;
    }
    NewKlass.release = standardReleaser;
    return NewKlass;
  };

  var PooledClass = {
    addPoolingTo: addPoolingTo,
    oneArgumentPooler: oneArgumentPooler,
    twoArgumentPooler: twoArgumentPooler,
    threeArgumentPooler: threeArgumentPooler,
    fiveArgumentPooler: fiveArgumentPooler
  };

  module.exports = PooledClass;

},{"./invariant":462}],355:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule React
   */

  /* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

  'use strict';

  var EventPluginUtils = require("./EventPluginUtils");
  var ReactChildren = require("./ReactChildren");
  var ReactComponent = require("./ReactComponent");
  var ReactClass = require("./ReactClass");
  var ReactContext = require("./ReactContext");
  var ReactCurrentOwner = require("./ReactCurrentOwner");
  var ReactElement = require("./ReactElement");
  var ReactElementValidator = require("./ReactElementValidator");
  var ReactDOM = require("./ReactDOM");
  var ReactDOMTextComponent = require("./ReactDOMTextComponent");
  var ReactDefaultInjection = require("./ReactDefaultInjection");
  var ReactInstanceHandles = require("./ReactInstanceHandles");
  var ReactMount = require("./ReactMount");
  var ReactPerf = require("./ReactPerf");
  var ReactPropTypes = require("./ReactPropTypes");
  var ReactReconciler = require("./ReactReconciler");
  var ReactServerRendering = require("./ReactServerRendering");

  var assign = require("./Object.assign");
  var findDOMNode = require("./findDOMNode");
  var onlyChild = require("./onlyChild");

  ReactDefaultInjection.inject();

  var createElement = ReactElement.createElement;
  var createFactory = ReactElement.createFactory;
  var cloneElement = ReactElement.cloneElement;

  if ("production" !== "development") {
    createElement = ReactElementValidator.createElement;
    createFactory = ReactElementValidator.createFactory;
    cloneElement = ReactElementValidator.cloneElement;
  }

  var render = ReactPerf.measure('React', 'render', ReactMount.render);

  var React = {
    Children: {
      map: ReactChildren.map,
      forEach: ReactChildren.forEach,
      count: ReactChildren.count,
      only: onlyChild
    },
    Component: ReactComponent,
    DOM: ReactDOM,
    PropTypes: ReactPropTypes,
    initializeTouchEvents: function(shouldUseTouch) {
      EventPluginUtils.useTouchEvents = shouldUseTouch;
    },
    createClass: ReactClass.createClass,
    createElement: createElement,
    cloneElement: cloneElement,
    createFactory: createFactory,
    createMixin: function(mixin) {
      // Currently a noop. Will be used to validate and trace mixins.
      return mixin;
    },
    constructAndRenderComponent: ReactMount.constructAndRenderComponent,
    constructAndRenderComponentByID: ReactMount.constructAndRenderComponentByID,
    findDOMNode: findDOMNode,
    render: render,
    renderToString: ReactServerRendering.renderToString,
    renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
    unmountComponentAtNode: ReactMount.unmountComponentAtNode,
    isValidElement: ReactElement.isValidElement,
    withContext: ReactContext.withContext,

    // Hook for JSX spread, don't use this for anything else.
    __spread: assign
  };

  // Inject the runtime into a devtools global hook regardless of browser.
  // Allows for debugging when the hook is injected on the page.
  if (
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
    __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
      CurrentOwner: ReactCurrentOwner,
      InstanceHandles: ReactInstanceHandles,
      Mount: ReactMount,
      Reconciler: ReactReconciler,
      TextComponent: ReactDOMTextComponent
    });
  }

  if ("production" !== "development") {
    var ExecutionEnvironment = require("./ExecutionEnvironment");
    if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

      // If we're in Chrome, look for the devtools marker and provide a download
      // link if not installed.
      if (navigator.userAgent.indexOf('Chrome') > -1) {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
          console.debug(
            'Download the React DevTools for a better development experience: ' +
            'https://fb.me/react-devtools'
          );
        }
      }

      var expectedFeatures = [
        // shims
        Array.isArray,
        Array.prototype.every,
        Array.prototype.forEach,
        Array.prototype.indexOf,
        Array.prototype.map,
        Date.now,
        Function.prototype.bind,
        Object.keys,
        String.prototype.split,
        String.prototype.trim,

        // shams
        Object.create,
        Object.freeze
      ];

      for (var i = 0; i < expectedFeatures.length; i++) {
        if (!expectedFeatures[i]) {
          console.error(
            'One or more ES5 shim/shams expected by React are not available: ' +
            'https://fb.me/react-warning-polyfills'
          );
          break;
        }
      }
    }
  }

  React.version = '0.13.3';

  module.exports = React;

},{"./EventPluginUtils":345,"./ExecutionEnvironment":347,"./Object.assign":353,"./ReactChildren":359,"./ReactClass":360,"./ReactComponent":361,"./ReactContext":365,"./ReactCurrentOwner":366,"./ReactDOM":367,"./ReactDOMTextComponent":378,"./ReactDefaultInjection":381,"./ReactElement":384,"./ReactElementValidator":385,"./ReactInstanceHandles":393,"./ReactMount":397,"./ReactPerf":402,"./ReactPropTypes":405,"./ReactReconciler":408,"./ReactServerRendering":411,"./findDOMNode":444,"./onlyChild":471}],356:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactBrowserComponentMixin
   */

  'use strict';

  var findDOMNode = require("./findDOMNode");

  var ReactBrowserComponentMixin = {
    /**
     * Returns the DOM node rendered by this component.
     *
     * @return {DOMElement} The root node of this component.
     * @final
     * @protected
     */
    getDOMNode: function() {
      return findDOMNode(this);
    }
  };

  module.exports = ReactBrowserComponentMixin;

},{"./findDOMNode":444}],357:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactBrowserEventEmitter
   * @typechecks static-only
   */

  'use strict';

  var EventConstants = require("./EventConstants");
  var EventPluginHub = require("./EventPluginHub");
  var EventPluginRegistry = require("./EventPluginRegistry");
  var ReactEventEmitterMixin = require("./ReactEventEmitterMixin");
  var ViewportMetrics = require("./ViewportMetrics");

  var assign = require("./Object.assign");
  var isEventSupported = require("./isEventSupported");

  /**
   * Summary of `ReactBrowserEventEmitter` event handling:
   *
   *  - Top-level delegation is used to trap most native browser events. This
   *    may only occur in the main thread and is the responsibility of
   *    ReactEventListener, which is injected and can therefore support pluggable
   *    event sources. This is the only work that occurs in the main thread.
   *
   *  - We normalize and de-duplicate events to account for browser quirks. This
   *    may be done in the worker thread.
   *
   *  - Forward these native events (with the associated top-level type used to
   *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
   *    to extract any synthetic events.
   *
   *  - The `EventPluginHub` will then process each event by annotating them with
   *    "dispatches", a sequence of listeners and IDs that care about that event.
   *
   *  - The `EventPluginHub` then dispatches the events.
   *
   * Overview of React and the event system:
   *
   * +------------+    .
   * |    DOM     |    .
   * +------------+    .
   *       |           .
   *       v           .
   * +------------+    .
   * | ReactEvent |    .
   * |  Listener  |    .
   * +------------+    .                         +-----------+
   *       |           .               +--------+|SimpleEvent|
   *       |           .               |         |Plugin     |
   * +-----|------+    .               v         +-----------+
   * |     |      |    .    +--------------+                    +------------+
   * |     +-----------.--->|EventPluginHub|                    |    Event   |
   * |            |    .    |              |     +-----------+  | Propagators|
   * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
   * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
   * |            |    .    |              |     +-----------+  |  utilities |
   * |     +-----------.--->|              |                    +------------+
   * |     |      |    .    +--------------+
   * +-----|------+    .                ^        +-----------+
   *       |           .                |        |Enter/Leave|
   *       +           .                +-------+|Plugin     |
   * +-------------+   .                         +-----------+
   * | application |   .
   * |-------------|   .
   * |             |   .
   * |             |   .
   * +-------------+   .
   *                   .
   *    React Core     .  General Purpose Event Plugin System
   */

  var alreadyListeningTo = {};
  var isMonitoringScrollValue = false;
  var reactTopListenersCounter = 0;

  // For events like 'submit' which don't consistently bubble (which we trap at a
  // lower node than `document`), binding at `document` would cause duplicate
  // events so we don't include them here
  var topEventMapping = {
    topBlur: 'blur',
    topChange: 'change',
    topClick: 'click',
    topCompositionEnd: 'compositionend',
    topCompositionStart: 'compositionstart',
    topCompositionUpdate: 'compositionupdate',
    topContextMenu: 'contextmenu',
    topCopy: 'copy',
    topCut: 'cut',
    topDoubleClick: 'dblclick',
    topDrag: 'drag',
    topDragEnd: 'dragend',
    topDragEnter: 'dragenter',
    topDragExit: 'dragexit',
    topDragLeave: 'dragleave',
    topDragOver: 'dragover',
    topDragStart: 'dragstart',
    topDrop: 'drop',
    topFocus: 'focus',
    topInput: 'input',
    topKeyDown: 'keydown',
    topKeyPress: 'keypress',
    topKeyUp: 'keyup',
    topMouseDown: 'mousedown',
    topMouseMove: 'mousemove',
    topMouseOut: 'mouseout',
    topMouseOver: 'mouseover',
    topMouseUp: 'mouseup',
    topPaste: 'paste',
    topScroll: 'scroll',
    topSelectionChange: 'selectionchange',
    topTextInput: 'textInput',
    topTouchCancel: 'touchcancel',
    topTouchEnd: 'touchend',
    topTouchMove: 'touchmove',
    topTouchStart: 'touchstart',
    topWheel: 'wheel'
  };

  /**
   * To ensure no conflicts with other potential React instances on the page
   */
  var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

  function getListeningForDocument(mountAt) {
    // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
    // directly.
    if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
      mountAt[topListenersIDKey] = reactTopListenersCounter++;
      alreadyListeningTo[mountAt[topListenersIDKey]] = {};
    }
    return alreadyListeningTo[mountAt[topListenersIDKey]];
  }

  /**
   * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
   * example:
   *
   *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
   *
   * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
   *
   * @internal
   */
  var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {

    /**
     * Injectable event backend
     */
    ReactEventListener: null,

    injection: {
      /**
       * @param {object} ReactEventListener
       */
      injectReactEventListener: function(ReactEventListener) {
        ReactEventListener.setHandleTopLevel(
          ReactBrowserEventEmitter.handleTopLevel
        );
        ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
      }
    },

    /**
     * Sets whether or not any created callbacks should be enabled.
     *
     * @param {boolean} enabled True if callbacks should be enabled.
     */
    setEnabled: function(enabled) {
      if (ReactBrowserEventEmitter.ReactEventListener) {
        ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
      }
    },

    /**
     * @return {boolean} True if callbacks are enabled.
     */
    isEnabled: function() {
      return !!(
        (ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled())
      );
    },

    /**
     * We listen for bubbled touch events on the document object.
     *
     * Firefox v8.01 (and possibly others) exhibited strange behavior when
     * mounting `onmousemove` events at some node that was not the document
     * element. The symptoms were that if your mouse is not moving over something
     * contained within that mount point (for example on the background) the
     * top-level listeners for `onmousemove` won't be called. However, if you
     * register the `mousemove` on the document object, then it will of course
     * catch all `mousemove`s. This along with iOS quirks, justifies restricting
     * top-level listeners to the document object only, at least for these
     * movement types of events and possibly all events.
     *
     * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
     *
     * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
     * they bubble to document.
     *
     * @param {string} registrationName Name of listener (e.g. `onClick`).
     * @param {object} contentDocumentHandle Document which owns the container
     */
    listenTo: function(registrationName, contentDocumentHandle) {
      var mountAt = contentDocumentHandle;
      var isListening = getListeningForDocument(mountAt);
      var dependencies = EventPluginRegistry.
        registrationNameDependencies[registrationName];

      var topLevelTypes = EventConstants.topLevelTypes;
      for (var i = 0, l = dependencies.length; i < l; i++) {
        var dependency = dependencies[i];
        if (!(
            (isListening.hasOwnProperty(dependency) && isListening[dependency])
          )) {
          if (dependency === topLevelTypes.topWheel) {
            if (isEventSupported('wheel')) {
              ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
                topLevelTypes.topWheel,
                'wheel',
                mountAt
              );
            } else if (isEventSupported('mousewheel')) {
              ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
                topLevelTypes.topWheel,
                'mousewheel',
                mountAt
              );
            } else {
              // Firefox needs to capture a different mouse scroll event.
              // @see http://www.quirksmode.org/dom/events/tests/scroll.html
              ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
                topLevelTypes.topWheel,
                'DOMMouseScroll',
                mountAt
              );
            }
          } else if (dependency === topLevelTypes.topScroll) {

            if (isEventSupported('scroll', true)) {
              ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
                topLevelTypes.topScroll,
                'scroll',
                mountAt
              );
            } else {
              ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
                topLevelTypes.topScroll,
                'scroll',
                ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE
              );
            }
          } else if (dependency === topLevelTypes.topFocus ||
            dependency === topLevelTypes.topBlur) {

            if (isEventSupported('focus', true)) {
              ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
                topLevelTypes.topFocus,
                'focus',
                mountAt
              );
              ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
                topLevelTypes.topBlur,
                'blur',
                mountAt
              );
            } else if (isEventSupported('focusin')) {
              // IE has `focusin` and `focusout` events which bubble.
              // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
              ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
                topLevelTypes.topFocus,
                'focusin',
                mountAt
              );
              ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
                topLevelTypes.topBlur,
                'focusout',
                mountAt
              );
            }

            // to make sure blur and focus event listeners are only attached once
            isListening[topLevelTypes.topBlur] = true;
            isListening[topLevelTypes.topFocus] = true;
          } else if (topEventMapping.hasOwnProperty(dependency)) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              dependency,
              topEventMapping[dependency],
              mountAt
            );
          }

          isListening[dependency] = true;
        }
      }
    },

    trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
      return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
        topLevelType,
        handlerBaseName,
        handle
      );
    },

    trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
      return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
        topLevelType,
        handlerBaseName,
        handle
      );
    },

    /**
     * Listens to window scroll and resize events. We cache scroll values so that
     * application code can access them without triggering reflows.
     *
     * NOTE: Scroll events do not bubble.
     *
     * @see http://www.quirksmode.org/dom/events/scroll.html
     */
    ensureScrollValueMonitoring: function() {
      if (!isMonitoringScrollValue) {
        var refresh = ViewportMetrics.refreshScrollValues;
        ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
        isMonitoringScrollValue = true;
      }
    },

    eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

    registrationNameModules: EventPluginHub.registrationNameModules,

    putListener: EventPluginHub.putListener,

    getListener: EventPluginHub.getListener,

    deleteListener: EventPluginHub.deleteListener,

    deleteAllListeners: EventPluginHub.deleteAllListeners

  });

  module.exports = ReactBrowserEventEmitter;

},{"./EventConstants":341,"./EventPluginHub":343,"./EventPluginRegistry":344,"./Object.assign":353,"./ReactEventEmitterMixin":388,"./ViewportMetrics":431,"./isEventSupported":463}],358:[function(require,module,exports){
  /**
   * Copyright 2014-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactChildReconciler
   * @typechecks static-only
   */

  'use strict';

  var ReactReconciler = require("./ReactReconciler");

  var flattenChildren = require("./flattenChildren");
  var instantiateReactComponent = require("./instantiateReactComponent");
  var shouldUpdateReactComponent = require("./shouldUpdateReactComponent");

  /**
   * ReactChildReconciler provides helpers for initializing or updating a set of
   * children. Its output is suitable for passing it onto ReactMultiChild which
   * does diffed reordering and insertion.
   */
  var ReactChildReconciler = {

    /**
     * Generates a "mount image" for each of the supplied children. In the case
     * of `ReactDOMComponent`, a mount image is a string of markup.
     *
     * @param {?object} nestedChildNodes Nested child maps.
     * @return {?object} A set of child instances.
     * @internal
     */
    instantiateChildren: function(nestedChildNodes, transaction, context) {
      var children = flattenChildren(nestedChildNodes);
      for (var name in children) {
        if (children.hasOwnProperty(name)) {
          var child = children[name];
          // The rendered children must be turned into instances as they're
          // mounted.
          var childInstance = instantiateReactComponent(child, null);
          children[name] = childInstance;
        }
      }
      return children;
    },

    /**
     * Updates the rendered children and returns a new set of children.
     *
     * @param {?object} prevChildren Previously initialized set of children.
     * @param {?object} nextNestedChildNodes Nested child maps.
     * @param {ReactReconcileTransaction} transaction
     * @param {object} context
     * @return {?object} A new set of child instances.
     * @internal
     */
    updateChildren: function(
      prevChildren,
      nextNestedChildNodes,
      transaction,
      context) {
      // We currently don't have a way to track moves here but if we use iterators
      // instead of for..in we can zip the iterators and check if an item has
      // moved.
      // TODO: If nothing has changed, return the prevChildren object so that we
      // can quickly bailout if nothing has changed.
      var nextChildren = flattenChildren(nextNestedChildNodes);
      if (!nextChildren && !prevChildren) {
        return null;
      }
      var name;
      for (name in nextChildren) {
        if (!nextChildren.hasOwnProperty(name)) {
          continue;
        }
        var prevChild = prevChildren && prevChildren[name];
        var prevElement = prevChild && prevChild._currentElement;
        var nextElement = nextChildren[name];
        if (shouldUpdateReactComponent(prevElement, nextElement)) {
          ReactReconciler.receiveComponent(
            prevChild, nextElement, transaction, context
          );
          nextChildren[name] = prevChild;
        } else {
          if (prevChild) {
            ReactReconciler.unmountComponent(prevChild, name);
          }
          // The child must be instantiated before it's mounted.
          var nextChildInstance = instantiateReactComponent(
            nextElement,
            null
          );
          nextChildren[name] = nextChildInstance;
        }
      }
      // Unmount children that are no longer present.
      for (name in prevChildren) {
        if (prevChildren.hasOwnProperty(name) &&
          !(nextChildren && nextChildren.hasOwnProperty(name))) {
          ReactReconciler.unmountComponent(prevChildren[name]);
        }
      }
      return nextChildren;
    },

    /**
     * Unmounts all rendered children. This should be used to clean up children
     * when this component is unmounted.
     *
     * @param {?object} renderedChildren Previously initialized set of children.
     * @internal
     */
    unmountChildren: function(renderedChildren) {
      for (var name in renderedChildren) {
        var renderedChild = renderedChildren[name];
        ReactReconciler.unmountComponent(renderedChild);
      }
    }

  };

  module.exports = ReactChildReconciler;

},{"./ReactReconciler":408,"./flattenChildren":445,"./instantiateReactComponent":461,"./shouldUpdateReactComponent":478}],359:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactChildren
   */

  'use strict';

  var PooledClass = require("./PooledClass");
  var ReactFragment = require("./ReactFragment");

  var traverseAllChildren = require("./traverseAllChildren");
  var warning = require("./warning");

  var twoArgumentPooler = PooledClass.twoArgumentPooler;
  var threeArgumentPooler = PooledClass.threeArgumentPooler;

  /**
   * PooledClass representing the bookkeeping associated with performing a child
   * traversal. Allows avoiding binding callbacks.
   *
   * @constructor ForEachBookKeeping
   * @param {!function} forEachFunction Function to perform traversal with.
   * @param {?*} forEachContext Context to perform context with.
   */
  function ForEachBookKeeping(forEachFunction, forEachContext) {
    this.forEachFunction = forEachFunction;
    this.forEachContext = forEachContext;
  }
  PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

  function forEachSingleChild(traverseContext, child, name, i) {
    var forEachBookKeeping = traverseContext;
    forEachBookKeeping.forEachFunction.call(
      forEachBookKeeping.forEachContext, child, i);
  }

  /**
   * Iterates through children that are typically specified as `props.children`.
   *
   * The provided forEachFunc(child, index) will be called for each
   * leaf child.
   *
   * @param {?*} children Children tree container.
   * @param {function(*, int)} forEachFunc.
   * @param {*} forEachContext Context for forEachContext.
   */
  function forEachChildren(children, forEachFunc, forEachContext) {
    if (children == null) {
      return children;
    }

    var traverseContext =
      ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
    traverseAllChildren(children, forEachSingleChild, traverseContext);
    ForEachBookKeeping.release(traverseContext);
  }

  /**
   * PooledClass representing the bookkeeping associated with performing a child
   * mapping. Allows avoiding binding callbacks.
   *
   * @constructor MapBookKeeping
   * @param {!*} mapResult Object containing the ordered map of results.
   * @param {!function} mapFunction Function to perform mapping with.
   * @param {?*} mapContext Context to perform mapping with.
   */
  function MapBookKeeping(mapResult, mapFunction, mapContext) {
    this.mapResult = mapResult;
    this.mapFunction = mapFunction;
    this.mapContext = mapContext;
  }
  PooledClass.addPoolingTo(MapBookKeeping, threeArgumentPooler);

  function mapSingleChildIntoContext(traverseContext, child, name, i) {
    var mapBookKeeping = traverseContext;
    var mapResult = mapBookKeeping.mapResult;

    var keyUnique = !mapResult.hasOwnProperty(name);
    if ("production" !== "development") {
      ("production" !== "development" ? warning(
        keyUnique,
        'ReactChildren.map(...): Encountered two children with the same key, ' +
        '`%s`. Child keys must be unique; when two children share a key, only ' +
        'the first child will be used.',
        name
      ) : null);
    }

    if (keyUnique) {
      var mappedChild =
        mapBookKeeping.mapFunction.call(mapBookKeeping.mapContext, child, i);
      mapResult[name] = mappedChild;
    }
  }

  /**
   * Maps children that are typically specified as `props.children`.
   *
   * The provided mapFunction(child, key, index) will be called for each
   * leaf child.
   *
   * TODO: This may likely break any calls to `ReactChildren.map` that were
   * previously relying on the fact that we guarded against null children.
   *
   * @param {?*} children Children tree container.
   * @param {function(*, int)} mapFunction.
   * @param {*} mapContext Context for mapFunction.
   * @return {object} Object containing the ordered map of results.
   */
  function mapChildren(children, func, context) {
    if (children == null) {
      return children;
    }

    var mapResult = {};
    var traverseContext = MapBookKeeping.getPooled(mapResult, func, context);
    traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
    MapBookKeeping.release(traverseContext);
    return ReactFragment.create(mapResult);
  }

  function forEachSingleChildDummy(traverseContext, child, name, i) {
    return null;
  }

  /**
   * Count the number of children that are typically specified as
   * `props.children`.
   *
   * @param {?*} children Children tree container.
   * @return {number} The number of children.
   */
  function countChildren(children, context) {
    return traverseAllChildren(children, forEachSingleChildDummy, null);
  }

  var ReactChildren = {
    forEach: forEachChildren,
    map: mapChildren,
    count: countChildren
  };

  module.exports = ReactChildren;

},{"./PooledClass":354,"./ReactFragment":390,"./traverseAllChildren":480,"./warning":481}],360:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactClass
   */

  'use strict';

  var ReactComponent = require("./ReactComponent");
  var ReactCurrentOwner = require("./ReactCurrentOwner");
  var ReactElement = require("./ReactElement");
  var ReactErrorUtils = require("./ReactErrorUtils");
  var ReactInstanceMap = require("./ReactInstanceMap");
  var ReactLifeCycle = require("./ReactLifeCycle");
  var ReactPropTypeLocations = require("./ReactPropTypeLocations");
  var ReactPropTypeLocationNames = require("./ReactPropTypeLocationNames");
  var ReactUpdateQueue = require("./ReactUpdateQueue");

  var assign = require("./Object.assign");
  var invariant = require("./invariant");
  var keyMirror = require("./keyMirror");
  var keyOf = require("./keyOf");
  var warning = require("./warning");

  var MIXINS_KEY = keyOf({mixins: null});

  /**
   * Policies that describe methods in `ReactClassInterface`.
   */
  var SpecPolicy = keyMirror({
    /**
     * These methods may be defined only once by the class specification or mixin.
     */
    DEFINE_ONCE: null,
    /**
     * These methods may be defined by both the class specification and mixins.
     * Subsequent definitions will be chained. These methods must return void.
     */
    DEFINE_MANY: null,
    /**
     * These methods are overriding the base class.
     */
    OVERRIDE_BASE: null,
    /**
     * These methods are similar to DEFINE_MANY, except we assume they return
     * objects. We try to merge the keys of the return values of all the mixed in
     * functions. If there is a key conflict we throw.
     */
    DEFINE_MANY_MERGED: null
  });


  var injectedMixins = [];

  /**
   * Composite components are higher-level components that compose other composite
   * or native components.
   *
   * To create a new type of `ReactClass`, pass a specification of
   * your new class to `React.createClass`. The only requirement of your class
   * specification is that you implement a `render` method.
   *
   *   var MyComponent = React.createClass({
 *     render: function() {
 *       return <div>Hello World</div>;
 *     }
 *   });
   *
   * The class specification supports a specific protocol of methods that have
   * special meaning (e.g. `render`). See `ReactClassInterface` for
   * more the comprehensive protocol. Any other properties and methods in the
   * class specification will available on the prototype.
   *
   * @interface ReactClassInterface
   * @internal
   */
  var ReactClassInterface = {

    /**
     * An array of Mixin objects to include when defining your component.
     *
     * @type {array}
     * @optional
     */
    mixins: SpecPolicy.DEFINE_MANY,

    /**
     * An object containing properties and methods that should be defined on
     * the component's constructor instead of its prototype (static methods).
     *
     * @type {object}
     * @optional
     */
    statics: SpecPolicy.DEFINE_MANY,

    /**
     * Definition of prop types for this component.
     *
     * @type {object}
     * @optional
     */
    propTypes: SpecPolicy.DEFINE_MANY,

    /**
     * Definition of context types for this component.
     *
     * @type {object}
     * @optional
     */
    contextTypes: SpecPolicy.DEFINE_MANY,

    /**
     * Definition of context types this component sets for its children.
     *
     * @type {object}
     * @optional
     */
    childContextTypes: SpecPolicy.DEFINE_MANY,

    // ==== Definition methods ====

    /**
     * Invoked when the component is mounted. Values in the mapping will be set on
     * `this.props` if that prop is not specified (i.e. using an `in` check).
     *
     * This method is invoked before `getInitialState` and therefore cannot rely
     * on `this.state` or use `this.setState`.
     *
     * @return {object}
     * @optional
     */
    getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

    /**
     * Invoked once before the component is mounted. The return value will be used
     * as the initial value of `this.state`.
     *
     *   getInitialState: function() {
   *     return {
   *       isOn: false,
   *       fooBaz: new BazFoo()
   *     }
   *   }
     *
     * @return {object}
     * @optional
     */
    getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

    /**
     * @return {object}
     * @optional
     */
    getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

    /**
     * Uses props from `this.props` and state from `this.state` to render the
     * structure of the component.
     *
     * No guarantees are made about when or how often this method is invoked, so
     * it must not have side effects.
     *
     *   render: function() {
   *     var name = this.props.name;
   *     return <div>Hello, {name}!</div>;
   *   }
     *
     * @return {ReactComponent}
     * @nosideeffects
     * @required
     */
    render: SpecPolicy.DEFINE_ONCE,



    // ==== Delegate methods ====

    /**
     * Invoked when the component is initially created and about to be mounted.
     * This may have side effects, but any external subscriptions or data created
     * by this method must be cleaned up in `componentWillUnmount`.
     *
     * @optional
     */
    componentWillMount: SpecPolicy.DEFINE_MANY,

    /**
     * Invoked when the component has been mounted and has a DOM representation.
     * However, there is no guarantee that the DOM node is in the document.
     *
     * Use this as an opportunity to operate on the DOM when the component has
     * been mounted (initialized and rendered) for the first time.
     *
     * @param {DOMElement} rootNode DOM element representing the component.
     * @optional
     */
    componentDidMount: SpecPolicy.DEFINE_MANY,

    /**
     * Invoked before the component receives new props.
     *
     * Use this as an opportunity to react to a prop transition by updating the
     * state using `this.setState`. Current props are accessed via `this.props`.
     *
     *   componentWillReceiveProps: function(nextProps, nextContext) {
   *     this.setState({
   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
   *     });
   *   }
     *
     * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
     * transition may cause a state change, but the opposite is not true. If you
     * need it, you are probably looking for `componentWillUpdate`.
     *
     * @param {object} nextProps
     * @optional
     */
    componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

    /**
     * Invoked while deciding if the component should be updated as a result of
     * receiving new props, state and/or context.
     *
     * Use this as an opportunity to `return false` when you're certain that the
     * transition to the new props/state/context will not require a component
     * update.
     *
     *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
   *     return !equal(nextProps, this.props) ||
   *       !equal(nextState, this.state) ||
   *       !equal(nextContext, this.context);
   *   }
     *
     * @param {object} nextProps
     * @param {?object} nextState
     * @param {?object} nextContext
     * @return {boolean} True if the component should update.
     * @optional
     */
    shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

    /**
     * Invoked when the component is about to update due to a transition from
     * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
     * and `nextContext`.
     *
     * Use this as an opportunity to perform preparation before an update occurs.
     *
     * NOTE: You **cannot** use `this.setState()` in this method.
     *
     * @param {object} nextProps
     * @param {?object} nextState
     * @param {?object} nextContext
     * @param {ReactReconcileTransaction} transaction
     * @optional
     */
    componentWillUpdate: SpecPolicy.DEFINE_MANY,

    /**
     * Invoked when the component's DOM representation has been updated.
     *
     * Use this as an opportunity to operate on the DOM when the component has
     * been updated.
     *
     * @param {object} prevProps
     * @param {?object} prevState
     * @param {?object} prevContext
     * @param {DOMElement} rootNode DOM element representing the component.
     * @optional
     */
    componentDidUpdate: SpecPolicy.DEFINE_MANY,

    /**
     * Invoked when the component is about to be removed from its parent and have
     * its DOM representation destroyed.
     *
     * Use this as an opportunity to deallocate any external resources.
     *
     * NOTE: There is no `componentDidUnmount` since your component will have been
     * destroyed by that point.
     *
     * @optional
     */
    componentWillUnmount: SpecPolicy.DEFINE_MANY,



    // ==== Advanced methods ====

    /**
     * Updates the component's currently mounted DOM representation.
     *
     * By default, this implements React's rendering and reconciliation algorithm.
     * Sophisticated clients may wish to override this.
     *
     * @param {ReactReconcileTransaction} transaction
     * @internal
     * @overridable
     */
    updateComponent: SpecPolicy.OVERRIDE_BASE

  };

  /**
   * Mapping from class specification keys to special processing functions.
   *
   * Although these are declared like instance properties in the specification
   * when defining classes using `React.createClass`, they are actually static
   * and are accessible on the constructor instead of the prototype. Despite
   * being static, they must be defined outside of the "statics" key under
   * which all other static methods are defined.
   */
  var RESERVED_SPEC_KEYS = {
    displayName: function(Constructor, displayName) {
      Constructor.displayName = displayName;
    },
    mixins: function(Constructor, mixins) {
      if (mixins) {
        for (var i = 0; i < mixins.length; i++) {
          mixSpecIntoComponent(Constructor, mixins[i]);
        }
      }
    },
    childContextTypes: function(Constructor, childContextTypes) {
      if ("production" !== "development") {
        validateTypeDef(
          Constructor,
          childContextTypes,
          ReactPropTypeLocations.childContext
        );
      }
      Constructor.childContextTypes = assign(
        {},
        Constructor.childContextTypes,
        childContextTypes
      );
    },
    contextTypes: function(Constructor, contextTypes) {
      if ("production" !== "development") {
        validateTypeDef(
          Constructor,
          contextTypes,
          ReactPropTypeLocations.context
        );
      }
      Constructor.contextTypes = assign(
        {},
        Constructor.contextTypes,
        contextTypes
      );
    },
    /**
     * Special case getDefaultProps which should move into statics but requires
     * automatic merging.
     */
    getDefaultProps: function(Constructor, getDefaultProps) {
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps = createMergedResultFunction(
          Constructor.getDefaultProps,
          getDefaultProps
        );
      } else {
        Constructor.getDefaultProps = getDefaultProps;
      }
    },
    propTypes: function(Constructor, propTypes) {
      if ("production" !== "development") {
        validateTypeDef(
          Constructor,
          propTypes,
          ReactPropTypeLocations.prop
        );
      }
      Constructor.propTypes = assign(
        {},
        Constructor.propTypes,
        propTypes
      );
    },
    statics: function(Constructor, statics) {
      mixStaticSpecIntoComponent(Constructor, statics);
    }
  };

  function validateTypeDef(Constructor, typeDef, location) {
    for (var propName in typeDef) {
      if (typeDef.hasOwnProperty(propName)) {
        // use a warning instead of an invariant so components
        // don't show up in prod but not in __DEV__
        ("production" !== "development" ? warning(
          typeof typeDef[propName] === 'function',
          '%s: %s type `%s` is invalid; it must be a function, usually from ' +
          'React.PropTypes.',
          Constructor.displayName || 'ReactClass',
          ReactPropTypeLocationNames[location],
          propName
        ) : null);
      }
    }
  }

  function validateMethodOverride(proto, name) {
    var specPolicy = ReactClassInterface.hasOwnProperty(name) ?
      ReactClassInterface[name] :
      null;

    // Disallow overriding of base class methods unless explicitly allowed.
    if (ReactClassMixin.hasOwnProperty(name)) {
      ("production" !== "development" ? invariant(
        specPolicy === SpecPolicy.OVERRIDE_BASE,
        'ReactClassInterface: You are attempting to override ' +
        '`%s` from your class specification. Ensure that your method names ' +
        'do not overlap with React methods.',
        name
      ) : invariant(specPolicy === SpecPolicy.OVERRIDE_BASE));
    }

    // Disallow defining methods more than once unless explicitly allowed.
    if (proto.hasOwnProperty(name)) {
      ("production" !== "development" ? invariant(
        specPolicy === SpecPolicy.DEFINE_MANY ||
        specPolicy === SpecPolicy.DEFINE_MANY_MERGED,
        'ReactClassInterface: You are attempting to define ' +
        '`%s` on your component more than once. This conflict may be due ' +
        'to a mixin.',
        name
      ) : invariant(specPolicy === SpecPolicy.DEFINE_MANY ||
        specPolicy === SpecPolicy.DEFINE_MANY_MERGED));
    }
  }

  /**
   * Mixin helper which handles policy validation and reserved
   * specification keys when building React classses.
   */
  function mixSpecIntoComponent(Constructor, spec) {
    if (!spec) {
      return;
    }

    ("production" !== "development" ? invariant(
      typeof spec !== 'function',
      'ReactClass: You\'re attempting to ' +
      'use a component class as a mixin. Instead, just use a regular object.'
    ) : invariant(typeof spec !== 'function'));
    ("production" !== "development" ? invariant(
      !ReactElement.isValidElement(spec),
      'ReactClass: You\'re attempting to ' +
      'use a component as a mixin. Instead, just use a regular object.'
    ) : invariant(!ReactElement.isValidElement(spec)));

    var proto = Constructor.prototype;

    // By handling mixins before any other properties, we ensure the same
    // chaining order is applied to methods with DEFINE_MANY policy, whether
    // mixins are listed before or after these methods in the spec.
    if (spec.hasOwnProperty(MIXINS_KEY)) {
      RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
    }

    for (var name in spec) {
      if (!spec.hasOwnProperty(name)) {
        continue;
      }

      if (name === MIXINS_KEY) {
        // We have already handled mixins in a special case above
        continue;
      }

      var property = spec[name];
      validateMethodOverride(proto, name);

      if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
        RESERVED_SPEC_KEYS[name](Constructor, property);
      } else {
        // Setup methods on prototype:
        // The following member methods should not be automatically bound:
        // 1. Expected ReactClass methods (in the "interface").
        // 2. Overridden methods (that were mixed in).
        var isReactClassMethod =
          ReactClassInterface.hasOwnProperty(name);
        var isAlreadyDefined = proto.hasOwnProperty(name);
        var markedDontBind = property && property.__reactDontBind;
        var isFunction = typeof property === 'function';
        var shouldAutoBind =
          isFunction &&
          !isReactClassMethod &&
          !isAlreadyDefined &&
          !markedDontBind;

        if (shouldAutoBind) {
          if (!proto.__reactAutoBindMap) {
            proto.__reactAutoBindMap = {};
          }
          proto.__reactAutoBindMap[name] = property;
          proto[name] = property;
        } else {
          if (isAlreadyDefined) {
            var specPolicy = ReactClassInterface[name];

            // These cases should already be caught by validateMethodOverride
            ("production" !== "development" ? invariant(
              isReactClassMethod && (
                (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)
              ),
              'ReactClass: Unexpected spec policy %s for key %s ' +
              'when mixing in component specs.',
              specPolicy,
              name
            ) : invariant(isReactClassMethod && (
                (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)
              )));

            // For methods which are defined more than once, call the existing
            // methods before calling the new property, merging if appropriate.
            if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
              proto[name] = createMergedResultFunction(proto[name], property);
            } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
              proto[name] = createChainedFunction(proto[name], property);
            }
          } else {
            proto[name] = property;
            if ("production" !== "development") {
              // Add verbose displayName to the function, which helps when looking
              // at profiling tools.
              if (typeof property === 'function' && spec.displayName) {
                proto[name].displayName = spec.displayName + '_' + name;
              }
            }
          }
        }
      }
    }
  }

  function mixStaticSpecIntoComponent(Constructor, statics) {
    if (!statics) {
      return;
    }
    for (var name in statics) {
      var property = statics[name];
      if (!statics.hasOwnProperty(name)) {
        continue;
      }

      var isReserved = name in RESERVED_SPEC_KEYS;
      ("production" !== "development" ? invariant(
        !isReserved,
        'ReactClass: You are attempting to define a reserved ' +
        'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' +
        'as an instance property instead; it will still be accessible on the ' +
        'constructor.',
        name
      ) : invariant(!isReserved));

      var isInherited = name in Constructor;
      ("production" !== "development" ? invariant(
        !isInherited,
        'ReactClass: You are attempting to define ' +
        '`%s` on your component more than once. This conflict may be ' +
        'due to a mixin.',
        name
      ) : invariant(!isInherited));
      Constructor[name] = property;
    }
  }

  /**
   * Merge two objects, but throw if both contain the same key.
   *
   * @param {object} one The first object, which is mutated.
   * @param {object} two The second object
   * @return {object} one after it has been mutated to contain everything in two.
   */
  function mergeIntoWithNoDuplicateKeys(one, two) {
    ("production" !== "development" ? invariant(
      one && two && typeof one === 'object' && typeof two === 'object',
      'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.'
    ) : invariant(one && two && typeof one === 'object' && typeof two === 'object'));

    for (var key in two) {
      if (two.hasOwnProperty(key)) {
        ("production" !== "development" ? invariant(
          one[key] === undefined,
          'mergeIntoWithNoDuplicateKeys(): ' +
          'Tried to merge two objects with the same key: `%s`. This conflict ' +
          'may be due to a mixin; in particular, this may be caused by two ' +
          'getInitialState() or getDefaultProps() methods returning objects ' +
          'with clashing keys.',
          key
        ) : invariant(one[key] === undefined));
        one[key] = two[key];
      }
    }
    return one;
  }

  /**
   * Creates a function that invokes two functions and merges their return values.
   *
   * @param {function} one Function to invoke first.
   * @param {function} two Function to invoke second.
   * @return {function} Function that invokes the two argument functions.
   * @private
   */
  function createMergedResultFunction(one, two) {
    return function mergedResult() {
      var a = one.apply(this, arguments);
      var b = two.apply(this, arguments);
      if (a == null) {
        return b;
      } else if (b == null) {
        return a;
      }
      var c = {};
      mergeIntoWithNoDuplicateKeys(c, a);
      mergeIntoWithNoDuplicateKeys(c, b);
      return c;
    };
  }

  /**
   * Creates a function that invokes two functions and ignores their return vales.
   *
   * @param {function} one Function to invoke first.
   * @param {function} two Function to invoke second.
   * @return {function} Function that invokes the two argument functions.
   * @private
   */
  function createChainedFunction(one, two) {
    return function chainedFunction() {
      one.apply(this, arguments);
      two.apply(this, arguments);
    };
  }

  /**
   * Binds a method to the component.
   *
   * @param {object} component Component whose method is going to be bound.
   * @param {function} method Method to be bound.
   * @return {function} The bound method.
   */
  function bindAutoBindMethod(component, method) {
    var boundMethod = method.bind(component);
    if ("production" !== "development") {
      boundMethod.__reactBoundContext = component;
      boundMethod.__reactBoundMethod = method;
      boundMethod.__reactBoundArguments = null;
      var componentName = component.constructor.displayName;
      var _bind = boundMethod.bind;
      /* eslint-disable block-scoped-var, no-undef */
      boundMethod.bind = function(newThis ) {for (var args=[],$__0=1,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
        // User is trying to bind() an autobound method; we effectively will
        // ignore the value of "this" that the user is trying to use, so
        // let's warn.
        if (newThis !== component && newThis !== null) {
          ("production" !== "development" ? warning(
            false,
            'bind(): React component methods may only be bound to the ' +
            'component instance. See %s',
            componentName
          ) : null);
        } else if (!args.length) {
          ("production" !== "development" ? warning(
            false,
            'bind(): You are binding a component method to the component. ' +
            'React does this for you automatically in a high-performance ' +
            'way, so you can safely remove this call. See %s',
            componentName
          ) : null);
          return boundMethod;
        }
        var reboundMethod = _bind.apply(boundMethod, arguments);
        reboundMethod.__reactBoundContext = component;
        reboundMethod.__reactBoundMethod = method;
        reboundMethod.__reactBoundArguments = args;
        return reboundMethod;
        /* eslint-enable */
      };
    }
    return boundMethod;
  }

  /**
   * Binds all auto-bound methods in a component.
   *
   * @param {object} component Component whose method is going to be bound.
   */
  function bindAutoBindMethods(component) {
    for (var autoBindKey in component.__reactAutoBindMap) {
      if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
        var method = component.__reactAutoBindMap[autoBindKey];
        component[autoBindKey] = bindAutoBindMethod(
          component,
          ReactErrorUtils.guard(
            method,
            component.constructor.displayName + '.' + autoBindKey
          )
        );
      }
    }
  }

  var typeDeprecationDescriptor = {
    enumerable: false,
    get: function() {
      var displayName = this.displayName || this.name || 'Component';
      ("production" !== "development" ? warning(
        false,
        '%s.type is deprecated. Use %s directly to access the class.',
        displayName,
        displayName
      ) : null);
      Object.defineProperty(this, 'type', {
        value: this
      });
      return this;
    }
  };

  /**
   * Add more to the ReactClass base class. These are all legacy features and
   * therefore not already part of the modern ReactComponent.
   */
  var ReactClassMixin = {

    /**
     * TODO: This will be deprecated because state should always keep a consistent
     * type signature and the only use case for this, is to avoid that.
     */
    replaceState: function(newState, callback) {
      ReactUpdateQueue.enqueueReplaceState(this, newState);
      if (callback) {
        ReactUpdateQueue.enqueueCallback(this, callback);
      }
    },

    /**
     * Checks whether or not this composite component is mounted.
     * @return {boolean} True if mounted, false otherwise.
     * @protected
     * @final
     */
    isMounted: function() {
      if ("production" !== "development") {
        var owner = ReactCurrentOwner.current;
        if (owner !== null) {
          ("production" !== "development" ? warning(
            owner._warnedAboutRefsInRender,
            '%s is accessing isMounted inside its render() function. ' +
            'render() should be a pure function of props and state. It should ' +
            'never access something that requires stale data from the previous ' +
            'render, such as refs. Move this logic to componentDidMount and ' +
            'componentDidUpdate instead.',
            owner.getName() || 'A component'
          ) : null);
          owner._warnedAboutRefsInRender = true;
        }
      }
      var internalInstance = ReactInstanceMap.get(this);
      return (
        internalInstance &&
        internalInstance !== ReactLifeCycle.currentlyMountingInstance
      );
    },

    /**
     * Sets a subset of the props.
     *
     * @param {object} partialProps Subset of the next props.
     * @param {?function} callback Called after props are updated.
     * @final
     * @public
     * @deprecated
     */
    setProps: function(partialProps, callback) {
      ReactUpdateQueue.enqueueSetProps(this, partialProps);
      if (callback) {
        ReactUpdateQueue.enqueueCallback(this, callback);
      }
    },

    /**
     * Replace all the props.
     *
     * @param {object} newProps Subset of the next props.
     * @param {?function} callback Called after props are updated.
     * @final
     * @public
     * @deprecated
     */
    replaceProps: function(newProps, callback) {
      ReactUpdateQueue.enqueueReplaceProps(this, newProps);
      if (callback) {
        ReactUpdateQueue.enqueueCallback(this, callback);
      }
    }
  };

  var ReactClassComponent = function() {};
  assign(
    ReactClassComponent.prototype,
    ReactComponent.prototype,
    ReactClassMixin
  );

  /**
   * Module for creating composite components.
   *
   * @class ReactClass
   */
  var ReactClass = {

    /**
     * Creates a composite component class given a class specification.
     *
     * @param {object} spec Class specification (which must define `render`).
     * @return {function} Component constructor function.
     * @public
     */
    createClass: function(spec) {
      var Constructor = function(props, context) {
        // This constructor is overridden by mocks. The argument is used
        // by mocks to assert on what gets mounted.

        if ("production" !== "development") {
          ("production" !== "development" ? warning(
            this instanceof Constructor,
            'Something is calling a React component directly. Use a factory or ' +
            'JSX instead. See: https://fb.me/react-legacyfactory'
          ) : null);
        }

        // Wire up auto-binding
        if (this.__reactAutoBindMap) {
          bindAutoBindMethods(this);
        }

        this.props = props;
        this.context = context;
        this.state = null;

        // ReactClasses doesn't have constructors. Instead, they use the
        // getInitialState and componentWillMount methods for initialization.

        var initialState = this.getInitialState ? this.getInitialState() : null;
        if ("production" !== "development") {
          // We allow auto-mocks to proceed as if they're returning null.
          if (typeof initialState === 'undefined' &&
            this.getInitialState._isMockFunction) {
            // This is probably bad practice. Consider warning here and
            // deprecating this convenience.
            initialState = null;
          }
        }
        ("production" !== "development" ? invariant(
          typeof initialState === 'object' && !Array.isArray(initialState),
          '%s.getInitialState(): must return an object or null',
          Constructor.displayName || 'ReactCompositeComponent'
        ) : invariant(typeof initialState === 'object' && !Array.isArray(initialState)));

        this.state = initialState;
      };
      Constructor.prototype = new ReactClassComponent();
      Constructor.prototype.constructor = Constructor;

      injectedMixins.forEach(
        mixSpecIntoComponent.bind(null, Constructor)
      );

      mixSpecIntoComponent(Constructor, spec);

      // Initialize the defaultProps property after all mixins have been merged
      if (Constructor.getDefaultProps) {
        Constructor.defaultProps = Constructor.getDefaultProps();
      }

      if ("production" !== "development") {
        // This is a tag to indicate that the use of these method names is ok,
        // since it's used with createClass. If it's not, then it's likely a
        // mistake so we'll warn you to use the static property, property
        // initializer or constructor respectively.
        if (Constructor.getDefaultProps) {
          Constructor.getDefaultProps.isReactClassApproved = {};
        }
        if (Constructor.prototype.getInitialState) {
          Constructor.prototype.getInitialState.isReactClassApproved = {};
        }
      }

      ("production" !== "development" ? invariant(
        Constructor.prototype.render,
        'createClass(...): Class specification must implement a `render` method.'
      ) : invariant(Constructor.prototype.render));

      if ("production" !== "development") {
        ("production" !== "development" ? warning(
          !Constructor.prototype.componentShouldUpdate,
          '%s has a method called ' +
          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
          'The name is phrased as a question because the function is ' +
          'expected to return a value.',
          spec.displayName || 'A component'
        ) : null);
      }

      // Reduce time spent doing lookups by setting these on the prototype.
      for (var methodName in ReactClassInterface) {
        if (!Constructor.prototype[methodName]) {
          Constructor.prototype[methodName] = null;
        }
      }

      // Legacy hook
      Constructor.type = Constructor;
      if ("production" !== "development") {
        try {
          Object.defineProperty(Constructor, 'type', typeDeprecationDescriptor);
        } catch (x) {
          // IE will fail on defineProperty (es5-shim/sham too)
        }
      }

      return Constructor;
    },

    injection: {
      injectMixin: function(mixin) {
        injectedMixins.push(mixin);
      }
    }

  };

  module.exports = ReactClass;

},{"./Object.assign":353,"./ReactComponent":361,"./ReactCurrentOwner":366,"./ReactElement":384,"./ReactErrorUtils":387,"./ReactInstanceMap":394,"./ReactLifeCycle":395,"./ReactPropTypeLocationNames":403,"./ReactPropTypeLocations":404,"./ReactUpdateQueue":413,"./invariant":462,"./keyMirror":467,"./keyOf":468,"./warning":481}],361:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactComponent
   */

  'use strict';

  var ReactUpdateQueue = require("./ReactUpdateQueue");

  var invariant = require("./invariant");
  var warning = require("./warning");

  /**
   * Base class helpers for the updating state of a component.
   */
  function ReactComponent(props, context) {
    this.props = props;
    this.context = context;
  }

  /**
   * Sets a subset of the state. Always use this to mutate
   * state. You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * There is no guarantee that calls to `setState` will run synchronously,
   * as they may eventually be batched together.  You can provide an optional
   * callback that will be executed when the call to setState is actually
   * completed.
   *
   * When a function is provided to setState, it will be called at some point in
   * the future (not synchronously). It will be called with the up to date
   * component arguments (state, props, context). These values can be different
   * from this.* because your function may be called after receiveProps but before
   * shouldComponentUpdate, and this new state, props, and context will not yet be
   * assigned to this.
   *
   * @param {object|function} partialState Next partial state or function to
   *        produce next partial state to be merged with current state.
   * @param {?function} callback Called after state is updated.
   * @final
   * @protected
   */
  ReactComponent.prototype.setState = function(partialState, callback) {
    ("production" !== "development" ? invariant(
      typeof partialState === 'object' ||
      typeof partialState === 'function' ||
      partialState == null,
      'setState(...): takes an object of state variables to update or a ' +
      'function which returns an object of state variables.'
    ) : invariant(typeof partialState === 'object' ||
      typeof partialState === 'function' ||
      partialState == null));
    if ("production" !== "development") {
      ("production" !== "development" ? warning(
        partialState != null,
        'setState(...): You passed an undefined or null state object; ' +
        'instead, use forceUpdate().'
      ) : null);
    }
    ReactUpdateQueue.enqueueSetState(this, partialState);
    if (callback) {
      ReactUpdateQueue.enqueueCallback(this, callback);
    }
  };

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {?function} callback Called after update is complete.
   * @final
   * @protected
   */
  ReactComponent.prototype.forceUpdate = function(callback) {
    ReactUpdateQueue.enqueueForceUpdate(this);
    if (callback) {
      ReactUpdateQueue.enqueueCallback(this, callback);
    }
  };

  /**
   * Deprecated APIs. These APIs used to exist on classic React classes but since
   * we would like to deprecate them, we're not going to move them over to this
   * modern base class. Instead, we define a getter that warns if it's accessed.
   */
  if ("production" !== "development") {
    var deprecatedAPIs = {
      getDOMNode: [
        'getDOMNode',
        'Use React.findDOMNode(component) instead.'
      ],
      isMounted: [
        'isMounted',
        'Instead, make sure to clean up subscriptions and pending requests in ' +
        'componentWillUnmount to prevent memory leaks.'
      ],
      replaceProps: [
        'replaceProps',
        'Instead, call React.render again at the top level.'
      ],
      replaceState: [
        'replaceState',
        'Refactor your code to use setState instead (see ' +
        'https://github.com/facebook/react/issues/3236).'
      ],
      setProps: [
        'setProps',
        'Instead, call React.render again at the top level.'
      ]
    };
    var defineDeprecationWarning = function(methodName, info) {
      try {
        Object.defineProperty(ReactComponent.prototype, methodName, {
          get: function() {
            ("production" !== "development" ? warning(
              false,
              '%s(...) is deprecated in plain JavaScript React classes. %s',
              info[0],
              info[1]
            ) : null);
            return undefined;
          }
        });
      } catch (x) {
        // IE will fail on defineProperty (es5-shim/sham too)
      }
    };
    for (var fnName in deprecatedAPIs) {
      if (deprecatedAPIs.hasOwnProperty(fnName)) {
        defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
      }
    }
  }

  module.exports = ReactComponent;

},{"./ReactUpdateQueue":413,"./invariant":462,"./warning":481}],362:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactComponentBrowserEnvironment
   */

  /*jslint evil: true */

  'use strict';

  var ReactDOMIDOperations = require("./ReactDOMIDOperations");
  var ReactMount = require("./ReactMount");

  /**
   * Abstracts away all functionality of the reconciler that requires knowledge of
   * the browser context. TODO: These callers should be refactored to avoid the
   * need for this injection.
   */
  var ReactComponentBrowserEnvironment = {

    processChildrenUpdates:
    ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

    replaceNodeWithMarkupByID:
    ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,

    /**
     * If a particular environment requires that some resources be cleaned up,
     * specify this in the injected Mixin. In the DOM, we would likely want to
     * purge any cached node ID lookups.
     *
     * @private
     */
    unmountIDFromEnvironment: function(rootNodeID) {
      ReactMount.purgeID(rootNodeID);
    }

  };

  module.exports = ReactComponentBrowserEnvironment;

},{"./ReactDOMIDOperations":371,"./ReactMount":397}],363:[function(require,module,exports){
  /**
   * Copyright 2014-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactComponentEnvironment
   */

  'use strict';

  var invariant = require("./invariant");

  var injected = false;

  var ReactComponentEnvironment = {

    /**
     * Optionally injectable environment dependent cleanup hook. (server vs.
     * browser etc). Example: A browser system caches DOM nodes based on component
     * ID and must remove that cache entry when this instance is unmounted.
     */
    unmountIDFromEnvironment: null,

    /**
     * Optionally injectable hook for swapping out mount images in the middle of
     * the tree.
     */
    replaceNodeWithMarkupByID: null,

    /**
     * Optionally injectable hook for processing a queue of child updates. Will
     * later move into MultiChildComponents.
     */
    processChildrenUpdates: null,

    injection: {
      injectEnvironment: function(environment) {
        ("production" !== "development" ? invariant(
          !injected,
          'ReactCompositeComponent: injectEnvironment() can only be called once.'
        ) : invariant(!injected));
        ReactComponentEnvironment.unmountIDFromEnvironment =
          environment.unmountIDFromEnvironment;
        ReactComponentEnvironment.replaceNodeWithMarkupByID =
          environment.replaceNodeWithMarkupByID;
        ReactComponentEnvironment.processChildrenUpdates =
          environment.processChildrenUpdates;
        injected = true;
      }
    }

  };

  module.exports = ReactComponentEnvironment;

},{"./invariant":462}],364:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactCompositeComponent
   */

  'use strict';

  var ReactComponentEnvironment = require("./ReactComponentEnvironment");
  var ReactContext = require("./ReactContext");
  var ReactCurrentOwner = require("./ReactCurrentOwner");
  var ReactElement = require("./ReactElement");
  var ReactElementValidator = require("./ReactElementValidator");
  var ReactInstanceMap = require("./ReactInstanceMap");
  var ReactLifeCycle = require("./ReactLifeCycle");
  var ReactNativeComponent = require("./ReactNativeComponent");
  var ReactPerf = require("./ReactPerf");
  var ReactPropTypeLocations = require("./ReactPropTypeLocations");
  var ReactPropTypeLocationNames = require("./ReactPropTypeLocationNames");
  var ReactReconciler = require("./ReactReconciler");
  var ReactUpdates = require("./ReactUpdates");

  var assign = require("./Object.assign");
  var emptyObject = require("./emptyObject");
  var invariant = require("./invariant");
  var shouldUpdateReactComponent = require("./shouldUpdateReactComponent");
  var warning = require("./warning");

  function getDeclarationErrorAddendum(component) {
    var owner = component._currentElement._owner || null;
    if (owner) {
      var name = owner.getName();
      if (name) {
        return ' Check the render method of `' + name + '`.';
      }
    }
    return '';
  }

  /**
   * ------------------ The Life-Cycle of a Composite Component ------------------
   *
   * - constructor: Initialization of state. The instance is now retained.
   *   - componentWillMount
   *   - render
   *   - [children's constructors]
   *     - [children's componentWillMount and render]
   *     - [children's componentDidMount]
   *     - componentDidMount
   *
   *       Update Phases:
   *       - componentWillReceiveProps (only called if parent updated)
   *       - shouldComponentUpdate
   *         - componentWillUpdate
   *           - render
   *           - [children's constructors or receive props phases]
   *         - componentDidUpdate
   *
   *     - componentWillUnmount
   *     - [children's componentWillUnmount]
   *   - [children destroyed]
   * - (destroyed): The instance is now blank, released by React and ready for GC.
   *
   * -----------------------------------------------------------------------------
   */

  /**
   * An incrementing ID assigned to each component when it is mounted. This is
   * used to enforce the order in which `ReactUpdates` updates dirty components.
   *
   * @private
   */
  var nextMountID = 1;

  /**
   * @lends {ReactCompositeComponent.prototype}
   */
  var ReactCompositeComponentMixin = {

    /**
     * Base constructor for all composite component.
     *
     * @param {ReactElement} element
     * @final
     * @internal
     */
    construct: function(element) {
      this._currentElement = element;
      this._rootNodeID = null;
      this._instance = null;

      // See ReactUpdateQueue
      this._pendingElement = null;
      this._pendingStateQueue = null;
      this._pendingReplaceState = false;
      this._pendingForceUpdate = false;

      this._renderedComponent = null;

      this._context = null;
      this._mountOrder = 0;
      this._isTopLevel = false;

      // See ReactUpdates and ReactUpdateQueue.
      this._pendingCallbacks = null;
    },

    /**
     * Initializes the component, renders markup, and registers event listeners.
     *
     * @param {string} rootID DOM ID of the root node.
     * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
     * @return {?string} Rendered markup to be inserted into the DOM.
     * @final
     * @internal
     */
    mountComponent: function(rootID, transaction, context) {
      this._context = context;
      this._mountOrder = nextMountID++;
      this._rootNodeID = rootID;

      var publicProps = this._processProps(this._currentElement.props);
      var publicContext = this._processContext(this._currentElement._context);

      var Component = ReactNativeComponent.getComponentClassForElement(
        this._currentElement
      );

      // Initialize the public class
      var inst = new Component(publicProps, publicContext);

      if ("production" !== "development") {
        // This will throw later in _renderValidatedComponent, but add an early
        // warning now to help debugging
        ("production" !== "development" ? warning(
          inst.render != null,
          '%s(...): No `render` method found on the returned component ' +
          'instance: you may have forgotten to define `render` in your ' +
          'component or you may have accidentally tried to render an element ' +
          'whose type is a function that isn\'t a React component.',
          Component.displayName || Component.name || 'Component'
        ) : null);
      }

      // These should be set up in the constructor, but as a convenience for
      // simpler class abstractions, we set them up after the fact.
      inst.props = publicProps;
      inst.context = publicContext;
      inst.refs = emptyObject;

      this._instance = inst;

      // Store a reference from the instance back to the internal representation
      ReactInstanceMap.set(inst, this);

      if ("production" !== "development") {
        this._warnIfContextsDiffer(this._currentElement._context, context);
      }

      if ("production" !== "development") {
        // Since plain JS classes are defined without any special initialization
        // logic, we can not catch common errors early. Therefore, we have to
        // catch them here, at initialization time, instead.
        ("production" !== "development" ? warning(
          !inst.getInitialState ||
          inst.getInitialState.isReactClassApproved,
          'getInitialState was defined on %s, a plain JavaScript class. ' +
          'This is only supported for classes created using React.createClass. ' +
          'Did you mean to define a state property instead?',
          this.getName() || 'a component'
        ) : null);
        ("production" !== "development" ? warning(
          !inst.getDefaultProps ||
          inst.getDefaultProps.isReactClassApproved,
          'getDefaultProps was defined on %s, a plain JavaScript class. ' +
          'This is only supported for classes created using React.createClass. ' +
          'Use a static property to define defaultProps instead.',
          this.getName() || 'a component'
        ) : null);
        ("production" !== "development" ? warning(
          !inst.propTypes,
          'propTypes was defined as an instance property on %s. Use a static ' +
          'property to define propTypes instead.',
          this.getName() || 'a component'
        ) : null);
        ("production" !== "development" ? warning(
          !inst.contextTypes,
          'contextTypes was defined as an instance property on %s. Use a ' +
          'static property to define contextTypes instead.',
          this.getName() || 'a component'
        ) : null);
        ("production" !== "development" ? warning(
          typeof inst.componentShouldUpdate !== 'function',
          '%s has a method called ' +
          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
          'The name is phrased as a question because the function is ' +
          'expected to return a value.',
          (this.getName() || 'A component')
        ) : null);
      }

      var initialState = inst.state;
      if (initialState === undefined) {
        inst.state = initialState = null;
      }
      ("production" !== "development" ? invariant(
        typeof initialState === 'object' && !Array.isArray(initialState),
        '%s.state: must be set to an object or null',
        this.getName() || 'ReactCompositeComponent'
      ) : invariant(typeof initialState === 'object' && !Array.isArray(initialState)));

      this._pendingStateQueue = null;
      this._pendingReplaceState = false;
      this._pendingForceUpdate = false;

      var childContext;
      var renderedElement;

      var previouslyMounting = ReactLifeCycle.currentlyMountingInstance;
      ReactLifeCycle.currentlyMountingInstance = this;
      try {
        if (inst.componentWillMount) {
          inst.componentWillMount();
          // When mounting, calls to `setState` by `componentWillMount` will set
          // `this._pendingStateQueue` without triggering a re-render.
          if (this._pendingStateQueue) {
            inst.state = this._processPendingState(inst.props, inst.context);
          }
        }

        childContext = this._getValidatedChildContext(context);
        renderedElement = this._renderValidatedComponent(childContext);
      } finally {
        ReactLifeCycle.currentlyMountingInstance = previouslyMounting;
      }

      this._renderedComponent = this._instantiateReactComponent(
        renderedElement,
        this._currentElement.type // The wrapping type
      );

      var markup = ReactReconciler.mountComponent(
        this._renderedComponent,
        rootID,
        transaction,
        this._mergeChildContext(context, childContext)
      );
      if (inst.componentDidMount) {
        transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
      }

      return markup;
    },

    /**
     * Releases any resources allocated by `mountComponent`.
     *
     * @final
     * @internal
     */
    unmountComponent: function() {
      var inst = this._instance;

      if (inst.componentWillUnmount) {
        var previouslyUnmounting = ReactLifeCycle.currentlyUnmountingInstance;
        ReactLifeCycle.currentlyUnmountingInstance = this;
        try {
          inst.componentWillUnmount();
        } finally {
          ReactLifeCycle.currentlyUnmountingInstance = previouslyUnmounting;
        }
      }

      ReactReconciler.unmountComponent(this._renderedComponent);
      this._renderedComponent = null;

      // Reset pending fields
      this._pendingStateQueue = null;
      this._pendingReplaceState = false;
      this._pendingForceUpdate = false;
      this._pendingCallbacks = null;
      this._pendingElement = null;

      // These fields do not really need to be reset since this object is no
      // longer accessible.
      this._context = null;
      this._rootNodeID = null;

      // Delete the reference from the instance to this internal representation
      // which allow the internals to be properly cleaned up even if the user
      // leaks a reference to the public instance.
      ReactInstanceMap.remove(inst);

      // Some existing components rely on inst.props even after they've been
      // destroyed (in event handlers).
      // TODO: inst.props = null;
      // TODO: inst.state = null;
      // TODO: inst.context = null;
    },

    /**
     * Schedule a partial update to the props. Only used for internal testing.
     *
     * @param {object} partialProps Subset of the next props.
     * @param {?function} callback Called after props are updated.
     * @final
     * @internal
     */
    _setPropsInternal: function(partialProps, callback) {
      // This is a deoptimized path. We optimize for always having an element.
      // This creates an extra internal element.
      var element = this._pendingElement || this._currentElement;
      this._pendingElement = ReactElement.cloneAndReplaceProps(
        element,
        assign({}, element.props, partialProps)
      );
      ReactUpdates.enqueueUpdate(this, callback);
    },

    /**
     * Filters the context object to only contain keys specified in
     * `contextTypes`
     *
     * @param {object} context
     * @return {?object}
     * @private
     */
    _maskContext: function(context) {
      var maskedContext = null;
      // This really should be getting the component class for the element,
      // but we know that we're not going to need it for built-ins.
      if (typeof this._currentElement.type === 'string') {
        return emptyObject;
      }
      var contextTypes = this._currentElement.type.contextTypes;
      if (!contextTypes) {
        return emptyObject;
      }
      maskedContext = {};
      for (var contextName in contextTypes) {
        maskedContext[contextName] = context[contextName];
      }
      return maskedContext;
    },

    /**
     * Filters the context object to only contain keys specified in
     * `contextTypes`, and asserts that they are valid.
     *
     * @param {object} context
     * @return {?object}
     * @private
     */
    _processContext: function(context) {
      var maskedContext = this._maskContext(context);
      if ("production" !== "development") {
        var Component = ReactNativeComponent.getComponentClassForElement(
          this._currentElement
        );
        if (Component.contextTypes) {
          this._checkPropTypes(
            Component.contextTypes,
            maskedContext,
            ReactPropTypeLocations.context
          );
        }
      }
      return maskedContext;
    },

    /**
     * @param {object} currentContext
     * @return {object}
     * @private
     */
    _getValidatedChildContext: function(currentContext) {
      var inst = this._instance;
      var childContext = inst.getChildContext && inst.getChildContext();
      if (childContext) {
        ("production" !== "development" ? invariant(
          typeof inst.constructor.childContextTypes === 'object',
          '%s.getChildContext(): childContextTypes must be defined in order to ' +
          'use getChildContext().',
          this.getName() || 'ReactCompositeComponent'
        ) : invariant(typeof inst.constructor.childContextTypes === 'object'));
        if ("production" !== "development") {
          this._checkPropTypes(
            inst.constructor.childContextTypes,
            childContext,
            ReactPropTypeLocations.childContext
          );
        }
        for (var name in childContext) {
          ("production" !== "development" ? invariant(
            name in inst.constructor.childContextTypes,
            '%s.getChildContext(): key "%s" is not defined in childContextTypes.',
            this.getName() || 'ReactCompositeComponent',
            name
          ) : invariant(name in inst.constructor.childContextTypes));
        }
        return childContext;
      }
      return null;
    },

    _mergeChildContext: function(currentContext, childContext) {
      if (childContext) {
        return assign({}, currentContext, childContext);
      }
      return currentContext;
    },

    /**
     * Processes props by setting default values for unspecified props and
     * asserting that the props are valid. Does not mutate its argument; returns
     * a new props object with defaults merged in.
     *
     * @param {object} newProps
     * @return {object}
     * @private
     */
    _processProps: function(newProps) {
      if ("production" !== "development") {
        var Component = ReactNativeComponent.getComponentClassForElement(
          this._currentElement
        );
        if (Component.propTypes) {
          this._checkPropTypes(
            Component.propTypes,
            newProps,
            ReactPropTypeLocations.prop
          );
        }
      }
      return newProps;
    },

    /**
     * Assert that the props are valid
     *
     * @param {object} propTypes Map of prop name to a ReactPropType
     * @param {object} props
     * @param {string} location e.g. "prop", "context", "child context"
     * @private
     */
    _checkPropTypes: function(propTypes, props, location) {
      // TODO: Stop validating prop types here and only use the element
      // validation.
      var componentName = this.getName();
      for (var propName in propTypes) {
        if (propTypes.hasOwnProperty(propName)) {
          var error;
          try {
            // This is intentionally an invariant that gets caught. It's the same
            // behavior as without this statement except with a better message.
            ("production" !== "development" ? invariant(
              typeof propTypes[propName] === 'function',
              '%s: %s type `%s` is invalid; it must be a function, usually ' +
              'from React.PropTypes.',
              componentName || 'React class',
              ReactPropTypeLocationNames[location],
              propName
            ) : invariant(typeof propTypes[propName] === 'function'));
            error = propTypes[propName](props, propName, componentName, location);
          } catch (ex) {
            error = ex;
          }
          if (error instanceof Error) {
            // We may want to extend this logic for similar errors in
            // React.render calls, so I'm abstracting it away into
            // a function to minimize refactoring in the future
            var addendum = getDeclarationErrorAddendum(this);

            if (location === ReactPropTypeLocations.prop) {
              // Preface gives us something to blacklist in warning module
              ("production" !== "development" ? warning(
                false,
                'Failed Composite propType: %s%s',
                error.message,
                addendum
              ) : null);
            } else {
              ("production" !== "development" ? warning(
                false,
                'Failed Context Types: %s%s',
                error.message,
                addendum
              ) : null);
            }
          }
        }
      }
    },

    receiveComponent: function(nextElement, transaction, nextContext) {
      var prevElement = this._currentElement;
      var prevContext = this._context;

      this._pendingElement = null;

      this.updateComponent(
        transaction,
        prevElement,
        nextElement,
        prevContext,
        nextContext
      );
    },

    /**
     * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
     * is set, update the component.
     *
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    performUpdateIfNecessary: function(transaction) {
      if (this._pendingElement != null) {
        ReactReconciler.receiveComponent(
          this,
          this._pendingElement || this._currentElement,
          transaction,
          this._context
        );
      }

      if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
        if ("production" !== "development") {
          ReactElementValidator.checkAndWarnForMutatedProps(
            this._currentElement
          );
        }

        this.updateComponent(
          transaction,
          this._currentElement,
          this._currentElement,
          this._context,
          this._context
        );
      }
    },

    /**
     * Compare two contexts, warning if they are different
     * TODO: Remove this check when owner-context is removed
     */
    _warnIfContextsDiffer: function(ownerBasedContext, parentBasedContext) {
      ownerBasedContext = this._maskContext(ownerBasedContext);
      parentBasedContext = this._maskContext(parentBasedContext);
      var parentKeys = Object.keys(parentBasedContext).sort();
      var displayName = this.getName() || 'ReactCompositeComponent';
      for (var i = 0; i < parentKeys.length; i++) {
        var key = parentKeys[i];
        ("production" !== "development" ? warning(
          ownerBasedContext[key] === parentBasedContext[key],
          'owner-based and parent-based contexts differ '  +
          '(values: `%s` vs `%s`) for key (%s) while mounting %s ' +
          '(see: http://fb.me/react-context-by-parent)',
          ownerBasedContext[key],
          parentBasedContext[key],
          key,
          displayName
        ) : null);
      }
    },

    /**
     * Perform an update to a mounted component. The componentWillReceiveProps and
     * shouldComponentUpdate methods are called, then (assuming the update isn't
     * skipped) the remaining update lifecycle methods are called and the DOM
     * representation is updated.
     *
     * By default, this implements React's rendering and reconciliation algorithm.
     * Sophisticated clients may wish to override this.
     *
     * @param {ReactReconcileTransaction} transaction
     * @param {ReactElement} prevParentElement
     * @param {ReactElement} nextParentElement
     * @internal
     * @overridable
     */
    updateComponent: function(
      transaction,
      prevParentElement,
      nextParentElement,
      prevUnmaskedContext,
      nextUnmaskedContext
    ) {
      var inst = this._instance;

      var nextContext = inst.context;
      var nextProps = inst.props;

      // Distinguish between a props update versus a simple state update
      if (prevParentElement !== nextParentElement) {
        nextContext = this._processContext(nextParentElement._context);
        nextProps = this._processProps(nextParentElement.props);

        if ("production" !== "development") {
          if (nextUnmaskedContext != null) {
            this._warnIfContextsDiffer(
              nextParentElement._context,
              nextUnmaskedContext
            );
          }
        }

        // An update here will schedule an update but immediately set
        // _pendingStateQueue which will ensure that any state updates gets
        // immediately reconciled instead of waiting for the next batch.

        if (inst.componentWillReceiveProps) {
          inst.componentWillReceiveProps(nextProps, nextContext);
        }
      }

      var nextState = this._processPendingState(nextProps, nextContext);

      var shouldUpdate =
        this._pendingForceUpdate ||
        !inst.shouldComponentUpdate ||
        inst.shouldComponentUpdate(nextProps, nextState, nextContext);

      if ("production" !== "development") {
        ("production" !== "development" ? warning(
          typeof shouldUpdate !== 'undefined',
          '%s.shouldComponentUpdate(): Returned undefined instead of a ' +
          'boolean value. Make sure to return true or false.',
          this.getName() || 'ReactCompositeComponent'
        ) : null);
      }

      if (shouldUpdate) {
        this._pendingForceUpdate = false;
        // Will set `this.props`, `this.state` and `this.context`.
        this._performComponentUpdate(
          nextParentElement,
          nextProps,
          nextState,
          nextContext,
          transaction,
          nextUnmaskedContext
        );
      } else {
        // If it's determined that a component should not update, we still want
        // to set props and state but we shortcut the rest of the update.
        this._currentElement = nextParentElement;
        this._context = nextUnmaskedContext;
        inst.props = nextProps;
        inst.state = nextState;
        inst.context = nextContext;
      }
    },

    _processPendingState: function(props, context) {
      var inst = this._instance;
      var queue = this._pendingStateQueue;
      var replace = this._pendingReplaceState;
      this._pendingReplaceState = false;
      this._pendingStateQueue = null;

      if (!queue) {
        return inst.state;
      }

      if (replace && queue.length === 1) {
        return queue[0];
      }

      var nextState = assign({}, replace ? queue[0] : inst.state);
      for (var i = replace ? 1 : 0; i < queue.length; i++) {
        var partial = queue[i];
        assign(
          nextState,
          typeof partial === 'function' ?
            partial.call(inst, nextState, props, context) :
            partial
        );
      }

      return nextState;
    },

    /**
     * Merges new props and state, notifies delegate methods of update and
     * performs update.
     *
     * @param {ReactElement} nextElement Next element
     * @param {object} nextProps Next public object to set as properties.
     * @param {?object} nextState Next object to set as state.
     * @param {?object} nextContext Next public object to set as context.
     * @param {ReactReconcileTransaction} transaction
     * @param {?object} unmaskedContext
     * @private
     */
    _performComponentUpdate: function(
      nextElement,
      nextProps,
      nextState,
      nextContext,
      transaction,
      unmaskedContext
    ) {
      var inst = this._instance;

      var prevProps = inst.props;
      var prevState = inst.state;
      var prevContext = inst.context;

      if (inst.componentWillUpdate) {
        inst.componentWillUpdate(nextProps, nextState, nextContext);
      }

      this._currentElement = nextElement;
      this._context = unmaskedContext;
      inst.props = nextProps;
      inst.state = nextState;
      inst.context = nextContext;

      this._updateRenderedComponent(transaction, unmaskedContext);

      if (inst.componentDidUpdate) {
        transaction.getReactMountReady().enqueue(
          inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext),
          inst
        );
      }
    },

    /**
     * Call the component's `render` method and update the DOM accordingly.
     *
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    _updateRenderedComponent: function(transaction, context) {
      var prevComponentInstance = this._renderedComponent;
      var prevRenderedElement = prevComponentInstance._currentElement;
      var childContext = this._getValidatedChildContext();
      var nextRenderedElement = this._renderValidatedComponent(childContext);
      if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
        ReactReconciler.receiveComponent(
          prevComponentInstance,
          nextRenderedElement,
          transaction,
          this._mergeChildContext(context, childContext)
        );
      } else {
        // These two IDs are actually the same! But nothing should rely on that.
        var thisID = this._rootNodeID;
        var prevComponentID = prevComponentInstance._rootNodeID;
        ReactReconciler.unmountComponent(prevComponentInstance);

        this._renderedComponent = this._instantiateReactComponent(
          nextRenderedElement,
          this._currentElement.type
        );
        var nextMarkup = ReactReconciler.mountComponent(
          this._renderedComponent,
          thisID,
          transaction,
          this._mergeChildContext(context, childContext)
        );
        this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
      }
    },

    /**
     * @protected
     */
    _replaceNodeWithMarkupByID: function(prevComponentID, nextMarkup) {
      ReactComponentEnvironment.replaceNodeWithMarkupByID(
        prevComponentID,
        nextMarkup
      );
    },

    /**
     * @protected
     */
    _renderValidatedComponentWithoutOwnerOrContext: function() {
      var inst = this._instance;
      var renderedComponent = inst.render();
      if ("production" !== "development") {
        // We allow auto-mocks to proceed as if they're returning null.
        if (typeof renderedComponent === 'undefined' &&
          inst.render._isMockFunction) {
          // This is probably bad practice. Consider warning here and
          // deprecating this convenience.
          renderedComponent = null;
        }
      }

      return renderedComponent;
    },

    /**
     * @private
     */
    _renderValidatedComponent: function(childContext) {
      var renderedComponent;
      var previousContext = ReactContext.current;
      ReactContext.current = this._mergeChildContext(
        this._currentElement._context,
        childContext
      );
      ReactCurrentOwner.current = this;
      try {
        renderedComponent =
          this._renderValidatedComponentWithoutOwnerOrContext();
      } finally {
        ReactContext.current = previousContext;
        ReactCurrentOwner.current = null;
      }
      ("production" !== "development" ? invariant(
        // TODO: An `isValidNode` function would probably be more appropriate
        renderedComponent === null || renderedComponent === false ||
        ReactElement.isValidElement(renderedComponent),
        '%s.render(): A valid ReactComponent must be returned. You may have ' +
        'returned undefined, an array or some other invalid object.',
        this.getName() || 'ReactCompositeComponent'
      ) : invariant(// TODO: An `isValidNode` function would probably be more appropriate
        renderedComponent === null || renderedComponent === false ||
        ReactElement.isValidElement(renderedComponent)));
      return renderedComponent;
    },

    /**
     * Lazily allocates the refs object and stores `component` as `ref`.
     *
     * @param {string} ref Reference name.
     * @param {component} component Component to store as `ref`.
     * @final
     * @private
     */
    attachRef: function(ref, component) {
      var inst = this.getPublicInstance();
      var refs = inst.refs === emptyObject ? (inst.refs = {}) : inst.refs;
      refs[ref] = component.getPublicInstance();
    },

    /**
     * Detaches a reference name.
     *
     * @param {string} ref Name to dereference.
     * @final
     * @private
     */
    detachRef: function(ref) {
      var refs = this.getPublicInstance().refs;
      delete refs[ref];
    },

    /**
     * Get a text description of the component that can be used to identify it
     * in error messages.
     * @return {string} The name or null.
     * @internal
     */
    getName: function() {
      var type = this._currentElement.type;
      var constructor = this._instance && this._instance.constructor;
      return (
        type.displayName || (constructor && constructor.displayName) ||
        type.name || (constructor && constructor.name) ||
        null
      );
    },

    /**
     * Get the publicly accessible representation of this component - i.e. what
     * is exposed by refs and returned by React.render. Can be null for stateless
     * components.
     *
     * @return {ReactComponent} the public component instance.
     * @internal
     */
    getPublicInstance: function() {
      return this._instance;
    },

    // Stub
    _instantiateReactComponent: null

  };

  ReactPerf.measureMethods(
    ReactCompositeComponentMixin,
    'ReactCompositeComponent',
    {
      mountComponent: 'mountComponent',
      updateComponent: 'updateComponent',
      _renderValidatedComponent: '_renderValidatedComponent'
    }
  );

  var ReactCompositeComponent = {

    Mixin: ReactCompositeComponentMixin

  };

  module.exports = ReactCompositeComponent;

},{"./Object.assign":353,"./ReactComponentEnvironment":363,"./ReactContext":365,"./ReactCurrentOwner":366,"./ReactElement":384,"./ReactElementValidator":385,"./ReactInstanceMap":394,"./ReactLifeCycle":395,"./ReactNativeComponent":400,"./ReactPerf":402,"./ReactPropTypeLocationNames":403,"./ReactPropTypeLocations":404,"./ReactReconciler":408,"./ReactUpdates":414,"./emptyObject":442,"./invariant":462,"./shouldUpdateReactComponent":478,"./warning":481}],365:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactContext
   */

  'use strict';

  var assign = require("./Object.assign");
  var emptyObject = require("./emptyObject");
  var warning = require("./warning");

  var didWarn = false;

  /**
   * Keeps track of the current context.
   *
   * The context is automatically passed down the component ownership hierarchy
   * and is accessible via `this.context` on ReactCompositeComponents.
   */
  var ReactContext = {

    /**
     * @internal
     * @type {object}
     */
    current: emptyObject,

    /**
     * Temporarily extends the current context while executing scopedCallback.
     *
     * A typical use case might look like
     *
     *  render: function() {
   *    var children = ReactContext.withContext({foo: 'foo'}, () => (
   *
   *    ));
   *    return <div>{children}</div>;
   *  }
     *
     * @param {object} newContext New context to merge into the existing context
     * @param {function} scopedCallback Callback to run with the new context
     * @return {ReactComponent|array<ReactComponent>}
     */
    withContext: function(newContext, scopedCallback) {
      if ("production" !== "development") {
        ("production" !== "development" ? warning(
          didWarn,
          'withContext is deprecated and will be removed in a future version. ' +
          'Use a wrapper component with getChildContext instead.'
        ) : null);

        didWarn = true;
      }

      var result;
      var previousContext = ReactContext.current;
      ReactContext.current = assign({}, previousContext, newContext);
      try {
        result = scopedCallback();
      } finally {
        ReactContext.current = previousContext;
      }
      return result;
    }

  };

  module.exports = ReactContext;

},{"./Object.assign":353,"./emptyObject":442,"./warning":481}],366:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactCurrentOwner
   */

  'use strict';

  /**
   * Keeps track of the current owner.
   *
   * The current owner is the component who should own any components that are
   * currently being constructed.
   *
   * The depth indicate how many composite components are above this render level.
   */
  var ReactCurrentOwner = {

    /**
     * @internal
     * @type {ReactComponent}
     */
    current: null

  };

  module.exports = ReactCurrentOwner;

},{}],367:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactDOM
   * @typechecks static-only
   */

  'use strict';

  var ReactElement = require("./ReactElement");
  var ReactElementValidator = require("./ReactElementValidator");

  var mapObject = require("./mapObject");

  /**
   * Create a factory that creates HTML tag elements.
   *
   * @param {string} tag Tag name (e.g. `div`).
   * @private
   */
  function createDOMFactory(tag) {
    if ("production" !== "development") {
      return ReactElementValidator.createFactory(tag);
    }
    return ReactElement.createFactory(tag);
  }

  /**
   * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
   * This is also accessible via `React.DOM`.
   *
   * @public
   */
  var ReactDOM = mapObject({
    a: 'a',
    abbr: 'abbr',
    address: 'address',
    area: 'area',
    article: 'article',
    aside: 'aside',
    audio: 'audio',
    b: 'b',
    base: 'base',
    bdi: 'bdi',
    bdo: 'bdo',
    big: 'big',
    blockquote: 'blockquote',
    body: 'body',
    br: 'br',
    button: 'button',
    canvas: 'canvas',
    caption: 'caption',
    cite: 'cite',
    code: 'code',
    col: 'col',
    colgroup: 'colgroup',
    data: 'data',
    datalist: 'datalist',
    dd: 'dd',
    del: 'del',
    details: 'details',
    dfn: 'dfn',
    dialog: 'dialog',
    div: 'div',
    dl: 'dl',
    dt: 'dt',
    em: 'em',
    embed: 'embed',
    fieldset: 'fieldset',
    figcaption: 'figcaption',
    figure: 'figure',
    footer: 'footer',
    form: 'form',
    h1: 'h1',
    h2: 'h2',
    h3: 'h3',
    h4: 'h4',
    h5: 'h5',
    h6: 'h6',
    head: 'head',
    header: 'header',
    hr: 'hr',
    html: 'html',
    i: 'i',
    iframe: 'iframe',
    img: 'img',
    input: 'input',
    ins: 'ins',
    kbd: 'kbd',
    keygen: 'keygen',
    label: 'label',
    legend: 'legend',
    li: 'li',
    link: 'link',
    main: 'main',
    map: 'map',
    mark: 'mark',
    menu: 'menu',
    menuitem: 'menuitem',
    meta: 'meta',
    meter: 'meter',
    nav: 'nav',
    noscript: 'noscript',
    object: 'object',
    ol: 'ol',
    optgroup: 'optgroup',
    option: 'option',
    output: 'output',
    p: 'p',
    param: 'param',
    picture: 'picture',
    pre: 'pre',
    progress: 'progress',
    q: 'q',
    rp: 'rp',
    rt: 'rt',
    ruby: 'ruby',
    s: 's',
    samp: 'samp',
    script: 'script',
    section: 'section',
    select: 'select',
    small: 'small',
    source: 'source',
    span: 'span',
    strong: 'strong',
    style: 'style',
    sub: 'sub',
    summary: 'summary',
    sup: 'sup',
    table: 'table',
    tbody: 'tbody',
    td: 'td',
    textarea: 'textarea',
    tfoot: 'tfoot',
    th: 'th',
    thead: 'thead',
    time: 'time',
    title: 'title',
    tr: 'tr',
    track: 'track',
    u: 'u',
    ul: 'ul',
    'var': 'var',
    video: 'video',
    wbr: 'wbr',

    // SVG
    circle: 'circle',
    clipPath: 'clipPath',
    defs: 'defs',
    ellipse: 'ellipse',
    g: 'g',
    line: 'line',
    linearGradient: 'linearGradient',
    mask: 'mask',
    path: 'path',
    pattern: 'pattern',
    polygon: 'polygon',
    polyline: 'polyline',
    radialGradient: 'radialGradient',
    rect: 'rect',
    stop: 'stop',
    svg: 'svg',
    text: 'text',
    tspan: 'tspan'

  }, createDOMFactory);

  module.exports = ReactDOM;

},{"./ReactElement":384,"./ReactElementValidator":385,"./mapObject":469}],368:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactDOMButton
   */

  'use strict';

  var AutoFocusMixin = require("./AutoFocusMixin");
  var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
  var ReactClass = require("./ReactClass");
  var ReactElement = require("./ReactElement");

  var keyMirror = require("./keyMirror");

  var button = ReactElement.createFactory('button');

  var mouseListenerNames = keyMirror({
    onClick: true,
    onDoubleClick: true,
    onMouseDown: true,
    onMouseMove: true,
    onMouseUp: true,
    onClickCapture: true,
    onDoubleClickCapture: true,
    onMouseDownCapture: true,
    onMouseMoveCapture: true,
    onMouseUpCapture: true
  });

  /**
   * Implements a <button> native component that does not receive mouse events
   * when `disabled` is set.
   */
  var ReactDOMButton = ReactClass.createClass({
    displayName: 'ReactDOMButton',
    tagName: 'BUTTON',

    mixins: [AutoFocusMixin, ReactBrowserComponentMixin],

    render: function() {
      var props = {};

      // Copy the props; except the mouse listeners if we're disabled
      for (var key in this.props) {
        if (this.props.hasOwnProperty(key) &&
          (!this.props.disabled || !mouseListenerNames[key])) {
          props[key] = this.props[key];
        }
      }

      return button(props, this.props.children);
    }

  });

  module.exports = ReactDOMButton;

},{"./AutoFocusMixin":328,"./ReactBrowserComponentMixin":356,"./ReactClass":360,"./ReactElement":384,"./keyMirror":467}],369:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactDOMComponent
   * @typechecks static-only
   */

  /* global hasOwnProperty:true */

  'use strict';

  var CSSPropertyOperations = require("./CSSPropertyOperations");
  var DOMProperty = require("./DOMProperty");
  var DOMPropertyOperations = require("./DOMPropertyOperations");
  var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");
  var ReactComponentBrowserEnvironment =
    require("./ReactComponentBrowserEnvironment");
  var ReactMount = require("./ReactMount");
  var ReactMultiChild = require("./ReactMultiChild");
  var ReactPerf = require("./ReactPerf");

  var assign = require("./Object.assign");
  var escapeTextContentForBrowser = require("./escapeTextContentForBrowser");
  var invariant = require("./invariant");
  var isEventSupported = require("./isEventSupported");
  var keyOf = require("./keyOf");
  var warning = require("./warning");

  var deleteListener = ReactBrowserEventEmitter.deleteListener;
  var listenTo = ReactBrowserEventEmitter.listenTo;
  var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;

  // For quickly matching children type, to test if can be treated as content.
  var CONTENT_TYPES = {'string': true, 'number': true};

  var STYLE = keyOf({style: null});

  var ELEMENT_NODE_TYPE = 1;

  /**
   * Optionally injectable operations for mutating the DOM
   */
  var BackendIDOperations = null;

  /**
   * @param {?object} props
   */
  function assertValidProps(props) {
    if (!props) {
      return;
    }
    // Note the use of `==` which checks for null or undefined.
    if (props.dangerouslySetInnerHTML != null) {
      ("production" !== "development" ? invariant(
        props.children == null,
        'Can only set one of `children` or `props.dangerouslySetInnerHTML`.'
      ) : invariant(props.children == null));
      ("production" !== "development" ? invariant(
        typeof props.dangerouslySetInnerHTML === 'object' &&
        '__html' in props.dangerouslySetInnerHTML,
        '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' +
        'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' +
        'for more information.'
      ) : invariant(typeof props.dangerouslySetInnerHTML === 'object' &&
        '__html' in props.dangerouslySetInnerHTML));
    }
    if ("production" !== "development") {
      ("production" !== "development" ? warning(
        props.innerHTML == null,
        'Directly setting property `innerHTML` is not permitted. ' +
        'For more information, lookup documentation on `dangerouslySetInnerHTML`.'
      ) : null);
      ("production" !== "development" ? warning(
        !props.contentEditable || props.children == null,
        'A component is `contentEditable` and contains `children` managed by ' +
        'React. It is now your responsibility to guarantee that none of ' +
        'those nodes are unexpectedly modified or duplicated. This is ' +
        'probably not intentional.'
      ) : null);
    }
    ("production" !== "development" ? invariant(
      props.style == null || typeof props.style === 'object',
      'The `style` prop expects a mapping from style properties to values, ' +
      'not a string. For example, style={{marginRight: spacing + \'em\'}} when ' +
      'using JSX.'
    ) : invariant(props.style == null || typeof props.style === 'object'));
  }

  function putListener(id, registrationName, listener, transaction) {
    if ("production" !== "development") {
      // IE8 has no API for event capturing and the `onScroll` event doesn't
      // bubble.
      ("production" !== "development" ? warning(
        registrationName !== 'onScroll' || isEventSupported('scroll', true),
        'This browser doesn\'t support the `onScroll` event'
      ) : null);
    }
    var container = ReactMount.findReactContainerForID(id);
    if (container) {
      var doc = container.nodeType === ELEMENT_NODE_TYPE ?
        container.ownerDocument :
        container;
      listenTo(registrationName, doc);
    }
    transaction.getPutListenerQueue().enqueuePutListener(
      id,
      registrationName,
      listener
    );
  }

  // For HTML, certain tags should omit their close tag. We keep a whitelist for
  // those special cased tags.

  var omittedCloseTags = {
    'area': true,
    'base': true,
    'br': true,
    'col': true,
    'embed': true,
    'hr': true,
    'img': true,
    'input': true,
    'keygen': true,
    'link': true,
    'meta': true,
    'param': true,
    'source': true,
    'track': true,
    'wbr': true
    // NOTE: menuitem's close tag should be omitted, but that causes problems.
  };

  // We accept any tag to be rendered but since this gets injected into abitrary
  // HTML, we want to make sure that it's a safe tag.
  // http://www.w3.org/TR/REC-xml/#NT-Name

  var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
  var validatedTagCache = {};
  var hasOwnProperty = {}.hasOwnProperty;

  function validateDangerousTag(tag) {
    if (!hasOwnProperty.call(validatedTagCache, tag)) {
      ("production" !== "development" ? invariant(VALID_TAG_REGEX.test(tag), 'Invalid tag: %s', tag) : invariant(VALID_TAG_REGEX.test(tag)));
      validatedTagCache[tag] = true;
    }
  }

  /**
   * Creates a new React class that is idempotent and capable of containing other
   * React components. It accepts event listeners and DOM properties that are
   * valid according to `DOMProperty`.
   *
   *  - Event listeners: `onClick`, `onMouseDown`, etc.
   *  - DOM properties: `className`, `name`, `title`, etc.
   *
   * The `style` property functions differently from the DOM API. It accepts an
   * object mapping of style properties to values.
   *
   * @constructor ReactDOMComponent
   * @extends ReactMultiChild
   */
  function ReactDOMComponent(tag) {
    validateDangerousTag(tag);
    this._tag = tag;
    this._renderedChildren = null;
    this._previousStyleCopy = null;
    this._rootNodeID = null;
  }

  ReactDOMComponent.displayName = 'ReactDOMComponent';

  ReactDOMComponent.Mixin = {

    construct: function(element) {
      this._currentElement = element;
    },

    /**
     * Generates root tag markup then recurses. This method has side effects and
     * is not idempotent.
     *
     * @internal
     * @param {string} rootID The root DOM ID for this node.
     * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
     * @return {string} The computed markup.
     */
    mountComponent: function(rootID, transaction, context) {
      this._rootNodeID = rootID;
      assertValidProps(this._currentElement.props);
      var closeTag = omittedCloseTags[this._tag] ? '' : '</' + this._tag + '>';
      return (
        this._createOpenTagMarkupAndPutListeners(transaction) +
        this._createContentMarkup(transaction, context) +
        closeTag
      );
    },

    /**
     * Creates markup for the open tag and all attributes.
     *
     * This method has side effects because events get registered.
     *
     * Iterating over object properties is faster than iterating over arrays.
     * @see http://jsperf.com/obj-vs-arr-iteration
     *
     * @private
     * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
     * @return {string} Markup of opening tag.
     */
    _createOpenTagMarkupAndPutListeners: function(transaction) {
      var props = this._currentElement.props;
      var ret = '<' + this._tag;

      for (var propKey in props) {
        if (!props.hasOwnProperty(propKey)) {
          continue;
        }
        var propValue = props[propKey];
        if (propValue == null) {
          continue;
        }
        if (registrationNameModules.hasOwnProperty(propKey)) {
          putListener(this._rootNodeID, propKey, propValue, transaction);
        } else {
          if (propKey === STYLE) {
            if (propValue) {
              propValue = this._previousStyleCopy = assign({}, props.style);
            }
            propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
          }
          var markup =
            DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
          if (markup) {
            ret += ' ' + markup;
          }
        }
      }

      // For static pages, no need to put React ID and checksum. Saves lots of
      // bytes.
      if (transaction.renderToStaticMarkup) {
        return ret + '>';
      }

      var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
      return ret + ' ' + markupForID + '>';
    },

    /**
     * Creates markup for the content between the tags.
     *
     * @private
     * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
     * @param {object} context
     * @return {string} Content markup.
     */
    _createContentMarkup: function(transaction, context) {
      var prefix = '';
      if (this._tag === 'listing' ||
        this._tag === 'pre' ||
        this._tag === 'textarea') {
        // Add an initial newline because browsers ignore the first newline in
        // a <listing>, <pre>, or <textarea> as an "authoring convenience" -- see
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody.
        prefix = '\n';
      }

      var props = this._currentElement.props;

      // Intentional use of != to avoid catching zero/false.
      var innerHTML = props.dangerouslySetInnerHTML;
      if (innerHTML != null) {
        if (innerHTML.__html != null) {
          return prefix + innerHTML.__html;
        }
      } else {
        var contentToUse =
          CONTENT_TYPES[typeof props.children] ? props.children : null;
        var childrenToUse = contentToUse != null ? null : props.children;
        if (contentToUse != null) {
          return prefix + escapeTextContentForBrowser(contentToUse);
        } else if (childrenToUse != null) {
          var mountImages = this.mountChildren(
            childrenToUse,
            transaction,
            context
          );
          return prefix + mountImages.join('');
        }
      }
      return prefix;
    },

    receiveComponent: function(nextElement, transaction, context) {
      var prevElement = this._currentElement;
      this._currentElement = nextElement;
      this.updateComponent(transaction, prevElement, nextElement, context);
    },

    /**
     * Updates a native DOM component after it has already been allocated and
     * attached to the DOM. Reconciles the root DOM node, then recurses.
     *
     * @param {ReactReconcileTransaction} transaction
     * @param {ReactElement} prevElement
     * @param {ReactElement} nextElement
     * @internal
     * @overridable
     */
    updateComponent: function(transaction, prevElement, nextElement, context) {
      assertValidProps(this._currentElement.props);
      this._updateDOMProperties(prevElement.props, transaction);
      this._updateDOMChildren(prevElement.props, transaction, context);
    },

    /**
     * Reconciles the properties by detecting differences in property values and
     * updating the DOM as necessary. This function is probably the single most
     * critical path for performance optimization.
     *
     * TODO: Benchmark whether checking for changed values in memory actually
     *       improves performance (especially statically positioned elements).
     * TODO: Benchmark the effects of putting this at the top since 99% of props
     *       do not change for a given reconciliation.
     * TODO: Benchmark areas that can be improved with caching.
     *
     * @private
     * @param {object} lastProps
     * @param {ReactReconcileTransaction} transaction
     */
    _updateDOMProperties: function(lastProps, transaction) {
      var nextProps = this._currentElement.props;
      var propKey;
      var styleName;
      var styleUpdates;
      for (propKey in lastProps) {
        if (nextProps.hasOwnProperty(propKey) ||
          !lastProps.hasOwnProperty(propKey)) {
          continue;
        }
        if (propKey === STYLE) {
          var lastStyle = this._previousStyleCopy;
          for (styleName in lastStyle) {
            if (lastStyle.hasOwnProperty(styleName)) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = '';
            }
          }
          this._previousStyleCopy = null;
        } else if (registrationNameModules.hasOwnProperty(propKey)) {
          deleteListener(this._rootNodeID, propKey);
        } else if (
          DOMProperty.isStandardName[propKey] ||
          DOMProperty.isCustomAttribute(propKey)) {
          BackendIDOperations.deletePropertyByID(
            this._rootNodeID,
            propKey
          );
        }
      }
      for (propKey in nextProps) {
        var nextProp = nextProps[propKey];
        var lastProp = propKey === STYLE ?
          this._previousStyleCopy :
          lastProps[propKey];
        if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
          continue;
        }
        if (propKey === STYLE) {
          if (nextProp) {
            nextProp = this._previousStyleCopy = assign({}, nextProp);
          } else {
            this._previousStyleCopy = null;
          }
          if (lastProp) {
            // Unset styles on `lastProp` but not on `nextProp`.
            for (styleName in lastProp) {
              if (lastProp.hasOwnProperty(styleName) &&
                (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                styleUpdates = styleUpdates || {};
                styleUpdates[styleName] = '';
              }
            }
            // Update styles that changed since `lastProp`.
            for (styleName in nextProp) {
              if (nextProp.hasOwnProperty(styleName) &&
                lastProp[styleName] !== nextProp[styleName]) {
                styleUpdates = styleUpdates || {};
                styleUpdates[styleName] = nextProp[styleName];
              }
            }
          } else {
            // Relies on `updateStylesByID` not mutating `styleUpdates`.
            styleUpdates = nextProp;
          }
        } else if (registrationNameModules.hasOwnProperty(propKey)) {
          putListener(this._rootNodeID, propKey, nextProp, transaction);
        } else if (
          DOMProperty.isStandardName[propKey] ||
          DOMProperty.isCustomAttribute(propKey)) {
          BackendIDOperations.updatePropertyByID(
            this._rootNodeID,
            propKey,
            nextProp
          );
        }
      }
      if (styleUpdates) {
        BackendIDOperations.updateStylesByID(
          this._rootNodeID,
          styleUpdates
        );
      }
    },

    /**
     * Reconciles the children with the various properties that affect the
     * children content.
     *
     * @param {object} lastProps
     * @param {ReactReconcileTransaction} transaction
     */
    _updateDOMChildren: function(lastProps, transaction, context) {
      var nextProps = this._currentElement.props;

      var lastContent =
        CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
      var nextContent =
        CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

      var lastHtml =
        lastProps.dangerouslySetInnerHTML &&
        lastProps.dangerouslySetInnerHTML.__html;
      var nextHtml =
        nextProps.dangerouslySetInnerHTML &&
        nextProps.dangerouslySetInnerHTML.__html;

      // Note the use of `!=` which checks for null or undefined.
      var lastChildren = lastContent != null ? null : lastProps.children;
      var nextChildren = nextContent != null ? null : nextProps.children;

      // If we're switching from children to content/html or vice versa, remove
      // the old content
      var lastHasContentOrHtml = lastContent != null || lastHtml != null;
      var nextHasContentOrHtml = nextContent != null || nextHtml != null;
      if (lastChildren != null && nextChildren == null) {
        this.updateChildren(null, transaction, context);
      } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
        this.updateTextContent('');
      }

      if (nextContent != null) {
        if (lastContent !== nextContent) {
          this.updateTextContent('' + nextContent);
        }
      } else if (nextHtml != null) {
        if (lastHtml !== nextHtml) {
          BackendIDOperations.updateInnerHTMLByID(
            this._rootNodeID,
            nextHtml
          );
        }
      } else if (nextChildren != null) {
        this.updateChildren(nextChildren, transaction, context);
      }
    },

    /**
     * Destroys all event registrations for this instance. Does not remove from
     * the DOM. That must be done by the parent.
     *
     * @internal
     */
    unmountComponent: function() {
      this.unmountChildren();
      ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
      ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
      this._rootNodeID = null;
    }

  };

  ReactPerf.measureMethods(ReactDOMComponent, 'ReactDOMComponent', {
    mountComponent: 'mountComponent',
    updateComponent: 'updateComponent'
  });

  assign(
    ReactDOMComponent.prototype,
    ReactDOMComponent.Mixin,
    ReactMultiChild.Mixin
  );

  ReactDOMComponent.injection = {
    injectIDOperations: function(IDOperations) {
      ReactDOMComponent.BackendIDOperations = BackendIDOperations = IDOperations;
    }
  };

  module.exports = ReactDOMComponent;

},{"./CSSPropertyOperations":331,"./DOMProperty":336,"./DOMPropertyOperations":337,"./Object.assign":353,"./ReactBrowserEventEmitter":357,"./ReactComponentBrowserEnvironment":362,"./ReactMount":397,"./ReactMultiChild":398,"./ReactPerf":402,"./escapeTextContentForBrowser":443,"./invariant":462,"./isEventSupported":463,"./keyOf":468,"./warning":481}],370:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactDOMForm
   */

  'use strict';

  var EventConstants = require("./EventConstants");
  var LocalEventTrapMixin = require("./LocalEventTrapMixin");
  var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
  var ReactClass = require("./ReactClass");
  var ReactElement = require("./ReactElement");

  var form = ReactElement.createFactory('form');

  /**
   * Since onSubmit doesn't bubble OR capture on the top level in IE8, we need
   * to capture it on the <form> element itself. There are lots of hacks we could
   * do to accomplish this, but the most reliable is to make <form> a
   * composite component and use `componentDidMount` to attach the event handlers.
   */
  var ReactDOMForm = ReactClass.createClass({
    displayName: 'ReactDOMForm',
    tagName: 'FORM',

    mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

    render: function() {
      // TODO: Instead of using `ReactDOM` directly, we should use JSX. However,
      // `jshint` fails to parse JSX so in order for linting to work in the open
      // source repo, we need to just use `ReactDOM.form`.
      return form(this.props);
    },

    componentDidMount: function() {
      this.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset');
      this.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit');
    }
  });

  module.exports = ReactDOMForm;

},{"./EventConstants":341,"./LocalEventTrapMixin":351,"./ReactBrowserComponentMixin":356,"./ReactClass":360,"./ReactElement":384}],371:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactDOMIDOperations
   * @typechecks static-only
   */

  /*jslint evil: true */

  'use strict';

  var CSSPropertyOperations = require("./CSSPropertyOperations");
  var DOMChildrenOperations = require("./DOMChildrenOperations");
  var DOMPropertyOperations = require("./DOMPropertyOperations");
  var ReactMount = require("./ReactMount");
  var ReactPerf = require("./ReactPerf");

  var invariant = require("./invariant");
  var setInnerHTML = require("./setInnerHTML");

  /**
   * Errors for properties that should not be updated with `updatePropertyById()`.
   *
   * @type {object}
   * @private
   */
  var INVALID_PROPERTY_ERRORS = {
    dangerouslySetInnerHTML:
      '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
    style: '`style` must be set using `updateStylesByID()`.'
  };

  /**
   * Operations used to process updates to DOM nodes. This is made injectable via
   * `ReactDOMComponent.BackendIDOperations`.
   */
  var ReactDOMIDOperations = {

    /**
     * Updates a DOM node with new property values. This should only be used to
     * update DOM properties in `DOMProperty`.
     *
     * @param {string} id ID of the node to update.
     * @param {string} name A valid property name, see `DOMProperty`.
     * @param {*} value New value of the property.
     * @internal
     */
    updatePropertyByID: function(id, name, value) {
      var node = ReactMount.getNode(id);
      ("production" !== "development" ? invariant(
        !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
        'updatePropertyByID(...): %s',
        INVALID_PROPERTY_ERRORS[name]
      ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));

      // If we're updating to null or undefined, we should remove the property
      // from the DOM node instead of inadvertantly setting to a string. This
      // brings us in line with the same behavior we have on initial render.
      if (value != null) {
        DOMPropertyOperations.setValueForProperty(node, name, value);
      } else {
        DOMPropertyOperations.deleteValueForProperty(node, name);
      }
    },

    /**
     * Updates a DOM node to remove a property. This should only be used to remove
     * DOM properties in `DOMProperty`.
     *
     * @param {string} id ID of the node to update.
     * @param {string} name A property name to remove, see `DOMProperty`.
     * @internal
     */
    deletePropertyByID: function(id, name, value) {
      var node = ReactMount.getNode(id);
      ("production" !== "development" ? invariant(
        !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
        'updatePropertyByID(...): %s',
        INVALID_PROPERTY_ERRORS[name]
      ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));
      DOMPropertyOperations.deleteValueForProperty(node, name, value);
    },

    /**
     * Updates a DOM node with new style values. If a value is specified as '',
     * the corresponding style property will be unset.
     *
     * @param {string} id ID of the node to update.
     * @param {object} styles Mapping from styles to values.
     * @internal
     */
    updateStylesByID: function(id, styles) {
      var node = ReactMount.getNode(id);
      CSSPropertyOperations.setValueForStyles(node, styles);
    },

    /**
     * Updates a DOM node's innerHTML.
     *
     * @param {string} id ID of the node to update.
     * @param {string} html An HTML string.
     * @internal
     */
    updateInnerHTMLByID: function(id, html) {
      var node = ReactMount.getNode(id);
      setInnerHTML(node, html);
    },

    /**
     * Updates a DOM node's text content set by `props.content`.
     *
     * @param {string} id ID of the node to update.
     * @param {string} content Text content.
     * @internal
     */
    updateTextContentByID: function(id, content) {
      var node = ReactMount.getNode(id);
      DOMChildrenOperations.updateTextContent(node, content);
    },

    /**
     * Replaces a DOM node that exists in the document with markup.
     *
     * @param {string} id ID of child to be replaced.
     * @param {string} markup Dangerous markup to inject in place of child.
     * @internal
     * @see {Danger.dangerouslyReplaceNodeWithMarkup}
     */
    dangerouslyReplaceNodeWithMarkupByID: function(id, markup) {
      var node = ReactMount.getNode(id);
      DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
    },

    /**
     * Updates a component's children by processing a series of updates.
     *
     * @param {array<object>} updates List of update configurations.
     * @param {array<string>} markup List of markup strings.
     * @internal
     */
    dangerouslyProcessChildrenUpdates: function(updates, markup) {
      for (var i = 0; i < updates.length; i++) {
        updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
      }
      DOMChildrenOperations.processUpdates(updates, markup);
    }
  };

  ReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {
    updatePropertyByID: 'updatePropertyByID',
    deletePropertyByID: 'deletePropertyByID',
    updateStylesByID: 'updateStylesByID',
    updateInnerHTMLByID: 'updateInnerHTMLByID',
    updateTextContentByID: 'updateTextContentByID',
    dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',
    dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'
  });

  module.exports = ReactDOMIDOperations;

},{"./CSSPropertyOperations":331,"./DOMChildrenOperations":335,"./DOMPropertyOperations":337,"./ReactMount":397,"./ReactPerf":402,"./invariant":462,"./setInnerHTML":475}],372:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactDOMIframe
   */

  'use strict';

  var EventConstants = require("./EventConstants");
  var LocalEventTrapMixin = require("./LocalEventTrapMixin");
  var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
  var ReactClass = require("./ReactClass");
  var ReactElement = require("./ReactElement");

  var iframe = ReactElement.createFactory('iframe');

  /**
   * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to
   * capture it on the <iframe> element itself. There are lots of hacks we could
   * do to accomplish this, but the most reliable is to make <iframe> a composite
   * component and use `componentDidMount` to attach the event handlers.
   */
  var ReactDOMIframe = ReactClass.createClass({
    displayName: 'ReactDOMIframe',
    tagName: 'IFRAME',

    mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

    render: function() {
      return iframe(this.props);
    },

    componentDidMount: function() {
      this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');
    }
  });

  module.exports = ReactDOMIframe;

},{"./EventConstants":341,"./LocalEventTrapMixin":351,"./ReactBrowserComponentMixin":356,"./ReactClass":360,"./ReactElement":384}],373:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactDOMImg
   */

  'use strict';

  var EventConstants = require("./EventConstants");
  var LocalEventTrapMixin = require("./LocalEventTrapMixin");
  var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
  var ReactClass = require("./ReactClass");
  var ReactElement = require("./ReactElement");

  var img = ReactElement.createFactory('img');

  /**
   * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to
   * capture it on the <img> element itself. There are lots of hacks we could do
   * to accomplish this, but the most reliable is to make <img> a composite
   * component and use `componentDidMount` to attach the event handlers.
   */
  var ReactDOMImg = ReactClass.createClass({
    displayName: 'ReactDOMImg',
    tagName: 'IMG',

    mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

    render: function() {
      return img(this.props);
    },

    componentDidMount: function() {
      this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');
      this.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error');
    }
  });

  module.exports = ReactDOMImg;

},{"./EventConstants":341,"./LocalEventTrapMixin":351,"./ReactBrowserComponentMixin":356,"./ReactClass":360,"./ReactElement":384}],374:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactDOMInput
   */

  'use strict';

  var AutoFocusMixin = require("./AutoFocusMixin");
  var DOMPropertyOperations = require("./DOMPropertyOperations");
  var LinkedValueUtils = require("./LinkedValueUtils");
  var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
  var ReactClass = require("./ReactClass");
  var ReactElement = require("./ReactElement");
  var ReactMount = require("./ReactMount");
  var ReactUpdates = require("./ReactUpdates");

  var assign = require("./Object.assign");
  var invariant = require("./invariant");

  var input = ReactElement.createFactory('input');

  var instancesByReactID = {};

  function forceUpdateIfMounted() {
    /*jshint validthis:true */
    if (this.isMounted()) {
      this.forceUpdate();
    }
  }

  /**
   * Implements an <input> native component that allows setting these optional
   * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
   *
   * If `checked` or `value` are not supplied (or null/undefined), user actions
   * that affect the checked state or value will trigger updates to the element.
   *
   * If they are supplied (and not null/undefined), the rendered element will not
   * trigger updates to the element. Instead, the props must change in order for
   * the rendered element to be updated.
   *
   * The rendered element will be initialized as unchecked (or `defaultChecked`)
   * with an empty value (or `defaultValue`).
   *
   * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
   */
  var ReactDOMInput = ReactClass.createClass({
    displayName: 'ReactDOMInput',
    tagName: 'INPUT',

    mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

    getInitialState: function() {
      var defaultValue = this.props.defaultValue;
      return {
        initialChecked: this.props.defaultChecked || false,
        initialValue: defaultValue != null ? defaultValue : null
      };
    },

    render: function() {
      // Clone `this.props` so we don't mutate the input.
      var props = assign({}, this.props);

      props.defaultChecked = null;
      props.defaultValue = null;

      var value = LinkedValueUtils.getValue(this);
      props.value = value != null ? value : this.state.initialValue;

      var checked = LinkedValueUtils.getChecked(this);
      props.checked = checked != null ? checked : this.state.initialChecked;

      props.onChange = this._handleChange;

      return input(props, this.props.children);
    },

    componentDidMount: function() {
      var id = ReactMount.getID(this.getDOMNode());
      instancesByReactID[id] = this;
    },

    componentWillUnmount: function() {
      var rootNode = this.getDOMNode();
      var id = ReactMount.getID(rootNode);
      delete instancesByReactID[id];
    },

    componentDidUpdate: function(prevProps, prevState, prevContext) {
      var rootNode = this.getDOMNode();
      if (this.props.checked != null) {
        DOMPropertyOperations.setValueForProperty(
          rootNode,
          'checked',
          this.props.checked || false
        );
      }

      var value = LinkedValueUtils.getValue(this);
      if (value != null) {
        // Cast `value` to a string to ensure the value is set correctly. While
        // browsers typically do this as necessary, jsdom doesn't.
        DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
      }
    },

    _handleChange: function(event) {
      var returnValue;
      var onChange = LinkedValueUtils.getOnChange(this);
      if (onChange) {
        returnValue = onChange.call(this, event);
      }
      // Here we use asap to wait until all updates have propagated, which
      // is important when using controlled components within layers:
      // https://github.com/facebook/react/issues/1698
      ReactUpdates.asap(forceUpdateIfMounted, this);

      var name = this.props.name;
      if (this.props.type === 'radio' && name != null) {
        var rootNode = this.getDOMNode();
        var queryRoot = rootNode;

        while (queryRoot.parentNode) {
          queryRoot = queryRoot.parentNode;
        }

        // If `rootNode.form` was non-null, then we could try `form.elements`,
        // but that sometimes behaves strangely in IE8. We could also try using
        // `form.getElementsByName`, but that will only return direct children
        // and won't include inputs that use the HTML5 `form=` attribute. Since
        // the input might not even be in a form, let's just use the global
        // `querySelectorAll` to ensure we don't miss anything.
        var group = queryRoot.querySelectorAll(
          'input[name=' + JSON.stringify('' + name) + '][type="radio"]');

        for (var i = 0, groupLen = group.length; i < groupLen; i++) {
          var otherNode = group[i];
          if (otherNode === rootNode ||
            otherNode.form !== rootNode.form) {
            continue;
          }
          var otherID = ReactMount.getID(otherNode);
          ("production" !== "development" ? invariant(
            otherID,
            'ReactDOMInput: Mixing React and non-React radio inputs with the ' +
            'same `name` is not supported.'
          ) : invariant(otherID));
          var otherInstance = instancesByReactID[otherID];
          ("production" !== "development" ? invariant(
            otherInstance,
            'ReactDOMInput: Unknown radio button ID %s.',
            otherID
          ) : invariant(otherInstance));
          // If this is a controlled radio button group, forcing the input that
          // was previously checked to update will cause it to be come re-checked
          // as appropriate.
          ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
        }
      }

      return returnValue;
    }

  });

  module.exports = ReactDOMInput;

},{"./AutoFocusMixin":328,"./DOMPropertyOperations":337,"./LinkedValueUtils":350,"./Object.assign":353,"./ReactBrowserComponentMixin":356,"./ReactClass":360,"./ReactElement":384,"./ReactMount":397,"./ReactUpdates":414,"./invariant":462}],375:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactDOMOption
   */

  'use strict';

  var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
  var ReactClass = require("./ReactClass");
  var ReactElement = require("./ReactElement");

  var warning = require("./warning");

  var option = ReactElement.createFactory('option');

  /**
   * Implements an <option> native component that warns when `selected` is set.
   */
  var ReactDOMOption = ReactClass.createClass({
    displayName: 'ReactDOMOption',
    tagName: 'OPTION',

    mixins: [ReactBrowserComponentMixin],

    componentWillMount: function() {
      // TODO (yungsters): Remove support for `selected` in <option>.
      if ("production" !== "development") {
        ("production" !== "development" ? warning(
          this.props.selected == null,
          'Use the `defaultValue` or `value` props on <select> instead of ' +
          'setting `selected` on <option>.'
        ) : null);
      }
    },

    render: function() {
      return option(this.props, this.props.children);
    }

  });

  module.exports = ReactDOMOption;

},{"./ReactBrowserComponentMixin":356,"./ReactClass":360,"./ReactElement":384,"./warning":481}],376:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactDOMSelect
   */

  'use strict';

  var AutoFocusMixin = require("./AutoFocusMixin");
  var LinkedValueUtils = require("./LinkedValueUtils");
  var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
  var ReactClass = require("./ReactClass");
  var ReactElement = require("./ReactElement");
  var ReactUpdates = require("./ReactUpdates");

  var assign = require("./Object.assign");

  var select = ReactElement.createFactory('select');

  function updateOptionsIfPendingUpdateAndMounted() {
    /*jshint validthis:true */
    if (this._pendingUpdate) {
      this._pendingUpdate = false;
      var value = LinkedValueUtils.getValue(this);
      if (value != null && this.isMounted()) {
        updateOptions(this, value);
      }
    }
  }

  /**
   * Validation function for `value` and `defaultValue`.
   * @private
   */
  function selectValueType(props, propName, componentName) {
    if (props[propName] == null) {
      return null;
    }
    if (props.multiple) {
      if (!Array.isArray(props[propName])) {
        return new Error(
          ("The `" + propName + "` prop supplied to <select> must be an array if ") +
          ("`multiple` is true.")
        );
      }
    } else {
      if (Array.isArray(props[propName])) {
        return new Error(
          ("The `" + propName + "` prop supplied to <select> must be a scalar ") +
          ("value if `multiple` is false.")
        );
      }
    }
  }

  /**
   * @param {ReactComponent} component Instance of ReactDOMSelect
   * @param {*} propValue A stringable (with `multiple`, a list of stringables).
   * @private
   */
  function updateOptions(component, propValue) {
    var selectedValue, i, l;
    var options = component.getDOMNode().options;

    if (component.props.multiple) {
      selectedValue = {};
      for (i = 0, l = propValue.length; i < l; i++) {
        selectedValue['' + propValue[i]] = true;
      }
      for (i = 0, l = options.length; i < l; i++) {
        var selected = selectedValue.hasOwnProperty(options[i].value);
        if (options[i].selected !== selected) {
          options[i].selected = selected;
        }
      }
    } else {
      // Do not set `select.value` as exact behavior isn't consistent across all
      // browsers for all cases.
      selectedValue = '' + propValue;
      for (i = 0, l = options.length; i < l; i++) {
        if (options[i].value === selectedValue) {
          options[i].selected = true;
          return;
        }
      }
      if (options.length) {
        options[0].selected = true;
      }
    }
  }

  /**
   * Implements a <select> native component that allows optionally setting the
   * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
   * stringable. If `multiple` is true, the prop must be an array of stringables.
   *
   * If `value` is not supplied (or null/undefined), user actions that change the
   * selected option will trigger updates to the rendered options.
   *
   * If it is supplied (and not null/undefined), the rendered options will not
   * update in response to user actions. Instead, the `value` prop must change in
   * order for the rendered options to update.
   *
   * If `defaultValue` is provided, any options with the supplied values will be
   * selected.
   */
  var ReactDOMSelect = ReactClass.createClass({
    displayName: 'ReactDOMSelect',
    tagName: 'SELECT',

    mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

    propTypes: {
      defaultValue: selectValueType,
      value: selectValueType
    },

    render: function() {
      // Clone `this.props` so we don't mutate the input.
      var props = assign({}, this.props);

      props.onChange = this._handleChange;
      props.value = null;

      return select(props, this.props.children);
    },

    componentWillMount: function() {
      this._pendingUpdate = false;
    },

    componentDidMount: function() {
      var value = LinkedValueUtils.getValue(this);
      if (value != null) {
        updateOptions(this, value);
      } else if (this.props.defaultValue != null) {
        updateOptions(this, this.props.defaultValue);
      }
    },

    componentDidUpdate: function(prevProps) {
      var value = LinkedValueUtils.getValue(this);
      if (value != null) {
        this._pendingUpdate = false;
        updateOptions(this, value);
      } else if (!prevProps.multiple !== !this.props.multiple) {
        // For simplicity, reapply `defaultValue` if `multiple` is toggled.
        if (this.props.defaultValue != null) {
          updateOptions(this, this.props.defaultValue);
        } else {
          // Revert the select back to its default unselected state.
          updateOptions(this, this.props.multiple ? [] : '');
        }
      }
    },

    _handleChange: function(event) {
      var returnValue;
      var onChange = LinkedValueUtils.getOnChange(this);
      if (onChange) {
        returnValue = onChange.call(this, event);
      }

      this._pendingUpdate = true;
      ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
      return returnValue;
    }

  });

  module.exports = ReactDOMSelect;

},{"./AutoFocusMixin":328,"./LinkedValueUtils":350,"./Object.assign":353,"./ReactBrowserComponentMixin":356,"./ReactClass":360,"./ReactElement":384,"./ReactUpdates":414}],377:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactDOMSelection
   */

  'use strict';

  var ExecutionEnvironment = require("./ExecutionEnvironment");

  var getNodeForCharacterOffset = require("./getNodeForCharacterOffset");
  var getTextContentAccessor = require("./getTextContentAccessor");

  /**
   * While `isCollapsed` is available on the Selection object and `collapsed`
   * is available on the Range object, IE11 sometimes gets them wrong.
   * If the anchor/focus nodes and offsets are the same, the range is collapsed.
   */
  function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
    return anchorNode === focusNode && anchorOffset === focusOffset;
  }

  /**
   * Get the appropriate anchor and focus node/offset pairs for IE.
   *
   * The catch here is that IE's selection API doesn't provide information
   * about whether the selection is forward or backward, so we have to
   * behave as though it's always forward.
   *
   * IE text differs from modern selection in that it behaves as though
   * block elements end with a new line. This means character offsets will
   * differ between the two APIs.
   *
   * @param {DOMElement} node
   * @return {object}
   */
  function getIEOffsets(node) {
    var selection = document.selection;
    var selectedRange = selection.createRange();
    var selectedLength = selectedRange.text.length;

    // Duplicate selection so we can move range without breaking user selection.
    var fromStart = selectedRange.duplicate();
    fromStart.moveToElementText(node);
    fromStart.setEndPoint('EndToStart', selectedRange);

    var startOffset = fromStart.text.length;
    var endOffset = startOffset + selectedLength;

    return {
      start: startOffset,
      end: endOffset
    };
  }

  /**
   * @param {DOMElement} node
   * @return {?object}
   */
  function getModernOffsets(node) {
    var selection = window.getSelection && window.getSelection();

    if (!selection || selection.rangeCount === 0) {
      return null;
    }

    var anchorNode = selection.anchorNode;
    var anchorOffset = selection.anchorOffset;
    var focusNode = selection.focusNode;
    var focusOffset = selection.focusOffset;

    var currentRange = selection.getRangeAt(0);

    // If the node and offset values are the same, the selection is collapsed.
    // `Selection.isCollapsed` is available natively, but IE sometimes gets
    // this value wrong.
    var isSelectionCollapsed = isCollapsed(
      selection.anchorNode,
      selection.anchorOffset,
      selection.focusNode,
      selection.focusOffset
    );

    var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

    var tempRange = currentRange.cloneRange();
    tempRange.selectNodeContents(node);
    tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

    var isTempRangeCollapsed = isCollapsed(
      tempRange.startContainer,
      tempRange.startOffset,
      tempRange.endContainer,
      tempRange.endOffset
    );

    var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
    var end = start + rangeLength;

    // Detect whether the selection is backward.
    var detectionRange = document.createRange();
    detectionRange.setStart(anchorNode, anchorOffset);
    detectionRange.setEnd(focusNode, focusOffset);
    var isBackward = detectionRange.collapsed;

    return {
      start: isBackward ? end : start,
      end: isBackward ? start : end
    };
  }

  /**
   * @param {DOMElement|DOMTextNode} node
   * @param {object} offsets
   */
  function setIEOffsets(node, offsets) {
    var range = document.selection.createRange().duplicate();
    var start, end;

    if (typeof offsets.end === 'undefined') {
      start = offsets.start;
      end = start;
    } else if (offsets.start > offsets.end) {
      start = offsets.end;
      end = offsets.start;
    } else {
      start = offsets.start;
      end = offsets.end;
    }

    range.moveToElementText(node);
    range.moveStart('character', start);
    range.setEndPoint('EndToStart', range);
    range.moveEnd('character', end - start);
    range.select();
  }

  /**
   * In modern non-IE browsers, we can support both forward and backward
   * selections.
   *
   * Note: IE10+ supports the Selection object, but it does not support
   * the `extend` method, which means that even in modern IE, it's not possible
   * to programatically create a backward selection. Thus, for all IE
   * versions, we use the old IE API to create our selections.
   *
   * @param {DOMElement|DOMTextNode} node
   * @param {object} offsets
   */
  function setModernOffsets(node, offsets) {
    if (!window.getSelection) {
      return;
    }

    var selection = window.getSelection();
    var length = node[getTextContentAccessor()].length;
    var start = Math.min(offsets.start, length);
    var end = typeof offsets.end === 'undefined' ?
      start : Math.min(offsets.end, length);

    // IE 11 uses modern selection, but doesn't support the extend method.
    // Flip backward selections, so we can set with a single range.
    if (!selection.extend && start > end) {
      var temp = end;
      end = start;
      start = temp;
    }

    var startMarker = getNodeForCharacterOffset(node, start);
    var endMarker = getNodeForCharacterOffset(node, end);

    if (startMarker && endMarker) {
      var range = document.createRange();
      range.setStart(startMarker.node, startMarker.offset);
      selection.removeAllRanges();

      if (start > end) {
        selection.addRange(range);
        selection.extend(endMarker.node, endMarker.offset);
      } else {
        range.setEnd(endMarker.node, endMarker.offset);
        selection.addRange(range);
      }
    }
  }

  var useIEOffsets = (
    ExecutionEnvironment.canUseDOM &&
    'selection' in document &&
    !('getSelection' in window)
  );

  var ReactDOMSelection = {
    /**
     * @param {DOMElement} node
     */
    getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

    /**
     * @param {DOMElement|DOMTextNode} node
     * @param {object} offsets
     */
    setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
  };

  module.exports = ReactDOMSelection;

},{"./ExecutionEnvironment":347,"./getNodeForCharacterOffset":455,"./getTextContentAccessor":457}],378:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactDOMTextComponent
   * @typechecks static-only
   */

  'use strict';

  var DOMPropertyOperations = require("./DOMPropertyOperations");
  var ReactComponentBrowserEnvironment =
    require("./ReactComponentBrowserEnvironment");
  var ReactDOMComponent = require("./ReactDOMComponent");

  var assign = require("./Object.assign");
  var escapeTextContentForBrowser = require("./escapeTextContentForBrowser");

  /**
   * Text nodes violate a couple assumptions that React makes about components:
   *
   *  - When mounting text into the DOM, adjacent text nodes are merged.
   *  - Text nodes cannot be assigned a React root ID.
   *
   * This component is used to wrap strings in elements so that they can undergo
   * the same reconciliation that is applied to elements.
   *
   * TODO: Investigate representing React components in the DOM with text nodes.
   *
   * @class ReactDOMTextComponent
   * @extends ReactComponent
   * @internal
   */
  var ReactDOMTextComponent = function(props) {
    // This constructor and its argument is currently used by mocks.
  };

  assign(ReactDOMTextComponent.prototype, {

    /**
     * @param {ReactText} text
     * @internal
     */
    construct: function(text) {
      // TODO: This is really a ReactText (ReactNode), not a ReactElement
      this._currentElement = text;
      this._stringText = '' + text;

      // Properties
      this._rootNodeID = null;
      this._mountIndex = 0;
    },

    /**
     * Creates the markup for this text node. This node is not intended to have
     * any features besides containing text content.
     *
     * @param {string} rootID DOM ID of the root node.
     * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
     * @return {string} Markup for this text node.
     * @internal
     */
    mountComponent: function(rootID, transaction, context) {
      this._rootNodeID = rootID;
      var escapedText = escapeTextContentForBrowser(this._stringText);

      if (transaction.renderToStaticMarkup) {
        // Normally we'd wrap this in a `span` for the reasons stated above, but
        // since this is a situation where React won't take over (static pages),
        // we can simply return the text as it is.
        return escapedText;
      }

      return (
        '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' +
        escapedText +
        '</span>'
      );
    },

    /**
     * Updates this component by updating the text content.
     *
     * @param {ReactText} nextText The next text content
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    receiveComponent: function(nextText, transaction) {
      if (nextText !== this._currentElement) {
        this._currentElement = nextText;
        var nextStringText = '' + nextText;
        if (nextStringText !== this._stringText) {
          // TODO: Save this as pending props and use performUpdateIfNecessary
          // and/or updateComponent to do the actual update for consistency with
          // other component types?
          this._stringText = nextStringText;
          ReactDOMComponent.BackendIDOperations.updateTextContentByID(
            this._rootNodeID,
            nextStringText
          );
        }
      }
    },

    unmountComponent: function() {
      ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
    }

  });

  module.exports = ReactDOMTextComponent;

},{"./DOMPropertyOperations":337,"./Object.assign":353,"./ReactComponentBrowserEnvironment":362,"./ReactDOMComponent":369,"./escapeTextContentForBrowser":443}],379:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactDOMTextarea
   */

  'use strict';

  var AutoFocusMixin = require("./AutoFocusMixin");
  var DOMPropertyOperations = require("./DOMPropertyOperations");
  var LinkedValueUtils = require("./LinkedValueUtils");
  var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
  var ReactClass = require("./ReactClass");
  var ReactElement = require("./ReactElement");
  var ReactUpdates = require("./ReactUpdates");

  var assign = require("./Object.assign");
  var invariant = require("./invariant");

  var warning = require("./warning");

  var textarea = ReactElement.createFactory('textarea');

  function forceUpdateIfMounted() {
    /*jshint validthis:true */
    if (this.isMounted()) {
      this.forceUpdate();
    }
  }

  /**
   * Implements a <textarea> native component that allows setting `value`, and
   * `defaultValue`. This differs from the traditional DOM API because value is
   * usually set as PCDATA children.
   *
   * If `value` is not supplied (or null/undefined), user actions that affect the
   * value will trigger updates to the element.
   *
   * If `value` is supplied (and not null/undefined), the rendered element will
   * not trigger updates to the element. Instead, the `value` prop must change in
   * order for the rendered element to be updated.
   *
   * The rendered element will be initialized with an empty value, the prop
   * `defaultValue` if specified, or the children content (deprecated).
   */
  var ReactDOMTextarea = ReactClass.createClass({
    displayName: 'ReactDOMTextarea',
    tagName: 'TEXTAREA',

    mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

    getInitialState: function() {
      var defaultValue = this.props.defaultValue;
      // TODO (yungsters): Remove support for children content in <textarea>.
      var children = this.props.children;
      if (children != null) {
        if ("production" !== "development") {
          ("production" !== "development" ? warning(
            false,
            'Use the `defaultValue` or `value` props instead of setting ' +
            'children on <textarea>.'
          ) : null);
        }
        ("production" !== "development" ? invariant(
          defaultValue == null,
          'If you supply `defaultValue` on a <textarea>, do not pass children.'
        ) : invariant(defaultValue == null));
        if (Array.isArray(children)) {
          ("production" !== "development" ? invariant(
            children.length <= 1,
            '<textarea> can only have at most one child.'
          ) : invariant(children.length <= 1));
          children = children[0];
        }

        defaultValue = '' + children;
      }
      if (defaultValue == null) {
        defaultValue = '';
      }
      var value = LinkedValueUtils.getValue(this);
      return {
        // We save the initial value so that `ReactDOMComponent` doesn't update
        // `textContent` (unnecessary since we update value).
        // The initial value can be a boolean or object so that's why it's
        // forced to be a string.
        initialValue: '' + (value != null ? value : defaultValue)
      };
    },

    render: function() {
      // Clone `this.props` so we don't mutate the input.
      var props = assign({}, this.props);

      ("production" !== "development" ? invariant(
        props.dangerouslySetInnerHTML == null,
        '`dangerouslySetInnerHTML` does not make sense on <textarea>.'
      ) : invariant(props.dangerouslySetInnerHTML == null));

      props.defaultValue = null;
      props.value = null;
      props.onChange = this._handleChange;

      // Always set children to the same thing. In IE9, the selection range will
      // get reset if `textContent` is mutated.
      return textarea(props, this.state.initialValue);
    },

    componentDidUpdate: function(prevProps, prevState, prevContext) {
      var value = LinkedValueUtils.getValue(this);
      if (value != null) {
        var rootNode = this.getDOMNode();
        // Cast `value` to a string to ensure the value is set correctly. While
        // browsers typically do this as necessary, jsdom doesn't.
        DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
      }
    },

    _handleChange: function(event) {
      var returnValue;
      var onChange = LinkedValueUtils.getOnChange(this);
      if (onChange) {
        returnValue = onChange.call(this, event);
      }
      ReactUpdates.asap(forceUpdateIfMounted, this);
      return returnValue;
    }

  });

  module.exports = ReactDOMTextarea;

},{"./AutoFocusMixin":328,"./DOMPropertyOperations":337,"./LinkedValueUtils":350,"./Object.assign":353,"./ReactBrowserComponentMixin":356,"./ReactClass":360,"./ReactElement":384,"./ReactUpdates":414,"./invariant":462,"./warning":481}],380:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactDefaultBatchingStrategy
   */

  'use strict';

  var ReactUpdates = require("./ReactUpdates");
  var Transaction = require("./Transaction");

  var assign = require("./Object.assign");
  var emptyFunction = require("./emptyFunction");

  var RESET_BATCHED_UPDATES = {
    initialize: emptyFunction,
    close: function() {
      ReactDefaultBatchingStrategy.isBatchingUpdates = false;
    }
  };

  var FLUSH_BATCHED_UPDATES = {
    initialize: emptyFunction,
    close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
  };

  var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

  function ReactDefaultBatchingStrategyTransaction() {
    this.reinitializeTransaction();
  }

  assign(
    ReactDefaultBatchingStrategyTransaction.prototype,
    Transaction.Mixin,
    {
      getTransactionWrappers: function() {
        return TRANSACTION_WRAPPERS;
      }
    }
  );

  var transaction = new ReactDefaultBatchingStrategyTransaction();

  var ReactDefaultBatchingStrategy = {
    isBatchingUpdates: false,

    /**
     * Call the provided function in a context within which calls to `setState`
     * and friends are batched such that components aren't updated unnecessarily.
     */
    batchedUpdates: function(callback, a, b, c, d) {
      var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

      ReactDefaultBatchingStrategy.isBatchingUpdates = true;

      // The code is written this way to avoid extra allocations
      if (alreadyBatchingUpdates) {
        callback(a, b, c, d);
      } else {
        transaction.perform(callback, null, a, b, c, d);
      }
    }
  };

  module.exports = ReactDefaultBatchingStrategy;

},{"./Object.assign":353,"./ReactUpdates":414,"./Transaction":430,"./emptyFunction":441}],381:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactDefaultInjection
   */

  'use strict';

  var BeforeInputEventPlugin = require("./BeforeInputEventPlugin");
  var ChangeEventPlugin = require("./ChangeEventPlugin");
  var ClientReactRootIndex = require("./ClientReactRootIndex");
  var DefaultEventPluginOrder = require("./DefaultEventPluginOrder");
  var EnterLeaveEventPlugin = require("./EnterLeaveEventPlugin");
  var ExecutionEnvironment = require("./ExecutionEnvironment");
  var HTMLDOMPropertyConfig = require("./HTMLDOMPropertyConfig");
  var MobileSafariClickEventPlugin = require("./MobileSafariClickEventPlugin");
  var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
  var ReactClass = require("./ReactClass");
  var ReactComponentBrowserEnvironment =
    require("./ReactComponentBrowserEnvironment");
  var ReactDefaultBatchingStrategy = require("./ReactDefaultBatchingStrategy");
  var ReactDOMComponent = require("./ReactDOMComponent");
  var ReactDOMButton = require("./ReactDOMButton");
  var ReactDOMForm = require("./ReactDOMForm");
  var ReactDOMImg = require("./ReactDOMImg");
  var ReactDOMIDOperations = require("./ReactDOMIDOperations");
  var ReactDOMIframe = require("./ReactDOMIframe");
  var ReactDOMInput = require("./ReactDOMInput");
  var ReactDOMOption = require("./ReactDOMOption");
  var ReactDOMSelect = require("./ReactDOMSelect");
  var ReactDOMTextarea = require("./ReactDOMTextarea");
  var ReactDOMTextComponent = require("./ReactDOMTextComponent");
  var ReactElement = require("./ReactElement");
  var ReactEventListener = require("./ReactEventListener");
  var ReactInjection = require("./ReactInjection");
  var ReactInstanceHandles = require("./ReactInstanceHandles");
  var ReactMount = require("./ReactMount");
  var ReactReconcileTransaction = require("./ReactReconcileTransaction");
  var SelectEventPlugin = require("./SelectEventPlugin");
  var ServerReactRootIndex = require("./ServerReactRootIndex");
  var SimpleEventPlugin = require("./SimpleEventPlugin");
  var SVGDOMPropertyConfig = require("./SVGDOMPropertyConfig");

  var createFullPageComponent = require("./createFullPageComponent");

  function autoGenerateWrapperClass(type) {
    return ReactClass.createClass({
      tagName: type.toUpperCase(),
      render: function() {
        return new ReactElement(
          type,
          null,
          null,
          null,
          null,
          this.props
        );
      }
    });
  }

  function inject() {
    ReactInjection.EventEmitter.injectReactEventListener(
      ReactEventListener
    );

    /**
     * Inject modules for resolving DOM hierarchy and plugin ordering.
     */
    ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
    ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
    ReactInjection.EventPluginHub.injectMount(ReactMount);

    /**
     * Some important event plugins included by default (without having to require
     * them).
     */
    ReactInjection.EventPluginHub.injectEventPluginsByName({
      SimpleEventPlugin: SimpleEventPlugin,
      EnterLeaveEventPlugin: EnterLeaveEventPlugin,
      ChangeEventPlugin: ChangeEventPlugin,
      MobileSafariClickEventPlugin: MobileSafariClickEventPlugin,
      SelectEventPlugin: SelectEventPlugin,
      BeforeInputEventPlugin: BeforeInputEventPlugin
    });

    ReactInjection.NativeComponent.injectGenericComponentClass(
      ReactDOMComponent
    );

    ReactInjection.NativeComponent.injectTextComponentClass(
      ReactDOMTextComponent
    );

    ReactInjection.NativeComponent.injectAutoWrapper(
      autoGenerateWrapperClass
    );

    // This needs to happen before createFullPageComponent() otherwise the mixin
    // won't be included.
    ReactInjection.Class.injectMixin(ReactBrowserComponentMixin);

    ReactInjection.NativeComponent.injectComponentClasses({
      'button': ReactDOMButton,
      'form': ReactDOMForm,
      'iframe': ReactDOMIframe,
      'img': ReactDOMImg,
      'input': ReactDOMInput,
      'option': ReactDOMOption,
      'select': ReactDOMSelect,
      'textarea': ReactDOMTextarea,

      'html': createFullPageComponent('html'),
      'head': createFullPageComponent('head'),
      'body': createFullPageComponent('body')
    });

    ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
    ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

    ReactInjection.EmptyComponent.injectEmptyComponent('noscript');

    ReactInjection.Updates.injectReconcileTransaction(
      ReactReconcileTransaction
    );
    ReactInjection.Updates.injectBatchingStrategy(
      ReactDefaultBatchingStrategy
    );

    ReactInjection.RootIndex.injectCreateReactRootIndex(
      ExecutionEnvironment.canUseDOM ?
        ClientReactRootIndex.createReactRootIndex :
        ServerReactRootIndex.createReactRootIndex
    );

    ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
    ReactInjection.DOMComponent.injectIDOperations(ReactDOMIDOperations);

    if ("production" !== "development") {
      var url = (ExecutionEnvironment.canUseDOM && window.location.href) || '';
      if ((/[?&]react_perf\b/).test(url)) {
        var ReactDefaultPerf = require("./ReactDefaultPerf");
        ReactDefaultPerf.start();
      }
    }
  }

  module.exports = {
    inject: inject
  };

},{"./BeforeInputEventPlugin":329,"./ChangeEventPlugin":333,"./ClientReactRootIndex":334,"./DefaultEventPluginOrder":339,"./EnterLeaveEventPlugin":340,"./ExecutionEnvironment":347,"./HTMLDOMPropertyConfig":349,"./MobileSafariClickEventPlugin":352,"./ReactBrowserComponentMixin":356,"./ReactClass":360,"./ReactComponentBrowserEnvironment":362,"./ReactDOMButton":368,"./ReactDOMComponent":369,"./ReactDOMForm":370,"./ReactDOMIDOperations":371,"./ReactDOMIframe":372,"./ReactDOMImg":373,"./ReactDOMInput":374,"./ReactDOMOption":375,"./ReactDOMSelect":376,"./ReactDOMTextComponent":378,"./ReactDOMTextarea":379,"./ReactDefaultBatchingStrategy":380,"./ReactDefaultPerf":382,"./ReactElement":384,"./ReactEventListener":389,"./ReactInjection":391,"./ReactInstanceHandles":393,"./ReactMount":397,"./ReactReconcileTransaction":407,"./SVGDOMPropertyConfig":415,"./SelectEventPlugin":416,"./ServerReactRootIndex":417,"./SimpleEventPlugin":418,"./createFullPageComponent":438}],382:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactDefaultPerf
   * @typechecks static-only
   */

  'use strict';

  var DOMProperty = require("./DOMProperty");
  var ReactDefaultPerfAnalysis = require("./ReactDefaultPerfAnalysis");
  var ReactMount = require("./ReactMount");
  var ReactPerf = require("./ReactPerf");

  var performanceNow = require("./performanceNow");

  function roundFloat(val) {
    return Math.floor(val * 100) / 100;
  }

  function addValue(obj, key, val) {
    obj[key] = (obj[key] || 0) + val;
  }

  var ReactDefaultPerf = {
    _allMeasurements: [], // last item in the list is the current one
    _mountStack: [0],
    _injected: false,

    start: function() {
      if (!ReactDefaultPerf._injected) {
        ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
      }

      ReactDefaultPerf._allMeasurements.length = 0;
      ReactPerf.enableMeasure = true;
    },

    stop: function() {
      ReactPerf.enableMeasure = false;
    },

    getLastMeasurements: function() {
      return ReactDefaultPerf._allMeasurements;
    },

    printExclusive: function(measurements) {
      measurements = measurements || ReactDefaultPerf._allMeasurements;
      var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
      console.table(summary.map(function(item) {
        return {
          'Component class name': item.componentName,
          'Total inclusive time (ms)': roundFloat(item.inclusive),
          'Exclusive mount time (ms)': roundFloat(item.exclusive),
          'Exclusive render time (ms)': roundFloat(item.render),
          'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
          'Render time per instance (ms)': roundFloat(item.render / item.count),
          'Instances': item.count
        };
      }));
      // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
      // number.
    },

    printInclusive: function(measurements) {
      measurements = measurements || ReactDefaultPerf._allMeasurements;
      var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
      console.table(summary.map(function(item) {
        return {
          'Owner > component': item.componentName,
          'Inclusive time (ms)': roundFloat(item.time),
          'Instances': item.count
        };
      }));
      console.log(
        'Total time:',
        ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
      );
    },

    getMeasurementsSummaryMap: function(measurements) {
      var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(
        measurements,
        true
      );
      return summary.map(function(item) {
        return {
          'Owner > component': item.componentName,
          'Wasted time (ms)': item.time,
          'Instances': item.count
        };
      });
    },

    printWasted: function(measurements) {
      measurements = measurements || ReactDefaultPerf._allMeasurements;
      console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
      console.log(
        'Total time:',
        ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
      );
    },

    printDOM: function(measurements) {
      measurements = measurements || ReactDefaultPerf._allMeasurements;
      var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
      console.table(summary.map(function(item) {
        var result = {};
        result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
        result['type'] = item.type;
        result['args'] = JSON.stringify(item.args);
        return result;
      }));
      console.log(
        'Total time:',
        ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
      );
    },

    _recordWrite: function(id, fnName, totalTime, args) {
      // TODO: totalTime isn't that useful since it doesn't count paints/reflows
      var writes =
        ReactDefaultPerf
          ._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1]
          .writes;
      writes[id] = writes[id] || [];
      writes[id].push({
        type: fnName,
        time: totalTime,
        args: args
      });
    },

    measure: function(moduleName, fnName, func) {
      return function() {for (var args=[],$__0=0,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
        var totalTime;
        var rv;
        var start;

        if (fnName === '_renderNewRootComponent' ||
          fnName === 'flushBatchedUpdates') {
          // A "measurement" is a set of metrics recorded for each flush. We want
          // to group the metrics for a given flush together so we can look at the
          // components that rendered and the DOM operations that actually
          // happened to determine the amount of "wasted work" performed.
          ReactDefaultPerf._allMeasurements.push({
            exclusive: {},
            inclusive: {},
            render: {},
            counts: {},
            writes: {},
            displayNames: {},
            totalTime: 0
          });
          start = performanceNow();
          rv = func.apply(this, args);
          ReactDefaultPerf._allMeasurements[
          ReactDefaultPerf._allMeasurements.length - 1
            ].totalTime = performanceNow() - start;
          return rv;
        } else if (fnName === '_mountImageIntoNode' ||
          moduleName === 'ReactDOMIDOperations') {
          start = performanceNow();
          rv = func.apply(this, args);
          totalTime = performanceNow() - start;

          if (fnName === '_mountImageIntoNode') {
            var mountID = ReactMount.getID(args[1]);
            ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
          } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
            // special format
            args[0].forEach(function(update) {
              var writeArgs = {};
              if (update.fromIndex !== null) {
                writeArgs.fromIndex = update.fromIndex;
              }
              if (update.toIndex !== null) {
                writeArgs.toIndex = update.toIndex;
              }
              if (update.textContent !== null) {
                writeArgs.textContent = update.textContent;
              }
              if (update.markupIndex !== null) {
                writeArgs.markup = args[1][update.markupIndex];
              }
              ReactDefaultPerf._recordWrite(
                update.parentID,
                update.type,
                totalTime,
                writeArgs
              );
            });
          } else {
            // basic format
            ReactDefaultPerf._recordWrite(
              args[0],
              fnName,
              totalTime,
              Array.prototype.slice.call(args, 1)
            );
          }
          return rv;
        } else if (moduleName === 'ReactCompositeComponent' && (
            (// TODO: receiveComponent()?
              (fnName === 'mountComponent' ||
              fnName === 'updateComponent' || fnName === '_renderValidatedComponent')))) {

          if (typeof this._currentElement.type === 'string') {
            return func.apply(this, args);
          }

          var rootNodeID = fnName === 'mountComponent' ?
            args[0] :
            this._rootNodeID;
          var isRender = fnName === '_renderValidatedComponent';
          var isMount = fnName === 'mountComponent';

          var mountStack = ReactDefaultPerf._mountStack;
          var entry = ReactDefaultPerf._allMeasurements[
          ReactDefaultPerf._allMeasurements.length - 1
            ];

          if (isRender) {
            addValue(entry.counts, rootNodeID, 1);
          } else if (isMount) {
            mountStack.push(0);
          }

          start = performanceNow();
          rv = func.apply(this, args);
          totalTime = performanceNow() - start;

          if (isRender) {
            addValue(entry.render, rootNodeID, totalTime);
          } else if (isMount) {
            var subMountTime = mountStack.pop();
            mountStack[mountStack.length - 1] += totalTime;
            addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
            addValue(entry.inclusive, rootNodeID, totalTime);
          } else {
            addValue(entry.inclusive, rootNodeID, totalTime);
          }

          entry.displayNames[rootNodeID] = {
            current: this.getName(),
            owner: this._currentElement._owner ?
              this._currentElement._owner.getName() :
              '<root>'
          };

          return rv;
        } else {
          return func.apply(this, args);
        }
      };
    }
  };

  module.exports = ReactDefaultPerf;

},{"./DOMProperty":336,"./ReactDefaultPerfAnalysis":383,"./ReactMount":397,"./ReactPerf":402,"./performanceNow":473}],383:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactDefaultPerfAnalysis
   */

  var assign = require("./Object.assign");

  // Don't try to save users less than 1.2ms (a number I made up)
  var DONT_CARE_THRESHOLD = 1.2;
  var DOM_OPERATION_TYPES = {
    '_mountImageIntoNode': 'set innerHTML',
    INSERT_MARKUP: 'set innerHTML',
    MOVE_EXISTING: 'move',
    REMOVE_NODE: 'remove',
    TEXT_CONTENT: 'set textContent',
    'updatePropertyByID': 'update attribute',
    'deletePropertyByID': 'delete attribute',
    'updateStylesByID': 'update styles',
    'updateInnerHTMLByID': 'set innerHTML',
    'dangerouslyReplaceNodeWithMarkupByID': 'replace'
  };

  function getTotalTime(measurements) {
    // TODO: return number of DOM ops? could be misleading.
    // TODO: measure dropped frames after reconcile?
    // TODO: log total time of each reconcile and the top-level component
    // class that triggered it.
    var totalTime = 0;
    for (var i = 0; i < measurements.length; i++) {
      var measurement = measurements[i];
      totalTime += measurement.totalTime;
    }
    return totalTime;
  }

  function getDOMSummary(measurements) {
    var items = [];
    for (var i = 0; i < measurements.length; i++) {
      var measurement = measurements[i];
      var id;

      for (id in measurement.writes) {
        measurement.writes[id].forEach(function(write) {
          items.push({
            id: id,
            type: DOM_OPERATION_TYPES[write.type] || write.type,
            args: write.args
          });
        });
      }
    }
    return items;
  }

  function getExclusiveSummary(measurements) {
    var candidates = {};
    var displayName;

    for (var i = 0; i < measurements.length; i++) {
      var measurement = measurements[i];
      var allIDs = assign(
        {},
        measurement.exclusive,
        measurement.inclusive
      );

      for (var id in allIDs) {
        displayName = measurement.displayNames[id].current;

        candidates[displayName] = candidates[displayName] || {
            componentName: displayName,
            inclusive: 0,
            exclusive: 0,
            render: 0,
            count: 0
          };
        if (measurement.render[id]) {
          candidates[displayName].render += measurement.render[id];
        }
        if (measurement.exclusive[id]) {
          candidates[displayName].exclusive += measurement.exclusive[id];
        }
        if (measurement.inclusive[id]) {
          candidates[displayName].inclusive += measurement.inclusive[id];
        }
        if (measurement.counts[id]) {
          candidates[displayName].count += measurement.counts[id];
        }
      }
    }

    // Now make a sorted array with the results.
    var arr = [];
    for (displayName in candidates) {
      if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
        arr.push(candidates[displayName]);
      }
    }

    arr.sort(function(a, b) {
      return b.exclusive - a.exclusive;
    });

    return arr;
  }

  function getInclusiveSummary(measurements, onlyClean) {
    var candidates = {};
    var inclusiveKey;

    for (var i = 0; i < measurements.length; i++) {
      var measurement = measurements[i];
      var allIDs = assign(
        {},
        measurement.exclusive,
        measurement.inclusive
      );
      var cleanComponents;

      if (onlyClean) {
        cleanComponents = getUnchangedComponents(measurement);
      }

      for (var id in allIDs) {
        if (onlyClean && !cleanComponents[id]) {
          continue;
        }

        var displayName = measurement.displayNames[id];

        // Inclusive time is not useful for many components without knowing where
        // they are instantiated. So we aggregate inclusive time with both the
        // owner and current displayName as the key.
        inclusiveKey = displayName.owner + ' > ' + displayName.current;

        candidates[inclusiveKey] = candidates[inclusiveKey] || {
            componentName: inclusiveKey,
            time: 0,
            count: 0
          };

        if (measurement.inclusive[id]) {
          candidates[inclusiveKey].time += measurement.inclusive[id];
        }
        if (measurement.counts[id]) {
          candidates[inclusiveKey].count += measurement.counts[id];
        }
      }
    }

    // Now make a sorted array with the results.
    var arr = [];
    for (inclusiveKey in candidates) {
      if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
        arr.push(candidates[inclusiveKey]);
      }
    }

    arr.sort(function(a, b) {
      return b.time - a.time;
    });

    return arr;
  }

  function getUnchangedComponents(measurement) {
    // For a given reconcile, look at which components did not actually
    // render anything to the DOM and return a mapping of their ID to
    // the amount of time it took to render the entire subtree.
    var cleanComponents = {};
    var dirtyLeafIDs = Object.keys(measurement.writes);
    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

    for (var id in allIDs) {
      var isDirty = false;
      // For each component that rendered, see if a component that triggered
      // a DOM op is in its subtree.
      for (var i = 0; i < dirtyLeafIDs.length; i++) {
        if (dirtyLeafIDs[i].indexOf(id) === 0) {
          isDirty = true;
          break;
        }
      }
      if (!isDirty && measurement.counts[id] > 0) {
        cleanComponents[id] = true;
      }
    }
    return cleanComponents;
  }

  var ReactDefaultPerfAnalysis = {
    getExclusiveSummary: getExclusiveSummary,
    getInclusiveSummary: getInclusiveSummary,
    getDOMSummary: getDOMSummary,
    getTotalTime: getTotalTime
  };

  module.exports = ReactDefaultPerfAnalysis;

},{"./Object.assign":353}],384:[function(require,module,exports){
  /**
   * Copyright 2014-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactElement
   */

  'use strict';

  var ReactContext = require("./ReactContext");
  var ReactCurrentOwner = require("./ReactCurrentOwner");

  var assign = require("./Object.assign");
  var warning = require("./warning");

  var RESERVED_PROPS = {
    key: true,
    ref: true
  };

  /**
   * Warn for mutations.
   *
   * @internal
   * @param {object} object
   * @param {string} key
   */
  function defineWarningProperty(object, key) {
    Object.defineProperty(object, key, {

      configurable: false,
      enumerable: true,

      get: function() {
        if (!this._store) {
          return null;
        }
        return this._store[key];
      },

      set: function(value) {
        ("production" !== "development" ? warning(
          false,
          'Don\'t set the %s property of the React element. Instead, ' +
          'specify the correct value when initially creating the element.',
          key
        ) : null);
        this._store[key] = value;
      }

    });
  }

  /**
   * This is updated to true if the membrane is successfully created.
   */
  var useMutationMembrane = false;

  /**
   * Warn for mutations.
   *
   * @internal
   * @param {object} element
   */
  function defineMutationMembrane(prototype) {
    try {
      var pseudoFrozenProperties = {
        props: true
      };
      for (var key in pseudoFrozenProperties) {
        defineWarningProperty(prototype, key);
      }
      useMutationMembrane = true;
    } catch (x) {
      // IE will fail on defineProperty
    }
  }

  /**
   * Base constructor for all React elements. This is only used to make this
   * work with a dynamic instanceof check. Nothing should live on this prototype.
   *
   * @param {*} type
   * @param {string|object} ref
   * @param {*} key
   * @param {*} props
   * @internal
   */
  var ReactElement = function(type, key, ref, owner, context, props) {
    // Built-in properties that belong on the element
    this.type = type;
    this.key = key;
    this.ref = ref;

    // Record the component responsible for creating this element.
    this._owner = owner;

    // TODO: Deprecate withContext, and then the context becomes accessible
    // through the owner.
    this._context = context;

    if ("production" !== "development") {
      // The validation flag and props are currently mutative. We put them on
      // an external backing store so that we can freeze the whole object.
      // This can be replaced with a WeakMap once they are implemented in
      // commonly used development environments.
      this._store = {props: props, originalProps: assign({}, props)};

      // To make comparing ReactElements easier for testing purposes, we make
      // the validation flag non-enumerable (where possible, which should
      // include every environment we run tests in), so the test framework
      // ignores it.
      try {
        Object.defineProperty(this._store, 'validated', {
          configurable: false,
          enumerable: false,
          writable: true
        });
      } catch (x) {
      }
      this._store.validated = false;

      // We're not allowed to set props directly on the object so we early
      // return and rely on the prototype membrane to forward to the backing
      // store.
      if (useMutationMembrane) {
        Object.freeze(this);
        return;
      }
    }

    this.props = props;
  };

  // We intentionally don't expose the function on the constructor property.
  // ReactElement should be indistinguishable from a plain object.
  ReactElement.prototype = {
    _isReactElement: true
  };

  if ("production" !== "development") {
    defineMutationMembrane(ReactElement.prototype);
  }

  ReactElement.createElement = function(type, config, children) {
    var propName;

    // Reserved names are extracted
    var props = {};

    var key = null;
    var ref = null;

    if (config != null) {
      ref = config.ref === undefined ? null : config.ref;
      key = config.key === undefined ? null : '' + config.key;
      // Remaining properties are added to a new props object
      for (propName in config) {
        if (config.hasOwnProperty(propName) &&
          !RESERVED_PROPS.hasOwnProperty(propName)) {
          props[propName] = config[propName];
        }
      }
    }

    // Children can be more than one argument, and those are transferred onto
    // the newly allocated props object.
    var childrenLength = arguments.length - 2;
    if (childrenLength === 1) {
      props.children = children;
    } else if (childrenLength > 1) {
      var childArray = Array(childrenLength);
      for (var i = 0; i < childrenLength; i++) {
        childArray[i] = arguments[i + 2];
      }
      props.children = childArray;
    }

    // Resolve default props
    if (type && type.defaultProps) {
      var defaultProps = type.defaultProps;
      for (propName in defaultProps) {
        if (typeof props[propName] === 'undefined') {
          props[propName] = defaultProps[propName];
        }
      }
    }

    return new ReactElement(
      type,
      key,
      ref,
      ReactCurrentOwner.current,
      ReactContext.current,
      props
    );
  };

  ReactElement.createFactory = function(type) {
    var factory = ReactElement.createElement.bind(null, type);
    // Expose the type on the factory and the prototype so that it can be
    // easily accessed on elements. E.g. <Foo />.type === Foo.type.
    // This should not be named `constructor` since this may not be the function
    // that created the element, and it may not even be a constructor.
    // Legacy hook TODO: Warn if this is accessed
    factory.type = type;
    return factory;
  };

  ReactElement.cloneAndReplaceProps = function(oldElement, newProps) {
    var newElement = new ReactElement(
      oldElement.type,
      oldElement.key,
      oldElement.ref,
      oldElement._owner,
      oldElement._context,
      newProps
    );

    if ("production" !== "development") {
      // If the key on the original is valid, then the clone is valid
      newElement._store.validated = oldElement._store.validated;
    }
    return newElement;
  };

  ReactElement.cloneElement = function(element, config, children) {
    var propName;

    // Original props are copied
    var props = assign({}, element.props);

    // Reserved names are extracted
    var key = element.key;
    var ref = element.ref;

    // Owner will be preserved, unless ref is overridden
    var owner = element._owner;

    if (config != null) {
      if (config.ref !== undefined) {
        // Silently steal the ref from the parent.
        ref = config.ref;
        owner = ReactCurrentOwner.current;
      }
      if (config.key !== undefined) {
        key = '' + config.key;
      }
      // Remaining properties override existing props
      for (propName in config) {
        if (config.hasOwnProperty(propName) &&
          !RESERVED_PROPS.hasOwnProperty(propName)) {
          props[propName] = config[propName];
        }
      }
    }

    // Children can be more than one argument, and those are transferred onto
    // the newly allocated props object.
    var childrenLength = arguments.length - 2;
    if (childrenLength === 1) {
      props.children = children;
    } else if (childrenLength > 1) {
      var childArray = Array(childrenLength);
      for (var i = 0; i < childrenLength; i++) {
        childArray[i] = arguments[i + 2];
      }
      props.children = childArray;
    }

    return new ReactElement(
      element.type,
      key,
      ref,
      owner,
      element._context,
      props
    );
  };

  /**
   * @param {?object} object
   * @return {boolean} True if `object` is a valid component.
   * @final
   */
  ReactElement.isValidElement = function(object) {
    // ReactTestUtils is often used outside of beforeEach where as React is
    // within it. This leads to two different instances of React on the same
    // page. To identify a element from a different React instance we use
    // a flag instead of an instanceof check.
    var isElement = !!(object && object._isReactElement);
    // if (isElement && !(object instanceof ReactElement)) {
    // This is an indicator that you're using multiple versions of React at the
    // same time. This will screw with ownership and stuff. Fix it, please.
    // TODO: We could possibly warn here.
    // }
    return isElement;
  };

  module.exports = ReactElement;

},{"./Object.assign":353,"./ReactContext":365,"./ReactCurrentOwner":366,"./warning":481}],385:[function(require,module,exports){
  /**
   * Copyright 2014-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactElementValidator
   */

  /**
   * ReactElementValidator provides a wrapper around a element factory
   * which validates the props passed to the element. This is intended to be
   * used only in DEV and could be replaced by a static type checker for languages
   * that support it.
   */

  'use strict';

  var ReactElement = require("./ReactElement");
  var ReactFragment = require("./ReactFragment");
  var ReactPropTypeLocations = require("./ReactPropTypeLocations");
  var ReactPropTypeLocationNames = require("./ReactPropTypeLocationNames");
  var ReactCurrentOwner = require("./ReactCurrentOwner");
  var ReactNativeComponent = require("./ReactNativeComponent");

  var getIteratorFn = require("./getIteratorFn");
  var invariant = require("./invariant");
  var warning = require("./warning");

  function getDeclarationErrorAddendum() {
    if (ReactCurrentOwner.current) {
      var name = ReactCurrentOwner.current.getName();
      if (name) {
        return ' Check the render method of `' + name + '`.';
      }
    }
    return '';
  }

  /**
   * Warn if there's no key explicitly set on dynamic arrays of children or
   * object keys are not valid. This allows us to keep track of children between
   * updates.
   */
  var ownerHasKeyUseWarning = {};

  var loggedTypeFailures = {};

  var NUMERIC_PROPERTY_REGEX = /^\d+$/;

  /**
   * Gets the instance's name for use in warnings.
   *
   * @internal
   * @return {?string} Display name or undefined
   */
  function getName(instance) {
    var publicInstance = instance && instance.getPublicInstance();
    if (!publicInstance) {
      return undefined;
    }
    var constructor = publicInstance.constructor;
    if (!constructor) {
      return undefined;
    }
    return constructor.displayName || constructor.name || undefined;
  }

  /**
   * Gets the current owner's displayName for use in warnings.
   *
   * @internal
   * @return {?string} Display name or undefined
   */
  function getCurrentOwnerDisplayName() {
    var current = ReactCurrentOwner.current;
    return (
      current && getName(current) || undefined
    );
  }

  /**
   * Warn if the element doesn't have an explicit key assigned to it.
   * This element is in an array. The array could grow and shrink or be
   * reordered. All children that haven't already been validated are required to
   * have a "key" property assigned to it.
   *
   * @internal
   * @param {ReactElement} element Element that requires a key.
   * @param {*} parentType element's parent's type.
   */
  function validateExplicitKey(element, parentType) {
    if (element._store.validated || element.key != null) {
      return;
    }
    element._store.validated = true;

    warnAndMonitorForKeyUse(
      'Each child in an array or iterator should have a unique "key" prop.',
      element,
      parentType
    );
  }

  /**
   * Warn if the key is being defined as an object property but has an incorrect
   * value.
   *
   * @internal
   * @param {string} name Property name of the key.
   * @param {ReactElement} element Component that requires a key.
   * @param {*} parentType element's parent's type.
   */
  function validatePropertyKey(name, element, parentType) {
    if (!NUMERIC_PROPERTY_REGEX.test(name)) {
      return;
    }
    warnAndMonitorForKeyUse(
      'Child objects should have non-numeric keys so ordering is preserved.',
      element,
      parentType
    );
  }

  /**
   * Shared warning and monitoring code for the key warnings.
   *
   * @internal
   * @param {string} message The base warning that gets output.
   * @param {ReactElement} element Component that requires a key.
   * @param {*} parentType element's parent's type.
   */
  function warnAndMonitorForKeyUse(message, element, parentType) {
    var ownerName = getCurrentOwnerDisplayName();
    var parentName = typeof parentType === 'string' ?
      parentType : parentType.displayName || parentType.name;

    var useName = ownerName || parentName;
    var memoizer = ownerHasKeyUseWarning[message] || (
        (ownerHasKeyUseWarning[message] = {})
      );
    if (memoizer.hasOwnProperty(useName)) {
      return;
    }
    memoizer[useName] = true;

    var parentOrOwnerAddendum =
      ownerName ? (" Check the render method of " + ownerName + ".") :
        parentName ? (" Check the React.render call using <" + parentName + ">.") :
          '';

    // Usually the current owner is the offender, but if it accepts children as a
    // property, it may be the creator of the child that's responsible for
    // assigning it a key.
    var childOwnerAddendum = '';
    if (element &&
      element._owner &&
      element._owner !== ReactCurrentOwner.current) {
      // Name of the component that originally created this child.
      var childOwnerName = getName(element._owner);

      childOwnerAddendum = (" It was passed a child from " + childOwnerName + ".");
    }

    ("production" !== "development" ? warning(
      false,
      message + '%s%s See https://fb.me/react-warning-keys for more information.',
      parentOrOwnerAddendum,
      childOwnerAddendum
    ) : null);
  }

  /**
   * Ensure that every element either is passed in a static location, in an
   * array with an explicit keys property defined, or in an object literal
   * with valid key property.
   *
   * @internal
   * @param {ReactNode} node Statically passed child of any type.
   * @param {*} parentType node's parent's type.
   */
  function validateChildKeys(node, parentType) {
    if (Array.isArray(node)) {
      for (var i = 0; i < node.length; i++) {
        var child = node[i];
        if (ReactElement.isValidElement(child)) {
          validateExplicitKey(child, parentType);
        }
      }
    } else if (ReactElement.isValidElement(node)) {
      // This element was passed in a valid location.
      node._store.validated = true;
    } else if (node) {
      var iteratorFn = getIteratorFn(node);
      // Entry iterators provide implicit keys.
      if (iteratorFn) {
        if (iteratorFn !== node.entries) {
          var iterator = iteratorFn.call(node);
          var step;
          while (!(step = iterator.next()).done) {
            if (ReactElement.isValidElement(step.value)) {
              validateExplicitKey(step.value, parentType);
            }
          }
        }
      } else if (typeof node === 'object') {
        var fragment = ReactFragment.extractIfFragment(node);
        for (var key in fragment) {
          if (fragment.hasOwnProperty(key)) {
            validatePropertyKey(key, fragment[key], parentType);
          }
        }
      }
    }
  }

  /**
   * Assert that the props are valid
   *
   * @param {string} componentName Name of the component for error messages.
   * @param {object} propTypes Map of prop name to a ReactPropType
   * @param {object} props
   * @param {string} location e.g. "prop", "context", "child context"
   * @private
   */
  function checkPropTypes(componentName, propTypes, props, location) {
    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          ("production" !== "development" ? invariant(
            typeof propTypes[propName] === 'function',
            '%s: %s type `%s` is invalid; it must be a function, usually from ' +
            'React.PropTypes.',
            componentName || 'React class',
            ReactPropTypeLocationNames[location],
            propName
          ) : invariant(typeof propTypes[propName] === 'function'));
          error = propTypes[propName](props, propName, componentName, location);
        } catch (ex) {
          error = ex;
        }
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;

          var addendum = getDeclarationErrorAddendum(this);
          ("production" !== "development" ? warning(false, 'Failed propType: %s%s', error.message, addendum) : null);
        }
      }
    }
  }

  var warnedPropsMutations = {};

  /**
   * Warn about mutating props when setting `propName` on `element`.
   *
   * @param {string} propName The string key within props that was set
   * @param {ReactElement} element
   */
  function warnForPropsMutation(propName, element) {
    var type = element.type;
    var elementName = typeof type === 'string' ? type : type.displayName;
    var ownerName = element._owner ?
      element._owner.getPublicInstance().constructor.displayName : null;

    var warningKey = propName + '|' + elementName + '|' + ownerName;
    if (warnedPropsMutations.hasOwnProperty(warningKey)) {
      return;
    }
    warnedPropsMutations[warningKey] = true;

    var elementInfo = '';
    if (elementName) {
      elementInfo = ' <' + elementName + ' />';
    }
    var ownerInfo = '';
    if (ownerName) {
      ownerInfo = ' The element was created by ' + ownerName + '.';
    }

    ("production" !== "development" ? warning(
      false,
      'Don\'t set .props.%s of the React component%s. Instead, specify the ' +
      'correct value when initially creating the element or use ' +
      'React.cloneElement to make a new element with updated props.%s',
      propName,
      elementInfo,
      ownerInfo
    ) : null);
  }

  // Inline Object.is polyfill
  function is(a, b) {
    if (a !== a) {
      // NaN
      return b !== b;
    }
    if (a === 0 && b === 0) {
      // +-0
      return 1 / a === 1 / b;
    }
    return a === b;
  }

  /**
   * Given an element, check if its props have been mutated since element
   * creation (or the last call to this function). In particular, check if any
   * new props have been added, which we can't directly catch by defining warning
   * properties on the props object.
   *
   * @param {ReactElement} element
   */
  function checkAndWarnForMutatedProps(element) {
    if (!element._store) {
      // Element was created using `new ReactElement` directly or with
      // `ReactElement.createElement`; skip mutation checking
      return;
    }

    var originalProps = element._store.originalProps;
    var props = element.props;

    for (var propName in props) {
      if (props.hasOwnProperty(propName)) {
        if (!originalProps.hasOwnProperty(propName) ||
          !is(originalProps[propName], props[propName])) {
          warnForPropsMutation(propName, element);

          // Copy over the new value so that the two props objects match again
          originalProps[propName] = props[propName];
        }
      }
    }
  }

  /**
   * Given an element, validate that its props follow the propTypes definition,
   * provided by the type.
   *
   * @param {ReactElement} element
   */
  function validatePropTypes(element) {
    if (element.type == null) {
      // This has already warned. Don't throw.
      return;
    }
    // Extract the component class from the element. Converts string types
    // to a composite class which may have propTypes.
    // TODO: Validating a string's propTypes is not decoupled from the
    // rendering target which is problematic.
    var componentClass = ReactNativeComponent.getComponentClassForElement(
      element
    );
    var name = componentClass.displayName || componentClass.name;
    if (componentClass.propTypes) {
      checkPropTypes(
        name,
        componentClass.propTypes,
        element.props,
        ReactPropTypeLocations.prop
      );
    }
    if (typeof componentClass.getDefaultProps === 'function') {
      ("production" !== "development" ? warning(
        componentClass.getDefaultProps.isReactClassApproved,
        'getDefaultProps is only used on classic React.createClass ' +
        'definitions. Use a static property named `defaultProps` instead.'
      ) : null);
    }
  }

  var ReactElementValidator = {

    checkAndWarnForMutatedProps: checkAndWarnForMutatedProps,

    createElement: function(type, props, children) {
      // We warn in this case but don't throw. We expect the element creation to
      // succeed and there will likely be errors in render.
      ("production" !== "development" ? warning(
        type != null,
        'React.createElement: type should not be null or undefined. It should ' +
        'be a string (for DOM elements) or a ReactClass (for composite ' +
        'components).'
      ) : null);

      var element = ReactElement.createElement.apply(this, arguments);

      // The result can be nullish if a mock or a custom function is used.
      // TODO: Drop this when these are no longer allowed as the type argument.
      if (element == null) {
        return element;
      }

      for (var i = 2; i < arguments.length; i++) {
        validateChildKeys(arguments[i], type);
      }

      validatePropTypes(element);

      return element;
    },

    createFactory: function(type) {
      var validatedFactory = ReactElementValidator.createElement.bind(
        null,
        type
      );
      // Legacy hook TODO: Warn if this is accessed
      validatedFactory.type = type;

      if ("production" !== "development") {
        try {
          Object.defineProperty(
            validatedFactory,
            'type',
            {
              enumerable: false,
              get: function() {
                ("production" !== "development" ? warning(
                  false,
                  'Factory.type is deprecated. Access the class directly ' +
                  'before passing it to createFactory.'
                ) : null);
                Object.defineProperty(this, 'type', {
                  value: type
                });
                return type;
              }
            }
          );
        } catch (x) {
          // IE will fail on defineProperty (es5-shim/sham too)
        }
      }


      return validatedFactory;
    },

    cloneElement: function(element, props, children) {
      var newElement = ReactElement.cloneElement.apply(this, arguments);
      for (var i = 2; i < arguments.length; i++) {
        validateChildKeys(arguments[i], newElement.type);
      }
      validatePropTypes(newElement);
      return newElement;
    }

  };

  module.exports = ReactElementValidator;

},{"./ReactCurrentOwner":366,"./ReactElement":384,"./ReactFragment":390,"./ReactNativeComponent":400,"./ReactPropTypeLocationNames":403,"./ReactPropTypeLocations":404,"./getIteratorFn":453,"./invariant":462,"./warning":481}],386:[function(require,module,exports){
  /**
   * Copyright 2014-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactEmptyComponent
   */

  'use strict';

  var ReactElement = require("./ReactElement");
  var ReactInstanceMap = require("./ReactInstanceMap");

  var invariant = require("./invariant");

  var component;
  // This registry keeps track of the React IDs of the components that rendered to
  // `null` (in reality a placeholder such as `noscript`)
  var nullComponentIDsRegistry = {};

  var ReactEmptyComponentInjection = {
    injectEmptyComponent: function(emptyComponent) {
      component = ReactElement.createFactory(emptyComponent);
    }
  };

  var ReactEmptyComponentType = function() {};
  ReactEmptyComponentType.prototype.componentDidMount = function() {
    var internalInstance = ReactInstanceMap.get(this);
    // TODO: Make sure we run these methods in the correct order, we shouldn't
    // need this check. We're going to assume if we're here it means we ran
    // componentWillUnmount already so there is no internal instance (it gets
    // removed as part of the unmounting process).
    if (!internalInstance) {
      return;
    }
    registerNullComponentID(internalInstance._rootNodeID);
  };
  ReactEmptyComponentType.prototype.componentWillUnmount = function() {
    var internalInstance = ReactInstanceMap.get(this);
    // TODO: Get rid of this check. See TODO in componentDidMount.
    if (!internalInstance) {
      return;
    }
    deregisterNullComponentID(internalInstance._rootNodeID);
  };
  ReactEmptyComponentType.prototype.render = function() {
    ("production" !== "development" ? invariant(
      component,
      'Trying to return null from a render, but no null placeholder component ' +
      'was injected.'
    ) : invariant(component));
    return component();
  };

  var emptyElement = ReactElement.createElement(ReactEmptyComponentType);

  /**
   * Mark the component as having rendered to null.
   * @param {string} id Component's `_rootNodeID`.
   */
  function registerNullComponentID(id) {
    nullComponentIDsRegistry[id] = true;
  }

  /**
   * Unmark the component as having rendered to null: it renders to something now.
   * @param {string} id Component's `_rootNodeID`.
   */
  function deregisterNullComponentID(id) {
    delete nullComponentIDsRegistry[id];
  }

  /**
   * @param {string} id Component's `_rootNodeID`.
   * @return {boolean} True if the component is rendered to null.
   */
  function isNullComponentID(id) {
    return !!nullComponentIDsRegistry[id];
  }

  var ReactEmptyComponent = {
    emptyElement: emptyElement,
    injection: ReactEmptyComponentInjection,
    isNullComponentID: isNullComponentID
  };

  module.exports = ReactEmptyComponent;

},{"./ReactElement":384,"./ReactInstanceMap":394,"./invariant":462}],387:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactErrorUtils
   * @typechecks
   */

  "use strict";

  var ReactErrorUtils = {
    /**
     * Creates a guarded version of a function. This is supposed to make debugging
     * of event handlers easier. To aid debugging with the browser's debugger,
     * this currently simply returns the original function.
     *
     * @param {function} func Function to be executed
     * @param {string} name The name of the guard
     * @return {function}
     */
    guard: function(func, name) {
      return func;
    }
  };

  module.exports = ReactErrorUtils;

},{}],388:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactEventEmitterMixin
   */

  'use strict';

  var EventPluginHub = require("./EventPluginHub");

  function runEventQueueInBatch(events) {
    EventPluginHub.enqueueEvents(events);
    EventPluginHub.processEventQueue();
  }

  var ReactEventEmitterMixin = {

    /**
     * Streams a fired top-level event to `EventPluginHub` where plugins have the
     * opportunity to create `ReactEvent`s to be dispatched.
     *
     * @param {string} topLevelType Record from `EventConstants`.
     * @param {object} topLevelTarget The listening component root node.
     * @param {string} topLevelTargetID ID of `topLevelTarget`.
     * @param {object} nativeEvent Native environment event.
     */
    handleTopLevel: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
      var events = EventPluginHub.extractEvents(
        topLevelType,
        topLevelTarget,
        topLevelTargetID,
        nativeEvent
      );

      runEventQueueInBatch(events);
    }
  };

  module.exports = ReactEventEmitterMixin;

},{"./EventPluginHub":343}],389:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactEventListener
   * @typechecks static-only
   */

  'use strict';

  var EventListener = require("./EventListener");
  var ExecutionEnvironment = require("./ExecutionEnvironment");
  var PooledClass = require("./PooledClass");
  var ReactInstanceHandles = require("./ReactInstanceHandles");
  var ReactMount = require("./ReactMount");
  var ReactUpdates = require("./ReactUpdates");

  var assign = require("./Object.assign");
  var getEventTarget = require("./getEventTarget");
  var getUnboundedScrollPosition = require("./getUnboundedScrollPosition");

  /**
   * Finds the parent React component of `node`.
   *
   * @param {*} node
   * @return {?DOMEventTarget} Parent container, or `null` if the specified node
   *                           is not nested.
   */
  function findParent(node) {
    // TODO: It may be a good idea to cache this to prevent unnecessary DOM
    // traversal, but caching is difficult to do correctly without using a
    // mutation observer to listen for all DOM changes.
    var nodeID = ReactMount.getID(node);
    var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
    var container = ReactMount.findReactContainerForID(rootID);
    var parent = ReactMount.getFirstReactDOM(container);
    return parent;
  }

  // Used to store ancestor hierarchy in top level callback
  function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
    this.topLevelType = topLevelType;
    this.nativeEvent = nativeEvent;
    this.ancestors = [];
  }
  assign(TopLevelCallbackBookKeeping.prototype, {
    destructor: function() {
      this.topLevelType = null;
      this.nativeEvent = null;
      this.ancestors.length = 0;
    }
  });
  PooledClass.addPoolingTo(
    TopLevelCallbackBookKeeping,
    PooledClass.twoArgumentPooler
  );

  function handleTopLevelImpl(bookKeeping) {
    var topLevelTarget = ReactMount.getFirstReactDOM(
        getEventTarget(bookKeeping.nativeEvent)
      ) || window;

    // Loop through the hierarchy, in case there's any nested components.
    // It's important that we build the array of ancestors before calling any
    // event handlers, because event handlers can modify the DOM, leading to
    // inconsistencies with ReactMount's node cache. See #1105.
    var ancestor = topLevelTarget;
    while (ancestor) {
      bookKeeping.ancestors.push(ancestor);
      ancestor = findParent(ancestor);
    }

    for (var i = 0, l = bookKeeping.ancestors.length; i < l; i++) {
      topLevelTarget = bookKeeping.ancestors[i];
      var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
      ReactEventListener._handleTopLevel(
        bookKeeping.topLevelType,
        topLevelTarget,
        topLevelTargetID,
        bookKeeping.nativeEvent
      );
    }
  }

  function scrollValueMonitor(cb) {
    var scrollPosition = getUnboundedScrollPosition(window);
    cb(scrollPosition);
  }

  var ReactEventListener = {
    _enabled: true,
    _handleTopLevel: null,

    WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

    setHandleTopLevel: function(handleTopLevel) {
      ReactEventListener._handleTopLevel = handleTopLevel;
    },

    setEnabled: function(enabled) {
      ReactEventListener._enabled = !!enabled;
    },

    isEnabled: function() {
      return ReactEventListener._enabled;
    },


    /**
     * Traps top-level events by using event bubbling.
     *
     * @param {string} topLevelType Record from `EventConstants`.
     * @param {string} handlerBaseName Event name (e.g. "click").
     * @param {object} handle Element on which to attach listener.
     * @return {object} An object with a remove function which will forcefully
     *                  remove the listener.
     * @internal
     */
    trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
      var element = handle;
      if (!element) {
        return null;
      }
      return EventListener.listen(
        element,
        handlerBaseName,
        ReactEventListener.dispatchEvent.bind(null, topLevelType)
      );
    },

    /**
     * Traps a top-level event by using event capturing.
     *
     * @param {string} topLevelType Record from `EventConstants`.
     * @param {string} handlerBaseName Event name (e.g. "click").
     * @param {object} handle Element on which to attach listener.
     * @return {object} An object with a remove function which will forcefully
     *                  remove the listener.
     * @internal
     */
    trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
      var element = handle;
      if (!element) {
        return null;
      }
      return EventListener.capture(
        element,
        handlerBaseName,
        ReactEventListener.dispatchEvent.bind(null, topLevelType)
      );
    },

    monitorScrollValue: function(refresh) {
      var callback = scrollValueMonitor.bind(null, refresh);
      EventListener.listen(window, 'scroll', callback);
    },

    dispatchEvent: function(topLevelType, nativeEvent) {
      if (!ReactEventListener._enabled) {
        return;
      }

      var bookKeeping = TopLevelCallbackBookKeeping.getPooled(
        topLevelType,
        nativeEvent
      );
      try {
        // Event queue being processed in the same cycle allows
        // `preventDefault`.
        ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
      } finally {
        TopLevelCallbackBookKeeping.release(bookKeeping);
      }
    }
  };

  module.exports = ReactEventListener;

},{"./EventListener":342,"./ExecutionEnvironment":347,"./Object.assign":353,"./PooledClass":354,"./ReactInstanceHandles":393,"./ReactMount":397,"./ReactUpdates":414,"./getEventTarget":452,"./getUnboundedScrollPosition":458}],390:[function(require,module,exports){
  /**
   * Copyright 2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactFragment
   */

  'use strict';

  var ReactElement = require("./ReactElement");

  var warning = require("./warning");

  /**
   * We used to allow keyed objects to serve as a collection of ReactElements,
   * or nested sets. This allowed us a way to explicitly key a set a fragment of
   * components. This is now being replaced with an opaque data structure.
   * The upgrade path is to call React.addons.createFragment({ key: value }) to
   * create a keyed fragment. The resulting data structure is opaque, for now.
   */

  if ("production" !== "development") {
    var fragmentKey = '_reactFragment';
    var didWarnKey = '_reactDidWarn';
    var canWarnForReactFragment = false;

    try {
      // Feature test. Don't even try to issue this warning if we can't use
      // enumerable: false.

      var dummy = function() {
        return 1;
      };

      Object.defineProperty(
        {},
        fragmentKey,
        {enumerable: false, value: true}
      );

      Object.defineProperty(
        {},
        'key',
        {enumerable: true, get: dummy}
      );

      canWarnForReactFragment = true;
    } catch (x) { }

    var proxyPropertyAccessWithWarning = function(obj, key) {
      Object.defineProperty(obj, key, {
        enumerable: true,
        get: function() {
          ("production" !== "development" ? warning(
            this[didWarnKey],
            'A ReactFragment is an opaque type. Accessing any of its ' +
            'properties is deprecated. Pass it to one of the React.Children ' +
            'helpers.'
          ) : null);
          this[didWarnKey] = true;
          return this[fragmentKey][key];
        },
        set: function(value) {
          ("production" !== "development" ? warning(
            this[didWarnKey],
            'A ReactFragment is an immutable opaque type. Mutating its ' +
            'properties is deprecated.'
          ) : null);
          this[didWarnKey] = true;
          this[fragmentKey][key] = value;
        }
      });
    };

    var issuedWarnings = {};

    var didWarnForFragment = function(fragment) {
      // We use the keys and the type of the value as a heuristic to dedupe the
      // warning to avoid spamming too much.
      var fragmentCacheKey = '';
      for (var key in fragment) {
        fragmentCacheKey += key + ':' + (typeof fragment[key]) + ',';
      }
      var alreadyWarnedOnce = !!issuedWarnings[fragmentCacheKey];
      issuedWarnings[fragmentCacheKey] = true;
      return alreadyWarnedOnce;
    };
  }

  var ReactFragment = {
    // Wrap a keyed object in an opaque proxy that warns you if you access any
    // of its properties.
    create: function(object) {
      if ("production" !== "development") {
        if (typeof object !== 'object' || !object || Array.isArray(object)) {
          ("production" !== "development" ? warning(
            false,
            'React.addons.createFragment only accepts a single object.',
            object
          ) : null);
          return object;
        }
        if (ReactElement.isValidElement(object)) {
          ("production" !== "development" ? warning(
            false,
            'React.addons.createFragment does not accept a ReactElement ' +
            'without a wrapper object.'
          ) : null);
          return object;
        }
        if (canWarnForReactFragment) {
          var proxy = {};
          Object.defineProperty(proxy, fragmentKey, {
            enumerable: false,
            value: object
          });
          Object.defineProperty(proxy, didWarnKey, {
            writable: true,
            enumerable: false,
            value: false
          });
          for (var key in object) {
            proxyPropertyAccessWithWarning(proxy, key);
          }
          Object.preventExtensions(proxy);
          return proxy;
        }
      }
      return object;
    },
    // Extract the original keyed object from the fragment opaque type. Warn if
    // a plain object is passed here.
    extract: function(fragment) {
      if ("production" !== "development") {
        if (canWarnForReactFragment) {
          if (!fragment[fragmentKey]) {
            ("production" !== "development" ? warning(
              didWarnForFragment(fragment),
              'Any use of a keyed object should be wrapped in ' +
              'React.addons.createFragment(object) before being passed as a ' +
              'child.'
            ) : null);
            return fragment;
          }
          return fragment[fragmentKey];
        }
      }
      return fragment;
    },
    // Check if this is a fragment and if so, extract the keyed object. If it
    // is a fragment-like object, warn that it should be wrapped. Ignore if we
    // can't determine what kind of object this is.
    extractIfFragment: function(fragment) {
      if ("production" !== "development") {
        if (canWarnForReactFragment) {
          // If it is the opaque type, return the keyed object.
          if (fragment[fragmentKey]) {
            return fragment[fragmentKey];
          }
          // Otherwise, check each property if it has an element, if it does
          // it is probably meant as a fragment, so we can warn early. Defer,
          // the warning to extract.
          for (var key in fragment) {
            if (fragment.hasOwnProperty(key) &&
              ReactElement.isValidElement(fragment[key])) {
              // This looks like a fragment object, we should provide an
              // early warning.
              return ReactFragment.extract(fragment);
            }
          }
        }
      }
      return fragment;
    }
  };

  module.exports = ReactFragment;

},{"./ReactElement":384,"./warning":481}],391:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactInjection
   */

  'use strict';

  var DOMProperty = require("./DOMProperty");
  var EventPluginHub = require("./EventPluginHub");
  var ReactComponentEnvironment = require("./ReactComponentEnvironment");
  var ReactClass = require("./ReactClass");
  var ReactEmptyComponent = require("./ReactEmptyComponent");
  var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");
  var ReactNativeComponent = require("./ReactNativeComponent");
  var ReactDOMComponent = require("./ReactDOMComponent");
  var ReactPerf = require("./ReactPerf");
  var ReactRootIndex = require("./ReactRootIndex");
  var ReactUpdates = require("./ReactUpdates");

  var ReactInjection = {
    Component: ReactComponentEnvironment.injection,
    Class: ReactClass.injection,
    DOMComponent: ReactDOMComponent.injection,
    DOMProperty: DOMProperty.injection,
    EmptyComponent: ReactEmptyComponent.injection,
    EventPluginHub: EventPluginHub.injection,
    EventEmitter: ReactBrowserEventEmitter.injection,
    NativeComponent: ReactNativeComponent.injection,
    Perf: ReactPerf.injection,
    RootIndex: ReactRootIndex.injection,
    Updates: ReactUpdates.injection
  };

  module.exports = ReactInjection;

},{"./DOMProperty":336,"./EventPluginHub":343,"./ReactBrowserEventEmitter":357,"./ReactClass":360,"./ReactComponentEnvironment":363,"./ReactDOMComponent":369,"./ReactEmptyComponent":386,"./ReactNativeComponent":400,"./ReactPerf":402,"./ReactRootIndex":410,"./ReactUpdates":414}],392:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactInputSelection
   */

  'use strict';

  var ReactDOMSelection = require("./ReactDOMSelection");

  var containsNode = require("./containsNode");
  var focusNode = require("./focusNode");
  var getActiveElement = require("./getActiveElement");

  function isInDocument(node) {
    return containsNode(document.documentElement, node);
  }

  /**
   * @ReactInputSelection: React input selection module. Based on Selection.js,
   * but modified to be suitable for react and has a couple of bug fixes (doesn't
   * assume buttons have range selections allowed).
   * Input selection module for React.
   */
  var ReactInputSelection = {

    hasSelectionCapabilities: function(elem) {
      return elem && (
          ((elem.nodeName === 'INPUT' && elem.type === 'text') ||
          elem.nodeName === 'TEXTAREA' || elem.contentEditable === 'true')
        );
    },

    getSelectionInformation: function() {
      var focusedElem = getActiveElement();
      return {
        focusedElem: focusedElem,
        selectionRange:
          ReactInputSelection.hasSelectionCapabilities(focusedElem) ?
            ReactInputSelection.getSelection(focusedElem) :
            null
      };
    },

    /**
     * @restoreSelection: If any selection information was potentially lost,
     * restore it. This is useful when performing operations that could remove dom
     * nodes and place them back in, resulting in focus being lost.
     */
    restoreSelection: function(priorSelectionInformation) {
      var curFocusedElem = getActiveElement();
      var priorFocusedElem = priorSelectionInformation.focusedElem;
      var priorSelectionRange = priorSelectionInformation.selectionRange;
      if (curFocusedElem !== priorFocusedElem &&
        isInDocument(priorFocusedElem)) {
        if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
          ReactInputSelection.setSelection(
            priorFocusedElem,
            priorSelectionRange
          );
        }
        focusNode(priorFocusedElem);
      }
    },

    /**
     * @getSelection: Gets the selection bounds of a focused textarea, input or
     * contentEditable node.
     * -@input: Look up selection bounds of this input
     * -@return {start: selectionStart, end: selectionEnd}
     */
    getSelection: function(input) {
      var selection;

      if ('selectionStart' in input) {
        // Modern browser with input or textarea.
        selection = {
          start: input.selectionStart,
          end: input.selectionEnd
        };
      } else if (document.selection && input.nodeName === 'INPUT') {
        // IE8 input.
        var range = document.selection.createRange();
        // There can only be one selection per document in IE, so it must
        // be in our element.
        if (range.parentElement() === input) {
          selection = {
            start: -range.moveStart('character', -input.value.length),
            end: -range.moveEnd('character', -input.value.length)
          };
        }
      } else {
        // Content editable or old IE textarea.
        selection = ReactDOMSelection.getOffsets(input);
      }

      return selection || {start: 0, end: 0};
    },

    /**
     * @setSelection: Sets the selection bounds of a textarea or input and focuses
     * the input.
     * -@input     Set selection bounds of this input or textarea
     * -@offsets   Object of same form that is returned from get*
     */
    setSelection: function(input, offsets) {
      var start = offsets.start;
      var end = offsets.end;
      if (typeof end === 'undefined') {
        end = start;
      }

      if ('selectionStart' in input) {
        input.selectionStart = start;
        input.selectionEnd = Math.min(end, input.value.length);
      } else if (document.selection && input.nodeName === 'INPUT') {
        var range = input.createTextRange();
        range.collapse(true);
        range.moveStart('character', start);
        range.moveEnd('character', end - start);
        range.select();
      } else {
        ReactDOMSelection.setOffsets(input, offsets);
      }
    }
  };

  module.exports = ReactInputSelection;

},{"./ReactDOMSelection":377,"./containsNode":436,"./focusNode":446,"./getActiveElement":448}],393:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactInstanceHandles
   * @typechecks static-only
   */

  'use strict';

  var ReactRootIndex = require("./ReactRootIndex");

  var invariant = require("./invariant");

  var SEPARATOR = '.';
  var SEPARATOR_LENGTH = SEPARATOR.length;

  /**
   * Maximum depth of traversals before we consider the possibility of a bad ID.
   */
  var MAX_TREE_DEPTH = 100;

  /**
   * Creates a DOM ID prefix to use when mounting React components.
   *
   * @param {number} index A unique integer
   * @return {string} React root ID.
   * @internal
   */
  function getReactRootIDString(index) {
    return SEPARATOR + index.toString(36);
  }

  /**
   * Checks if a character in the supplied ID is a separator or the end.
   *
   * @param {string} id A React DOM ID.
   * @param {number} index Index of the character to check.
   * @return {boolean} True if the character is a separator or end of the ID.
   * @private
   */
  function isBoundary(id, index) {
    return id.charAt(index) === SEPARATOR || index === id.length;
  }

  /**
   * Checks if the supplied string is a valid React DOM ID.
   *
   * @param {string} id A React DOM ID, maybe.
   * @return {boolean} True if the string is a valid React DOM ID.
   * @private
   */
  function isValidID(id) {
    return id === '' || (
        id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR
      );
  }

  /**
   * Checks if the first ID is an ancestor of or equal to the second ID.
   *
   * @param {string} ancestorID
   * @param {string} descendantID
   * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
   * @internal
   */
  function isAncestorIDOf(ancestorID, descendantID) {
    return (
      descendantID.indexOf(ancestorID) === 0 &&
      isBoundary(descendantID, ancestorID.length)
    );
  }

  /**
   * Gets the parent ID of the supplied React DOM ID, `id`.
   *
   * @param {string} id ID of a component.
   * @return {string} ID of the parent, or an empty string.
   * @private
   */
  function getParentID(id) {
    return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
  }

  /**
   * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
   * supplied `destinationID`. If they are equal, the ID is returned.
   *
   * @param {string} ancestorID ID of an ancestor node of `destinationID`.
   * @param {string} destinationID ID of the destination node.
   * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
   * @private
   */
  function getNextDescendantID(ancestorID, destinationID) {
    ("production" !== "development" ? invariant(
      isValidID(ancestorID) && isValidID(destinationID),
      'getNextDescendantID(%s, %s): Received an invalid React DOM ID.',
      ancestorID,
      destinationID
    ) : invariant(isValidID(ancestorID) && isValidID(destinationID)));
    ("production" !== "development" ? invariant(
      isAncestorIDOf(ancestorID, destinationID),
      'getNextDescendantID(...): React has made an invalid assumption about ' +
      'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.',
      ancestorID,
      destinationID
    ) : invariant(isAncestorIDOf(ancestorID, destinationID)));
    if (ancestorID === destinationID) {
      return ancestorID;
    }
    // Skip over the ancestor and the immediate separator. Traverse until we hit
    // another separator or we reach the end of `destinationID`.
    var start = ancestorID.length + SEPARATOR_LENGTH;
    var i;
    for (i = start; i < destinationID.length; i++) {
      if (isBoundary(destinationID, i)) {
        break;
      }
    }
    return destinationID.substr(0, i);
  }

  /**
   * Gets the nearest common ancestor ID of two IDs.
   *
   * Using this ID scheme, the nearest common ancestor ID is the longest common
   * prefix of the two IDs that immediately preceded a "marker" in both strings.
   *
   * @param {string} oneID
   * @param {string} twoID
   * @return {string} Nearest common ancestor ID, or the empty string if none.
   * @private
   */
  function getFirstCommonAncestorID(oneID, twoID) {
    var minLength = Math.min(oneID.length, twoID.length);
    if (minLength === 0) {
      return '';
    }
    var lastCommonMarkerIndex = 0;
    // Use `<=` to traverse until the "EOL" of the shorter string.
    for (var i = 0; i <= minLength; i++) {
      if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
        lastCommonMarkerIndex = i;
      } else if (oneID.charAt(i) !== twoID.charAt(i)) {
        break;
      }
    }
    var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
    ("production" !== "development" ? invariant(
      isValidID(longestCommonID),
      'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s',
      oneID,
      twoID,
      longestCommonID
    ) : invariant(isValidID(longestCommonID)));
    return longestCommonID;
  }

  /**
   * Traverses the parent path between two IDs (either up or down). The IDs must
   * not be the same, and there must exist a parent path between them. If the
   * callback returns `false`, traversal is stopped.
   *
   * @param {?string} start ID at which to start traversal.
   * @param {?string} stop ID at which to end traversal.
   * @param {function} cb Callback to invoke each ID with.
   * @param {?boolean} skipFirst Whether or not to skip the first node.
   * @param {?boolean} skipLast Whether or not to skip the last node.
   * @private
   */
  function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
    start = start || '';
    stop = stop || '';
    ("production" !== "development" ? invariant(
      start !== stop,
      'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.',
      start
    ) : invariant(start !== stop));
    var traverseUp = isAncestorIDOf(stop, start);
    ("production" !== "development" ? invariant(
      traverseUp || isAncestorIDOf(start, stop),
      'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' +
      'not have a parent path.',
      start,
      stop
    ) : invariant(traverseUp || isAncestorIDOf(start, stop)));
    // Traverse from `start` to `stop` one depth at a time.
    var depth = 0;
    var traverse = traverseUp ? getParentID : getNextDescendantID;
    for (var id = start; /* until break */; id = traverse(id, stop)) {
      var ret;
      if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
        ret = cb(id, traverseUp, arg);
      }
      if (ret === false || id === stop) {
        // Only break //after// visiting `stop`.
        break;
      }
      ("production" !== "development" ? invariant(
        depth++ < MAX_TREE_DEPTH,
        'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' +
        'traversing the React DOM ID tree. This may be due to malformed IDs: %s',
        start, stop
      ) : invariant(depth++ < MAX_TREE_DEPTH));
    }
  }

  /**
   * Manages the IDs assigned to DOM representations of React components. This
   * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
   * order to simulate events).
   *
   * @internal
   */
  var ReactInstanceHandles = {

    /**
     * Constructs a React root ID
     * @return {string} A React root ID.
     */
    createReactRootID: function() {
      return getReactRootIDString(ReactRootIndex.createReactRootIndex());
    },

    /**
     * Constructs a React ID by joining a root ID with a name.
     *
     * @param {string} rootID Root ID of a parent component.
     * @param {string} name A component's name (as flattened children).
     * @return {string} A React ID.
     * @internal
     */
    createReactID: function(rootID, name) {
      return rootID + name;
    },

    /**
     * Gets the DOM ID of the React component that is the root of the tree that
     * contains the React component with the supplied DOM ID.
     *
     * @param {string} id DOM ID of a React component.
     * @return {?string} DOM ID of the React component that is the root.
     * @internal
     */
    getReactRootIDFromNodeID: function(id) {
      if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
        var index = id.indexOf(SEPARATOR, 1);
        return index > -1 ? id.substr(0, index) : id;
      }
      return null;
    },

    /**
     * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
     * should would receive a `mouseEnter` or `mouseLeave` event.
     *
     * NOTE: Does not invoke the callback on the nearest common ancestor because
     * nothing "entered" or "left" that element.
     *
     * @param {string} leaveID ID being left.
     * @param {string} enterID ID being entered.
     * @param {function} cb Callback to invoke on each entered/left ID.
     * @param {*} upArg Argument to invoke the callback with on left IDs.
     * @param {*} downArg Argument to invoke the callback with on entered IDs.
     * @internal
     */
    traverseEnterLeave: function(leaveID, enterID, cb, upArg, downArg) {
      var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
      if (ancestorID !== leaveID) {
        traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
      }
      if (ancestorID !== enterID) {
        traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
      }
    },

    /**
     * Simulates the traversal of a two-phase, capture/bubble event dispatch.
     *
     * NOTE: This traversal happens on IDs without touching the DOM.
     *
     * @param {string} targetID ID of the target node.
     * @param {function} cb Callback to invoke.
     * @param {*} arg Argument to invoke the callback with.
     * @internal
     */
    traverseTwoPhase: function(targetID, cb, arg) {
      if (targetID) {
        traverseParentPath('', targetID, cb, arg, true, false);
        traverseParentPath(targetID, '', cb, arg, false, true);
      }
    },

    /**
     * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
     * example, passing `.0.$row-0.1` would result in `cb` getting called
     * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
     *
     * NOTE: This traversal happens on IDs without touching the DOM.
     *
     * @param {string} targetID ID of the target node.
     * @param {function} cb Callback to invoke.
     * @param {*} arg Argument to invoke the callback with.
     * @internal
     */
    traverseAncestors: function(targetID, cb, arg) {
      traverseParentPath('', targetID, cb, arg, true, false);
    },

    /**
     * Exposed for unit testing.
     * @private
     */
    _getFirstCommonAncestorID: getFirstCommonAncestorID,

    /**
     * Exposed for unit testing.
     * @private
     */
    _getNextDescendantID: getNextDescendantID,

    isAncestorIDOf: isAncestorIDOf,

    SEPARATOR: SEPARATOR

  };

  module.exports = ReactInstanceHandles;

},{"./ReactRootIndex":410,"./invariant":462}],394:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactInstanceMap
   */

  'use strict';

  /**
   * `ReactInstanceMap` maintains a mapping from a public facing stateful
   * instance (key) and the internal representation (value). This allows public
   * methods to accept the user facing instance as an argument and map them back
   * to internal methods.
   */

  // TODO: Replace this with ES6: var ReactInstanceMap = new Map();
  var ReactInstanceMap = {

    /**
     * This API should be called `delete` but we'd have to make sure to always
     * transform these to strings for IE support. When this transform is fully
     * supported we can rename it.
     */
    remove: function(key) {
      key._reactInternalInstance = undefined;
    },

    get: function(key) {
      return key._reactInternalInstance;
    },

    has: function(key) {
      return key._reactInternalInstance !== undefined;
    },

    set: function(key, value) {
      key._reactInternalInstance = value;
    }

  };

  module.exports = ReactInstanceMap;

},{}],395:[function(require,module,exports){
  /**
   * Copyright 2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactLifeCycle
   */

  'use strict';

  /**
   * This module manages the bookkeeping when a component is in the process
   * of being mounted or being unmounted. This is used as a way to enforce
   * invariants (or warnings) when it is not recommended to call
   * setState/forceUpdate.
   *
   * currentlyMountingInstance: During the construction phase, it is not possible
   * to trigger an update since the instance is not fully mounted yet. However, we
   * currently allow this as a convenience for mutating the initial state.
   *
   * currentlyUnmountingInstance: During the unmounting phase, the instance is
   * still mounted and can therefore schedule an update. However, this is not
   * recommended and probably an error since it's about to be unmounted.
   * Therefore we still want to trigger in an error for that case.
   */

  var ReactLifeCycle = {
    currentlyMountingInstance: null,
    currentlyUnmountingInstance: null
  };

  module.exports = ReactLifeCycle;

},{}],396:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactMarkupChecksum
   */

  'use strict';

  var adler32 = require("./adler32");

  var ReactMarkupChecksum = {
    CHECKSUM_ATTR_NAME: 'data-react-checksum',

    /**
     * @param {string} markup Markup string
     * @return {string} Markup string with checksum attribute attached
     */
    addChecksumToMarkup: function(markup) {
      var checksum = adler32(markup);
      return markup.replace(
        '>',
        ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '">'
      );
    },

    /**
     * @param {string} markup to use
     * @param {DOMElement} element root React element
     * @returns {boolean} whether or not the markup is the same
     */
    canReuseMarkup: function(markup, element) {
      var existingChecksum = element.getAttribute(
        ReactMarkupChecksum.CHECKSUM_ATTR_NAME
      );
      existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
      var markupChecksum = adler32(markup);
      return markupChecksum === existingChecksum;
    }
  };

  module.exports = ReactMarkupChecksum;

},{"./adler32":433}],397:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactMount
   */

  'use strict';

  var DOMProperty = require("./DOMProperty");
  var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");
  var ReactCurrentOwner = require("./ReactCurrentOwner");
  var ReactElement = require("./ReactElement");
  var ReactElementValidator = require("./ReactElementValidator");
  var ReactEmptyComponent = require("./ReactEmptyComponent");
  var ReactInstanceHandles = require("./ReactInstanceHandles");
  var ReactInstanceMap = require("./ReactInstanceMap");
  var ReactMarkupChecksum = require("./ReactMarkupChecksum");
  var ReactPerf = require("./ReactPerf");
  var ReactReconciler = require("./ReactReconciler");
  var ReactUpdateQueue = require("./ReactUpdateQueue");
  var ReactUpdates = require("./ReactUpdates");

  var emptyObject = require("./emptyObject");
  var containsNode = require("./containsNode");
  var getReactRootElementInContainer = require("./getReactRootElementInContainer");
  var instantiateReactComponent = require("./instantiateReactComponent");
  var invariant = require("./invariant");
  var setInnerHTML = require("./setInnerHTML");
  var shouldUpdateReactComponent = require("./shouldUpdateReactComponent");
  var warning = require("./warning");

  var SEPARATOR = ReactInstanceHandles.SEPARATOR;

  var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
  var nodeCache = {};

  var ELEMENT_NODE_TYPE = 1;
  var DOC_NODE_TYPE = 9;

  /** Mapping from reactRootID to React component instance. */
  var instancesByReactRootID = {};

  /** Mapping from reactRootID to `container` nodes. */
  var containersByReactRootID = {};

  if ("production" !== "development") {
    /** __DEV__-only mapping from reactRootID to root elements. */
    var rootElementsByReactRootID = {};
  }

  // Used to store breadth-first search state in findComponentRoot.
  var findComponentRootReusableArray = [];

  /**
   * Finds the index of the first character
   * that's not common between the two given strings.
   *
   * @return {number} the index of the character where the strings diverge
   */
  function firstDifferenceIndex(string1, string2) {
    var minLen = Math.min(string1.length, string2.length);
    for (var i = 0; i < minLen; i++) {
      if (string1.charAt(i) !== string2.charAt(i)) {
        return i;
      }
    }
    return string1.length === string2.length ? -1 : minLen;
  }

  /**
   * @param {DOMElement} container DOM element that may contain a React component.
   * @return {?string} A "reactRoot" ID, if a React component is rendered.
   */
  function getReactRootID(container) {
    var rootElement = getReactRootElementInContainer(container);
    return rootElement && ReactMount.getID(rootElement);
  }

  /**
   * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
   * element can return its control whose name or ID equals ATTR_NAME. All
   * DOM nodes support `getAttributeNode` but this can also get called on
   * other objects so just return '' if we're given something other than a
   * DOM node (such as window).
   *
   * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
   * @return {string} ID of the supplied `domNode`.
   */
  function getID(node) {
    var id = internalGetID(node);
    if (id) {
      if (nodeCache.hasOwnProperty(id)) {
        var cached = nodeCache[id];
        if (cached !== node) {
          ("production" !== "development" ? invariant(
            !isValid(cached, id),
            'ReactMount: Two valid but unequal nodes with the same `%s`: %s',
            ATTR_NAME, id
          ) : invariant(!isValid(cached, id)));

          nodeCache[id] = node;
        }
      } else {
        nodeCache[id] = node;
      }
    }

    return id;
  }

  function internalGetID(node) {
    // If node is something like a window, document, or text node, none of
    // which support attributes or a .getAttribute method, gracefully return
    // the empty string, as if the attribute were missing.
    return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
  }

  /**
   * Sets the React-specific ID of the given node.
   *
   * @param {DOMElement} node The DOM node whose ID will be set.
   * @param {string} id The value of the ID attribute.
   */
  function setID(node, id) {
    var oldID = internalGetID(node);
    if (oldID !== id) {
      delete nodeCache[oldID];
    }
    node.setAttribute(ATTR_NAME, id);
    nodeCache[id] = node;
  }

  /**
   * Finds the node with the supplied React-generated DOM ID.
   *
   * @param {string} id A React-generated DOM ID.
   * @return {DOMElement} DOM node with the suppled `id`.
   * @internal
   */
  function getNode(id) {
    if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
      nodeCache[id] = ReactMount.findReactNodeByID(id);
    }
    return nodeCache[id];
  }

  /**
   * Finds the node with the supplied public React instance.
   *
   * @param {*} instance A public React instance.
   * @return {?DOMElement} DOM node with the suppled `id`.
   * @internal
   */
  function getNodeFromInstance(instance) {
    var id = ReactInstanceMap.get(instance)._rootNodeID;
    if (ReactEmptyComponent.isNullComponentID(id)) {
      return null;
    }
    if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
      nodeCache[id] = ReactMount.findReactNodeByID(id);
    }
    return nodeCache[id];
  }

  /**
   * A node is "valid" if it is contained by a currently mounted container.
   *
   * This means that the node does not have to be contained by a document in
   * order to be considered valid.
   *
   * @param {?DOMElement} node The candidate DOM node.
   * @param {string} id The expected ID of the node.
   * @return {boolean} Whether the node is contained by a mounted container.
   */
  function isValid(node, id) {
    if (node) {
      ("production" !== "development" ? invariant(
        internalGetID(node) === id,
        'ReactMount: Unexpected modification of `%s`',
        ATTR_NAME
      ) : invariant(internalGetID(node) === id));

      var container = ReactMount.findReactContainerForID(id);
      if (container && containsNode(container, node)) {
        return true;
      }
    }

    return false;
  }

  /**
   * Causes the cache to forget about one React-specific ID.
   *
   * @param {string} id The ID to forget.
   */
  function purgeID(id) {
    delete nodeCache[id];
  }

  var deepestNodeSoFar = null;
  function findDeepestCachedAncestorImpl(ancestorID) {
    var ancestor = nodeCache[ancestorID];
    if (ancestor && isValid(ancestor, ancestorID)) {
      deepestNodeSoFar = ancestor;
    } else {
      // This node isn't populated in the cache, so presumably none of its
      // descendants are. Break out of the loop.
      return false;
    }
  }

  /**
   * Return the deepest cached node whose ID is a prefix of `targetID`.
   */
  function findDeepestCachedAncestor(targetID) {
    deepestNodeSoFar = null;
    ReactInstanceHandles.traverseAncestors(
      targetID,
      findDeepestCachedAncestorImpl
    );

    var foundNode = deepestNodeSoFar;
    deepestNodeSoFar = null;
    return foundNode;
  }

  /**
   * Mounts this component and inserts it into the DOM.
   *
   * @param {ReactComponent} componentInstance The instance to mount.
   * @param {string} rootID DOM ID of the root node.
   * @param {DOMElement} container DOM element to mount into.
   * @param {ReactReconcileTransaction} transaction
   * @param {boolean} shouldReuseMarkup If true, do not insert markup
   */
  function mountComponentIntoNode(
    componentInstance,
    rootID,
    container,
    transaction,
    shouldReuseMarkup) {
    var markup = ReactReconciler.mountComponent(
      componentInstance, rootID, transaction, emptyObject
    );
    componentInstance._isTopLevel = true;
    ReactMount._mountImageIntoNode(markup, container, shouldReuseMarkup);
  }

  /**
   * Batched mount.
   *
   * @param {ReactComponent} componentInstance The instance to mount.
   * @param {string} rootID DOM ID of the root node.
   * @param {DOMElement} container DOM element to mount into.
   * @param {boolean} shouldReuseMarkup If true, do not insert markup
   */
  function batchedMountComponentIntoNode(
    componentInstance,
    rootID,
    container,
    shouldReuseMarkup) {
    var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();
    transaction.perform(
      mountComponentIntoNode,
      null,
      componentInstance,
      rootID,
      container,
      transaction,
      shouldReuseMarkup
    );
    ReactUpdates.ReactReconcileTransaction.release(transaction);
  }

  /**
   * Mounting is the process of initializing a React component by creating its
   * representative DOM elements and inserting them into a supplied `container`.
   * Any prior content inside `container` is destroyed in the process.
   *
   *   ReactMount.render(
   *     component,
   *     document.getElementById('container')
   *   );
   *
   *   <div id="container">                   <-- Supplied `container`.
   *     <div data-reactid=".3">              <-- Rendered reactRoot of React
   *       // ...                                 component.
   *     </div>
   *   </div>
   *
   * Inside of `container`, the first element rendered is the "reactRoot".
   */
  var ReactMount = {
    /** Exposed for debugging purposes **/
    _instancesByReactRootID: instancesByReactRootID,

    /**
     * This is a hook provided to support rendering React components while
     * ensuring that the apparent scroll position of its `container` does not
     * change.
     *
     * @param {DOMElement} container The `container` being rendered into.
     * @param {function} renderCallback This must be called once to do the render.
     */
    scrollMonitor: function(container, renderCallback) {
      renderCallback();
    },

    /**
     * Take a component that's already mounted into the DOM and replace its props
     * @param {ReactComponent} prevComponent component instance already in the DOM
     * @param {ReactElement} nextElement component instance to render
     * @param {DOMElement} container container to render into
     * @param {?function} callback function triggered on completion
     */
    _updateRootComponent: function(
      prevComponent,
      nextElement,
      container,
      callback) {
      if ("production" !== "development") {
        ReactElementValidator.checkAndWarnForMutatedProps(nextElement);
      }

      ReactMount.scrollMonitor(container, function() {
        ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);
        if (callback) {
          ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
        }
      });

      if ("production" !== "development") {
        // Record the root element in case it later gets transplanted.
        rootElementsByReactRootID[getReactRootID(container)] =
          getReactRootElementInContainer(container);
      }

      return prevComponent;
    },

    /**
     * Register a component into the instance map and starts scroll value
     * monitoring
     * @param {ReactComponent} nextComponent component instance to render
     * @param {DOMElement} container container to render into
     * @return {string} reactRoot ID prefix
     */
    _registerComponent: function(nextComponent, container) {
      ("production" !== "development" ? invariant(
        container && (
          (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
        ),
        '_registerComponent(...): Target container is not a DOM element.'
      ) : invariant(container && (
          (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
        )));

      ReactBrowserEventEmitter.ensureScrollValueMonitoring();

      var reactRootID = ReactMount.registerContainer(container);
      instancesByReactRootID[reactRootID] = nextComponent;
      return reactRootID;
    },

    /**
     * Render a new component into the DOM.
     * @param {ReactElement} nextElement element to render
     * @param {DOMElement} container container to render into
     * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
     * @return {ReactComponent} nextComponent
     */
    _renderNewRootComponent: function(
      nextElement,
      container,
      shouldReuseMarkup
    ) {
      // Various parts of our code (such as ReactCompositeComponent's
      // _renderValidatedComponent) assume that calls to render aren't nested;
      // verify that that's the case.
      ("production" !== "development" ? warning(
        ReactCurrentOwner.current == null,
        '_renderNewRootComponent(): Render methods should be a pure function ' +
        'of props and state; triggering nested component updates from ' +
        'render is not allowed. If necessary, trigger nested updates in ' +
        'componentDidUpdate.'
      ) : null);

      var componentInstance = instantiateReactComponent(nextElement, null);
      var reactRootID = ReactMount._registerComponent(
        componentInstance,
        container
      );

      // The initial render is synchronous but any updates that happen during
      // rendering, in componentWillMount or componentDidMount, will be batched
      // according to the current batching strategy.

      ReactUpdates.batchedUpdates(
        batchedMountComponentIntoNode,
        componentInstance,
        reactRootID,
        container,
        shouldReuseMarkup
      );

      if ("production" !== "development") {
        // Record the root element in case it later gets transplanted.
        rootElementsByReactRootID[reactRootID] =
          getReactRootElementInContainer(container);
      }

      return componentInstance;
    },

    /**
     * Renders a React component into the DOM in the supplied `container`.
     *
     * If the React component was previously rendered into `container`, this will
     * perform an update on it and only mutate the DOM as necessary to reflect the
     * latest React component.
     *
     * @param {ReactElement} nextElement Component element to render.
     * @param {DOMElement} container DOM element to render into.
     * @param {?function} callback function triggered on completion
     * @return {ReactComponent} Component instance rendered in `container`.
     */
    render: function(nextElement, container, callback) {
      ("production" !== "development" ? invariant(
        ReactElement.isValidElement(nextElement),
        'React.render(): Invalid component element.%s',
        (
          typeof nextElement === 'string' ?
          ' Instead of passing an element string, make sure to instantiate ' +
          'it by passing it to React.createElement.' :
            typeof nextElement === 'function' ?
            ' Instead of passing a component class, make sure to instantiate ' +
            'it by passing it to React.createElement.' :
              // Check if it quacks like an element
              nextElement != null && nextElement.props !== undefined ?
              ' This may be caused by unintentionally loading two independent ' +
              'copies of React.' :
                ''
        )
      ) : invariant(ReactElement.isValidElement(nextElement)));

      var prevComponent = instancesByReactRootID[getReactRootID(container)];

      if (prevComponent) {
        var prevElement = prevComponent._currentElement;
        if (shouldUpdateReactComponent(prevElement, nextElement)) {
          return ReactMount._updateRootComponent(
            prevComponent,
            nextElement,
            container,
            callback
          ).getPublicInstance();
        } else {
          ReactMount.unmountComponentAtNode(container);
        }
      }

      var reactRootElement = getReactRootElementInContainer(container);
      var containerHasReactMarkup =
        reactRootElement && ReactMount.isRenderedByReact(reactRootElement);

      if ("production" !== "development") {
        if (!containerHasReactMarkup || reactRootElement.nextSibling) {
          var rootElementSibling = reactRootElement;
          while (rootElementSibling) {
            if (ReactMount.isRenderedByReact(rootElementSibling)) {
              ("production" !== "development" ? warning(
                false,
                'render(): Target node has markup rendered by React, but there ' +
                'are unrelated nodes as well. This is most commonly caused by ' +
                'white-space inserted around server-rendered markup.'
              ) : null);
              break;
            }

            rootElementSibling = rootElementSibling.nextSibling;
          }
        }
      }

      var shouldReuseMarkup = containerHasReactMarkup && !prevComponent;

      var component = ReactMount._renderNewRootComponent(
        nextElement,
        container,
        shouldReuseMarkup
      ).getPublicInstance();
      if (callback) {
        callback.call(component);
      }
      return component;
    },

    /**
     * Constructs a component instance of `constructor` with `initialProps` and
     * renders it into the supplied `container`.
     *
     * @param {function} constructor React component constructor.
     * @param {?object} props Initial props of the component instance.
     * @param {DOMElement} container DOM element to render into.
     * @return {ReactComponent} Component instance rendered in `container`.
     */
    constructAndRenderComponent: function(constructor, props, container) {
      var element = ReactElement.createElement(constructor, props);
      return ReactMount.render(element, container);
    },

    /**
     * Constructs a component instance of `constructor` with `initialProps` and
     * renders it into a container node identified by supplied `id`.
     *
     * @param {function} componentConstructor React component constructor
     * @param {?object} props Initial props of the component instance.
     * @param {string} id ID of the DOM element to render into.
     * @return {ReactComponent} Component instance rendered in the container node.
     */
    constructAndRenderComponentByID: function(constructor, props, id) {
      var domNode = document.getElementById(id);
      ("production" !== "development" ? invariant(
        domNode,
        'Tried to get element with id of "%s" but it is not present on the page.',
        id
      ) : invariant(domNode));
      return ReactMount.constructAndRenderComponent(constructor, props, domNode);
    },

    /**
     * Registers a container node into which React components will be rendered.
     * This also creates the "reactRoot" ID that will be assigned to the element
     * rendered within.
     *
     * @param {DOMElement} container DOM element to register as a container.
     * @return {string} The "reactRoot" ID of elements rendered within.
     */
    registerContainer: function(container) {
      var reactRootID = getReactRootID(container);
      if (reactRootID) {
        // If one exists, make sure it is a valid "reactRoot" ID.
        reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
      }
      if (!reactRootID) {
        // No valid "reactRoot" ID found, create one.
        reactRootID = ReactInstanceHandles.createReactRootID();
      }
      containersByReactRootID[reactRootID] = container;
      return reactRootID;
    },

    /**
     * Unmounts and destroys the React component rendered in the `container`.
     *
     * @param {DOMElement} container DOM element containing a React component.
     * @return {boolean} True if a component was found in and unmounted from
     *                   `container`
     */
    unmountComponentAtNode: function(container) {
      // Various parts of our code (such as ReactCompositeComponent's
      // _renderValidatedComponent) assume that calls to render aren't nested;
      // verify that that's the case. (Strictly speaking, unmounting won't cause a
      // render but we still don't expect to be in a render call here.)
      ("production" !== "development" ? warning(
        ReactCurrentOwner.current == null,
        'unmountComponentAtNode(): Render methods should be a pure function of ' +
        'props and state; triggering nested component updates from render is ' +
        'not allowed. If necessary, trigger nested updates in ' +
        'componentDidUpdate.'
      ) : null);

      ("production" !== "development" ? invariant(
        container && (
          (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
        ),
        'unmountComponentAtNode(...): Target container is not a DOM element.'
      ) : invariant(container && (
          (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
        )));

      var reactRootID = getReactRootID(container);
      var component = instancesByReactRootID[reactRootID];
      if (!component) {
        return false;
      }
      ReactMount.unmountComponentFromNode(component, container);
      delete instancesByReactRootID[reactRootID];
      delete containersByReactRootID[reactRootID];
      if ("production" !== "development") {
        delete rootElementsByReactRootID[reactRootID];
      }
      return true;
    },

    /**
     * Unmounts a component and removes it from the DOM.
     *
     * @param {ReactComponent} instance React component instance.
     * @param {DOMElement} container DOM element to unmount from.
     * @final
     * @internal
     * @see {ReactMount.unmountComponentAtNode}
     */
    unmountComponentFromNode: function(instance, container) {
      ReactReconciler.unmountComponent(instance);

      if (container.nodeType === DOC_NODE_TYPE) {
        container = container.documentElement;
      }

      // http://jsperf.com/emptying-a-node
      while (container.lastChild) {
        container.removeChild(container.lastChild);
      }
    },

    /**
     * Finds the container DOM element that contains React component to which the
     * supplied DOM `id` belongs.
     *
     * @param {string} id The ID of an element rendered by a React component.
     * @return {?DOMElement} DOM element that contains the `id`.
     */
    findReactContainerForID: function(id) {
      var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
      var container = containersByReactRootID[reactRootID];

      if ("production" !== "development") {
        var rootElement = rootElementsByReactRootID[reactRootID];
        if (rootElement && rootElement.parentNode !== container) {
          ("production" !== "development" ? invariant(
            // Call internalGetID here because getID calls isValid which calls
            // findReactContainerForID (this function).
            internalGetID(rootElement) === reactRootID,
            'ReactMount: Root element ID differed from reactRootID.'
          ) : invariant(// Call internalGetID here because getID calls isValid which calls
            // findReactContainerForID (this function).
            internalGetID(rootElement) === reactRootID));

          var containerChild = container.firstChild;
          if (containerChild &&
            reactRootID === internalGetID(containerChild)) {
            // If the container has a new child with the same ID as the old
            // root element, then rootElementsByReactRootID[reactRootID] is
            // just stale and needs to be updated. The case that deserves a
            // warning is when the container is empty.
            rootElementsByReactRootID[reactRootID] = containerChild;
          } else {
            ("production" !== "development" ? warning(
              false,
              'ReactMount: Root element has been removed from its original ' +
              'container. New container:', rootElement.parentNode
            ) : null);
          }
        }
      }

      return container;
    },

    /**
     * Finds an element rendered by React with the supplied ID.
     *
     * @param {string} id ID of a DOM node in the React component.
     * @return {DOMElement} Root DOM node of the React component.
     */
    findReactNodeByID: function(id) {
      var reactRoot = ReactMount.findReactContainerForID(id);
      return ReactMount.findComponentRoot(reactRoot, id);
    },

    /**
     * True if the supplied `node` is rendered by React.
     *
     * @param {*} node DOM Element to check.
     * @return {boolean} True if the DOM Element appears to be rendered by React.
     * @internal
     */
    isRenderedByReact: function(node) {
      if (node.nodeType !== 1) {
        // Not a DOMElement, therefore not a React component
        return false;
      }
      var id = ReactMount.getID(node);
      return id ? id.charAt(0) === SEPARATOR : false;
    },

    /**
     * Traverses up the ancestors of the supplied node to find a node that is a
     * DOM representation of a React component.
     *
     * @param {*} node
     * @return {?DOMEventTarget}
     * @internal
     */
    getFirstReactDOM: function(node) {
      var current = node;
      while (current && current.parentNode !== current) {
        if (ReactMount.isRenderedByReact(current)) {
          return current;
        }
        current = current.parentNode;
      }
      return null;
    },

    /**
     * Finds a node with the supplied `targetID` inside of the supplied
     * `ancestorNode`.  Exploits the ID naming scheme to perform the search
     * quickly.
     *
     * @param {DOMEventTarget} ancestorNode Search from this root.
     * @pararm {string} targetID ID of the DOM representation of the component.
     * @return {DOMEventTarget} DOM node with the supplied `targetID`.
     * @internal
     */
    findComponentRoot: function(ancestorNode, targetID) {
      var firstChildren = findComponentRootReusableArray;
      var childIndex = 0;

      var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

      firstChildren[0] = deepestAncestor.firstChild;
      firstChildren.length = 1;

      while (childIndex < firstChildren.length) {
        var child = firstChildren[childIndex++];
        var targetChild;

        while (child) {
          var childID = ReactMount.getID(child);
          if (childID) {
            // Even if we find the node we're looking for, we finish looping
            // through its siblings to ensure they're cached so that we don't have
            // to revisit this node again. Otherwise, we make n^2 calls to getID
            // when visiting the many children of a single node in order.

            if (targetID === childID) {
              targetChild = child;
            } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
              // If we find a child whose ID is an ancestor of the given ID,
              // then we can be sure that we only want to search the subtree
              // rooted at this child, so we can throw out the rest of the
              // search state.
              firstChildren.length = childIndex = 0;
              firstChildren.push(child.firstChild);
            }

          } else {
            // If this child had no ID, then there's a chance that it was
            // injected automatically by the browser, as when a `<table>`
            // element sprouts an extra `<tbody>` child as a side effect of
            // `.innerHTML` parsing. Optimistically continue down this
            // branch, but not before examining the other siblings.
            firstChildren.push(child.firstChild);
          }

          child = child.nextSibling;
        }

        if (targetChild) {
          // Emptying firstChildren/findComponentRootReusableArray is
          // not necessary for correctness, but it helps the GC reclaim
          // any nodes that were left at the end of the search.
          firstChildren.length = 0;

          return targetChild;
        }
      }

      firstChildren.length = 0;

      ("production" !== "development" ? invariant(
        false,
        'findComponentRoot(..., %s): Unable to find element. This probably ' +
        'means the DOM was unexpectedly mutated (e.g., by the browser), ' +
        'usually due to forgetting a <tbody> when using tables, nesting tags ' +
        'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' +
        'parent. ' +
        'Try inspecting the child nodes of the element with React ID `%s`.',
        targetID,
        ReactMount.getID(ancestorNode)
      ) : invariant(false));
    },

    _mountImageIntoNode: function(markup, container, shouldReuseMarkup) {
      ("production" !== "development" ? invariant(
        container && (
          (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
        ),
        'mountComponentIntoNode(...): Target container is not valid.'
      ) : invariant(container && (
          (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
        )));

      if (shouldReuseMarkup) {
        var rootElement = getReactRootElementInContainer(container);
        if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
          return;
        } else {
          var checksum = rootElement.getAttribute(
            ReactMarkupChecksum.CHECKSUM_ATTR_NAME
          );
          rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

          var rootMarkup = rootElement.outerHTML;
          rootElement.setAttribute(
            ReactMarkupChecksum.CHECKSUM_ATTR_NAME,
            checksum
          );

          var diffIndex = firstDifferenceIndex(markup, rootMarkup);
          var difference = ' (client) ' +
            markup.substring(diffIndex - 20, diffIndex + 20) +
            '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

          ("production" !== "development" ? invariant(
            container.nodeType !== DOC_NODE_TYPE,
            'You\'re trying to render a component to the document using ' +
            'server rendering but the checksum was invalid. This usually ' +
            'means you rendered a different component type or props on ' +
            'the client from the one on the server, or your render() ' +
            'methods are impure. React cannot handle this case due to ' +
            'cross-browser quirks by rendering at the document root. You ' +
            'should look for environment dependent code in your components ' +
            'and ensure the props are the same client and server side:\n%s',
            difference
          ) : invariant(container.nodeType !== DOC_NODE_TYPE));

          if ("production" !== "development") {
            ("production" !== "development" ? warning(
              false,
              'React attempted to reuse markup in a container but the ' +
              'checksum was invalid. This generally means that you are ' +
              'using server rendering and the markup generated on the ' +
              'server was not what the client was expecting. React injected ' +
              'new markup to compensate which works but you have lost many ' +
              'of the benefits of server rendering. Instead, figure out ' +
              'why the markup being generated is different on the client ' +
              'or server:\n%s',
              difference
            ) : null);
          }
        }
      }

      ("production" !== "development" ? invariant(
        container.nodeType !== DOC_NODE_TYPE,
        'You\'re trying to render a component to the document but ' +
        'you didn\'t use server rendering. We can\'t do this ' +
        'without using server rendering due to cross-browser quirks. ' +
        'See React.renderToString() for server rendering.'
      ) : invariant(container.nodeType !== DOC_NODE_TYPE));

      setInnerHTML(container, markup);
    },

    /**
     * React ID utilities.
     */

    getReactRootID: getReactRootID,

    getID: getID,

    setID: setID,

    getNode: getNode,

    getNodeFromInstance: getNodeFromInstance,

    purgeID: purgeID
  };

  ReactPerf.measureMethods(ReactMount, 'ReactMount', {
    _renderNewRootComponent: '_renderNewRootComponent',
    _mountImageIntoNode: '_mountImageIntoNode'
  });

  module.exports = ReactMount;

},{"./DOMProperty":336,"./ReactBrowserEventEmitter":357,"./ReactCurrentOwner":366,"./ReactElement":384,"./ReactElementValidator":385,"./ReactEmptyComponent":386,"./ReactInstanceHandles":393,"./ReactInstanceMap":394,"./ReactMarkupChecksum":396,"./ReactPerf":402,"./ReactReconciler":408,"./ReactUpdateQueue":413,"./ReactUpdates":414,"./containsNode":436,"./emptyObject":442,"./getReactRootElementInContainer":456,"./instantiateReactComponent":461,"./invariant":462,"./setInnerHTML":475,"./shouldUpdateReactComponent":478,"./warning":481}],398:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactMultiChild
   * @typechecks static-only
   */

  'use strict';

  var ReactComponentEnvironment = require("./ReactComponentEnvironment");
  var ReactMultiChildUpdateTypes = require("./ReactMultiChildUpdateTypes");

  var ReactReconciler = require("./ReactReconciler");
  var ReactChildReconciler = require("./ReactChildReconciler");

  /**
   * Updating children of a component may trigger recursive updates. The depth is
   * used to batch recursive updates to render markup more efficiently.
   *
   * @type {number}
   * @private
   */
  var updateDepth = 0;

  /**
   * Queue of update configuration objects.
   *
   * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
   *
   * @type {array<object>}
   * @private
   */
  var updateQueue = [];

  /**
   * Queue of markup to be rendered.
   *
   * @type {array<string>}
   * @private
   */
  var markupQueue = [];

  /**
   * Enqueues markup to be rendered and inserted at a supplied index.
   *
   * @param {string} parentID ID of the parent component.
   * @param {string} markup Markup that renders into an element.
   * @param {number} toIndex Destination index.
   * @private
   */
  function enqueueMarkup(parentID, markup, toIndex) {
    // NOTE: Null values reduce hidden classes.
    updateQueue.push({
      parentID: parentID,
      parentNode: null,
      type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
      markupIndex: markupQueue.push(markup) - 1,
      textContent: null,
      fromIndex: null,
      toIndex: toIndex
    });
  }

  /**
   * Enqueues moving an existing element to another index.
   *
   * @param {string} parentID ID of the parent component.
   * @param {number} fromIndex Source index of the existing element.
   * @param {number} toIndex Destination index of the element.
   * @private
   */
  function enqueueMove(parentID, fromIndex, toIndex) {
    // NOTE: Null values reduce hidden classes.
    updateQueue.push({
      parentID: parentID,
      parentNode: null,
      type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
      markupIndex: null,
      textContent: null,
      fromIndex: fromIndex,
      toIndex: toIndex
    });
  }

  /**
   * Enqueues removing an element at an index.
   *
   * @param {string} parentID ID of the parent component.
   * @param {number} fromIndex Index of the element to remove.
   * @private
   */
  function enqueueRemove(parentID, fromIndex) {
    // NOTE: Null values reduce hidden classes.
    updateQueue.push({
      parentID: parentID,
      parentNode: null,
      type: ReactMultiChildUpdateTypes.REMOVE_NODE,
      markupIndex: null,
      textContent: null,
      fromIndex: fromIndex,
      toIndex: null
    });
  }

  /**
   * Enqueues setting the text content.
   *
   * @param {string} parentID ID of the parent component.
   * @param {string} textContent Text content to set.
   * @private
   */
  function enqueueTextContent(parentID, textContent) {
    // NOTE: Null values reduce hidden classes.
    updateQueue.push({
      parentID: parentID,
      parentNode: null,
      type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
      markupIndex: null,
      textContent: textContent,
      fromIndex: null,
      toIndex: null
    });
  }

  /**
   * Processes any enqueued updates.
   *
   * @private
   */
  function processQueue() {
    if (updateQueue.length) {
      ReactComponentEnvironment.processChildrenUpdates(
        updateQueue,
        markupQueue
      );
      clearQueue();
    }
  }

  /**
   * Clears any enqueued updates.
   *
   * @private
   */
  function clearQueue() {
    updateQueue.length = 0;
    markupQueue.length = 0;
  }

  /**
   * ReactMultiChild are capable of reconciling multiple children.
   *
   * @class ReactMultiChild
   * @internal
   */
  var ReactMultiChild = {

    /**
     * Provides common functionality for components that must reconcile multiple
     * children. This is used by `ReactDOMComponent` to mount, update, and
     * unmount child components.
     *
     * @lends {ReactMultiChild.prototype}
     */
    Mixin: {

      /**
       * Generates a "mount image" for each of the supplied children. In the case
       * of `ReactDOMComponent`, a mount image is a string of markup.
       *
       * @param {?object} nestedChildren Nested child maps.
       * @return {array} An array of mounted representations.
       * @internal
       */
      mountChildren: function(nestedChildren, transaction, context) {
        var children = ReactChildReconciler.instantiateChildren(
          nestedChildren, transaction, context
        );
        this._renderedChildren = children;
        var mountImages = [];
        var index = 0;
        for (var name in children) {
          if (children.hasOwnProperty(name)) {
            var child = children[name];
            // Inlined for performance, see `ReactInstanceHandles.createReactID`.
            var rootID = this._rootNodeID + name;
            var mountImage = ReactReconciler.mountComponent(
              child,
              rootID,
              transaction,
              context
            );
            child._mountIndex = index;
            mountImages.push(mountImage);
            index++;
          }
        }
        return mountImages;
      },

      /**
       * Replaces any rendered children with a text content string.
       *
       * @param {string} nextContent String of content.
       * @internal
       */
      updateTextContent: function(nextContent) {
        updateDepth++;
        var errorThrown = true;
        try {
          var prevChildren = this._renderedChildren;
          // Remove any rendered children.
          ReactChildReconciler.unmountChildren(prevChildren);
          // TODO: The setTextContent operation should be enough
          for (var name in prevChildren) {
            if (prevChildren.hasOwnProperty(name)) {
              this._unmountChildByName(prevChildren[name], name);
            }
          }
          // Set new text content.
          this.setTextContent(nextContent);
          errorThrown = false;
        } finally {
          updateDepth--;
          if (!updateDepth) {
            if (errorThrown) {
              clearQueue();
            } else {
              processQueue();
            }
          }
        }
      },

      /**
       * Updates the rendered children with new children.
       *
       * @param {?object} nextNestedChildren Nested child maps.
       * @param {ReactReconcileTransaction} transaction
       * @internal
       */
      updateChildren: function(nextNestedChildren, transaction, context) {
        updateDepth++;
        var errorThrown = true;
        try {
          this._updateChildren(nextNestedChildren, transaction, context);
          errorThrown = false;
        } finally {
          updateDepth--;
          if (!updateDepth) {
            if (errorThrown) {
              clearQueue();
            } else {
              processQueue();
            }
          }

        }
      },

      /**
       * Improve performance by isolating this hot code path from the try/catch
       * block in `updateChildren`.
       *
       * @param {?object} nextNestedChildren Nested child maps.
       * @param {ReactReconcileTransaction} transaction
       * @final
       * @protected
       */
      _updateChildren: function(nextNestedChildren, transaction, context) {
        var prevChildren = this._renderedChildren;
        var nextChildren = ReactChildReconciler.updateChildren(
          prevChildren, nextNestedChildren, transaction, context
        );
        this._renderedChildren = nextChildren;
        if (!nextChildren && !prevChildren) {
          return;
        }
        var name;
        // `nextIndex` will increment for each child in `nextChildren`, but
        // `lastIndex` will be the last index visited in `prevChildren`.
        var lastIndex = 0;
        var nextIndex = 0;
        for (name in nextChildren) {
          if (!nextChildren.hasOwnProperty(name)) {
            continue;
          }
          var prevChild = prevChildren && prevChildren[name];
          var nextChild = nextChildren[name];
          if (prevChild === nextChild) {
            this.moveChild(prevChild, nextIndex, lastIndex);
            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
            prevChild._mountIndex = nextIndex;
          } else {
            if (prevChild) {
              // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
              lastIndex = Math.max(prevChild._mountIndex, lastIndex);
              this._unmountChildByName(prevChild, name);
            }
            // The child must be instantiated before it's mounted.
            this._mountChildByNameAtIndex(
              nextChild, name, nextIndex, transaction, context
            );
          }
          nextIndex++;
        }
        // Remove children that are no longer present.
        for (name in prevChildren) {
          if (prevChildren.hasOwnProperty(name) &&
            !(nextChildren && nextChildren.hasOwnProperty(name))) {
            this._unmountChildByName(prevChildren[name], name);
          }
        }
      },

      /**
       * Unmounts all rendered children. This should be used to clean up children
       * when this component is unmounted.
       *
       * @internal
       */
      unmountChildren: function() {
        var renderedChildren = this._renderedChildren;
        ReactChildReconciler.unmountChildren(renderedChildren);
        this._renderedChildren = null;
      },

      /**
       * Moves a child component to the supplied index.
       *
       * @param {ReactComponent} child Component to move.
       * @param {number} toIndex Destination index of the element.
       * @param {number} lastIndex Last index visited of the siblings of `child`.
       * @protected
       */
      moveChild: function(child, toIndex, lastIndex) {
        // If the index of `child` is less than `lastIndex`, then it needs to
        // be moved. Otherwise, we do not need to move it because a child will be
        // inserted or moved before `child`.
        if (child._mountIndex < lastIndex) {
          enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
        }
      },

      /**
       * Creates a child component.
       *
       * @param {ReactComponent} child Component to create.
       * @param {string} mountImage Markup to insert.
       * @protected
       */
      createChild: function(child, mountImage) {
        enqueueMarkup(this._rootNodeID, mountImage, child._mountIndex);
      },

      /**
       * Removes a child component.
       *
       * @param {ReactComponent} child Child to remove.
       * @protected
       */
      removeChild: function(child) {
        enqueueRemove(this._rootNodeID, child._mountIndex);
      },

      /**
       * Sets this text content string.
       *
       * @param {string} textContent Text content to set.
       * @protected
       */
      setTextContent: function(textContent) {
        enqueueTextContent(this._rootNodeID, textContent);
      },

      /**
       * Mounts a child with the supplied name.
       *
       * NOTE: This is part of `updateChildren` and is here for readability.
       *
       * @param {ReactComponent} child Component to mount.
       * @param {string} name Name of the child.
       * @param {number} index Index at which to insert the child.
       * @param {ReactReconcileTransaction} transaction
       * @private
       */
      _mountChildByNameAtIndex: function(
        child,
        name,
        index,
        transaction,
        context) {
        // Inlined for performance, see `ReactInstanceHandles.createReactID`.
        var rootID = this._rootNodeID + name;
        var mountImage = ReactReconciler.mountComponent(
          child,
          rootID,
          transaction,
          context
        );
        child._mountIndex = index;
        this.createChild(child, mountImage);
      },

      /**
       * Unmounts a rendered child by name.
       *
       * NOTE: This is part of `updateChildren` and is here for readability.
       *
       * @param {ReactComponent} child Component to unmount.
       * @param {string} name Name of the child in `this._renderedChildren`.
       * @private
       */
      _unmountChildByName: function(child, name) {
        this.removeChild(child);
        child._mountIndex = null;
      }

    }

  };

  module.exports = ReactMultiChild;

},{"./ReactChildReconciler":358,"./ReactComponentEnvironment":363,"./ReactMultiChildUpdateTypes":399,"./ReactReconciler":408}],399:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactMultiChildUpdateTypes
   */

  'use strict';

  var keyMirror = require("./keyMirror");

  /**
   * When a component's children are updated, a series of update configuration
   * objects are created in order to batch and serialize the required changes.
   *
   * Enumerates all the possible types of update configurations.
   *
   * @internal
   */
  var ReactMultiChildUpdateTypes = keyMirror({
    INSERT_MARKUP: null,
    MOVE_EXISTING: null,
    REMOVE_NODE: null,
    TEXT_CONTENT: null
  });

  module.exports = ReactMultiChildUpdateTypes;

},{"./keyMirror":467}],400:[function(require,module,exports){
  /**
   * Copyright 2014-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactNativeComponent
   */

  'use strict';

  var assign = require("./Object.assign");
  var invariant = require("./invariant");

  var autoGenerateWrapperClass = null;
  var genericComponentClass = null;
  // This registry keeps track of wrapper classes around native tags
  var tagToComponentClass = {};
  var textComponentClass = null;

  var ReactNativeComponentInjection = {
    // This accepts a class that receives the tag string. This is a catch all
    // that can render any kind of tag.
    injectGenericComponentClass: function(componentClass) {
      genericComponentClass = componentClass;
    },
    // This accepts a text component class that takes the text string to be
    // rendered as props.
    injectTextComponentClass: function(componentClass) {
      textComponentClass = componentClass;
    },
    // This accepts a keyed object with classes as values. Each key represents a
    // tag. That particular tag will use this class instead of the generic one.
    injectComponentClasses: function(componentClasses) {
      assign(tagToComponentClass, componentClasses);
    },
    // Temporary hack since we expect DOM refs to behave like composites,
    // for this release.
    injectAutoWrapper: function(wrapperFactory) {
      autoGenerateWrapperClass = wrapperFactory;
    }
  };

  /**
   * Get a composite component wrapper class for a specific tag.
   *
   * @param {ReactElement} element The tag for which to get the class.
   * @return {function} The React class constructor function.
   */
  function getComponentClassForElement(element) {
    if (typeof element.type === 'function') {
      return element.type;
    }
    var tag = element.type;
    var componentClass = tagToComponentClass[tag];
    if (componentClass == null) {
      tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);
    }
    return componentClass;
  }

  /**
   * Get a native internal component class for a specific tag.
   *
   * @param {ReactElement} element The element to create.
   * @return {function} The internal class constructor function.
   */
  function createInternalComponent(element) {
    ("production" !== "development" ? invariant(
      genericComponentClass,
      'There is no registered component for the tag %s',
      element.type
    ) : invariant(genericComponentClass));
    return new genericComponentClass(element.type, element.props);
  }

  /**
   * @param {ReactText} text
   * @return {ReactComponent}
   */
  function createInstanceForText(text) {
    return new textComponentClass(text);
  }

  /**
   * @param {ReactComponent} component
   * @return {boolean}
   */
  function isTextComponent(component) {
    return component instanceof textComponentClass;
  }

  var ReactNativeComponent = {
    getComponentClassForElement: getComponentClassForElement,
    createInternalComponent: createInternalComponent,
    createInstanceForText: createInstanceForText,
    isTextComponent: isTextComponent,
    injection: ReactNativeComponentInjection
  };

  module.exports = ReactNativeComponent;

},{"./Object.assign":353,"./invariant":462}],401:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactOwner
   */

  'use strict';

  var invariant = require("./invariant");

  /**
   * ReactOwners are capable of storing references to owned components.
   *
   * All components are capable of //being// referenced by owner components, but
   * only ReactOwner components are capable of //referencing// owned components.
   * The named reference is known as a "ref".
   *
   * Refs are available when mounted and updated during reconciliation.
   *
   *   var MyComponent = React.createClass({
 *     render: function() {
 *       return (
 *         <div onClick={this.handleClick}>
 *           <CustomComponent ref="custom" />
 *         </div>
 *       );
 *     },
 *     handleClick: function() {
 *       this.refs.custom.handleClick();
 *     },
 *     componentDidMount: function() {
 *       this.refs.custom.initialize();
 *     }
 *   });
   *
   * Refs should rarely be used. When refs are used, they should only be done to
   * control data that is not handled by React's data flow.
   *
   * @class ReactOwner
   */
  var ReactOwner = {

    /**
     * @param {?object} object
     * @return {boolean} True if `object` is a valid owner.
     * @final
     */
    isValidOwner: function(object) {
      return !!(
        (object &&
        typeof object.attachRef === 'function' && typeof object.detachRef === 'function')
      );
    },

    /**
     * Adds a component by ref to an owner component.
     *
     * @param {ReactComponent} component Component to reference.
     * @param {string} ref Name by which to refer to the component.
     * @param {ReactOwner} owner Component on which to record the ref.
     * @final
     * @internal
     */
    addComponentAsRefTo: function(component, ref, owner) {
      ("production" !== "development" ? invariant(
        ReactOwner.isValidOwner(owner),
        'addComponentAsRefTo(...): Only a ReactOwner can have refs. This ' +
        'usually means that you\'re trying to add a ref to a component that ' +
        'doesn\'t have an owner (that is, was not created inside of another ' +
        'component\'s `render` method). Try rendering this component inside of ' +
        'a new top-level component which will hold the ref.'
      ) : invariant(ReactOwner.isValidOwner(owner)));
      owner.attachRef(ref, component);
    },

    /**
     * Removes a component by ref from an owner component.
     *
     * @param {ReactComponent} component Component to dereference.
     * @param {string} ref Name of the ref to remove.
     * @param {ReactOwner} owner Component on which the ref is recorded.
     * @final
     * @internal
     */
    removeComponentAsRefFrom: function(component, ref, owner) {
      ("production" !== "development" ? invariant(
        ReactOwner.isValidOwner(owner),
        'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This ' +
        'usually means that you\'re trying to remove a ref to a component that ' +
        'doesn\'t have an owner (that is, was not created inside of another ' +
        'component\'s `render` method). Try rendering this component inside of ' +
        'a new top-level component which will hold the ref.'
      ) : invariant(ReactOwner.isValidOwner(owner)));
      // Check that `component` is still the current ref because we do not want to
      // detach the ref if another component stole it.
      if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {
        owner.detachRef(ref);
      }
    }

  };

  module.exports = ReactOwner;

},{"./invariant":462}],402:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactPerf
   * @typechecks static-only
   */

  'use strict';

  /**
   * ReactPerf is a general AOP system designed to measure performance. This
   * module only has the hooks: see ReactDefaultPerf for the analysis tool.
   */
  var ReactPerf = {
    /**
     * Boolean to enable/disable measurement. Set to false by default to prevent
     * accidental logging and perf loss.
     */
    enableMeasure: false,

    /**
     * Holds onto the measure function in use. By default, don't measure
     * anything, but we'll override this if we inject a measure function.
     */
    storedMeasure: _noMeasure,

    /**
     * @param {object} object
     * @param {string} objectName
     * @param {object<string>} methodNames
     */
    measureMethods: function(object, objectName, methodNames) {
      if ("production" !== "development") {
        for (var key in methodNames) {
          if (!methodNames.hasOwnProperty(key)) {
            continue;
          }
          object[key] = ReactPerf.measure(
            objectName,
            methodNames[key],
            object[key]
          );
        }
      }
    },

    /**
     * Use this to wrap methods you want to measure. Zero overhead in production.
     *
     * @param {string} objName
     * @param {string} fnName
     * @param {function} func
     * @return {function}
     */
    measure: function(objName, fnName, func) {
      if ("production" !== "development") {
        var measuredFunc = null;
        var wrapper = function() {
          if (ReactPerf.enableMeasure) {
            if (!measuredFunc) {
              measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
            }
            return measuredFunc.apply(this, arguments);
          }
          return func.apply(this, arguments);
        };
        wrapper.displayName = objName + '_' + fnName;
        return wrapper;
      }
      return func;
    },

    injection: {
      /**
       * @param {function} measure
       */
      injectMeasure: function(measure) {
        ReactPerf.storedMeasure = measure;
      }
    }
  };

  /**
   * Simply passes through the measured function, without measuring it.
   *
   * @param {string} objName
   * @param {string} fnName
   * @param {function} func
   * @return {function}
   */
  function _noMeasure(objName, fnName, func) {
    return func;
  }

  module.exports = ReactPerf;

},{}],403:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactPropTypeLocationNames
   */

  'use strict';

  var ReactPropTypeLocationNames = {};

  if ("production" !== "development") {
    ReactPropTypeLocationNames = {
      prop: 'prop',
      context: 'context',
      childContext: 'child context'
    };
  }

  module.exports = ReactPropTypeLocationNames;

},{}],404:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactPropTypeLocations
   */

  'use strict';

  var keyMirror = require("./keyMirror");

  var ReactPropTypeLocations = keyMirror({
    prop: null,
    context: null,
    childContext: null
  });

  module.exports = ReactPropTypeLocations;

},{"./keyMirror":467}],405:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactPropTypes
   */

  'use strict';

  var ReactElement = require("./ReactElement");
  var ReactFragment = require("./ReactFragment");
  var ReactPropTypeLocationNames = require("./ReactPropTypeLocationNames");

  var emptyFunction = require("./emptyFunction");

  /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
 *     propTypes: {
 *       // An optional string prop named "description".
 *       description: Props.string,
 *
 *       // A required enum prop named "category".
 *       category: Props.oneOf(['News','Photos']).isRequired,
 *
 *       // A prop named "dialog" that requires an instance of Dialog.
 *       dialog: Props.instanceOf(Dialog).isRequired
 *     },
 *     render: function() { ... }
 *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
 *    propTypes: {
 *      // An optional string or URI prop named "href".
 *      href: function(props, propName, componentName) {
 *        var propValue = props[propName];
 *        if (propValue != null && typeof propValue !== 'string' &&
 *            !(propValue instanceof URI)) {
 *          return new Error(
 *            'Expected a string or an URI for ' + propName + ' in ' +
 *            componentName
 *          );
 *        }
 *      }
 *    },
 *    render: function() {...}
 *  });
   *
   * @internal
   */

  var ANONYMOUS = '<<anonymous>>';

  var elementTypeChecker = createElementTypeChecker();
  var nodeTypeChecker = createNodeChecker();

  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),

    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: elementTypeChecker,
    instanceOf: createInstanceTypeChecker,
    node: nodeTypeChecker,
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker
  };

  function createChainableTypeChecker(validate) {
    function checkType(isRequired, props, propName, componentName, location) {
      componentName = componentName || ANONYMOUS;
      if (props[propName] == null) {
        var locationName = ReactPropTypeLocationNames[location];
        if (isRequired) {
          return new Error(
            ("Required " + locationName + " `" + propName + "` was not specified in ") +
            ("`" + componentName + "`.")
          );
        }
        return null;
      } else {
        return validate(props, propName, componentName, location);
      }
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);

    return chainedCheckType;
  }

  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        var locationName = ReactPropTypeLocationNames[location];
        // `propValue` being instance of, say, date/regexp, pass the 'object'
        // check, but we can offer a more precise error message here rather than
        // 'of type `object`'.
        var preciseType = getPreciseType(propValue);

        return new Error(
          ("Invalid " + locationName + " `" + propName + "` of type `" + preciseType + "` ") +
          ("supplied to `" + componentName + "`, expected `" + expectedType + "`.")
        );
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunction.thatReturns(null));
  }

  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location) {
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var locationName = ReactPropTypeLocationNames[location];
        var propType = getPropType(propValue);
        return new Error(
          ("Invalid " + locationName + " `" + propName + "` of type ") +
          ("`" + propType + "` supplied to `" + componentName + "`, expected an array.")
        );
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location);
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeChecker() {
    function validate(props, propName, componentName, location) {
      if (!ReactElement.isValidElement(props[propName])) {
        var locationName = ReactPropTypeLocationNames[location];
        return new Error(
          ("Invalid " + locationName + " `" + propName + "` supplied to ") +
          ("`" + componentName + "`, expected a ReactElement.")
        );
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location) {
      if (!(props[propName] instanceof expectedClass)) {
        var locationName = ReactPropTypeLocationNames[location];
        var expectedClassName = expectedClass.name || ANONYMOUS;
        return new Error(
          ("Invalid " + locationName + " `" + propName + "` supplied to ") +
          ("`" + componentName + "`, expected instance of `" + expectedClassName + "`.")
        );
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createEnumTypeChecker(expectedValues) {
    function validate(props, propName, componentName, location) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (propValue === expectedValues[i]) {
          return null;
        }
      }

      var locationName = ReactPropTypeLocationNames[location];
      var valuesString = JSON.stringify(expectedValues);
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of value `" + propValue + "` ") +
        ("supplied to `" + componentName + "`, expected one of " + valuesString + ".")
      );
    }
    return createChainableTypeChecker(validate);
  }

  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        var locationName = ReactPropTypeLocationNames[location];
        return new Error(
          ("Invalid " + locationName + " `" + propName + "` of type ") +
          ("`" + propType + "` supplied to `" + componentName + "`, expected an object.")
        );
      }
      for (var key in propValue) {
        if (propValue.hasOwnProperty(key)) {
          var error = typeChecker(propValue, key, componentName, location);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createUnionTypeChecker(arrayOfTypeCheckers) {
    function validate(props, propName, componentName, location) {
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (checker(props, propName, componentName, location) == null) {
          return null;
        }
      }

      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`.")
      );
    }
    return createChainableTypeChecker(validate);
  }

  function createNodeChecker() {
    function validate(props, propName, componentName, location) {
      if (!isNode(props[propName])) {
        var locationName = ReactPropTypeLocationNames[location];
        return new Error(
          ("Invalid " + locationName + " `" + propName + "` supplied to ") +
          ("`" + componentName + "`, expected a ReactNode.")
        );
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        var locationName = ReactPropTypeLocationNames[location];
        return new Error(
          ("Invalid " + locationName + " `" + propName + "` of type `" + propType + "` ") +
          ("supplied to `" + componentName + "`, expected `object`.")
        );
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (!checker) {
          continue;
        }
        var error = checker(propValue, key, componentName, location);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || ReactElement.isValidElement(propValue)) {
          return true;
        }
        propValue = ReactFragment.extractIfFragment(propValue);
        for (var k in propValue) {
          if (!isNode(propValue[k])) {
            return false;
          }
        }
        return true;
      default:
        return false;
    }
  }

  // Equivalent of `typeof` but with special handling for array and regexp.
  function getPropType(propValue) {
    var propType = typeof propValue;
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      // Old webkits (at least until Android 4.0) return 'function' rather than
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
      // passes PropTypes.object.
      return 'object';
    }
    return propType;
  }

  // This handles more types than `getPropType`. Only used for error messages.
  // See `createPrimitiveTypeChecker`.
  function getPreciseType(propValue) {
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }

  module.exports = ReactPropTypes;

},{"./ReactElement":384,"./ReactFragment":390,"./ReactPropTypeLocationNames":403,"./emptyFunction":441}],406:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactPutListenerQueue
   */

  'use strict';

  var PooledClass = require("./PooledClass");
  var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");

  var assign = require("./Object.assign");

  function ReactPutListenerQueue() {
    this.listenersToPut = [];
  }

  assign(ReactPutListenerQueue.prototype, {
    enqueuePutListener: function(rootNodeID, propKey, propValue) {
      this.listenersToPut.push({
        rootNodeID: rootNodeID,
        propKey: propKey,
        propValue: propValue
      });
    },

    putListeners: function() {
      for (var i = 0; i < this.listenersToPut.length; i++) {
        var listenerToPut = this.listenersToPut[i];
        ReactBrowserEventEmitter.putListener(
          listenerToPut.rootNodeID,
          listenerToPut.propKey,
          listenerToPut.propValue
        );
      }
    },

    reset: function() {
      this.listenersToPut.length = 0;
    },

    destructor: function() {
      this.reset();
    }
  });

  PooledClass.addPoolingTo(ReactPutListenerQueue);

  module.exports = ReactPutListenerQueue;

},{"./Object.assign":353,"./PooledClass":354,"./ReactBrowserEventEmitter":357}],407:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactReconcileTransaction
   * @typechecks static-only
   */

  'use strict';

  var CallbackQueue = require("./CallbackQueue");
  var PooledClass = require("./PooledClass");
  var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");
  var ReactInputSelection = require("./ReactInputSelection");
  var ReactPutListenerQueue = require("./ReactPutListenerQueue");
  var Transaction = require("./Transaction");

  var assign = require("./Object.assign");

  /**
   * Ensures that, when possible, the selection range (currently selected text
   * input) is not disturbed by performing the transaction.
   */
  var SELECTION_RESTORATION = {
    /**
     * @return {Selection} Selection information.
     */
    initialize: ReactInputSelection.getSelectionInformation,
    /**
     * @param {Selection} sel Selection information returned from `initialize`.
     */
    close: ReactInputSelection.restoreSelection
  };

  /**
   * Suppresses events (blur/focus) that could be inadvertently dispatched due to
   * high level DOM manipulations (like temporarily removing a text input from the
   * DOM).
   */
  var EVENT_SUPPRESSION = {
    /**
     * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
     * the reconciliation.
     */
    initialize: function() {
      var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
      ReactBrowserEventEmitter.setEnabled(false);
      return currentlyEnabled;
    },

    /**
     * @param {boolean} previouslyEnabled Enabled status of
     *   `ReactBrowserEventEmitter` before the reconciliation occured. `close`
     *   restores the previous value.
     */
    close: function(previouslyEnabled) {
      ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
    }
  };

  /**
   * Provides a queue for collecting `componentDidMount` and
   * `componentDidUpdate` callbacks during the the transaction.
   */
  var ON_DOM_READY_QUEUEING = {
    /**
     * Initializes the internal `onDOMReady` queue.
     */
    initialize: function() {
      this.reactMountReady.reset();
    },

    /**
     * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
     */
    close: function() {
      this.reactMountReady.notifyAll();
    }
  };

  var PUT_LISTENER_QUEUEING = {
    initialize: function() {
      this.putListenerQueue.reset();
    },

    close: function() {
      this.putListenerQueue.putListeners();
    }
  };

  /**
   * Executed within the scope of the `Transaction` instance. Consider these as
   * being member methods, but with an implied ordering while being isolated from
   * each other.
   */
  var TRANSACTION_WRAPPERS = [
    PUT_LISTENER_QUEUEING,
    SELECTION_RESTORATION,
    EVENT_SUPPRESSION,
    ON_DOM_READY_QUEUEING
  ];

  /**
   * Currently:
   * - The order that these are listed in the transaction is critical:
   * - Suppresses events.
   * - Restores selection range.
   *
   * Future:
   * - Restore document/overflow scroll positions that were unintentionally
   *   modified via DOM insertions above the top viewport boundary.
   * - Implement/integrate with customized constraint based layout system and keep
   *   track of which dimensions must be remeasured.
   *
   * @class ReactReconcileTransaction
   */
  function ReactReconcileTransaction() {
    this.reinitializeTransaction();
    // Only server-side rendering really needs this option (see
    // `ReactServerRendering`), but server-side uses
    // `ReactServerRenderingTransaction` instead. This option is here so that it's
    // accessible and defaults to false when `ReactDOMComponent` and
    // `ReactTextComponent` checks it in `mountComponent`.`
    this.renderToStaticMarkup = false;
    this.reactMountReady = CallbackQueue.getPooled(null);
    this.putListenerQueue = ReactPutListenerQueue.getPooled();
  }

  var Mixin = {
    /**
     * @see Transaction
     * @abstract
     * @final
     * @return {array<object>} List of operation wrap proceedures.
     *   TODO: convert to array<TransactionWrapper>
     */
    getTransactionWrappers: function() {
      return TRANSACTION_WRAPPERS;
    },

    /**
     * @return {object} The queue to collect `onDOMReady` callbacks with.
     */
    getReactMountReady: function() {
      return this.reactMountReady;
    },

    getPutListenerQueue: function() {
      return this.putListenerQueue;
    },

    /**
     * `PooledClass` looks for this, and will invoke this before allowing this
     * instance to be resused.
     */
    destructor: function() {
      CallbackQueue.release(this.reactMountReady);
      this.reactMountReady = null;

      ReactPutListenerQueue.release(this.putListenerQueue);
      this.putListenerQueue = null;
    }
  };


  assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

  PooledClass.addPoolingTo(ReactReconcileTransaction);

  module.exports = ReactReconcileTransaction;

},{"./CallbackQueue":332,"./Object.assign":353,"./PooledClass":354,"./ReactBrowserEventEmitter":357,"./ReactInputSelection":392,"./ReactPutListenerQueue":406,"./Transaction":430}],408:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactReconciler
   */

  'use strict';

  var ReactRef = require("./ReactRef");
  var ReactElementValidator = require("./ReactElementValidator");

  /**
   * Helper to call ReactRef.attachRefs with this composite component, split out
   * to avoid allocations in the transaction mount-ready queue.
   */
  function attachRefs() {
    ReactRef.attachRefs(this, this._currentElement);
  }

  var ReactReconciler = {

    /**
     * Initializes the component, renders markup, and registers event listeners.
     *
     * @param {ReactComponent} internalInstance
     * @param {string} rootID DOM ID of the root node.
     * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
     * @return {?string} Rendered markup to be inserted into the DOM.
     * @final
     * @internal
     */
    mountComponent: function(internalInstance, rootID, transaction, context) {
      var markup = internalInstance.mountComponent(rootID, transaction, context);
      if ("production" !== "development") {
        ReactElementValidator.checkAndWarnForMutatedProps(
          internalInstance._currentElement
        );
      }
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
      return markup;
    },

    /**
     * Releases any resources allocated by `mountComponent`.
     *
     * @final
     * @internal
     */
    unmountComponent: function(internalInstance) {
      ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
      internalInstance.unmountComponent();
    },

    /**
     * Update a component using a new element.
     *
     * @param {ReactComponent} internalInstance
     * @param {ReactElement} nextElement
     * @param {ReactReconcileTransaction} transaction
     * @param {object} context
     * @internal
     */
    receiveComponent: function(
      internalInstance, nextElement, transaction, context
    ) {
      var prevElement = internalInstance._currentElement;

      if (nextElement === prevElement && nextElement._owner != null) {
        // Since elements are immutable after the owner is rendered,
        // we can do a cheap identity compare here to determine if this is a
        // superfluous reconcile. It's possible for state to be mutable but such
        // change should trigger an update of the owner which would recreate
        // the element. We explicitly check for the existence of an owner since
        // it's possible for an element created outside a composite to be
        // deeply mutated and reused.
        return;
      }

      if ("production" !== "development") {
        ReactElementValidator.checkAndWarnForMutatedProps(nextElement);
      }

      var refsChanged = ReactRef.shouldUpdateRefs(
        prevElement,
        nextElement
      );

      if (refsChanged) {
        ReactRef.detachRefs(internalInstance, prevElement);
      }

      internalInstance.receiveComponent(nextElement, transaction, context);

      if (refsChanged) {
        transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
      }
    },

    /**
     * Flush any dirty changes in a component.
     *
     * @param {ReactComponent} internalInstance
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    performUpdateIfNecessary: function(
      internalInstance,
      transaction
    ) {
      internalInstance.performUpdateIfNecessary(transaction);
    }

  };

  module.exports = ReactReconciler;

},{"./ReactElementValidator":385,"./ReactRef":409}],409:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactRef
   */

  'use strict';

  var ReactOwner = require("./ReactOwner");

  var ReactRef = {};

  function attachRef(ref, component, owner) {
    if (typeof ref === 'function') {
      ref(component.getPublicInstance());
    } else {
      // Legacy ref
      ReactOwner.addComponentAsRefTo(component, ref, owner);
    }
  }

  function detachRef(ref, component, owner) {
    if (typeof ref === 'function') {
      ref(null);
    } else {
      // Legacy ref
      ReactOwner.removeComponentAsRefFrom(component, ref, owner);
    }
  }

  ReactRef.attachRefs = function(instance, element) {
    var ref = element.ref;
    if (ref != null) {
      attachRef(ref, instance, element._owner);
    }
  };

  ReactRef.shouldUpdateRefs = function(prevElement, nextElement) {
    // If either the owner or a `ref` has changed, make sure the newest owner
    // has stored a reference to `this`, and the previous owner (if different)
    // has forgotten the reference to `this`. We use the element instead
    // of the public this.props because the post processing cannot determine
    // a ref. The ref conceptually lives on the element.

    // TODO: Should this even be possible? The owner cannot change because
    // it's forbidden by shouldUpdateReactComponent. The ref can change
    // if you swap the keys of but not the refs. Reconsider where this check
    // is made. It probably belongs where the key checking and
    // instantiateReactComponent is done.

    return (
      nextElement._owner !== prevElement._owner ||
      nextElement.ref !== prevElement.ref
    );
  };

  ReactRef.detachRefs = function(instance, element) {
    var ref = element.ref;
    if (ref != null) {
      detachRef(ref, instance, element._owner);
    }
  };

  module.exports = ReactRef;

},{"./ReactOwner":401}],410:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactRootIndex
   * @typechecks
   */

  'use strict';

  var ReactRootIndexInjection = {
    /**
     * @param {function} _createReactRootIndex
     */
    injectCreateReactRootIndex: function(_createReactRootIndex) {
      ReactRootIndex.createReactRootIndex = _createReactRootIndex;
    }
  };

  var ReactRootIndex = {
    createReactRootIndex: null,
    injection: ReactRootIndexInjection
  };

  module.exports = ReactRootIndex;

},{}],411:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @typechecks static-only
   * @providesModule ReactServerRendering
   */
  'use strict';

  var ReactElement = require("./ReactElement");
  var ReactInstanceHandles = require("./ReactInstanceHandles");
  var ReactMarkupChecksum = require("./ReactMarkupChecksum");
  var ReactServerRenderingTransaction =
    require("./ReactServerRenderingTransaction");

  var emptyObject = require("./emptyObject");
  var instantiateReactComponent = require("./instantiateReactComponent");
  var invariant = require("./invariant");

  /**
   * @param {ReactElement} element
   * @return {string} the HTML markup
   */
  function renderToString(element) {
    ("production" !== "development" ? invariant(
      ReactElement.isValidElement(element),
      'renderToString(): You must pass a valid ReactElement.'
    ) : invariant(ReactElement.isValidElement(element)));

    var transaction;
    try {
      var id = ReactInstanceHandles.createReactRootID();
      transaction = ReactServerRenderingTransaction.getPooled(false);

      return transaction.perform(function() {
        var componentInstance = instantiateReactComponent(element, null);
        var markup =
          componentInstance.mountComponent(id, transaction, emptyObject);
        return ReactMarkupChecksum.addChecksumToMarkup(markup);
      }, null);
    } finally {
      ReactServerRenderingTransaction.release(transaction);
    }
  }

  /**
   * @param {ReactElement} element
   * @return {string} the HTML markup, without the extra React ID and checksum
   * (for generating static pages)
   */
  function renderToStaticMarkup(element) {
    ("production" !== "development" ? invariant(
      ReactElement.isValidElement(element),
      'renderToStaticMarkup(): You must pass a valid ReactElement.'
    ) : invariant(ReactElement.isValidElement(element)));

    var transaction;
    try {
      var id = ReactInstanceHandles.createReactRootID();
      transaction = ReactServerRenderingTransaction.getPooled(true);

      return transaction.perform(function() {
        var componentInstance = instantiateReactComponent(element, null);
        return componentInstance.mountComponent(id, transaction, emptyObject);
      }, null);
    } finally {
      ReactServerRenderingTransaction.release(transaction);
    }
  }

  module.exports = {
    renderToString: renderToString,
    renderToStaticMarkup: renderToStaticMarkup
  };

},{"./ReactElement":384,"./ReactInstanceHandles":393,"./ReactMarkupChecksum":396,"./ReactServerRenderingTransaction":412,"./emptyObject":442,"./instantiateReactComponent":461,"./invariant":462}],412:[function(require,module,exports){
  /**
   * Copyright 2014-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactServerRenderingTransaction
   * @typechecks
   */

  'use strict';

  var PooledClass = require("./PooledClass");
  var CallbackQueue = require("./CallbackQueue");
  var ReactPutListenerQueue = require("./ReactPutListenerQueue");
  var Transaction = require("./Transaction");

  var assign = require("./Object.assign");
  var emptyFunction = require("./emptyFunction");

  /**
   * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
   * during the performing of the transaction.
   */
  var ON_DOM_READY_QUEUEING = {
    /**
     * Initializes the internal `onDOMReady` queue.
     */
    initialize: function() {
      this.reactMountReady.reset();
    },

    close: emptyFunction
  };

  var PUT_LISTENER_QUEUEING = {
    initialize: function() {
      this.putListenerQueue.reset();
    },

    close: emptyFunction
  };

  /**
   * Executed within the scope of the `Transaction` instance. Consider these as
   * being member methods, but with an implied ordering while being isolated from
   * each other.
   */
  var TRANSACTION_WRAPPERS = [
    PUT_LISTENER_QUEUEING,
    ON_DOM_READY_QUEUEING
  ];

  /**
   * @class ReactServerRenderingTransaction
   * @param {boolean} renderToStaticMarkup
   */
  function ReactServerRenderingTransaction(renderToStaticMarkup) {
    this.reinitializeTransaction();
    this.renderToStaticMarkup = renderToStaticMarkup;
    this.reactMountReady = CallbackQueue.getPooled(null);
    this.putListenerQueue = ReactPutListenerQueue.getPooled();
  }

  var Mixin = {
    /**
     * @see Transaction
     * @abstract
     * @final
     * @return {array} Empty list of operation wrap proceedures.
     */
    getTransactionWrappers: function() {
      return TRANSACTION_WRAPPERS;
    },

    /**
     * @return {object} The queue to collect `onDOMReady` callbacks with.
     */
    getReactMountReady: function() {
      return this.reactMountReady;
    },

    getPutListenerQueue: function() {
      return this.putListenerQueue;
    },

    /**
     * `PooledClass` looks for this, and will invoke this before allowing this
     * instance to be resused.
     */
    destructor: function() {
      CallbackQueue.release(this.reactMountReady);
      this.reactMountReady = null;

      ReactPutListenerQueue.release(this.putListenerQueue);
      this.putListenerQueue = null;
    }
  };


  assign(
    ReactServerRenderingTransaction.prototype,
    Transaction.Mixin,
    Mixin
  );

  PooledClass.addPoolingTo(ReactServerRenderingTransaction);

  module.exports = ReactServerRenderingTransaction;

},{"./CallbackQueue":332,"./Object.assign":353,"./PooledClass":354,"./ReactPutListenerQueue":406,"./Transaction":430,"./emptyFunction":441}],413:[function(require,module,exports){
  /**
   * Copyright 2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactUpdateQueue
   */

  'use strict';

  var ReactLifeCycle = require("./ReactLifeCycle");
  var ReactCurrentOwner = require("./ReactCurrentOwner");
  var ReactElement = require("./ReactElement");
  var ReactInstanceMap = require("./ReactInstanceMap");
  var ReactUpdates = require("./ReactUpdates");

  var assign = require("./Object.assign");
  var invariant = require("./invariant");
  var warning = require("./warning");

  function enqueueUpdate(internalInstance) {
    if (internalInstance !== ReactLifeCycle.currentlyMountingInstance) {
      // If we're in a componentWillMount handler, don't enqueue a rerender
      // because ReactUpdates assumes we're in a browser context (which is
      // wrong for server rendering) and we're about to do a render anyway.
      // See bug in #1740.
      ReactUpdates.enqueueUpdate(internalInstance);
    }
  }

  function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
    ("production" !== "development" ? invariant(
      ReactCurrentOwner.current == null,
      '%s(...): Cannot update during an existing state transition ' +
      '(such as within `render`). Render methods should be a pure function ' +
      'of props and state.',
      callerName
    ) : invariant(ReactCurrentOwner.current == null));

    var internalInstance = ReactInstanceMap.get(publicInstance);
    if (!internalInstance) {
      if ("production" !== "development") {
        // Only warn when we have a callerName. Otherwise we should be silent.
        // We're probably calling from enqueueCallback. We don't want to warn
        // there because we already warned for the corresponding lifecycle method.
        ("production" !== "development" ? warning(
          !callerName,
          '%s(...): Can only update a mounted or mounting component. ' +
          'This usually means you called %s() on an unmounted ' +
          'component. This is a no-op.',
          callerName,
          callerName
        ) : null);
      }
      return null;
    }

    if (internalInstance === ReactLifeCycle.currentlyUnmountingInstance) {
      return null;
    }

    return internalInstance;
  }

  /**
   * ReactUpdateQueue allows for state updates to be scheduled into a later
   * reconciliation step.
   */
  var ReactUpdateQueue = {

    /**
     * Enqueue a callback that will be executed after all the pending updates
     * have processed.
     *
     * @param {ReactClass} publicInstance The instance to use as `this` context.
     * @param {?function} callback Called after state is updated.
     * @internal
     */
    enqueueCallback: function(publicInstance, callback) {
      ("production" !== "development" ? invariant(
        typeof callback === 'function',
        'enqueueCallback(...): You called `setProps`, `replaceProps`, ' +
        '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +
        'isn\'t callable.'
      ) : invariant(typeof callback === 'function'));
      var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

      // Previously we would throw an error if we didn't have an internal
      // instance. Since we want to make it a no-op instead, we mirror the same
      // behavior we have in other enqueue* methods.
      // We also need to ignore callbacks in componentWillMount. See
      // enqueueUpdates.
      if (!internalInstance ||
        internalInstance === ReactLifeCycle.currentlyMountingInstance) {
        return null;
      }

      if (internalInstance._pendingCallbacks) {
        internalInstance._pendingCallbacks.push(callback);
      } else {
        internalInstance._pendingCallbacks = [callback];
      }
      // TODO: The callback here is ignored when setState is called from
      // componentWillMount. Either fix it or disallow doing so completely in
      // favor of getInitialState. Alternatively, we can disallow
      // componentWillMount during server-side rendering.
      enqueueUpdate(internalInstance);
    },

    enqueueCallbackInternal: function(internalInstance, callback) {
      ("production" !== "development" ? invariant(
        typeof callback === 'function',
        'enqueueCallback(...): You called `setProps`, `replaceProps`, ' +
        '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +
        'isn\'t callable.'
      ) : invariant(typeof callback === 'function'));
      if (internalInstance._pendingCallbacks) {
        internalInstance._pendingCallbacks.push(callback);
      } else {
        internalInstance._pendingCallbacks = [callback];
      }
      enqueueUpdate(internalInstance);
    },

    /**
     * Forces an update. This should only be invoked when it is known with
     * certainty that we are **not** in a DOM transaction.
     *
     * You may want to call this when you know that some deeper aspect of the
     * component's state has changed but `setState` was not called.
     *
     * This will not invoke `shouldUpdateComponent`, but it will invoke
     * `componentWillUpdate` and `componentDidUpdate`.
     *
     * @param {ReactClass} publicInstance The instance that should rerender.
     * @internal
     */
    enqueueForceUpdate: function(publicInstance) {
      var internalInstance = getInternalInstanceReadyForUpdate(
        publicInstance,
        'forceUpdate'
      );

      if (!internalInstance) {
        return;
      }

      internalInstance._pendingForceUpdate = true;

      enqueueUpdate(internalInstance);
    },

    /**
     * Replaces all of the state. Always use this or `setState` to mutate state.
     * You should treat `this.state` as immutable.
     *
     * There is no guarantee that `this.state` will be immediately updated, so
     * accessing `this.state` after calling this method may return the old value.
     *
     * @param {ReactClass} publicInstance The instance that should rerender.
     * @param {object} completeState Next state.
     * @internal
     */
    enqueueReplaceState: function(publicInstance, completeState) {
      var internalInstance = getInternalInstanceReadyForUpdate(
        publicInstance,
        'replaceState'
      );

      if (!internalInstance) {
        return;
      }

      internalInstance._pendingStateQueue = [completeState];
      internalInstance._pendingReplaceState = true;

      enqueueUpdate(internalInstance);
    },

    /**
     * Sets a subset of the state. This only exists because _pendingState is
     * internal. This provides a merging strategy that is not available to deep
     * properties which is confusing. TODO: Expose pendingState or don't use it
     * during the merge.
     *
     * @param {ReactClass} publicInstance The instance that should rerender.
     * @param {object} partialState Next partial state to be merged with state.
     * @internal
     */
    enqueueSetState: function(publicInstance, partialState) {
      var internalInstance = getInternalInstanceReadyForUpdate(
        publicInstance,
        'setState'
      );

      if (!internalInstance) {
        return;
      }

      var queue =
        internalInstance._pendingStateQueue ||
        (internalInstance._pendingStateQueue = []);
      queue.push(partialState);

      enqueueUpdate(internalInstance);
    },

    /**
     * Sets a subset of the props.
     *
     * @param {ReactClass} publicInstance The instance that should rerender.
     * @param {object} partialProps Subset of the next props.
     * @internal
     */
    enqueueSetProps: function(publicInstance, partialProps) {
      var internalInstance = getInternalInstanceReadyForUpdate(
        publicInstance,
        'setProps'
      );

      if (!internalInstance) {
        return;
      }

      ("production" !== "development" ? invariant(
        internalInstance._isTopLevel,
        'setProps(...): You called `setProps` on a ' +
        'component with a parent. This is an anti-pattern since props will ' +
        'get reactively updated when rendered. Instead, change the owner\'s ' +
        '`render` method to pass the correct value as props to the component ' +
        'where it is created.'
      ) : invariant(internalInstance._isTopLevel));

      // Merge with the pending element if it exists, otherwise with existing
      // element props.
      var element = internalInstance._pendingElement ||
        internalInstance._currentElement;
      var props = assign({}, element.props, partialProps);
      internalInstance._pendingElement = ReactElement.cloneAndReplaceProps(
        element,
        props
      );

      enqueueUpdate(internalInstance);
    },

    /**
     * Replaces all of the props.
     *
     * @param {ReactClass} publicInstance The instance that should rerender.
     * @param {object} props New props.
     * @internal
     */
    enqueueReplaceProps: function(publicInstance, props) {
      var internalInstance = getInternalInstanceReadyForUpdate(
        publicInstance,
        'replaceProps'
      );

      if (!internalInstance) {
        return;
      }

      ("production" !== "development" ? invariant(
        internalInstance._isTopLevel,
        'replaceProps(...): You called `replaceProps` on a ' +
        'component with a parent. This is an anti-pattern since props will ' +
        'get reactively updated when rendered. Instead, change the owner\'s ' +
        '`render` method to pass the correct value as props to the component ' +
        'where it is created.'
      ) : invariant(internalInstance._isTopLevel));

      // Merge with the pending element if it exists, otherwise with existing
      // element props.
      var element = internalInstance._pendingElement ||
        internalInstance._currentElement;
      internalInstance._pendingElement = ReactElement.cloneAndReplaceProps(
        element,
        props
      );

      enqueueUpdate(internalInstance);
    },

    enqueueElementInternal: function(internalInstance, newElement) {
      internalInstance._pendingElement = newElement;
      enqueueUpdate(internalInstance);
    }

  };

  module.exports = ReactUpdateQueue;

},{"./Object.assign":353,"./ReactCurrentOwner":366,"./ReactElement":384,"./ReactInstanceMap":394,"./ReactLifeCycle":395,"./ReactUpdates":414,"./invariant":462,"./warning":481}],414:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ReactUpdates
   */

  'use strict';

  var CallbackQueue = require("./CallbackQueue");
  var PooledClass = require("./PooledClass");
  var ReactCurrentOwner = require("./ReactCurrentOwner");
  var ReactPerf = require("./ReactPerf");
  var ReactReconciler = require("./ReactReconciler");
  var Transaction = require("./Transaction");

  var assign = require("./Object.assign");
  var invariant = require("./invariant");
  var warning = require("./warning");

  var dirtyComponents = [];
  var asapCallbackQueue = CallbackQueue.getPooled();
  var asapEnqueued = false;

  var batchingStrategy = null;

  function ensureInjected() {
    ("production" !== "development" ? invariant(
      ReactUpdates.ReactReconcileTransaction && batchingStrategy,
      'ReactUpdates: must inject a reconcile transaction class and batching ' +
      'strategy'
    ) : invariant(ReactUpdates.ReactReconcileTransaction && batchingStrategy));
  }

  var NESTED_UPDATES = {
    initialize: function() {
      this.dirtyComponentsLength = dirtyComponents.length;
    },
    close: function() {
      if (this.dirtyComponentsLength !== dirtyComponents.length) {
        // Additional updates were enqueued by componentDidUpdate handlers or
        // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
        // these new updates so that if A's componentDidUpdate calls setState on
        // B, B will update before the callback A's updater provided when calling
        // setState.
        dirtyComponents.splice(0, this.dirtyComponentsLength);
        flushBatchedUpdates();
      } else {
        dirtyComponents.length = 0;
      }
    }
  };

  var UPDATE_QUEUEING = {
    initialize: function() {
      this.callbackQueue.reset();
    },
    close: function() {
      this.callbackQueue.notifyAll();
    }
  };

  var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

  function ReactUpdatesFlushTransaction() {
    this.reinitializeTransaction();
    this.dirtyComponentsLength = null;
    this.callbackQueue = CallbackQueue.getPooled();
    this.reconcileTransaction =
      ReactUpdates.ReactReconcileTransaction.getPooled();
  }

  assign(
    ReactUpdatesFlushTransaction.prototype,
    Transaction.Mixin, {
      getTransactionWrappers: function() {
        return TRANSACTION_WRAPPERS;
      },

      destructor: function() {
        this.dirtyComponentsLength = null;
        CallbackQueue.release(this.callbackQueue);
        this.callbackQueue = null;
        ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
        this.reconcileTransaction = null;
      },

      perform: function(method, scope, a) {
        // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
        // with this transaction's wrappers around it.
        return Transaction.Mixin.perform.call(
          this,
          this.reconcileTransaction.perform,
          this.reconcileTransaction,
          method,
          scope,
          a
        );
      }
    });

  PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

  function batchedUpdates(callback, a, b, c, d) {
    ensureInjected();
    batchingStrategy.batchedUpdates(callback, a, b, c, d);
  }

  /**
   * Array comparator for ReactComponents by mount ordering.
   *
   * @param {ReactComponent} c1 first component you're comparing
   * @param {ReactComponent} c2 second component you're comparing
   * @return {number} Return value usable by Array.prototype.sort().
   */
  function mountOrderComparator(c1, c2) {
    return c1._mountOrder - c2._mountOrder;
  }

  function runBatchedUpdates(transaction) {
    var len = transaction.dirtyComponentsLength;
    ("production" !== "development" ? invariant(
      len === dirtyComponents.length,
      'Expected flush transaction\'s stored dirty-components length (%s) to ' +
      'match dirty-components array length (%s).',
      len,
      dirtyComponents.length
    ) : invariant(len === dirtyComponents.length));

    // Since reconciling a component higher in the owner hierarchy usually (not
    // always -- see shouldComponentUpdate()) will reconcile children, reconcile
    // them before their children by sorting the array.
    dirtyComponents.sort(mountOrderComparator);

    for (var i = 0; i < len; i++) {
      // If a component is unmounted before pending changes apply, it will still
      // be here, but we assume that it has cleared its _pendingCallbacks and
      // that performUpdateIfNecessary is a noop.
      var component = dirtyComponents[i];

      // If performUpdateIfNecessary happens to enqueue any new updates, we
      // shouldn't execute the callbacks until the next render happens, so
      // stash the callbacks first
      var callbacks = component._pendingCallbacks;
      component._pendingCallbacks = null;

      ReactReconciler.performUpdateIfNecessary(
        component,
        transaction.reconcileTransaction
      );

      if (callbacks) {
        for (var j = 0; j < callbacks.length; j++) {
          transaction.callbackQueue.enqueue(
            callbacks[j],
            component.getPublicInstance()
          );
        }
      }
    }
  }

  var flushBatchedUpdates = function() {
    // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
    // array and perform any updates enqueued by mount-ready handlers (i.e.,
    // componentDidUpdate) but we need to check here too in order to catch
    // updates enqueued by setState callbacks and asap calls.
    while (dirtyComponents.length || asapEnqueued) {
      if (dirtyComponents.length) {
        var transaction = ReactUpdatesFlushTransaction.getPooled();
        transaction.perform(runBatchedUpdates, null, transaction);
        ReactUpdatesFlushTransaction.release(transaction);
      }

      if (asapEnqueued) {
        asapEnqueued = false;
        var queue = asapCallbackQueue;
        asapCallbackQueue = CallbackQueue.getPooled();
        queue.notifyAll();
        CallbackQueue.release(queue);
      }
    }
  };
  flushBatchedUpdates = ReactPerf.measure(
    'ReactUpdates',
    'flushBatchedUpdates',
    flushBatchedUpdates
  );

  /**
   * Mark a component as needing a rerender, adding an optional callback to a
   * list of functions which will be executed once the rerender occurs.
   */
  function enqueueUpdate(component) {
    ensureInjected();

    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case. (This is called by each top-level update
    // function, like setProps, setState, forceUpdate, etc.; creation and
    // destruction of top-level components is guarded in ReactMount.)
    ("production" !== "development" ? warning(
      ReactCurrentOwner.current == null,
      'enqueueUpdate(): Render methods should be a pure function of props ' +
      'and state; triggering nested component updates from render is not ' +
      'allowed. If necessary, trigger nested updates in ' +
      'componentDidUpdate.'
    ) : null);

    if (!batchingStrategy.isBatchingUpdates) {
      batchingStrategy.batchedUpdates(enqueueUpdate, component);
      return;
    }

    dirtyComponents.push(component);
  }

  /**
   * Enqueue a callback to be run at the end of the current batching cycle. Throws
   * if no updates are currently being performed.
   */
  function asap(callback, context) {
    ("production" !== "development" ? invariant(
      batchingStrategy.isBatchingUpdates,
      'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' +
      'updates are not being batched.'
    ) : invariant(batchingStrategy.isBatchingUpdates));
    asapCallbackQueue.enqueue(callback, context);
    asapEnqueued = true;
  }

  var ReactUpdatesInjection = {
    injectReconcileTransaction: function(ReconcileTransaction) {
      ("production" !== "development" ? invariant(
        ReconcileTransaction,
        'ReactUpdates: must provide a reconcile transaction class'
      ) : invariant(ReconcileTransaction));
      ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
    },

    injectBatchingStrategy: function(_batchingStrategy) {
      ("production" !== "development" ? invariant(
        _batchingStrategy,
        'ReactUpdates: must provide a batching strategy'
      ) : invariant(_batchingStrategy));
      ("production" !== "development" ? invariant(
        typeof _batchingStrategy.batchedUpdates === 'function',
        'ReactUpdates: must provide a batchedUpdates() function'
      ) : invariant(typeof _batchingStrategy.batchedUpdates === 'function'));
      ("production" !== "development" ? invariant(
        typeof _batchingStrategy.isBatchingUpdates === 'boolean',
        'ReactUpdates: must provide an isBatchingUpdates boolean attribute'
      ) : invariant(typeof _batchingStrategy.isBatchingUpdates === 'boolean'));
      batchingStrategy = _batchingStrategy;
    }
  };

  var ReactUpdates = {
    /**
     * React references `ReactReconcileTransaction` using this property in order
     * to allow dependency injection.
     *
     * @internal
     */
    ReactReconcileTransaction: null,

    batchedUpdates: batchedUpdates,
    enqueueUpdate: enqueueUpdate,
    flushBatchedUpdates: flushBatchedUpdates,
    injection: ReactUpdatesInjection,
    asap: asap
  };

  module.exports = ReactUpdates;

},{"./CallbackQueue":332,"./Object.assign":353,"./PooledClass":354,"./ReactCurrentOwner":366,"./ReactPerf":402,"./ReactReconciler":408,"./Transaction":430,"./invariant":462,"./warning":481}],415:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule SVGDOMPropertyConfig
   */

  /*jslint bitwise: true*/

  'use strict';

  var DOMProperty = require("./DOMProperty");

  var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;

  var SVGDOMPropertyConfig = {
    Properties: {
      clipPath: MUST_USE_ATTRIBUTE,
      cx: MUST_USE_ATTRIBUTE,
      cy: MUST_USE_ATTRIBUTE,
      d: MUST_USE_ATTRIBUTE,
      dx: MUST_USE_ATTRIBUTE,
      dy: MUST_USE_ATTRIBUTE,
      fill: MUST_USE_ATTRIBUTE,
      fillOpacity: MUST_USE_ATTRIBUTE,
      fontFamily: MUST_USE_ATTRIBUTE,
      fontSize: MUST_USE_ATTRIBUTE,
      fx: MUST_USE_ATTRIBUTE,
      fy: MUST_USE_ATTRIBUTE,
      gradientTransform: MUST_USE_ATTRIBUTE,
      gradientUnits: MUST_USE_ATTRIBUTE,
      markerEnd: MUST_USE_ATTRIBUTE,
      markerMid: MUST_USE_ATTRIBUTE,
      markerStart: MUST_USE_ATTRIBUTE,
      offset: MUST_USE_ATTRIBUTE,
      opacity: MUST_USE_ATTRIBUTE,
      patternContentUnits: MUST_USE_ATTRIBUTE,
      patternUnits: MUST_USE_ATTRIBUTE,
      points: MUST_USE_ATTRIBUTE,
      preserveAspectRatio: MUST_USE_ATTRIBUTE,
      r: MUST_USE_ATTRIBUTE,
      rx: MUST_USE_ATTRIBUTE,
      ry: MUST_USE_ATTRIBUTE,
      spreadMethod: MUST_USE_ATTRIBUTE,
      stopColor: MUST_USE_ATTRIBUTE,
      stopOpacity: MUST_USE_ATTRIBUTE,
      stroke: MUST_USE_ATTRIBUTE,
      strokeDasharray: MUST_USE_ATTRIBUTE,
      strokeLinecap: MUST_USE_ATTRIBUTE,
      strokeOpacity: MUST_USE_ATTRIBUTE,
      strokeWidth: MUST_USE_ATTRIBUTE,
      textAnchor: MUST_USE_ATTRIBUTE,
      transform: MUST_USE_ATTRIBUTE,
      version: MUST_USE_ATTRIBUTE,
      viewBox: MUST_USE_ATTRIBUTE,
      x1: MUST_USE_ATTRIBUTE,
      x2: MUST_USE_ATTRIBUTE,
      x: MUST_USE_ATTRIBUTE,
      y1: MUST_USE_ATTRIBUTE,
      y2: MUST_USE_ATTRIBUTE,
      y: MUST_USE_ATTRIBUTE
    },
    DOMAttributeNames: {
      clipPath: 'clip-path',
      fillOpacity: 'fill-opacity',
      fontFamily: 'font-family',
      fontSize: 'font-size',
      gradientTransform: 'gradientTransform',
      gradientUnits: 'gradientUnits',
      markerEnd: 'marker-end',
      markerMid: 'marker-mid',
      markerStart: 'marker-start',
      patternContentUnits: 'patternContentUnits',
      patternUnits: 'patternUnits',
      preserveAspectRatio: 'preserveAspectRatio',
      spreadMethod: 'spreadMethod',
      stopColor: 'stop-color',
      stopOpacity: 'stop-opacity',
      strokeDasharray: 'stroke-dasharray',
      strokeLinecap: 'stroke-linecap',
      strokeOpacity: 'stroke-opacity',
      strokeWidth: 'stroke-width',
      textAnchor: 'text-anchor',
      viewBox: 'viewBox'
    }
  };

  module.exports = SVGDOMPropertyConfig;

},{"./DOMProperty":336}],416:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule SelectEventPlugin
   */

  'use strict';

  var EventConstants = require("./EventConstants");
  var EventPropagators = require("./EventPropagators");
  var ReactInputSelection = require("./ReactInputSelection");
  var SyntheticEvent = require("./SyntheticEvent");

  var getActiveElement = require("./getActiveElement");
  var isTextInputElement = require("./isTextInputElement");
  var keyOf = require("./keyOf");
  var shallowEqual = require("./shallowEqual");

  var topLevelTypes = EventConstants.topLevelTypes;

  var eventTypes = {
    select: {
      phasedRegistrationNames: {
        bubbled: keyOf({onSelect: null}),
        captured: keyOf({onSelectCapture: null})
      },
      dependencies: [
        topLevelTypes.topBlur,
        topLevelTypes.topContextMenu,
        topLevelTypes.topFocus,
        topLevelTypes.topKeyDown,
        topLevelTypes.topMouseDown,
        topLevelTypes.topMouseUp,
        topLevelTypes.topSelectionChange
      ]
    }
  };

  var activeElement = null;
  var activeElementID = null;
  var lastSelection = null;
  var mouseDown = false;

  /**
   * Get an object which is a unique representation of the current selection.
   *
   * The return value will not be consistent across nodes or browsers, but
   * two identical selections on the same node will return identical objects.
   *
   * @param {DOMElement} node
   * @param {object}
   */
  function getSelection(node) {
    if ('selectionStart' in node &&
      ReactInputSelection.hasSelectionCapabilities(node)) {
      return {
        start: node.selectionStart,
        end: node.selectionEnd
      };
    } else if (window.getSelection) {
      var selection = window.getSelection();
      return {
        anchorNode: selection.anchorNode,
        anchorOffset: selection.anchorOffset,
        focusNode: selection.focusNode,
        focusOffset: selection.focusOffset
      };
    } else if (document.selection) {
      var range = document.selection.createRange();
      return {
        parentElement: range.parentElement(),
        text: range.text,
        top: range.boundingTop,
        left: range.boundingLeft
      };
    }
  }

  /**
   * Poll selection to see whether it's changed.
   *
   * @param {object} nativeEvent
   * @return {?SyntheticEvent}
   */
  function constructSelectEvent(nativeEvent) {
    // Ensure we have the right element, and that the user is not dragging a
    // selection (this matches native `select` event behavior). In HTML5, select
    // fires only on input and textarea thus if there's no focused element we
    // won't dispatch.
    if (mouseDown ||
      activeElement == null ||
      activeElement !== getActiveElement()) {
      return null;
    }

    // Only fire when selection has actually changed.
    var currentSelection = getSelection(activeElement);
    if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
      lastSelection = currentSelection;

      var syntheticEvent = SyntheticEvent.getPooled(
        eventTypes.select,
        activeElementID,
        nativeEvent
      );

      syntheticEvent.type = 'select';
      syntheticEvent.target = activeElement;

      EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

      return syntheticEvent;
    }
  }

  /**
   * This plugin creates an `onSelect` event that normalizes select events
   * across form elements.
   *
   * Supported elements are:
   * - input (see `isTextInputElement`)
   * - textarea
   * - contentEditable
   *
   * This differs from native browser implementations in the following ways:
   * - Fires on contentEditable fields as well as inputs.
   * - Fires for collapsed selection.
   * - Fires after user input.
   */
  var SelectEventPlugin = {

    eventTypes: eventTypes,

    /**
     * @param {string} topLevelType Record from `EventConstants`.
     * @param {DOMEventTarget} topLevelTarget The listening component root node.
     * @param {string} topLevelTargetID ID of `topLevelTarget`.
     * @param {object} nativeEvent Native browser event.
     * @return {*} An accumulation of synthetic events.
     * @see {EventPluginHub.extractEvents}
     */
    extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

      switch (topLevelType) {
        // Track the input node that has focus.
        case topLevelTypes.topFocus:
          if (isTextInputElement(topLevelTarget) ||
            topLevelTarget.contentEditable === 'true') {
            activeElement = topLevelTarget;
            activeElementID = topLevelTargetID;
            lastSelection = null;
          }
          break;
        case topLevelTypes.topBlur:
          activeElement = null;
          activeElementID = null;
          lastSelection = null;
          break;

        // Don't fire the event while the user is dragging. This matches the
        // semantics of the native select event.
        case topLevelTypes.topMouseDown:
          mouseDown = true;
          break;
        case topLevelTypes.topContextMenu:
        case topLevelTypes.topMouseUp:
          mouseDown = false;
          return constructSelectEvent(nativeEvent);

        // Chrome and IE fire non-standard event when selection is changed (and
        // sometimes when it hasn't).
        // Firefox doesn't support selectionchange, so check selection status
        // after each key entry. The selection changes after keydown and before
        // keyup, but we check on keydown as well in the case of holding down a
        // key, when multiple keydown events are fired but only one keyup is.
        case topLevelTypes.topSelectionChange:
        case topLevelTypes.topKeyDown:
        case topLevelTypes.topKeyUp:
          return constructSelectEvent(nativeEvent);
      }
    }
  };

  module.exports = SelectEventPlugin;

},{"./EventConstants":341,"./EventPropagators":346,"./ReactInputSelection":392,"./SyntheticEvent":422,"./getActiveElement":448,"./isTextInputElement":465,"./keyOf":468,"./shallowEqual":477}],417:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ServerReactRootIndex
   * @typechecks
   */

  'use strict';

  /**
   * Size of the reactRoot ID space. We generate random numbers for React root
   * IDs and if there's a collision the events and DOM update system will
   * get confused. In the future we need a way to generate GUIDs but for
   * now this will work on a smaller scale.
   */
  var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

  var ServerReactRootIndex = {
    createReactRootIndex: function() {
      return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
    }
  };

  module.exports = ServerReactRootIndex;

},{}],418:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule SimpleEventPlugin
   */

  'use strict';

  var EventConstants = require("./EventConstants");
  var EventPluginUtils = require("./EventPluginUtils");
  var EventPropagators = require("./EventPropagators");
  var SyntheticClipboardEvent = require("./SyntheticClipboardEvent");
  var SyntheticEvent = require("./SyntheticEvent");
  var SyntheticFocusEvent = require("./SyntheticFocusEvent");
  var SyntheticKeyboardEvent = require("./SyntheticKeyboardEvent");
  var SyntheticMouseEvent = require("./SyntheticMouseEvent");
  var SyntheticDragEvent = require("./SyntheticDragEvent");
  var SyntheticTouchEvent = require("./SyntheticTouchEvent");
  var SyntheticUIEvent = require("./SyntheticUIEvent");
  var SyntheticWheelEvent = require("./SyntheticWheelEvent");

  var getEventCharCode = require("./getEventCharCode");

  var invariant = require("./invariant");
  var keyOf = require("./keyOf");
  var warning = require("./warning");

  var topLevelTypes = EventConstants.topLevelTypes;

  var eventTypes = {
    blur: {
      phasedRegistrationNames: {
        bubbled: keyOf({onBlur: true}),
        captured: keyOf({onBlurCapture: true})
      }
    },
    click: {
      phasedRegistrationNames: {
        bubbled: keyOf({onClick: true}),
        captured: keyOf({onClickCapture: true})
      }
    },
    contextMenu: {
      phasedRegistrationNames: {
        bubbled: keyOf({onContextMenu: true}),
        captured: keyOf({onContextMenuCapture: true})
      }
    },
    copy: {
      phasedRegistrationNames: {
        bubbled: keyOf({onCopy: true}),
        captured: keyOf({onCopyCapture: true})
      }
    },
    cut: {
      phasedRegistrationNames: {
        bubbled: keyOf({onCut: true}),
        captured: keyOf({onCutCapture: true})
      }
    },
    doubleClick: {
      phasedRegistrationNames: {
        bubbled: keyOf({onDoubleClick: true}),
        captured: keyOf({onDoubleClickCapture: true})
      }
    },
    drag: {
      phasedRegistrationNames: {
        bubbled: keyOf({onDrag: true}),
        captured: keyOf({onDragCapture: true})
      }
    },
    dragEnd: {
      phasedRegistrationNames: {
        bubbled: keyOf({onDragEnd: true}),
        captured: keyOf({onDragEndCapture: true})
      }
    },
    dragEnter: {
      phasedRegistrationNames: {
        bubbled: keyOf({onDragEnter: true}),
        captured: keyOf({onDragEnterCapture: true})
      }
    },
    dragExit: {
      phasedRegistrationNames: {
        bubbled: keyOf({onDragExit: true}),
        captured: keyOf({onDragExitCapture: true})
      }
    },
    dragLeave: {
      phasedRegistrationNames: {
        bubbled: keyOf({onDragLeave: true}),
        captured: keyOf({onDragLeaveCapture: true})
      }
    },
    dragOver: {
      phasedRegistrationNames: {
        bubbled: keyOf({onDragOver: true}),
        captured: keyOf({onDragOverCapture: true})
      }
    },
    dragStart: {
      phasedRegistrationNames: {
        bubbled: keyOf({onDragStart: true}),
        captured: keyOf({onDragStartCapture: true})
      }
    },
    drop: {
      phasedRegistrationNames: {
        bubbled: keyOf({onDrop: true}),
        captured: keyOf({onDropCapture: true})
      }
    },
    focus: {
      phasedRegistrationNames: {
        bubbled: keyOf({onFocus: true}),
        captured: keyOf({onFocusCapture: true})
      }
    },
    input: {
      phasedRegistrationNames: {
        bubbled: keyOf({onInput: true}),
        captured: keyOf({onInputCapture: true})
      }
    },
    keyDown: {
      phasedRegistrationNames: {
        bubbled: keyOf({onKeyDown: true}),
        captured: keyOf({onKeyDownCapture: true})
      }
    },
    keyPress: {
      phasedRegistrationNames: {
        bubbled: keyOf({onKeyPress: true}),
        captured: keyOf({onKeyPressCapture: true})
      }
    },
    keyUp: {
      phasedRegistrationNames: {
        bubbled: keyOf({onKeyUp: true}),
        captured: keyOf({onKeyUpCapture: true})
      }
    },
    load: {
      phasedRegistrationNames: {
        bubbled: keyOf({onLoad: true}),
        captured: keyOf({onLoadCapture: true})
      }
    },
    error: {
      phasedRegistrationNames: {
        bubbled: keyOf({onError: true}),
        captured: keyOf({onErrorCapture: true})
      }
    },
    // Note: We do not allow listening to mouseOver events. Instead, use the
    // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
    mouseDown: {
      phasedRegistrationNames: {
        bubbled: keyOf({onMouseDown: true}),
        captured: keyOf({onMouseDownCapture: true})
      }
    },
    mouseMove: {
      phasedRegistrationNames: {
        bubbled: keyOf({onMouseMove: true}),
        captured: keyOf({onMouseMoveCapture: true})
      }
    },
    mouseOut: {
      phasedRegistrationNames: {
        bubbled: keyOf({onMouseOut: true}),
        captured: keyOf({onMouseOutCapture: true})
      }
    },
    mouseOver: {
      phasedRegistrationNames: {
        bubbled: keyOf({onMouseOver: true}),
        captured: keyOf({onMouseOverCapture: true})
      }
    },
    mouseUp: {
      phasedRegistrationNames: {
        bubbled: keyOf({onMouseUp: true}),
        captured: keyOf({onMouseUpCapture: true})
      }
    },
    paste: {
      phasedRegistrationNames: {
        bubbled: keyOf({onPaste: true}),
        captured: keyOf({onPasteCapture: true})
      }
    },
    reset: {
      phasedRegistrationNames: {
        bubbled: keyOf({onReset: true}),
        captured: keyOf({onResetCapture: true})
      }
    },
    scroll: {
      phasedRegistrationNames: {
        bubbled: keyOf({onScroll: true}),
        captured: keyOf({onScrollCapture: true})
      }
    },
    submit: {
      phasedRegistrationNames: {
        bubbled: keyOf({onSubmit: true}),
        captured: keyOf({onSubmitCapture: true})
      }
    },
    touchCancel: {
      phasedRegistrationNames: {
        bubbled: keyOf({onTouchCancel: true}),
        captured: keyOf({onTouchCancelCapture: true})
      }
    },
    touchEnd: {
      phasedRegistrationNames: {
        bubbled: keyOf({onTouchEnd: true}),
        captured: keyOf({onTouchEndCapture: true})
      }
    },
    touchMove: {
      phasedRegistrationNames: {
        bubbled: keyOf({onTouchMove: true}),
        captured: keyOf({onTouchMoveCapture: true})
      }
    },
    touchStart: {
      phasedRegistrationNames: {
        bubbled: keyOf({onTouchStart: true}),
        captured: keyOf({onTouchStartCapture: true})
      }
    },
    wheel: {
      phasedRegistrationNames: {
        bubbled: keyOf({onWheel: true}),
        captured: keyOf({onWheelCapture: true})
      }
    }
  };

  var topLevelEventsToDispatchConfig = {
    topBlur:        eventTypes.blur,
    topClick:       eventTypes.click,
    topContextMenu: eventTypes.contextMenu,
    topCopy:        eventTypes.copy,
    topCut:         eventTypes.cut,
    topDoubleClick: eventTypes.doubleClick,
    topDrag:        eventTypes.drag,
    topDragEnd:     eventTypes.dragEnd,
    topDragEnter:   eventTypes.dragEnter,
    topDragExit:    eventTypes.dragExit,
    topDragLeave:   eventTypes.dragLeave,
    topDragOver:    eventTypes.dragOver,
    topDragStart:   eventTypes.dragStart,
    topDrop:        eventTypes.drop,
    topError:       eventTypes.error,
    topFocus:       eventTypes.focus,
    topInput:       eventTypes.input,
    topKeyDown:     eventTypes.keyDown,
    topKeyPress:    eventTypes.keyPress,
    topKeyUp:       eventTypes.keyUp,
    topLoad:        eventTypes.load,
    topMouseDown:   eventTypes.mouseDown,
    topMouseMove:   eventTypes.mouseMove,
    topMouseOut:    eventTypes.mouseOut,
    topMouseOver:   eventTypes.mouseOver,
    topMouseUp:     eventTypes.mouseUp,
    topPaste:       eventTypes.paste,
    topReset:       eventTypes.reset,
    topScroll:      eventTypes.scroll,
    topSubmit:      eventTypes.submit,
    topTouchCancel: eventTypes.touchCancel,
    topTouchEnd:    eventTypes.touchEnd,
    topTouchMove:   eventTypes.touchMove,
    topTouchStart:  eventTypes.touchStart,
    topWheel:       eventTypes.wheel
  };

  for (var type in topLevelEventsToDispatchConfig) {
    topLevelEventsToDispatchConfig[type].dependencies = [type];
  }

  var SimpleEventPlugin = {

    eventTypes: eventTypes,

    /**
     * Same as the default implementation, except cancels the event when return
     * value is false. This behavior will be disabled in a future release.
     *
     * @param {object} Event to be dispatched.
     * @param {function} Application-level callback.
     * @param {string} domID DOM ID to pass to the callback.
     */
    executeDispatch: function(event, listener, domID) {
      var returnValue = EventPluginUtils.executeDispatch(event, listener, domID);

      ("production" !== "development" ? warning(
        typeof returnValue !== 'boolean',
        'Returning `false` from an event handler is deprecated and will be ' +
        'ignored in a future release. Instead, manually call ' +
        'e.stopPropagation() or e.preventDefault(), as appropriate.'
      ) : null);

      if (returnValue === false) {
        event.stopPropagation();
        event.preventDefault();
      }
    },

    /**
     * @param {string} topLevelType Record from `EventConstants`.
     * @param {DOMEventTarget} topLevelTarget The listening component root node.
     * @param {string} topLevelTargetID ID of `topLevelTarget`.
     * @param {object} nativeEvent Native browser event.
     * @return {*} An accumulation of synthetic events.
     * @see {EventPluginHub.extractEvents}
     */
    extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
      var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
      if (!dispatchConfig) {
        return null;
      }
      var EventConstructor;
      switch (topLevelType) {
        case topLevelTypes.topInput:
        case topLevelTypes.topLoad:
        case topLevelTypes.topError:
        case topLevelTypes.topReset:
        case topLevelTypes.topSubmit:
          // HTML Events
          // @see http://www.w3.org/TR/html5/index.html#events-0
          EventConstructor = SyntheticEvent;
          break;
        case topLevelTypes.topKeyPress:
          // FireFox creates a keypress event for function keys too. This removes
          // the unwanted keypress events. Enter is however both printable and
          // non-printable. One would expect Tab to be as well (but it isn't).
          if (getEventCharCode(nativeEvent) === 0) {
            return null;
          }
        /* falls through */
        case topLevelTypes.topKeyDown:
        case topLevelTypes.topKeyUp:
          EventConstructor = SyntheticKeyboardEvent;
          break;
        case topLevelTypes.topBlur:
        case topLevelTypes.topFocus:
          EventConstructor = SyntheticFocusEvent;
          break;
        case topLevelTypes.topClick:
          // Firefox creates a click event on right mouse clicks. This removes the
          // unwanted click events.
          if (nativeEvent.button === 2) {
            return null;
          }
        /* falls through */
        case topLevelTypes.topContextMenu:
        case topLevelTypes.topDoubleClick:
        case topLevelTypes.topMouseDown:
        case topLevelTypes.topMouseMove:
        case topLevelTypes.topMouseOut:
        case topLevelTypes.topMouseOver:
        case topLevelTypes.topMouseUp:
          EventConstructor = SyntheticMouseEvent;
          break;
        case topLevelTypes.topDrag:
        case topLevelTypes.topDragEnd:
        case topLevelTypes.topDragEnter:
        case topLevelTypes.topDragExit:
        case topLevelTypes.topDragLeave:
        case topLevelTypes.topDragOver:
        case topLevelTypes.topDragStart:
        case topLevelTypes.topDrop:
          EventConstructor = SyntheticDragEvent;
          break;
        case topLevelTypes.topTouchCancel:
        case topLevelTypes.topTouchEnd:
        case topLevelTypes.topTouchMove:
        case topLevelTypes.topTouchStart:
          EventConstructor = SyntheticTouchEvent;
          break;
        case topLevelTypes.topScroll:
          EventConstructor = SyntheticUIEvent;
          break;
        case topLevelTypes.topWheel:
          EventConstructor = SyntheticWheelEvent;
          break;
        case topLevelTypes.topCopy:
        case topLevelTypes.topCut:
        case topLevelTypes.topPaste:
          EventConstructor = SyntheticClipboardEvent;
          break;
      }
      ("production" !== "development" ? invariant(
        EventConstructor,
        'SimpleEventPlugin: Unhandled event type, `%s`.',
        topLevelType
      ) : invariant(EventConstructor));
      var event = EventConstructor.getPooled(
        dispatchConfig,
        topLevelTargetID,
        nativeEvent
      );
      EventPropagators.accumulateTwoPhaseDispatches(event);
      return event;
    }

  };

  module.exports = SimpleEventPlugin;

},{"./EventConstants":341,"./EventPluginUtils":345,"./EventPropagators":346,"./SyntheticClipboardEvent":419,"./SyntheticDragEvent":421,"./SyntheticEvent":422,"./SyntheticFocusEvent":423,"./SyntheticKeyboardEvent":425,"./SyntheticMouseEvent":426,"./SyntheticTouchEvent":427,"./SyntheticUIEvent":428,"./SyntheticWheelEvent":429,"./getEventCharCode":449,"./invariant":462,"./keyOf":468,"./warning":481}],419:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule SyntheticClipboardEvent
   * @typechecks static-only
   */

  'use strict';

  var SyntheticEvent = require("./SyntheticEvent");

  /**
   * @interface Event
   * @see http://www.w3.org/TR/clipboard-apis/
   */
  var ClipboardEventInterface = {
    clipboardData: function(event) {
      return (
        'clipboardData' in event ?
          event.clipboardData :
          window.clipboardData
      );
    }
  };

  /**
   * @param {object} dispatchConfig Configuration used to dispatch this event.
   * @param {string} dispatchMarker Marker identifying the event target.
   * @param {object} nativeEvent Native browser event.
   * @extends {SyntheticUIEvent}
   */
  function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
    SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
  }

  SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

  module.exports = SyntheticClipboardEvent;

},{"./SyntheticEvent":422}],420:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule SyntheticCompositionEvent
   * @typechecks static-only
   */

  'use strict';

  var SyntheticEvent = require("./SyntheticEvent");

  /**
   * @interface Event
   * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
   */
  var CompositionEventInterface = {
    data: null
  };

  /**
   * @param {object} dispatchConfig Configuration used to dispatch this event.
   * @param {string} dispatchMarker Marker identifying the event target.
   * @param {object} nativeEvent Native browser event.
   * @extends {SyntheticUIEvent}
   */
  function SyntheticCompositionEvent(
    dispatchConfig,
    dispatchMarker,
    nativeEvent) {
    SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
  }

  SyntheticEvent.augmentClass(
    SyntheticCompositionEvent,
    CompositionEventInterface
  );

  module.exports = SyntheticCompositionEvent;

},{"./SyntheticEvent":422}],421:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule SyntheticDragEvent
   * @typechecks static-only
   */

  'use strict';

  var SyntheticMouseEvent = require("./SyntheticMouseEvent");

  /**
   * @interface DragEvent
   * @see http://www.w3.org/TR/DOM-Level-3-Events/
   */
  var DragEventInterface = {
    dataTransfer: null
  };

  /**
   * @param {object} dispatchConfig Configuration used to dispatch this event.
   * @param {string} dispatchMarker Marker identifying the event target.
   * @param {object} nativeEvent Native browser event.
   * @extends {SyntheticUIEvent}
   */
  function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent) {
    SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
  }

  SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

  module.exports = SyntheticDragEvent;

},{"./SyntheticMouseEvent":426}],422:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule SyntheticEvent
   * @typechecks static-only
   */

  'use strict';

  var PooledClass = require("./PooledClass");

  var assign = require("./Object.assign");
  var emptyFunction = require("./emptyFunction");
  var getEventTarget = require("./getEventTarget");

  /**
   * @interface Event
   * @see http://www.w3.org/TR/DOM-Level-3-Events/
   */
  var EventInterface = {
    type: null,
    target: getEventTarget,
    // currentTarget is set when dispatching; no use in copying it here
    currentTarget: emptyFunction.thatReturnsNull,
    eventPhase: null,
    bubbles: null,
    cancelable: null,
    timeStamp: function(event) {
      return event.timeStamp || Date.now();
    },
    defaultPrevented: null,
    isTrusted: null
  };

  /**
   * Synthetic events are dispatched by event plugins, typically in response to a
   * top-level event delegation handler.
   *
   * These systems should generally use pooling to reduce the frequency of garbage
   * collection. The system should check `isPersistent` to determine whether the
   * event should be released into the pool after being dispatched. Users that
   * need a persisted event should invoke `persist`.
   *
   * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
   * normalizing browser quirks. Subclasses do not necessarily have to implement a
   * DOM interface; custom application-specific events can also subclass this.
   *
   * @param {object} dispatchConfig Configuration used to dispatch this event.
   * @param {string} dispatchMarker Marker identifying the event target.
   * @param {object} nativeEvent Native browser event.
   */
  function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent) {
    this.dispatchConfig = dispatchConfig;
    this.dispatchMarker = dispatchMarker;
    this.nativeEvent = nativeEvent;

    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      if (!Interface.hasOwnProperty(propName)) {
        continue;
      }
      var normalize = Interface[propName];
      if (normalize) {
        this[propName] = normalize(nativeEvent);
      } else {
        this[propName] = nativeEvent[propName];
      }
    }

    var defaultPrevented = nativeEvent.defaultPrevented != null ?
      nativeEvent.defaultPrevented :
    nativeEvent.returnValue === false;
    if (defaultPrevented) {
      this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
    } else {
      this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
    }
    this.isPropagationStopped = emptyFunction.thatReturnsFalse;
  }

  assign(SyntheticEvent.prototype, {

    preventDefault: function() {
      this.defaultPrevented = true;
      var event = this.nativeEvent;
      if (event.preventDefault) {
        event.preventDefault();
      } else {
        event.returnValue = false;
      }
      this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
    },

    stopPropagation: function() {
      var event = this.nativeEvent;
      if (event.stopPropagation) {
        event.stopPropagation();
      } else {
        event.cancelBubble = true;
      }
      this.isPropagationStopped = emptyFunction.thatReturnsTrue;
    },

    /**
     * We release all dispatched `SyntheticEvent`s after each event loop, adding
     * them back into the pool. This allows a way to hold onto a reference that
     * won't be added back into the pool.
     */
    persist: function() {
      this.isPersistent = emptyFunction.thatReturnsTrue;
    },

    /**
     * Checks if this event should be released back into the pool.
     *
     * @return {boolean} True if this should not be released, false otherwise.
     */
    isPersistent: emptyFunction.thatReturnsFalse,

    /**
     * `PooledClass` looks for `destructor` on each instance it releases.
     */
    destructor: function() {
      var Interface = this.constructor.Interface;
      for (var propName in Interface) {
        this[propName] = null;
      }
      this.dispatchConfig = null;
      this.dispatchMarker = null;
      this.nativeEvent = null;
    }

  });

  SyntheticEvent.Interface = EventInterface;

  /**
   * Helper to reduce boilerplate when creating subclasses.
   *
   * @param {function} Class
   * @param {?object} Interface
   */
  SyntheticEvent.augmentClass = function(Class, Interface) {
    var Super = this;

    var prototype = Object.create(Super.prototype);
    assign(prototype, Class.prototype);
    Class.prototype = prototype;
    Class.prototype.constructor = Class;

    Class.Interface = assign({}, Super.Interface, Interface);
    Class.augmentClass = Super.augmentClass;

    PooledClass.addPoolingTo(Class, PooledClass.threeArgumentPooler);
  };

  PooledClass.addPoolingTo(SyntheticEvent, PooledClass.threeArgumentPooler);

  module.exports = SyntheticEvent;

},{"./Object.assign":353,"./PooledClass":354,"./emptyFunction":441,"./getEventTarget":452}],423:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule SyntheticFocusEvent
   * @typechecks static-only
   */

  'use strict';

  var SyntheticUIEvent = require("./SyntheticUIEvent");

  /**
   * @interface FocusEvent
   * @see http://www.w3.org/TR/DOM-Level-3-Events/
   */
  var FocusEventInterface = {
    relatedTarget: null
  };

  /**
   * @param {object} dispatchConfig Configuration used to dispatch this event.
   * @param {string} dispatchMarker Marker identifying the event target.
   * @param {object} nativeEvent Native browser event.
   * @extends {SyntheticUIEvent}
   */
  function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent) {
    SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
  }

  SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

  module.exports = SyntheticFocusEvent;

},{"./SyntheticUIEvent":428}],424:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule SyntheticInputEvent
   * @typechecks static-only
   */

  'use strict';

  var SyntheticEvent = require("./SyntheticEvent");

  /**
   * @interface Event
   * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
   *      /#events-inputevents
   */
  var InputEventInterface = {
    data: null
  };

  /**
   * @param {object} dispatchConfig Configuration used to dispatch this event.
   * @param {string} dispatchMarker Marker identifying the event target.
   * @param {object} nativeEvent Native browser event.
   * @extends {SyntheticUIEvent}
   */
  function SyntheticInputEvent(
    dispatchConfig,
    dispatchMarker,
    nativeEvent) {
    SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
  }

  SyntheticEvent.augmentClass(
    SyntheticInputEvent,
    InputEventInterface
  );

  module.exports = SyntheticInputEvent;

},{"./SyntheticEvent":422}],425:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule SyntheticKeyboardEvent
   * @typechecks static-only
   */

  'use strict';

  var SyntheticUIEvent = require("./SyntheticUIEvent");

  var getEventCharCode = require("./getEventCharCode");
  var getEventKey = require("./getEventKey");
  var getEventModifierState = require("./getEventModifierState");

  /**
   * @interface KeyboardEvent
   * @see http://www.w3.org/TR/DOM-Level-3-Events/
   */
  var KeyboardEventInterface = {
    key: getEventKey,
    location: null,
    ctrlKey: null,
    shiftKey: null,
    altKey: null,
    metaKey: null,
    repeat: null,
    locale: null,
    getModifierState: getEventModifierState,
    // Legacy Interface
    charCode: function(event) {
      // `charCode` is the result of a KeyPress event and represents the value of
      // the actual printable character.

      // KeyPress is deprecated, but its replacement is not yet final and not
      // implemented in any major browser. Only KeyPress has charCode.
      if (event.type === 'keypress') {
        return getEventCharCode(event);
      }
      return 0;
    },
    keyCode: function(event) {
      // `keyCode` is the result of a KeyDown/Up event and represents the value of
      // physical keyboard key.

      // The actual meaning of the value depends on the users' keyboard layout
      // which cannot be detected. Assuming that it is a US keyboard layout
      // provides a surprisingly accurate mapping for US and European users.
      // Due to this, it is left to the user to implement at this time.
      if (event.type === 'keydown' || event.type === 'keyup') {
        return event.keyCode;
      }
      return 0;
    },
    which: function(event) {
      // `which` is an alias for either `keyCode` or `charCode` depending on the
      // type of the event.
      if (event.type === 'keypress') {
        return getEventCharCode(event);
      }
      if (event.type === 'keydown' || event.type === 'keyup') {
        return event.keyCode;
      }
      return 0;
    }
  };

  /**
   * @param {object} dispatchConfig Configuration used to dispatch this event.
   * @param {string} dispatchMarker Marker identifying the event target.
   * @param {object} nativeEvent Native browser event.
   * @extends {SyntheticUIEvent}
   */
  function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
    SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
  }

  SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

  module.exports = SyntheticKeyboardEvent;

},{"./SyntheticUIEvent":428,"./getEventCharCode":449,"./getEventKey":450,"./getEventModifierState":451}],426:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule SyntheticMouseEvent
   * @typechecks static-only
   */

  'use strict';

  var SyntheticUIEvent = require("./SyntheticUIEvent");
  var ViewportMetrics = require("./ViewportMetrics");

  var getEventModifierState = require("./getEventModifierState");

  /**
   * @interface MouseEvent
   * @see http://www.w3.org/TR/DOM-Level-3-Events/
   */
  var MouseEventInterface = {
    screenX: null,
    screenY: null,
    clientX: null,
    clientY: null,
    ctrlKey: null,
    shiftKey: null,
    altKey: null,
    metaKey: null,
    getModifierState: getEventModifierState,
    button: function(event) {
      // Webkit, Firefox, IE9+
      // which:  1 2 3
      // button: 0 1 2 (standard)
      var button = event.button;
      if ('which' in event) {
        return button;
      }
      // IE<9
      // which:  undefined
      // button: 0 0 0
      // button: 1 4 2 (onmouseup)
      return button === 2 ? 2 : button === 4 ? 1 : 0;
    },
    buttons: null,
    relatedTarget: function(event) {
      return event.relatedTarget || (
          ((event.fromElement === event.srcElement ? event.toElement : event.fromElement))
        );
    },
    // "Proprietary" Interface.
    pageX: function(event) {
      return 'pageX' in event ?
        event.pageX :
      event.clientX + ViewportMetrics.currentScrollLeft;
    },
    pageY: function(event) {
      return 'pageY' in event ?
        event.pageY :
      event.clientY + ViewportMetrics.currentScrollTop;
    }
  };

  /**
   * @param {object} dispatchConfig Configuration used to dispatch this event.
   * @param {string} dispatchMarker Marker identifying the event target.
   * @param {object} nativeEvent Native browser event.
   * @extends {SyntheticUIEvent}
   */
  function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent) {
    SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
  }

  SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

  module.exports = SyntheticMouseEvent;

},{"./SyntheticUIEvent":428,"./ViewportMetrics":431,"./getEventModifierState":451}],427:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule SyntheticTouchEvent
   * @typechecks static-only
   */

  'use strict';

  var SyntheticUIEvent = require("./SyntheticUIEvent");

  var getEventModifierState = require("./getEventModifierState");

  /**
   * @interface TouchEvent
   * @see http://www.w3.org/TR/touch-events/
   */
  var TouchEventInterface = {
    touches: null,
    targetTouches: null,
    changedTouches: null,
    altKey: null,
    metaKey: null,
    ctrlKey: null,
    shiftKey: null,
    getModifierState: getEventModifierState
  };

  /**
   * @param {object} dispatchConfig Configuration used to dispatch this event.
   * @param {string} dispatchMarker Marker identifying the event target.
   * @param {object} nativeEvent Native browser event.
   * @extends {SyntheticUIEvent}
   */
  function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent) {
    SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
  }

  SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

  module.exports = SyntheticTouchEvent;

},{"./SyntheticUIEvent":428,"./getEventModifierState":451}],428:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule SyntheticUIEvent
   * @typechecks static-only
   */

  'use strict';

  var SyntheticEvent = require("./SyntheticEvent");

  var getEventTarget = require("./getEventTarget");

  /**
   * @interface UIEvent
   * @see http://www.w3.org/TR/DOM-Level-3-Events/
   */
  var UIEventInterface = {
    view: function(event) {
      if (event.view) {
        return event.view;
      }

      var target = getEventTarget(event);
      if (target != null && target.window === target) {
        // target is a window object
        return target;
      }

      var doc = target.ownerDocument;
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      if (doc) {
        return doc.defaultView || doc.parentWindow;
      } else {
        return window;
      }
    },
    detail: function(event) {
      return event.detail || 0;
    }
  };

  /**
   * @param {object} dispatchConfig Configuration used to dispatch this event.
   * @param {string} dispatchMarker Marker identifying the event target.
   * @param {object} nativeEvent Native browser event.
   * @extends {SyntheticEvent}
   */
  function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent) {
    SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
  }

  SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

  module.exports = SyntheticUIEvent;

},{"./SyntheticEvent":422,"./getEventTarget":452}],429:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule SyntheticWheelEvent
   * @typechecks static-only
   */

  'use strict';

  var SyntheticMouseEvent = require("./SyntheticMouseEvent");

  /**
   * @interface WheelEvent
   * @see http://www.w3.org/TR/DOM-Level-3-Events/
   */
  var WheelEventInterface = {
    deltaX: function(event) {
      return (
        'deltaX' in event ? event.deltaX :
          // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
          'wheelDeltaX' in event ? -event.wheelDeltaX : 0
      );
    },
    deltaY: function(event) {
      return (
        'deltaY' in event ? event.deltaY :
          // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
          'wheelDeltaY' in event ? -event.wheelDeltaY :
            // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
            'wheelDelta' in event ? -event.wheelDelta : 0
      );
    },
    deltaZ: null,

    // Browsers without "deltaMode" is reporting in raw wheel delta where one
    // notch on the scroll is always +/- 120, roughly equivalent to pixels.
    // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
    // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
    deltaMode: null
  };

  /**
   * @param {object} dispatchConfig Configuration used to dispatch this event.
   * @param {string} dispatchMarker Marker identifying the event target.
   * @param {object} nativeEvent Native browser event.
   * @extends {SyntheticMouseEvent}
   */
  function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent) {
    SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
  }

  SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

  module.exports = SyntheticWheelEvent;

},{"./SyntheticMouseEvent":426}],430:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule Transaction
   */

  'use strict';

  var invariant = require("./invariant");

  /**
   * `Transaction` creates a black box that is able to wrap any method such that
   * certain invariants are maintained before and after the method is invoked
   * (Even if an exception is thrown while invoking the wrapped method). Whoever
   * instantiates a transaction can provide enforcers of the invariants at
   * creation time. The `Transaction` class itself will supply one additional
   * automatic invariant for you - the invariant that any transaction instance
   * should not be run while it is already being run. You would typically create a
   * single instance of a `Transaction` for reuse multiple times, that potentially
   * is used to wrap several different methods. Wrappers are extremely simple -
   * they only require implementing two methods.
   *
   * <pre>
   *                       wrappers (injected at creation time)
   *                                      +        +
   *                                      |        |
   *                    +-----------------|--------|--------------+
   *                    |                 v        |              |
   *                    |      +---------------+   |              |
   *                    |   +--|    wrapper1   |---|----+         |
   *                    |   |  +---------------+   v    |         |
   *                    |   |          +-------------+  |         |
   *                    |   |     +----|   wrapper2  |--------+   |
   *                    |   |     |    +-------------+  |     |   |
   *                    |   |     |                     |     |   |
   *                    |   v     v                     v     v   | wrapper
   *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
   * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
   * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
   *                    | |   | |   |   |         |   |   | |   | |
   *                    | |   | |   |   |         |   |   | |   | |
   *                    | |   | |   |   |         |   |   | |   | |
   *                    | +---+ +---+   +---------+   +---+ +---+ |
   *                    |  initialize                    close    |
   *                    +-----------------------------------------+
   * </pre>
   *
   * Use cases:
   * - Preserving the input selection ranges before/after reconciliation.
   *   Restoring selection even in the event of an unexpected error.
   * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
   *   while guaranteeing that afterwards, the event system is reactivated.
   * - Flushing a queue of collected DOM mutations to the main UI thread after a
   *   reconciliation takes place in a worker thread.
   * - Invoking any collected `componentDidUpdate` callbacks after rendering new
   *   content.
   * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
   *   to preserve the `scrollTop` (an automatic scroll aware DOM).
   * - (Future use case): Layout calculations before and after DOM updates.
   *
   * Transactional plugin API:
   * - A module that has an `initialize` method that returns any precomputation.
   * - and a `close` method that accepts the precomputation. `close` is invoked
   *   when the wrapped process is completed, or has failed.
   *
   * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
   * that implement `initialize` and `close`.
   * @return {Transaction} Single transaction for reuse in thread.
   *
   * @class Transaction
   */
  var Mixin = {
    /**
     * Sets up this instance so that it is prepared for collecting metrics. Does
     * so such that this setup method may be used on an instance that is already
     * initialized, in a way that does not consume additional memory upon reuse.
     * That can be useful if you decide to make your subclass of this mixin a
     * "PooledClass".
     */
    reinitializeTransaction: function() {
      this.transactionWrappers = this.getTransactionWrappers();
      if (!this.wrapperInitData) {
        this.wrapperInitData = [];
      } else {
        this.wrapperInitData.length = 0;
      }
      this._isInTransaction = false;
    },

    _isInTransaction: false,

    /**
     * @abstract
     * @return {Array<TransactionWrapper>} Array of transaction wrappers.
     */
    getTransactionWrappers: null,

    isInTransaction: function() {
      return !!this._isInTransaction;
    },

    /**
     * Executes the function within a safety window. Use this for the top level
     * methods that result in large amounts of computation/mutations that would
     * need to be safety checked.
     *
     * @param {function} method Member of scope to call.
     * @param {Object} scope Scope to invoke from.
     * @param {Object?=} args... Arguments to pass to the method (optional).
     *                           Helps prevent need to bind in many cases.
     * @return Return value from `method`.
     */
    perform: function(method, scope, a, b, c, d, e, f) {
      ("production" !== "development" ? invariant(
        !this.isInTransaction(),
        'Transaction.perform(...): Cannot initialize a transaction when there ' +
        'is already an outstanding transaction.'
      ) : invariant(!this.isInTransaction()));
      var errorThrown;
      var ret;
      try {
        this._isInTransaction = true;
        // Catching errors makes debugging more difficult, so we start with
        // errorThrown set to true before setting it to false after calling
        // close -- if it's still set to true in the finally block, it means
        // one of these calls threw.
        errorThrown = true;
        this.initializeAll(0);
        ret = method.call(scope, a, b, c, d, e, f);
        errorThrown = false;
      } finally {
        try {
          if (errorThrown) {
            // If `method` throws, prefer to show that stack trace over any thrown
            // by invoking `closeAll`.
            try {
              this.closeAll(0);
            } catch (err) {
            }
          } else {
            // Since `method` didn't throw, we don't want to silence the exception
            // here.
            this.closeAll(0);
          }
        } finally {
          this._isInTransaction = false;
        }
      }
      return ret;
    },

    initializeAll: function(startIndex) {
      var transactionWrappers = this.transactionWrappers;
      for (var i = startIndex; i < transactionWrappers.length; i++) {
        var wrapper = transactionWrappers[i];
        try {
          // Catching errors makes debugging more difficult, so we start with the
          // OBSERVED_ERROR state before overwriting it with the real return value
          // of initialize -- if it's still set to OBSERVED_ERROR in the finally
          // block, it means wrapper.initialize threw.
          this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
          this.wrapperInitData[i] = wrapper.initialize ?
            wrapper.initialize.call(this) :
            null;
        } finally {
          if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
            // The initializer for wrapper i threw an error; initialize the
            // remaining wrappers but silence any exceptions from them to ensure
            // that the first error is the one to bubble up.
            try {
              this.initializeAll(i + 1);
            } catch (err) {
            }
          }
        }
      }
    },

    /**
     * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
     * them the respective return values of `this.transactionWrappers.init[i]`
     * (`close`rs that correspond to initializers that failed will not be
     * invoked).
     */
    closeAll: function(startIndex) {
      ("production" !== "development" ? invariant(
        this.isInTransaction(),
        'Transaction.closeAll(): Cannot close transaction when none are open.'
      ) : invariant(this.isInTransaction()));
      var transactionWrappers = this.transactionWrappers;
      for (var i = startIndex; i < transactionWrappers.length; i++) {
        var wrapper = transactionWrappers[i];
        var initData = this.wrapperInitData[i];
        var errorThrown;
        try {
          // Catching errors makes debugging more difficult, so we start with
          // errorThrown set to true before setting it to false after calling
          // close -- if it's still set to true in the finally block, it means
          // wrapper.close threw.
          errorThrown = true;
          if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {
            wrapper.close.call(this, initData);
          }
          errorThrown = false;
        } finally {
          if (errorThrown) {
            // The closer for wrapper i threw an error; close the remaining
            // wrappers but silence any exceptions from them to ensure that the
            // first error is the one to bubble up.
            try {
              this.closeAll(i + 1);
            } catch (e) {
            }
          }
        }
      }
      this.wrapperInitData.length = 0;
    }
  };

  var Transaction = {

    Mixin: Mixin,

    /**
     * Token to look for to determine if an error occured.
     */
    OBSERVED_ERROR: {}

  };

  module.exports = Transaction;

},{"./invariant":462}],431:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule ViewportMetrics
   */

  'use strict';

  var ViewportMetrics = {

    currentScrollLeft: 0,

    currentScrollTop: 0,

    refreshScrollValues: function(scrollPosition) {
      ViewportMetrics.currentScrollLeft = scrollPosition.x;
      ViewportMetrics.currentScrollTop = scrollPosition.y;
    }

  };

  module.exports = ViewportMetrics;

},{}],432:[function(require,module,exports){
  /**
   * Copyright 2014-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule accumulateInto
   */

  'use strict';

  var invariant = require("./invariant");

  /**
   *
   * Accumulates items that must not be null or undefined into the first one. This
   * is used to conserve memory by avoiding array allocations, and thus sacrifices
   * API cleanness. Since `current` can be null before being passed in and not
   * null after this function, make sure to assign it back to `current`:
   *
   * `a = accumulateInto(a, b);`
   *
   * This API should be sparingly used. Try `accumulate` for something cleaner.
   *
   * @return {*|array<*>} An accumulation of items.
   */

  function accumulateInto(current, next) {
    ("production" !== "development" ? invariant(
      next != null,
      'accumulateInto(...): Accumulated items must not be null or undefined.'
    ) : invariant(next != null));
    if (current == null) {
      return next;
    }

    // Both are not empty. Warning: Never call x.concat(y) when you are not
    // certain that x is an Array (x could be a string with concat method).
    var currentIsArray = Array.isArray(current);
    var nextIsArray = Array.isArray(next);

    if (currentIsArray && nextIsArray) {
      current.push.apply(current, next);
      return current;
    }

    if (currentIsArray) {
      current.push(next);
      return current;
    }

    if (nextIsArray) {
      // A bit too dangerous to mutate `next`.
      return [current].concat(next);
    }

    return [current, next];
  }

  module.exports = accumulateInto;

},{"./invariant":462}],433:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule adler32
   */

  /* jslint bitwise:true */

  'use strict';

  var MOD = 65521;

  // This is a clean-room implementation of adler32 designed for detecting
  // if markup is not what we expect it to be. It does not need to be
  // cryptographically strong, only reasonably good at detecting if markup
  // generated on the server is different than that on the client.
  function adler32(data) {
    var a = 1;
    var b = 0;
    for (var i = 0; i < data.length; i++) {
      a = (a + data.charCodeAt(i)) % MOD;
      b = (b + a) % MOD;
    }
    return a | (b << 16);
  }

  module.exports = adler32;

},{}],434:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule camelize
   * @typechecks
   */

  var _hyphenPattern = /-(.)/g;

  /**
   * Camelcases a hyphenated string, for example:
   *
   *   > camelize('background-color')
   *   < "backgroundColor"
   *
   * @param {string} string
   * @return {string}
   */
  function camelize(string) {
    return string.replace(_hyphenPattern, function(_, character) {
      return character.toUpperCase();
    });
  }

  module.exports = camelize;

},{}],435:[function(require,module,exports){
  /**
   * Copyright 2014-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule camelizeStyleName
   * @typechecks
   */

  "use strict";

  var camelize = require("./camelize");

  var msPattern = /^-ms-/;

  /**
   * Camelcases a hyphenated CSS property name, for example:
   *
   *   > camelizeStyleName('background-color')
   *   < "backgroundColor"
   *   > camelizeStyleName('-moz-transition')
   *   < "MozTransition"
   *   > camelizeStyleName('-ms-transition')
   *   < "msTransition"
   *
   * As Andi Smith suggests
   * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
   * is converted to lowercase `ms`.
   *
   * @param {string} string
   * @return {string}
   */
  function camelizeStyleName(string) {
    return camelize(string.replace(msPattern, 'ms-'));
  }

  module.exports = camelizeStyleName;

},{"./camelize":434}],436:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule containsNode
   * @typechecks
   */

  var isTextNode = require("./isTextNode");

  /*jslint bitwise:true */

  /**
   * Checks if a given DOM node contains or is another DOM node.
   *
   * @param {?DOMNode} outerNode Outer DOM node.
   * @param {?DOMNode} innerNode Inner DOM node.
   * @return {boolean} True if `outerNode` contains or is `innerNode`.
   */
  function containsNode(outerNode, innerNode) {
    if (!outerNode || !innerNode) {
      return false;
    } else if (outerNode === innerNode) {
      return true;
    } else if (isTextNode(outerNode)) {
      return false;
    } else if (isTextNode(innerNode)) {
      return containsNode(outerNode, innerNode.parentNode);
    } else if (outerNode.contains) {
      return outerNode.contains(innerNode);
    } else if (outerNode.compareDocumentPosition) {
      return !!(outerNode.compareDocumentPosition(innerNode) & 16);
    } else {
      return false;
    }
  }

  module.exports = containsNode;

},{"./isTextNode":466}],437:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule createArrayFromMixed
   * @typechecks
   */

  var toArray = require("./toArray");

  /**
   * Perform a heuristic test to determine if an object is "array-like".
   *
   *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
   *   Joshu replied: "Mu."
   *
   * This function determines if its argument has "array nature": it returns
   * true if the argument is an actual array, an `arguments' object, or an
   * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
   *
   * It will return false for other array-like objects like Filelist.
   *
   * @param {*} obj
   * @return {boolean}
   */
  function hasArrayNature(obj) {
    return (
      // not null/false
      !!obj &&
      // arrays are objects, NodeLists are functions in Safari
      (typeof obj == 'object' || typeof obj == 'function') &&
      // quacks like an array
      ('length' in obj) &&
      // not window
      !('setInterval' in obj) &&
      // no DOM node should be considered an array-like
      // a 'select' element has 'length' and 'item' properties on IE8
      (typeof obj.nodeType != 'number') &&
      (
        // a real array
        (// HTMLCollection/NodeList
          (Array.isArray(obj) ||
          // arguments
          ('callee' in obj) || 'item' in obj))
      )
    );
  }

  /**
   * Ensure that the argument is an array by wrapping it in an array if it is not.
   * Creates a copy of the argument if it is already an array.
   *
   * This is mostly useful idiomatically:
   *
   *   var createArrayFromMixed = require('createArrayFromMixed');
   *
   *   function takesOneOrMoreThings(things) {
 *     things = createArrayFromMixed(things);
 *     ...
 *   }
   *
   * This allows you to treat `things' as an array, but accept scalars in the API.
   *
   * If you need to convert an array-like object, like `arguments`, into an array
   * use toArray instead.
   *
   * @param {*} obj
   * @return {array}
   */
  function createArrayFromMixed(obj) {
    if (!hasArrayNature(obj)) {
      return [obj];
    } else if (Array.isArray(obj)) {
      return obj.slice();
    } else {
      return toArray(obj);
    }
  }

  module.exports = createArrayFromMixed;

},{"./toArray":479}],438:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule createFullPageComponent
   * @typechecks
   */

  'use strict';

  // Defeat circular references by requiring this directly.
  var ReactClass = require("./ReactClass");
  var ReactElement = require("./ReactElement");

  var invariant = require("./invariant");

  /**
   * Create a component that will throw an exception when unmounted.
   *
   * Components like <html> <head> and <body> can't be removed or added
   * easily in a cross-browser way, however it's valuable to be able to
   * take advantage of React's reconciliation for styling and <title>
   * management. So we just document it and throw in dangerous cases.
   *
   * @param {string} tag The tag to wrap
   * @return {function} convenience constructor of new component
   */
  function createFullPageComponent(tag) {
    var elementFactory = ReactElement.createFactory(tag);

    var FullPageComponent = ReactClass.createClass({
      tagName: tag.toUpperCase(),
      displayName: 'ReactFullPageComponent' + tag,

      componentWillUnmount: function() {
        ("production" !== "development" ? invariant(
          false,
          '%s tried to unmount. Because of cross-browser quirks it is ' +
          'impossible to unmount some top-level components (eg <html>, <head>, ' +
          'and <body>) reliably and efficiently. To fix this, have a single ' +
          'top-level component that never unmounts render these elements.',
          this.constructor.displayName
        ) : invariant(false));
      },

      render: function() {
        return elementFactory(this.props);
      }
    });

    return FullPageComponent;
  }

  module.exports = createFullPageComponent;

},{"./ReactClass":360,"./ReactElement":384,"./invariant":462}],439:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule createNodesFromMarkup
   * @typechecks
   */

  /*jslint evil: true, sub: true */

  var ExecutionEnvironment = require("./ExecutionEnvironment");

  var createArrayFromMixed = require("./createArrayFromMixed");
  var getMarkupWrap = require("./getMarkupWrap");
  var invariant = require("./invariant");

  /**
   * Dummy container used to render all markup.
   */
  var dummyNode =
    ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

  /**
   * Pattern used by `getNodeName`.
   */
  var nodeNamePattern = /^\s*<(\w+)/;

  /**
   * Extracts the `nodeName` of the first element in a string of markup.
   *
   * @param {string} markup String of markup.
   * @return {?string} Node name of the supplied markup.
   */
  function getNodeName(markup) {
    var nodeNameMatch = markup.match(nodeNamePattern);
    return nodeNameMatch && nodeNameMatch[1].toLowerCase();
  }

  /**
   * Creates an array containing the nodes rendered from the supplied markup. The
   * optionally supplied `handleScript` function will be invoked once for each
   * <script> element that is rendered. If no `handleScript` function is supplied,
   * an exception is thrown if any <script> elements are rendered.
   *
   * @param {string} markup A string of valid HTML markup.
   * @param {?function} handleScript Invoked once for each rendered <script>.
   * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
   */
  function createNodesFromMarkup(markup, handleScript) {
    var node = dummyNode;
    ("production" !== "development" ? invariant(!!dummyNode, 'createNodesFromMarkup dummy not initialized') : invariant(!!dummyNode));
    var nodeName = getNodeName(markup);

    var wrap = nodeName && getMarkupWrap(nodeName);
    if (wrap) {
      node.innerHTML = wrap[1] + markup + wrap[2];

      var wrapDepth = wrap[0];
      while (wrapDepth--) {
        node = node.lastChild;
      }
    } else {
      node.innerHTML = markup;
    }

    var scripts = node.getElementsByTagName('script');
    if (scripts.length) {
      ("production" !== "development" ? invariant(
        handleScript,
        'createNodesFromMarkup(...): Unexpected <script> element rendered.'
      ) : invariant(handleScript));
      createArrayFromMixed(scripts).forEach(handleScript);
    }

    var nodes = createArrayFromMixed(node.childNodes);
    while (node.lastChild) {
      node.removeChild(node.lastChild);
    }
    return nodes;
  }

  module.exports = createNodesFromMarkup;

},{"./ExecutionEnvironment":347,"./createArrayFromMixed":437,"./getMarkupWrap":454,"./invariant":462}],440:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule dangerousStyleValue
   * @typechecks static-only
   */

  'use strict';

  var CSSProperty = require("./CSSProperty");

  var isUnitlessNumber = CSSProperty.isUnitlessNumber;

  /**
   * Convert a value into the proper css writable value. The style name `name`
   * should be logical (no hyphens), as specified
   * in `CSSProperty.isUnitlessNumber`.
   *
   * @param {string} name CSS property name such as `topMargin`.
   * @param {*} value CSS property value such as `10px`.
   * @return {string} Normalized style value with dimensions applied.
   */
  function dangerousStyleValue(name, value) {
    // Note that we've removed escapeTextForBrowser() calls here since the
    // whole string will be escaped when the attribute is injected into
    // the markup. If you provide unsafe user data here they can inject
    // arbitrary CSS which may be problematic (I couldn't repro this):
    // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
    // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
    // This is not an XSS hole but instead a potential CSS injection issue
    // which has lead to a greater discussion about how we're going to
    // trust URLs moving forward. See #2115901

    var isEmpty = value == null || typeof value === 'boolean' || value === '';
    if (isEmpty) {
      return '';
    }

    var isNonNumeric = isNaN(value);
    if (isNonNumeric || value === 0 ||
      isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
      return '' + value; // cast to string
    }

    if (typeof value === 'string') {
      value = value.trim();
    }
    return value + 'px';
  }

  module.exports = dangerousStyleValue;

},{"./CSSProperty":330}],441:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule emptyFunction
   */

  function makeEmptyFunction(arg) {
    return function() {
      return arg;
    };
  }

  /**
   * This function accepts and discards inputs; it has no side effects. This is
   * primarily useful idiomatically for overridable function endpoints which
   * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
   */
  function emptyFunction() {}

  emptyFunction.thatReturns = makeEmptyFunction;
  emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
  emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
  emptyFunction.thatReturnsNull = makeEmptyFunction(null);
  emptyFunction.thatReturnsThis = function() { return this; };
  emptyFunction.thatReturnsArgument = function(arg) { return arg; };

  module.exports = emptyFunction;

},{}],442:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule emptyObject
   */

  "use strict";

  var emptyObject = {};

  if ("production" !== "development") {
    Object.freeze(emptyObject);
  }

  module.exports = emptyObject;

},{}],443:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule escapeTextContentForBrowser
   */

  'use strict';

  var ESCAPE_LOOKUP = {
    '&': '&amp;',
    '>': '&gt;',
    '<': '&lt;',
    '"': '&quot;',
    '\'': '&#x27;'
  };

  var ESCAPE_REGEX = /[&><"']/g;

  function escaper(match) {
    return ESCAPE_LOOKUP[match];
  }

  /**
   * Escapes text to prevent scripting attacks.
   *
   * @param {*} text Text value to escape.
   * @return {string} An escaped string.
   */
  function escapeTextContentForBrowser(text) {
    return ('' + text).replace(ESCAPE_REGEX, escaper);
  }

  module.exports = escapeTextContentForBrowser;

},{}],444:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule findDOMNode
   * @typechecks static-only
   */

  'use strict';

  var ReactCurrentOwner = require("./ReactCurrentOwner");
  var ReactInstanceMap = require("./ReactInstanceMap");
  var ReactMount = require("./ReactMount");

  var invariant = require("./invariant");
  var isNode = require("./isNode");
  var warning = require("./warning");

  /**
   * Returns the DOM node rendered by this element.
   *
   * @param {ReactComponent|DOMElement} componentOrElement
   * @return {DOMElement} The root node of this element.
   */
  function findDOMNode(componentOrElement) {
    if ("production" !== "development") {
      var owner = ReactCurrentOwner.current;
      if (owner !== null) {
        ("production" !== "development" ? warning(
          owner._warnedAboutRefsInRender,
          '%s is accessing getDOMNode or findDOMNode inside its render(). ' +
          'render() should be a pure function of props and state. It should ' +
          'never access something that requires stale data from the previous ' +
          'render, such as refs. Move this logic to componentDidMount and ' +
          'componentDidUpdate instead.',
          owner.getName() || 'A component'
        ) : null);
        owner._warnedAboutRefsInRender = true;
      }
    }
    if (componentOrElement == null) {
      return null;
    }
    if (isNode(componentOrElement)) {
      return componentOrElement;
    }
    if (ReactInstanceMap.has(componentOrElement)) {
      return ReactMount.getNodeFromInstance(componentOrElement);
    }
    ("production" !== "development" ? invariant(
      componentOrElement.render == null ||
      typeof componentOrElement.render !== 'function',
      'Component (with keys: %s) contains `render` method ' +
      'but is not mounted in the DOM',
      Object.keys(componentOrElement)
    ) : invariant(componentOrElement.render == null ||
      typeof componentOrElement.render !== 'function'));
    ("production" !== "development" ? invariant(
      false,
      'Element appears to be neither ReactComponent nor DOMNode (keys: %s)',
      Object.keys(componentOrElement)
    ) : invariant(false));
  }

  module.exports = findDOMNode;

},{"./ReactCurrentOwner":366,"./ReactInstanceMap":394,"./ReactMount":397,"./invariant":462,"./isNode":464,"./warning":481}],445:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule flattenChildren
   */

  'use strict';

  var traverseAllChildren = require("./traverseAllChildren");
  var warning = require("./warning");

  /**
   * @param {function} traverseContext Context passed through traversal.
   * @param {?ReactComponent} child React child component.
   * @param {!string} name String name of key path to child.
   */
  function flattenSingleChildIntoContext(traverseContext, child, name) {
    // We found a component instance.
    var result = traverseContext;
    var keyUnique = !result.hasOwnProperty(name);
    if ("production" !== "development") {
      ("production" !== "development" ? warning(
        keyUnique,
        'flattenChildren(...): Encountered two children with the same key, ' +
        '`%s`. Child keys must be unique; when two children share a key, only ' +
        'the first child will be used.',
        name
      ) : null);
    }
    if (keyUnique && child != null) {
      result[name] = child;
    }
  }

  /**
   * Flattens children that are typically specified as `props.children`. Any null
   * children will not be included in the resulting object.
   * @return {!object} flattened children keyed by name.
   */
  function flattenChildren(children) {
    if (children == null) {
      return children;
    }
    var result = {};
    traverseAllChildren(children, flattenSingleChildIntoContext, result);
    return result;
  }

  module.exports = flattenChildren;

},{"./traverseAllChildren":480,"./warning":481}],446:[function(require,module,exports){
  /**
   * Copyright 2014-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule focusNode
   */

  "use strict";

  /**
   * @param {DOMElement} node input/textarea to focus
   */
  function focusNode(node) {
    // IE8 can throw "Can't move focus to the control because it is invisible,
    // not enabled, or of a type that does not accept the focus." for all kinds of
    // reasons that are too expensive and fragile to test.
    try {
      node.focus();
    } catch(e) {
    }
  }

  module.exports = focusNode;

},{}],447:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule forEachAccumulated
   */

  'use strict';

  /**
   * @param {array} an "accumulation" of items which is either an Array or
   * a single item. Useful when paired with the `accumulate` module. This is a
   * simple utility that allows us to reason about a collection of items, but
   * handling the case when there is exactly one item (and we do not need to
   * allocate an array).
   */
  var forEachAccumulated = function(arr, cb, scope) {
    if (Array.isArray(arr)) {
      arr.forEach(cb, scope);
    } else if (arr) {
      cb.call(scope, arr);
    }
  };

  module.exports = forEachAccumulated;

},{}],448:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule getActiveElement
   * @typechecks
   */

  /**
   * Same as document.activeElement but wraps in a try-catch block. In IE it is
   * not safe to call document.activeElement if there is nothing focused.
   *
   * The activeElement will be null only if the document body is not yet defined.
   */
  function getActiveElement() /*?DOMElement*/ {
    try {
      return document.activeElement || document.body;
    } catch (e) {
      return document.body;
    }
  }

  module.exports = getActiveElement;

},{}],449:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule getEventCharCode
   * @typechecks static-only
   */

  'use strict';

  /**
   * `charCode` represents the actual "character code" and is safe to use with
   * `String.fromCharCode`. As such, only keys that correspond to printable
   * characters produce a valid `charCode`, the only exception to this is Enter.
   * The Tab-key is considered non-printable and does not have a `charCode`,
   * presumably because it does not produce a tab-character in browsers.
   *
   * @param {object} nativeEvent Native browser event.
   * @return {string} Normalized `charCode` property.
   */
  function getEventCharCode(nativeEvent) {
    var charCode;
    var keyCode = nativeEvent.keyCode;

    if ('charCode' in nativeEvent) {
      charCode = nativeEvent.charCode;

      // FF does not set `charCode` for the Enter-key, check against `keyCode`.
      if (charCode === 0 && keyCode === 13) {
        charCode = 13;
      }
    } else {
      // IE8 does not implement `charCode`, but `keyCode` has the correct value.
      charCode = keyCode;
    }

    // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
    // Must not discard the (non-)printable Enter-key.
    if (charCode >= 32 || charCode === 13) {
      return charCode;
    }

    return 0;
  }

  module.exports = getEventCharCode;

},{}],450:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule getEventKey
   * @typechecks static-only
   */

  'use strict';

  var getEventCharCode = require("./getEventCharCode");

  /**
   * Normalization of deprecated HTML5 `key` values
   * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
   */
  var normalizeKey = {
    'Esc': 'Escape',
    'Spacebar': ' ',
    'Left': 'ArrowLeft',
    'Up': 'ArrowUp',
    'Right': 'ArrowRight',
    'Down': 'ArrowDown',
    'Del': 'Delete',
    'Win': 'OS',
    'Menu': 'ContextMenu',
    'Apps': 'ContextMenu',
    'Scroll': 'ScrollLock',
    'MozPrintableKey': 'Unidentified'
  };

  /**
   * Translation from legacy `keyCode` to HTML5 `key`
   * Only special keys supported, all others depend on keyboard layout or browser
   * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
   */
  var translateToKey = {
    8: 'Backspace',
    9: 'Tab',
    12: 'Clear',
    13: 'Enter',
    16: 'Shift',
    17: 'Control',
    18: 'Alt',
    19: 'Pause',
    20: 'CapsLock',
    27: 'Escape',
    32: ' ',
    33: 'PageUp',
    34: 'PageDown',
    35: 'End',
    36: 'Home',
    37: 'ArrowLeft',
    38: 'ArrowUp',
    39: 'ArrowRight',
    40: 'ArrowDown',
    45: 'Insert',
    46: 'Delete',
    112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
    118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
    144: 'NumLock',
    145: 'ScrollLock',
    224: 'Meta'
  };

  /**
   * @param {object} nativeEvent Native browser event.
   * @return {string} Normalized `key` property.
   */
  function getEventKey(nativeEvent) {
    if (nativeEvent.key) {
      // Normalize inconsistent values reported by browsers due to
      // implementations of a working draft specification.

      // FireFox implements `key` but returns `MozPrintableKey` for all
      // printable characters (normalized to `Unidentified`), ignore it.
      var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
      if (key !== 'Unidentified') {
        return key;
      }
    }

    // Browser does not implement `key`, polyfill as much of it as we can.
    if (nativeEvent.type === 'keypress') {
      var charCode = getEventCharCode(nativeEvent);

      // The enter-key is technically both printable and non-printable and can
      // thus be captured by `keypress`, no other non-printable key should.
      return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
    }
    if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
      // While user keyboard layout determines the actual meaning of each
      // `keyCode` value, almost all function keys have a universal value.
      return translateToKey[nativeEvent.keyCode] || 'Unidentified';
    }
    return '';
  }

  module.exports = getEventKey;

},{"./getEventCharCode":449}],451:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule getEventModifierState
   * @typechecks static-only
   */

  'use strict';

  /**
   * Translation from modifier key to the associated property in the event.
   * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
   */

  var modifierKeyToProp = {
    'Alt': 'altKey',
    'Control': 'ctrlKey',
    'Meta': 'metaKey',
    'Shift': 'shiftKey'
  };

  // IE8 does not implement getModifierState so we simply map it to the only
  // modifier keys exposed by the event itself, does not support Lock-keys.
  // Currently, all major browsers except Chrome seems to support Lock-keys.
  function modifierStateGetter(keyArg) {
    /*jshint validthis:true */
    var syntheticEvent = this;
    var nativeEvent = syntheticEvent.nativeEvent;
    if (nativeEvent.getModifierState) {
      return nativeEvent.getModifierState(keyArg);
    }
    var keyProp = modifierKeyToProp[keyArg];
    return keyProp ? !!nativeEvent[keyProp] : false;
  }

  function getEventModifierState(nativeEvent) {
    return modifierStateGetter;
  }

  module.exports = getEventModifierState;

},{}],452:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule getEventTarget
   * @typechecks static-only
   */

  'use strict';

  /**
   * Gets the target node from a native browser event by accounting for
   * inconsistencies in browser DOM APIs.
   *
   * @param {object} nativeEvent Native browser event.
   * @return {DOMEventTarget} Target node.
   */
  function getEventTarget(nativeEvent) {
    var target = nativeEvent.target || nativeEvent.srcElement || window;
    // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
    // @see http://www.quirksmode.org/js/events_properties.html
    return target.nodeType === 3 ? target.parentNode : target;
  }

  module.exports = getEventTarget;

},{}],453:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule getIteratorFn
   * @typechecks static-only
   */

  'use strict';

  /* global Symbol */
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

  /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
 *       var iterator = iteratorFn.call(myIterable);
 *       ...
 *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (
        (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL])
      );
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  module.exports = getIteratorFn;

},{}],454:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule getMarkupWrap
   */

  var ExecutionEnvironment = require("./ExecutionEnvironment");

  var invariant = require("./invariant");

  /**
   * Dummy container used to detect which wraps are necessary.
   */
  var dummyNode =
    ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

  /**
   * Some browsers cannot use `innerHTML` to render certain elements standalone,
   * so we wrap them, render the wrapped nodes, then extract the desired node.
   *
   * In IE8, certain elements cannot render alone, so wrap all elements ('*').
   */
  var shouldWrap = {
    // Force wrapping for SVG elements because if they get created inside a <div>,
    // they will be initialized in the wrong namespace (and will not display).
    'circle': true,
    'clipPath': true,
    'defs': true,
    'ellipse': true,
    'g': true,
    'line': true,
    'linearGradient': true,
    'path': true,
    'polygon': true,
    'polyline': true,
    'radialGradient': true,
    'rect': true,
    'stop': true,
    'text': true
  };

  var selectWrap = [1, '<select multiple="true">', '</select>'];
  var tableWrap = [1, '<table>', '</table>'];
  var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

  var svgWrap = [1, '<svg>', '</svg>'];

  var markupWrap = {
    '*': [1, '?<div>', '</div>'],

    'area': [1, '<map>', '</map>'],
    'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
    'legend': [1, '<fieldset>', '</fieldset>'],
    'param': [1, '<object>', '</object>'],
    'tr': [2, '<table><tbody>', '</tbody></table>'],

    'optgroup': selectWrap,
    'option': selectWrap,

    'caption': tableWrap,
    'colgroup': tableWrap,
    'tbody': tableWrap,
    'tfoot': tableWrap,
    'thead': tableWrap,

    'td': trWrap,
    'th': trWrap,

    'circle': svgWrap,
    'clipPath': svgWrap,
    'defs': svgWrap,
    'ellipse': svgWrap,
    'g': svgWrap,
    'line': svgWrap,
    'linearGradient': svgWrap,
    'path': svgWrap,
    'polygon': svgWrap,
    'polyline': svgWrap,
    'radialGradient': svgWrap,
    'rect': svgWrap,
    'stop': svgWrap,
    'text': svgWrap
  };

  /**
   * Gets the markup wrap configuration for the supplied `nodeName`.
   *
   * NOTE: This lazily detects which wraps are necessary for the current browser.
   *
   * @param {string} nodeName Lowercase `nodeName`.
   * @return {?array} Markup wrap configuration, if applicable.
   */
  function getMarkupWrap(nodeName) {
    ("production" !== "development" ? invariant(!!dummyNode, 'Markup wrapping node not initialized') : invariant(!!dummyNode));
    if (!markupWrap.hasOwnProperty(nodeName)) {
      nodeName = '*';
    }
    if (!shouldWrap.hasOwnProperty(nodeName)) {
      if (nodeName === '*') {
        dummyNode.innerHTML = '<link />';
      } else {
        dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
      }
      shouldWrap[nodeName] = !dummyNode.firstChild;
    }
    return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
  }


  module.exports = getMarkupWrap;

},{"./ExecutionEnvironment":347,"./invariant":462}],455:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule getNodeForCharacterOffset
   */

  'use strict';

  /**
   * Given any node return the first leaf node without children.
   *
   * @param {DOMElement|DOMTextNode} node
   * @return {DOMElement|DOMTextNode}
   */
  function getLeafNode(node) {
    while (node && node.firstChild) {
      node = node.firstChild;
    }
    return node;
  }

  /**
   * Get the next sibling within a container. This will walk up the
   * DOM if a node's siblings have been exhausted.
   *
   * @param {DOMElement|DOMTextNode} node
   * @return {?DOMElement|DOMTextNode}
   */
  function getSiblingNode(node) {
    while (node) {
      if (node.nextSibling) {
        return node.nextSibling;
      }
      node = node.parentNode;
    }
  }

  /**
   * Get object describing the nodes which contain characters at offset.
   *
   * @param {DOMElement|DOMTextNode} root
   * @param {number} offset
   * @return {?object}
   */
  function getNodeForCharacterOffset(root, offset) {
    var node = getLeafNode(root);
    var nodeStart = 0;
    var nodeEnd = 0;

    while (node) {
      if (node.nodeType === 3) {
        nodeEnd = nodeStart + node.textContent.length;

        if (nodeStart <= offset && nodeEnd >= offset) {
          return {
            node: node,
            offset: offset - nodeStart
          };
        }

        nodeStart = nodeEnd;
      }

      node = getLeafNode(getSiblingNode(node));
    }
  }

  module.exports = getNodeForCharacterOffset;

},{}],456:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule getReactRootElementInContainer
   */

  'use strict';

  var DOC_NODE_TYPE = 9;

  /**
   * @param {DOMElement|DOMDocument} container DOM element that may contain
   *                                           a React component
   * @return {?*} DOM element that may have the reactRoot ID, or null.
   */
  function getReactRootElementInContainer(container) {
    if (!container) {
      return null;
    }

    if (container.nodeType === DOC_NODE_TYPE) {
      return container.documentElement;
    } else {
      return container.firstChild;
    }
  }

  module.exports = getReactRootElementInContainer;

},{}],457:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule getTextContentAccessor
   */

  'use strict';

  var ExecutionEnvironment = require("./ExecutionEnvironment");

  var contentKey = null;

  /**
   * Gets the key used to access text content on a DOM node.
   *
   * @return {?string} Key used to access text content.
   * @internal
   */
  function getTextContentAccessor() {
    if (!contentKey && ExecutionEnvironment.canUseDOM) {
      // Prefer textContent to innerText because many browsers support both but
      // SVG <text> elements don't support innerText even when <div> does.
      contentKey = 'textContent' in document.documentElement ?
        'textContent' :
        'innerText';
    }
    return contentKey;
  }

  module.exports = getTextContentAccessor;

},{"./ExecutionEnvironment":347}],458:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule getUnboundedScrollPosition
   * @typechecks
   */

  "use strict";

  /**
   * Gets the scroll position of the supplied element or window.
   *
   * The return values are unbounded, unlike `getScrollPosition`. This means they
   * may be negative or exceed the element boundaries (which is possible using
   * inertial scrolling).
   *
   * @param {DOMWindow|DOMElement} scrollable
   * @return {object} Map with `x` and `y` keys.
   */
  function getUnboundedScrollPosition(scrollable) {
    if (scrollable === window) {
      return {
        x: window.pageXOffset || document.documentElement.scrollLeft,
        y: window.pageYOffset || document.documentElement.scrollTop
      };
    }
    return {
      x: scrollable.scrollLeft,
      y: scrollable.scrollTop
    };
  }

  module.exports = getUnboundedScrollPosition;

},{}],459:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule hyphenate
   * @typechecks
   */

  var _uppercasePattern = /([A-Z])/g;

  /**
   * Hyphenates a camelcased string, for example:
   *
   *   > hyphenate('backgroundColor')
   *   < "background-color"
   *
   * For CSS style names, use `hyphenateStyleName` instead which works properly
   * with all vendor prefixes, including `ms`.
   *
   * @param {string} string
   * @return {string}
   */
  function hyphenate(string) {
    return string.replace(_uppercasePattern, '-$1').toLowerCase();
  }

  module.exports = hyphenate;

},{}],460:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule hyphenateStyleName
   * @typechecks
   */

  "use strict";

  var hyphenate = require("./hyphenate");

  var msPattern = /^ms-/;

  /**
   * Hyphenates a camelcased CSS property name, for example:
   *
   *   > hyphenateStyleName('backgroundColor')
   *   < "background-color"
   *   > hyphenateStyleName('MozTransition')
   *   < "-moz-transition"
   *   > hyphenateStyleName('msTransition')
   *   < "-ms-transition"
   *
   * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
   * is converted to `-ms-`.
   *
   * @param {string} string
   * @return {string}
   */
  function hyphenateStyleName(string) {
    return hyphenate(string).replace(msPattern, '-ms-');
  }

  module.exports = hyphenateStyleName;

},{"./hyphenate":459}],461:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule instantiateReactComponent
   * @typechecks static-only
   */

  'use strict';

  var ReactCompositeComponent = require("./ReactCompositeComponent");
  var ReactEmptyComponent = require("./ReactEmptyComponent");
  var ReactNativeComponent = require("./ReactNativeComponent");

  var assign = require("./Object.assign");
  var invariant = require("./invariant");
  var warning = require("./warning");

  // To avoid a cyclic dependency, we create the final class in this module
  var ReactCompositeComponentWrapper = function() { };
  assign(
    ReactCompositeComponentWrapper.prototype,
    ReactCompositeComponent.Mixin,
    {
      _instantiateReactComponent: instantiateReactComponent
    }
  );

  /**
   * Check if the type reference is a known internal type. I.e. not a user
   * provided composite type.
   *
   * @param {function} type
   * @return {boolean} Returns true if this is a valid internal type.
   */
  function isInternalComponentType(type) {
    return (
      typeof type === 'function' &&
      typeof type.prototype !== 'undefined' &&
      typeof type.prototype.mountComponent === 'function' &&
      typeof type.prototype.receiveComponent === 'function'
    );
  }

  /**
   * Given a ReactNode, create an instance that will actually be mounted.
   *
   * @param {ReactNode} node
   * @param {*} parentCompositeType The composite type that resolved this.
   * @return {object} A new instance of the element's constructor.
   * @protected
   */
  function instantiateReactComponent(node, parentCompositeType) {
    var instance;

    if (node === null || node === false) {
      node = ReactEmptyComponent.emptyElement;
    }

    if (typeof node === 'object') {
      var element = node;
      if ("production" !== "development") {
        ("production" !== "development" ? warning(
          element && (typeof element.type === 'function' ||
          typeof element.type === 'string'),
          'Only functions or strings can be mounted as React components.'
        ) : null);
      }

      // Special case string values
      if (parentCompositeType === element.type &&
        typeof element.type === 'string') {
        // Avoid recursion if the wrapper renders itself.
        instance = ReactNativeComponent.createInternalComponent(element);
        // All native components are currently wrapped in a composite so we're
        // safe to assume that this is what we should instantiate.
      } else if (isInternalComponentType(element.type)) {
        // This is temporarily available for custom components that are not string
        // represenations. I.e. ART. Once those are updated to use the string
        // representation, we can drop this code path.
        instance = new element.type(element);
      } else {
        instance = new ReactCompositeComponentWrapper();
      }
    } else if (typeof node === 'string' || typeof node === 'number') {
      instance = ReactNativeComponent.createInstanceForText(node);
    } else {
      ("production" !== "development" ? invariant(
        false,
        'Encountered invalid React node of type %s',
        typeof node
      ) : invariant(false));
    }

    if ("production" !== "development") {
      ("production" !== "development" ? warning(
        typeof instance.construct === 'function' &&
        typeof instance.mountComponent === 'function' &&
        typeof instance.receiveComponent === 'function' &&
        typeof instance.unmountComponent === 'function',
        'Only React Components can be mounted.'
      ) : null);
    }

    // Sets up the instance. This can probably just move into the constructor now.
    instance.construct(node);

    // These two fields are used by the DOM and ART diffing algorithms
    // respectively. Instead of using expandos on components, we should be
    // storing the state needed by the diffing algorithms elsewhere.
    instance._mountIndex = 0;
    instance._mountImage = null;

    if ("production" !== "development") {
      instance._isOwnerNecessary = false;
      instance._warnedAboutRefsInRender = false;
    }

    // Internal instances should fully constructed at this point, so they should
    // not get any new fields added to them at this point.
    if ("production" !== "development") {
      if (Object.preventExtensions) {
        Object.preventExtensions(instance);
      }
    }

    return instance;
  }

  module.exports = instantiateReactComponent;

},{"./Object.assign":353,"./ReactCompositeComponent":364,"./ReactEmptyComponent":386,"./ReactNativeComponent":400,"./invariant":462,"./warning":481}],462:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule invariant
   */

  "use strict";

  /**
   * Use invariant() to assert state which your program assumes to be true.
   *
   * Provide sprintf-style format (only %s is supported) and arguments
   * to provide information about what broke and what you were
   * expecting.
   *
   * The invariant message will be stripped in production, but the invariant
   * will remain to ensure logic does not differ in production.
   */

  var invariant = function(condition, format, a, b, c, d, e, f) {
    if ("production" !== "development") {
      if (format === undefined) {
        throw new Error('invariant requires an error message argument');
      }
    }

    if (!condition) {
      var error;
      if (format === undefined) {
        error = new Error(
          'Minified exception occurred; use the non-minified dev environment ' +
          'for the full error message and additional helpful warnings.'
        );
      } else {
        var args = [a, b, c, d, e, f];
        var argIndex = 0;
        error = new Error(
          'Invariant Violation: ' +
          format.replace(/%s/g, function() { return args[argIndex++]; })
        );
      }

      error.framesToPop = 1; // we don't care about invariant's own frame
      throw error;
    }
  };

  module.exports = invariant;

},{}],463:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule isEventSupported
   */

  'use strict';

  var ExecutionEnvironment = require("./ExecutionEnvironment");

  var useHasFeature;
  if (ExecutionEnvironment.canUseDOM) {
    useHasFeature =
      document.implementation &&
      document.implementation.hasFeature &&
      // always returns true in newer browsers as per the standard.
      // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
      document.implementation.hasFeature('', '') !== true;
  }

  /**
   * Checks if an event is supported in the current execution environment.
   *
   * NOTE: This will not work correctly for non-generic events such as `change`,
   * `reset`, `load`, `error`, and `select`.
   *
   * Borrows from Modernizr.
   *
   * @param {string} eventNameSuffix Event name, e.g. "click".
   * @param {?boolean} capture Check if the capture phase is supported.
   * @return {boolean} True if the event is supported.
   * @internal
   * @license Modernizr 3.0.0pre (Custom Build) | MIT
   */
  function isEventSupported(eventNameSuffix, capture) {
    if (!ExecutionEnvironment.canUseDOM ||
      capture && !('addEventListener' in document)) {
      return false;
    }

    var eventName = 'on' + eventNameSuffix;
    var isSupported = eventName in document;

    if (!isSupported) {
      var element = document.createElement('div');
      element.setAttribute(eventName, 'return;');
      isSupported = typeof element[eventName] === 'function';
    }

    if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
      // This is the only way to test support for the `wheel` event in IE9+.
      isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
    }

    return isSupported;
  }

  module.exports = isEventSupported;

},{"./ExecutionEnvironment":347}],464:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule isNode
   * @typechecks
   */

  /**
   * @param {*} object The object to check.
   * @return {boolean} Whether or not the object is a DOM node.
   */
  function isNode(object) {
    return !!(object && (
      ((typeof Node === 'function' ? object instanceof Node : typeof object === 'object' &&
      typeof object.nodeType === 'number' &&
      typeof object.nodeName === 'string'))
    ));
  }

  module.exports = isNode;

},{}],465:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule isTextInputElement
   */

  'use strict';

  /**
   * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
   */
  var supportedInputTypes = {
    'color': true,
    'date': true,
    'datetime': true,
    'datetime-local': true,
    'email': true,
    'month': true,
    'number': true,
    'password': true,
    'range': true,
    'search': true,
    'tel': true,
    'text': true,
    'time': true,
    'url': true,
    'week': true
  };

  function isTextInputElement(elem) {
    return elem && (
        (elem.nodeName === 'INPUT' && supportedInputTypes[elem.type] || elem.nodeName === 'TEXTAREA')
      );
  }

  module.exports = isTextInputElement;

},{}],466:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule isTextNode
   * @typechecks
   */

  var isNode = require("./isNode");

  /**
   * @param {*} object The object to check.
   * @return {boolean} Whether or not the object is a DOM text node.
   */
  function isTextNode(object) {
    return isNode(object) && object.nodeType == 3;
  }

  module.exports = isTextNode;

},{"./isNode":464}],467:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule keyMirror
   * @typechecks static-only
   */

  'use strict';

  var invariant = require("./invariant");

  /**
   * Constructs an enumeration with keys equal to their value.
   *
   * For example:
   *
   *   var COLORS = keyMirror({blue: null, red: null});
   *   var myColor = COLORS.blue;
   *   var isColorValid = !!COLORS[myColor];
   *
   * The last line could not be performed if the values of the generated enum were
   * not equal to their keys.
   *
   *   Input:  {key1: val1, key2: val2}
   *   Output: {key1: key1, key2: key2}
   *
   * @param {object} obj
   * @return {object}
   */
  var keyMirror = function(obj) {
    var ret = {};
    var key;
    ("production" !== "development" ? invariant(
      obj instanceof Object && !Array.isArray(obj),
      'keyMirror(...): Argument must be an object.'
    ) : invariant(obj instanceof Object && !Array.isArray(obj)));
    for (key in obj) {
      if (!obj.hasOwnProperty(key)) {
        continue;
      }
      ret[key] = key;
    }
    return ret;
  };

  module.exports = keyMirror;

},{"./invariant":462}],468:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule keyOf
   */

  /**
   * Allows extraction of a minified key. Let's the build system minify keys
   * without loosing the ability to dynamically use key strings as values
   * themselves. Pass in an object with a single key/val pair and it will return
   * you the string key of that single record. Suppose you want to grab the
   * value for a key 'className' inside of an object. Key/val minification may
   * have aliased that key to be 'xa12'. keyOf({className: null}) will return
   * 'xa12' in that case. Resolve keys you want to use once at startup time, then
   * reuse those resolutions.
   */
  var keyOf = function(oneKeyObj) {
    var key;
    for (key in oneKeyObj) {
      if (!oneKeyObj.hasOwnProperty(key)) {
        continue;
      }
      return key;
    }
    return null;
  };


  module.exports = keyOf;

},{}],469:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule mapObject
   */

  'use strict';

  var hasOwnProperty = Object.prototype.hasOwnProperty;

  /**
   * Executes the provided `callback` once for each enumerable own property in the
   * object and constructs a new object from the results. The `callback` is
   * invoked with three arguments:
   *
   *  - the property value
   *  - the property name
   *  - the object being traversed
   *
   * Properties that are added after the call to `mapObject` will not be visited
   * by `callback`. If the values of existing properties are changed, the value
   * passed to `callback` will be the value at the time `mapObject` visits them.
   * Properties that are deleted before being visited are not visited.
   *
   * @grep function objectMap()
   * @grep function objMap()
   *
   * @param {?object} object
   * @param {function} callback
   * @param {*} context
   * @return {?object}
   */
  function mapObject(object, callback, context) {
    if (!object) {
      return null;
    }
    var result = {};
    for (var name in object) {
      if (hasOwnProperty.call(object, name)) {
        result[name] = callback.call(context, object[name], name, object);
      }
    }
    return result;
  }

  module.exports = mapObject;

},{}],470:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule memoizeStringOnly
   * @typechecks static-only
   */

  'use strict';

  /**
   * Memoizes the return value of a function that accepts one string argument.
   *
   * @param {function} callback
   * @return {function}
   */
  function memoizeStringOnly(callback) {
    var cache = {};
    return function(string) {
      if (!cache.hasOwnProperty(string)) {
        cache[string] = callback.call(this, string);
      }
      return cache[string];
    };
  }

  module.exports = memoizeStringOnly;

},{}],471:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule onlyChild
   */
  'use strict';

  var ReactElement = require("./ReactElement");

  var invariant = require("./invariant");

  /**
   * Returns the first child in a collection of children and verifies that there
   * is only one child in the collection. The current implementation of this
   * function assumes that a single child gets passed without a wrapper, but the
   * purpose of this helper function is to abstract away the particular structure
   * of children.
   *
   * @param {?object} children Child collection structure.
   * @return {ReactComponent} The first and only `ReactComponent` contained in the
   * structure.
   */
  function onlyChild(children) {
    ("production" !== "development" ? invariant(
      ReactElement.isValidElement(children),
      'onlyChild must be passed a children with exactly one child.'
    ) : invariant(ReactElement.isValidElement(children)));
    return children;
  }

  module.exports = onlyChild;

},{"./ReactElement":384,"./invariant":462}],472:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule performance
   * @typechecks
   */

  "use strict";

  var ExecutionEnvironment = require("./ExecutionEnvironment");

  var performance;

  if (ExecutionEnvironment.canUseDOM) {
    performance =
      window.performance ||
      window.msPerformance ||
      window.webkitPerformance;
  }

  module.exports = performance || {};

},{"./ExecutionEnvironment":347}],473:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule performanceNow
   * @typechecks
   */

  var performance = require("./performance");

  /**
   * Detect if we can use `window.performance.now()` and gracefully fallback to
   * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
   * because of Facebook's testing infrastructure.
   */
  if (!performance || !performance.now) {
    performance = Date;
  }

  var performanceNow = performance.now.bind(performance);

  module.exports = performanceNow;

},{"./performance":472}],474:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule quoteAttributeValueForBrowser
   */

  'use strict';

  var escapeTextContentForBrowser = require("./escapeTextContentForBrowser");

  /**
   * Escapes attribute value to prevent scripting attacks.
   *
   * @param {*} value Value to escape.
   * @return {string} An escaped string.
   */
  function quoteAttributeValueForBrowser(value) {
    return '"' + escapeTextContentForBrowser(value) + '"';
  }

  module.exports = quoteAttributeValueForBrowser;

},{"./escapeTextContentForBrowser":443}],475:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule setInnerHTML
   */

  /* globals MSApp */

  'use strict';

  var ExecutionEnvironment = require("./ExecutionEnvironment");

  var WHITESPACE_TEST = /^[ \r\n\t\f]/;
  var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

  /**
   * Set the innerHTML property of a node, ensuring that whitespace is preserved
   * even in IE8.
   *
   * @param {DOMElement} node
   * @param {string} html
   * @internal
   */
  var setInnerHTML = function(node, html) {
    node.innerHTML = html;
  };

  // Win8 apps: Allow all html to be inserted
  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
    setInnerHTML = function(node, html) {
      MSApp.execUnsafeLocalFunction(function() {
        node.innerHTML = html;
      });
    };
  }

  if (ExecutionEnvironment.canUseDOM) {
    // IE8: When updating a just created node with innerHTML only leading
    // whitespace is removed. When updating an existing node with innerHTML
    // whitespace in root TextNodes is also collapsed.
    // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

    // Feature detection; only IE8 is known to behave improperly like this.
    var testElement = document.createElement('div');
    testElement.innerHTML = ' ';
    if (testElement.innerHTML === '') {
      setInnerHTML = function(node, html) {
        // Magic theory: IE8 supposedly differentiates between added and updated
        // nodes when processing innerHTML, innerHTML on updated nodes suffers
        // from worse whitespace behavior. Re-adding a node like this triggers
        // the initial and more favorable whitespace behavior.
        // TODO: What to do on a detached node?
        if (node.parentNode) {
          node.parentNode.replaceChild(node, node);
        }

        // We also implement a workaround for non-visible tags disappearing into
        // thin air on IE8, this only happens if there is no visible text
        // in-front of the non-visible tags. Piggyback on the whitespace fix
        // and simply check if any non-visible tags appear in the source.
        if (WHITESPACE_TEST.test(html) ||
          html[0] === '<' && NONVISIBLE_TEST.test(html)) {
          // Recover leading whitespace by temporarily prepending any character.
          // \uFEFF has the potential advantage of being zero-width/invisible.
          node.innerHTML = '\uFEFF' + html;

          // deleteData leaves an empty `TextNode` which offsets the index of all
          // children. Definitely want to avoid this.
          var textNode = node.firstChild;
          if (textNode.data.length === 1) {
            node.removeChild(textNode);
          } else {
            textNode.deleteData(0, 1);
          }
        } else {
          node.innerHTML = html;
        }
      };
    }
  }

  module.exports = setInnerHTML;

},{"./ExecutionEnvironment":347}],476:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule setTextContent
   */

  'use strict';

  var ExecutionEnvironment = require("./ExecutionEnvironment");
  var escapeTextContentForBrowser = require("./escapeTextContentForBrowser");
  var setInnerHTML = require("./setInnerHTML");

  /**
   * Set the textContent property of a node, ensuring that whitespace is preserved
   * even in IE8. innerText is a poor substitute for textContent and, among many
   * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
   * as it should.
   *
   * @param {DOMElement} node
   * @param {string} text
   * @internal
   */
  var setTextContent = function(node, text) {
    node.textContent = text;
  };

  if (ExecutionEnvironment.canUseDOM) {
    if (!('textContent' in document.documentElement)) {
      setTextContent = function(node, text) {
        setInnerHTML(node, escapeTextContentForBrowser(text));
      };
    }
  }

  module.exports = setTextContent;

},{"./ExecutionEnvironment":347,"./escapeTextContentForBrowser":443,"./setInnerHTML":475}],477:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule shallowEqual
   */

  'use strict';

  /**
   * Performs equality by iterating through keys on an object and returning
   * false when any key has values which are not strictly equal between
   * objA and objB. Returns true when the values of all keys are strictly equal.
   *
   * @return {boolean}
   */
  function shallowEqual(objA, objB) {
    if (objA === objB) {
      return true;
    }
    var key;
    // Test for A's keys different from B.
    for (key in objA) {
      if (objA.hasOwnProperty(key) &&
        (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {
        return false;
      }
    }
    // Test for B's keys missing from A.
    for (key in objB) {
      if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {
        return false;
      }
    }
    return true;
  }

  module.exports = shallowEqual;

},{}],478:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule shouldUpdateReactComponent
   * @typechecks static-only
   */

  'use strict';

  var warning = require("./warning");

  /**
   * Given a `prevElement` and `nextElement`, determines if the existing
   * instance should be updated as opposed to being destroyed or replaced by a new
   * instance. Both arguments are elements. This ensures that this logic can
   * operate on stateless trees without any backing instance.
   *
   * @param {?object} prevElement
   * @param {?object} nextElement
   * @return {boolean} True if the existing instance should be updated.
   * @protected
   */
  function shouldUpdateReactComponent(prevElement, nextElement) {
    if (prevElement != null && nextElement != null) {
      var prevType = typeof prevElement;
      var nextType = typeof nextElement;
      if (prevType === 'string' || prevType === 'number') {
        return (nextType === 'string' || nextType === 'number');
      } else {
        if (nextType === 'object' &&
          prevElement.type === nextElement.type &&
          prevElement.key === nextElement.key) {
          var ownersMatch = prevElement._owner === nextElement._owner;
          var prevName = null;
          var nextName = null;
          var nextDisplayName = null;
          if ("production" !== "development") {
            if (!ownersMatch) {
              if (prevElement._owner != null &&
                prevElement._owner.getPublicInstance() != null &&
                prevElement._owner.getPublicInstance().constructor != null) {
                prevName =
                  prevElement._owner.getPublicInstance().constructor.displayName;
              }
              if (nextElement._owner != null &&
                nextElement._owner.getPublicInstance() != null &&
                nextElement._owner.getPublicInstance().constructor != null) {
                nextName =
                  nextElement._owner.getPublicInstance().constructor.displayName;
              }
              if (nextElement.type != null &&
                nextElement.type.displayName != null) {
                nextDisplayName = nextElement.type.displayName;
              }
              if (nextElement.type != null && typeof nextElement.type === 'string') {
                nextDisplayName = nextElement.type;
              }
              if (typeof nextElement.type !== 'string' ||
                nextElement.type === 'input' ||
                nextElement.type === 'textarea') {
                if ((prevElement._owner != null &&
                  prevElement._owner._isOwnerNecessary === false) ||
                  (nextElement._owner != null &&
                  nextElement._owner._isOwnerNecessary === false)) {
                  if (prevElement._owner != null) {
                    prevElement._owner._isOwnerNecessary = true;
                  }
                  if (nextElement._owner != null) {
                    nextElement._owner._isOwnerNecessary = true;
                  }
                  ("production" !== "development" ? warning(
                    false,
                    '<%s /> is being rendered by both %s and %s using the same ' +
                    'key (%s) in the same place. Currently, this means that ' +
                    'they don\'t preserve state. This behavior should be very ' +
                    'rare so we\'re considering deprecating it. Please contact ' +
                    'the React team and explain your use case so that we can ' +
                    'take that into consideration.',
                    nextDisplayName || 'Unknown Component',
                    prevName || '[Unknown]',
                    nextName || '[Unknown]',
                    prevElement.key
                  ) : null);
                }
              }
            }
          }
          return ownersMatch;
        }
      }
    }
    return false;
  }

  module.exports = shouldUpdateReactComponent;

},{"./warning":481}],479:[function(require,module,exports){
  /**
   * Copyright 2014-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule toArray
   * @typechecks
   */

  var invariant = require("./invariant");

  /**
   * Convert array-like objects to arrays.
   *
   * This API assumes the caller knows the contents of the data type. For less
   * well defined inputs use createArrayFromMixed.
   *
   * @param {object|function|filelist} obj
   * @return {array}
   */
  function toArray(obj) {
    var length = obj.length;

    // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
    // old versions of Safari).
    ("production" !== "development" ? invariant(
      !Array.isArray(obj) &&
      (typeof obj === 'object' || typeof obj === 'function'),
      'toArray: Array-like object expected'
    ) : invariant(!Array.isArray(obj) &&
      (typeof obj === 'object' || typeof obj === 'function')));

    ("production" !== "development" ? invariant(
      typeof length === 'number',
      'toArray: Object needs a length property'
    ) : invariant(typeof length === 'number'));

    ("production" !== "development" ? invariant(
      length === 0 ||
      (length - 1) in obj,
      'toArray: Object should have keys for indices'
    ) : invariant(length === 0 ||
      (length - 1) in obj));

    // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
    // without method will throw during the slice call and skip straight to the
    // fallback.
    if (obj.hasOwnProperty) {
      try {
        return Array.prototype.slice.call(obj);
      } catch (e) {
        // IE < 9 does not support Array#slice on collections objects
      }
    }

    // Fall back to copying key by key. This assumes all keys have a value,
    // so will not preserve sparsely populated inputs.
    var ret = Array(length);
    for (var ii = 0; ii < length; ii++) {
      ret[ii] = obj[ii];
    }
    return ret;
  }

  module.exports = toArray;

},{"./invariant":462}],480:[function(require,module,exports){
  /**
   * Copyright 2013-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule traverseAllChildren
   */

  'use strict';

  var ReactElement = require("./ReactElement");
  var ReactFragment = require("./ReactFragment");
  var ReactInstanceHandles = require("./ReactInstanceHandles");

  var getIteratorFn = require("./getIteratorFn");
  var invariant = require("./invariant");
  var warning = require("./warning");

  var SEPARATOR = ReactInstanceHandles.SEPARATOR;
  var SUBSEPARATOR = ':';

  /**
   * TODO: Test that a single child and an array with one item have the same key
   * pattern.
   */

  var userProvidedKeyEscaperLookup = {
    '=': '=0',
    '.': '=1',
    ':': '=2'
  };

  var userProvidedKeyEscapeRegex = /[=.:]/g;

  var didWarnAboutMaps = false;

  function userProvidedKeyEscaper(match) {
    return userProvidedKeyEscaperLookup[match];
  }

  /**
   * Generate a key string that identifies a component within a set.
   *
   * @param {*} component A component that could contain a manual key.
   * @param {number} index Index that is used if a manual key is not provided.
   * @return {string}
   */
  function getComponentKey(component, index) {
    if (component && component.key != null) {
      // Explicit key
      return wrapUserProvidedKey(component.key);
    }
    // Implicit key determined by the index in the set
    return index.toString(36);
  }

  /**
   * Escape a component key so that it is safe to use in a reactid.
   *
   * @param {*} key Component key to be escaped.
   * @return {string} An escaped string.
   */
  function escapeUserProvidedKey(text) {
    return ('' + text).replace(
      userProvidedKeyEscapeRegex,
      userProvidedKeyEscaper
    );
  }

  /**
   * Wrap a `key` value explicitly provided by the user to distinguish it from
   * implicitly-generated keys generated by a component's index in its parent.
   *
   * @param {string} key Value of a user-provided `key` attribute
   * @return {string}
   */
  function wrapUserProvidedKey(key) {
    return '$' + escapeUserProvidedKey(key);
  }

  /**
   * @param {?*} children Children tree container.
   * @param {!string} nameSoFar Name of the key path so far.
   * @param {!number} indexSoFar Number of children encountered until this point.
   * @param {!function} callback Callback to invoke with each child found.
   * @param {?*} traverseContext Used to pass information throughout the traversal
   * process.
   * @return {!number} The number of children in this subtree.
   */
  function traverseAllChildrenImpl(
    children,
    nameSoFar,
    indexSoFar,
    callback,
    traverseContext
  ) {
    var type = typeof children;

    if (type === 'undefined' || type === 'boolean') {
      // All of the above are perceived as null.
      children = null;
    }

    if (children === null ||
      type === 'string' ||
      type === 'number' ||
      ReactElement.isValidElement(children)) {
      callback(
        traverseContext,
        children,
        // If it's the only child, treat the name as if it was wrapped in an array
        // so that it's consistent if the number of children grows.
        nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar,
        indexSoFar
      );
      return 1;
    }

    var child, nextName, nextIndex;
    var subtreeCount = 0; // Count of children found in the current subtree.

    if (Array.isArray(children)) {
      for (var i = 0; i < children.length; i++) {
        child = children[i];
        nextName = (
          (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
          getComponentKey(child, i)
        );
        nextIndex = indexSoFar + subtreeCount;
        subtreeCount += traverseAllChildrenImpl(
          child,
          nextName,
          nextIndex,
          callback,
          traverseContext
        );
      }
    } else {
      var iteratorFn = getIteratorFn(children);
      if (iteratorFn) {
        var iterator = iteratorFn.call(children);
        var step;
        if (iteratorFn !== children.entries) {
          var ii = 0;
          while (!(step = iterator.next()).done) {
            child = step.value;
            nextName = (
              (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
              getComponentKey(child, ii++)
            );
            nextIndex = indexSoFar + subtreeCount;
            subtreeCount += traverseAllChildrenImpl(
              child,
              nextName,
              nextIndex,
              callback,
              traverseContext
            );
          }
        } else {
          if ("production" !== "development") {
            ("production" !== "development" ? warning(
              didWarnAboutMaps,
              'Using Maps as children is not yet fully supported. It is an ' +
              'experimental feature that might be removed. Convert it to a ' +
              'sequence / iterable of keyed ReactElements instead.'
            ) : null);
            didWarnAboutMaps = true;
          }
          // Iterator will provide entry [k,v] tuples rather than values.
          while (!(step = iterator.next()).done) {
            var entry = step.value;
            if (entry) {
              child = entry[1];
              nextName = (
                (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
                wrapUserProvidedKey(entry[0]) + SUBSEPARATOR +
                getComponentKey(child, 0)
              );
              nextIndex = indexSoFar + subtreeCount;
              subtreeCount += traverseAllChildrenImpl(
                child,
                nextName,
                nextIndex,
                callback,
                traverseContext
              );
            }
          }
        }
      } else if (type === 'object') {
        ("production" !== "development" ? invariant(
          children.nodeType !== 1,
          'traverseAllChildren(...): Encountered an invalid child; DOM ' +
          'elements are not valid children of React components.'
        ) : invariant(children.nodeType !== 1));
        var fragment = ReactFragment.extract(children);
        for (var key in fragment) {
          if (fragment.hasOwnProperty(key)) {
            child = fragment[key];
            nextName = (
              (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
              wrapUserProvidedKey(key) + SUBSEPARATOR +
              getComponentKey(child, 0)
            );
            nextIndex = indexSoFar + subtreeCount;
            subtreeCount += traverseAllChildrenImpl(
              child,
              nextName,
              nextIndex,
              callback,
              traverseContext
            );
          }
        }
      }
    }

    return subtreeCount;
  }

  /**
   * Traverses children that are typically specified as `props.children`, but
   * might also be specified through attributes:
   *
   * - `traverseAllChildren(this.props.children, ...)`
   * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
   *
   * The `traverseContext` is an optional argument that is passed through the
   * entire traversal. It can be used to store accumulations or anything else that
   * the callback might find relevant.
   *
   * @param {?*} children Children tree object.
   * @param {!function} callback To invoke upon traversing each child.
   * @param {?*} traverseContext Context for traversal.
   * @return {!number} The number of children in this subtree.
   */
  function traverseAllChildren(children, callback, traverseContext) {
    if (children == null) {
      return 0;
    }

    return traverseAllChildrenImpl(children, '', 0, callback, traverseContext);
  }

  module.exports = traverseAllChildren;

},{"./ReactElement":384,"./ReactFragment":390,"./ReactInstanceHandles":393,"./getIteratorFn":453,"./invariant":462,"./warning":481}],481:[function(require,module,exports){
  /**
   * Copyright 2014-2015, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule warning
   */

  "use strict";

  var emptyFunction = require("./emptyFunction");

  /**
   * Similar to invariant but only logs a warning if the condition is not met.
   * This can be used to log issues in development environments in critical
   * paths. Removing the logging code for production environments will keep the
   * same logic and follow the same code paths.
   */

  var warning = emptyFunction;

  if ("production" !== "development") {
    warning = function(condition, format ) {for (var args=[],$__0=2,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
      if (format === undefined) {
        throw new Error(
          '`warning(condition, format, ...args)` requires a warning ' +
          'message argument'
        );
      }

      if (format.length < 10 || /^[s\W]*$/.test(format)) {
        throw new Error(
          'The warning format should be able to uniquely identify this ' +
          'warning. Please, use a more descriptive format than: ' + format
        );
      }

      if (format.indexOf('Failed Composite propType: ') === 0) {
        return; // Ignore CompositeComponent proptype check.
      }

      if (!condition) {
        var argIndex = 0;
        var message = 'Warning: ' + format.replace(/%s/g, function()  {return args[argIndex++];});
        console.warn(message);
        try {
          // --- Welcome to debugging React ---
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          throw new Error(message);
        } catch(x) {}
      }
    };
  }

  module.exports = warning;

},{"./emptyFunction":441}],482:[function(require,module,exports){
  module.exports = require('./lib/React');

},{"./lib/React":355}],483:[function(require,module,exports){
  (function (root, factory) {
    if (typeof define === 'function' && define.amd) { // AMD. Register as an anonymous module.
      define(['react'], factory);
    } else if (typeof exports === 'object') {
      // Node. Does not work with strict CommonJS, but
      // only CommonJS-like environments that support module.exports,
      // like Node.
      module.exports = factory(require('react'));
    } else {
      // Browser globals (root is window)
      root.Reactable = factory(root.React);
    }
  }(this, function (React) {
    "use strict";
    var exports = {};

    // Array.prototype.map polyfill - see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map#Polyfill
    // Production steps of ECMA-262, Edition 5, 15.4.4.19
    // Reference: http://es5.github.io/#x15.4.4.19
    if (!Array.prototype.map) {

      Array.prototype.map = function(callback, thisArg) {
        var T, A, k;

        if (this === null) {
          throw new TypeError(" this is null or not defined");
        }

        var O = Object(this);
        var len = O.length >>> 0;

        if (typeof callback !== "function") {
          throw new TypeError(callback + " is not a function");
        }

        if (arguments.length > 1) {
          T = thisArg;
        }

        A = new Array(len);
        k = 0;

        while (k < len) {
          var kValue, mappedValue;
          if (k in O) {
            kValue = O[k];
            mappedValue = callback.call(T, kValue, k, O);
            A[k] = mappedValue;
          }
          k++;
        }
        return A;
      };
    }

    // Array.prototype.indexOf polyfill for IE8
    if (!Array.prototype.indexOf) {
      Array.prototype.indexOf = function(elt /*, from*/) {
        var len = this.length >>> 0;

        var from = Number(arguments[1]) || 0;
        from = (from < 0) ? Math.ceil(from) : Math.floor(from);
        if (from < 0) {
          from += len;
        }

        for (; from < len; from++) {
          if (from in this && this[from] === elt) {
            return from;
          }
        }
        return -1;
      };
    }

    // Array.prototype.find polyfill - see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find
    if (!Array.prototype.find) {
      Object.defineProperty(Array.prototype, 'find', {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function(predicate) {
          if (this === null) {
            throw new TypeError('Array.prototype.find called on null or undefined');
          }
          if (typeof predicate !== 'function') {
            throw new TypeError('predicate must be a function');
          }
          var list = Object(this);
          var length = list.length >>> 0;
          var thisArg = arguments[1];
          var value;

          for (var i = 0; i < length; i++) {
            if (i in list) {
              value = list[i];
              if (predicate.call(thisArg, value, i, list)) {
                return value;
              }
            }
          }
          return undefined;
        }
      });
    }

    if (!Array.isArray) {
      Array.isArray = function (value) {
        return Object.prototype.toString.call(value) === '[object Array]';
      };
    }

    if (!Object.assign) {
      Object.defineProperty(Object, "assign", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function(target, firstSource) {
          if (target === undefined || target === null)
            throw new TypeError("Cannot convert first argument to object");
          var to = Object(target);
          for (var i = 1; i < arguments.length; i++) {
            var nextSource = arguments[i];
            if (nextSource === undefined || nextSource === null) continue;
            var keysArray = Object.keys(Object(nextSource));
            for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {
              var nextKey = keysArray[nextIndex];
              var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
              if (desc !== undefined && desc.enumerable) to[nextKey] = nextSource[nextKey];
            }
          }
          return to;
        }
      });
    }

    function Unsafe(content) {
      this.content = content;
    }

    Unsafe.prototype.toString = function() {
      return this.content;
    };

    function stringable(thing) {
      return thing !== null && typeof(thing) !== 'undefined' && typeof(thing.toString === 'function');
    }

    // this is a bit hacky - it'd be nice if React exposed an API for this
    function isReactComponent(thing) {
      return thing !== null && typeof(thing) === 'object' && typeof(thing.props) !== 'undefined';
    }

    React.Children.children = function(children) {
      return React.Children.map(children, function(x) { return x; }) || [];
    };

    exports.unsafe = function(str) {
      return new Unsafe(str);
    };

    exports.Sort = {
      Numeric: function(a, b) {
        var valA = parseFloat(a.toString().replace(/,/g,''));
        var valB = parseFloat(b.toString().replace(/,/g,''));

        // Sort non-numeric values alphabetically at the bottom of the list
        if (isNaN(valA) && isNaN(valB)) {
          valA = a;
          valB = b;
        } else {
          if (isNaN(valA)) {
            return 1;
          }
          if (isNaN(valB)) {
            return -1;
          }
        }

        if (valA < valB) {
          return -1;
        }
        if (valA > valB) {
          return 1;
        }

        return 0;
      },

      NumericInteger: function(a, b) {
        if (isNaN(a) || isNaN(b)) {
          return a > b ? 1 : -1;
        }

        return a - b;
      },

      Currency: function(a, b) {
        // Parse out dollar signs, then do a regular numeric sort
        // TODO: handle non-American currency

        if (a[0] === '$') {
          a = a.substring(1);
        }
        if (b[0] === '$') {
          b = b.substring(1);
        }

        return exports.Sort.Numeric(a, b);
      },

      Date: function(a, b) {
        // Note: this function tries to do a standard javascript string -> date conversion
        // If you need more control over the date string format, consider using a different
        // date library and writing your own function
        var valA = Date.parse(a);
        var valB = Date.parse(b);

        // Handle non-date values with numeric sort
        // Sort non-numeric values alphabetically at the bottom of the list
        if (isNaN(valA) || isNaN(valB)) {
          return exports.Sort.Numeric(a, b);
        }

        if (valA > valB) {
          return 1;
        }
        if (valB > valA) {
          return -1;
        }

        return 0;
      },

      CaseInsensitive: function(a, b) {
        return a.toLowerCase().localeCompare(b.toLowerCase());
      }
    };

    var Td = exports.Td = React.createClass({displayName: "Td",
      handleClick: function(e){
        if (typeof this.props.handleClick === 'function') {
          return this.props.handleClick(e, this);
        }
      },
      render: function() {
        var tdProps = {
          className: this.props.className,
          onClick: this.handleClick
        };

        // Attach any properties on the column to this Td object to allow things like custom event handlers
        if (typeof(this.props.column) === 'object') {
          for (var key in this.props.column) {
            if (key !== 'key' && key !== 'name') {
              tdProps[key] = this.props.column[key];
            }
          }
        }

        var data = this.props.data;

        if (typeof(this.props.children) !== 'undefined') {
          if (isReactComponent(this.props.children)) {
            data = this.props.children;
          } else if (
            typeof(this.props.data) === 'undefined' &&
            stringable(this.props.children)
          ) {
            data = this.props.children.toString();
          }

          if (this.props.children instanceof Unsafe) {
            tdProps.dangerouslySetInnerHTML = { __html: this.props.children.toString() };
          } else {
            tdProps.children = data;
          }
        }

        return React.DOM.td(tdProps);
      }
    });


    var Tr = exports.Tr = React.createClass({displayName: "Tr",
      statics: {
        childNode: Td,
        dataType: 'object'
      },
      render: function() {
        var children = toArray(React.Children.children(this.props.children));

        if (
          this.props.data &&
          this.props.columns &&
          typeof this.props.columns.map === 'function'
        ) {
          if (typeof(children.concat) === 'undefined') { console.log(children); }

          children = children.concat(this.props.columns.map(function(column, i) {
            if (this.props.data.hasOwnProperty(column.key)) {
              var value = this.props.data[column.key];
              var props = {};

              if (
                typeof(value) !== 'undefined' &&
                value !== null &&
                value.__reactableMeta === true
              ) {
                props = value.props;
                value = value.value;
              }

              return React.createElement(Td, React.__spread({column: column, key: column.key},  props), value);
            } else {
              return React.createElement(Td, {column: column, key: column.key});
            }
          }.bind(this)));
        }

        // Manually transfer props
        var props = filterPropsFrom(this.props);

        return React.DOM.tr(props, children);
      }
    });

    var Thead = exports.Thead = React.createClass({displayName: "Thead",
      getColumns: function() {
        return React.Children.map(this.props.children, function(th) {
          if (typeof th.props.children === 'string') {
            return th.props.children;
          } else {
            throw new TypeError('<th> must have a string child');
          }
        });
      },
      handleClickTh: function (column) {
        this.props.onSort(column.key);
      },
      render: function() {

        // Declare the list of Ths
        var Ths = [];
        for (var index = 0; index < this.props.columns.length; index++) {
          var column = this.props.columns[index];
          var sortClass = '';

          if (this.props.sortableColumns[column.key]) {
            sortClass += 'reactable-header-sortable ';
          }

          if (this.props.sort.column === column.key) {
            sortClass += 'reactable-header-sort';
            if (this.props.sort.direction === 1) {
              sortClass += '-asc';
            }
            else {
              sortClass += '-desc';
            }
          }

          Ths.push(
            React.createElement(Th, {className: sortClass, key: index, onClick: this.handleClickTh.bind(this, column)},
              column.label
            )
          );
        }

        // Manually transfer props
        var props = filterPropsFrom(this.props);

        return (
          React.createElement("thead", React.__spread({},  props),
            this.props.filtering === true ?
              React.createElement(Filterer, {
                colSpan: this.props.columns.length,
                onFilter: this.props.onFilter,
                placeholder: this.props.filterPlaceholder,
                value: this.props.currentFilter}
              ) : '',
            React.createElement("tr", {className: "reactable-column-header"}, Ths)
          )
        );
      }
    });

    var Th = exports.Th = React.createClass({displayName: "Th",
      render: function() {
        var childProps
        if (this.props.children instanceof Unsafe) {
          return React.createElement("th", React.__spread({},  filterPropsFrom(this.props),
            {dangerouslySetInnerHTML: {__html: this.props.children.toString()}}))
        } else {
          return React.createElement("th", React.__spread({},  filterPropsFrom(this.props)),
            this.props.children
          );
        }
      }
    });

    var FiltererInput = React.createClass({displayName: "FiltererInput",
      onChange: function() {
        this.props.onFilter(this.getDOMNode().value);
      },
      render: function() {
        return (
          React.createElement("input", {type: "text",
            className: "reactable-filter-input",
            placeholder: this.props.placeholder,
            value: this.props.value,
            onKeyUp: this.onChange,
            onChange: this.onChange})
        );
      }
    });

    var Filterer = React.createClass({displayName: "Filterer",
      render: function() {
        if (typeof this.props.colSpan === 'undefined') {
          throw new TypeError('Must pass a colSpan argument to Filterer');
        }

        return (
          React.createElement("tr", {className: "reactable-filterer"},
            React.createElement("td", {colSpan: this.props.colSpan},
              React.createElement(FiltererInput, {onFilter: this.props.onFilter,
                value: this.props.value,
                placeholder: this.props.placeholder})
            )
          )
        );
      }
    });

    var Paginator = React.createClass({displayName: "Paginator",
      render: function() {
        if (typeof this.props.colSpan === 'undefined') {
          throw new TypeError('Must pass a colSpan argument to Paginator');
        }

        if (typeof this.props.numPages === 'undefined') {
          throw new TypeError('Must pass a non-zero numPages argument to Paginator');
        }

        if (typeof this.props.currentPage === 'undefined') {
          throw new TypeError('Must pass a currentPage argument to Paginator');
        }

        var pageButtons = [];
        for (var i = 0; i < this.props.numPages; i++) {
          var pageNum = i;
          var className = "reactable-page-button";
          if (this.props.currentPage === i) {
            className += " reactable-current-page";
          }

          pageButtons.push(
            React.createElement("a", {className: className, key: i,
              // create function to get around for-loop closure issue
              onClick: (function(pageNum) {
                return function() {
                  this.props.onPageChange(pageNum);
                }.bind(this);
              }.bind(this))(i)}, i + 1)
          );
        }

        return (
          React.createElement("tbody", {className: "reactable-pagination"},
            React.createElement("tr", null,
              React.createElement("td", {colSpan: this.props.colSpan},
                pageButtons
              )
            )
          )
        );
      }
    });

    var Table = exports.Table = React.createClass({displayName: "Table",
      // Translate a user defined column array to hold column objects if strings are specified
      // (e.g. ['column1'] => [{key: 'column1', label: 'column1'}])
      translateColumnsArray: function(columns) {
        return columns.map(function(column, i) {
          if (typeof(column) === 'string') {
            return {
              key:   column,
              label: column
            };
          } else {
            if (typeof(column.sortable) !== 'undefined') {
              var sortFunction = column.sortable === true ? 'default' : column.sortable;
              this._sortable[column.key] = sortFunction;
            }

            return column;
          }
        }.bind(this));
      },
      parseChildData: function(props) {
        var data = [];

        // Transform any children back to a data array
        if (typeof(props.children) !== 'undefined') {
          React.Children.forEach(props.children, function(child) {
            // TODO: figure out a new way to determine the type of a component
            /*
             if (child.type.ConvenienceConstructor !== Tr) {
             return; // (continue)
             }
             */
            if (child == null || typeof(child.props) !== 'object') { return; }

            var childData = child.props.data || {};

            React.Children.forEach(child.props.children, function(descendant) {
              // TODO
              /* if (descendant.type.ConvenienceConstructor === Td) { */
              if (
                typeof(descendant) !== 'object' ||
                descendant == null
              ) {
                return;
              } else if (typeof(descendant.props.column) !== 'undefined') {
                var value;

                if (typeof(descendant.props.data) !== 'undefined') {
                  value = descendant.props.data;
                } else if (typeof(descendant.props.children) !== 'undefined') {
                  value = descendant.props.children;
                } else {
                  console.warn('exports.Td specified without ' +
                    'a `data` property or children, ' +
                    'ignoring');
                  return;
                }

                childData[descendant.props.column] = {
                  value: value,
                  props: filterPropsFrom(descendant.props),
                  __reactableMeta: true
                };
              } else {
                console.warn('exports.Td specified without a ' +
                  '`column` property, ignoring');
              }
            });

            data.push({
              data: childData,
              props: filterPropsFrom(child.props),
              __reactableMeta: true
            });
          }.bind(this));
        }

        return data;
      },

      initialize: function(props) {
        this.data = props.data || [];
        this.data = this.data.concat(this.parseChildData(props));
        this.initializeSorts(props);
      },

      initializeSorts: function() {
        this._sortable = {};
        // Transform sortable properties into a more friendly list
        for (var i in this.props.sortable) {
          var column = this.props.sortable[i];
          var columnName, sortFunction;

          if (column instanceof Object) {
            if (typeof(column.column) !== 'undefined') {
              columnName = column.column;
            } else {
              console.warn('Sortable column specified without column name');
              return;
            }

            if (typeof(column.sortFunction) === 'function') {
              sortFunction = column.sortFunction;
            } else {
              sortFunction = 'default';
            }
          } else {
            columnName      = column;
            sortFunction    = 'default';
          }

          this._sortable[columnName] = sortFunction;
        }
      },

      getDefaultProps: function() {
        var defaultProps = {
          sortBy: false,
          defaultSort: false,
          itemsPerPage: 0,
        };
        return defaultProps;
      },

      getInitialState: function() {
        var initialState = {
          currentPage: 0,
          currentSort: {
            column: null,
            direction: 1
          },
          filter: ''
        };

        // Set the state of the current sort to the default sort
        if (this.props.sortBy !== false || this.props.defaultSort !== false) {
          var sortingColumn = this.props.sortBy || this.props.defaultSort;
          initialState.currentSort = this.getCurrentSort(sortingColumn);
        }
        return initialState;
      },

      getCurrentSort: function(column) {
        var columnName, sortDirection;

        if (column instanceof Object) {
          if (typeof(column.column) !== 'undefined') {
            columnName = column.column;
          } else {
            console.warn('Default column specified without column name');
            return;
          }

          if (typeof(column.direction) !== 'undefined') {
            if (column.direction === 1 || column.direction === 'asc') {
              sortDirection = 1;
            } else if (column.direction === -1 || column.direction === 'desc') {
              sortDirection = -1;
            } else {
              console.warn('Invalid default sort specified.  Defaulting to ascending');
              sortDirection = 1;
            }
          } else {
            sortDirection = 1;
          }
        } else {
          columnName      = column;
          sortDirection   = 1;
        }

        return {
          column: columnName,
          direction: sortDirection
        };
      },

      updateCurrentSort: function(sortBy) {
        if (sortBy !== false &&
          sortBy.column !== this.state.currentSort.column &&
          sortBy.direction !== this.state.currentSort.direction) {

          this.setState({ currentSort: this.getCurrentSort(sortBy) });
        }
      },

      componentWillMount: function() {
        this.initialize(this.props);
        this.sortByCurrentSort();
      },
      componentWillReceiveProps: function(nextProps) {
        this.initialize(nextProps);
        this.updateCurrentSort(nextProps.sortBy);
        this.sortByCurrentSort();
      },
      onPageChange: function(page) {
        this.setState({ currentPage: page });
      },
      filterBy: function(filter) {
        this.setState({ filter: filter });
      },
      applyFilter: function(filter, children) {
        // Helper function to apply filter text to a list of table rows
        filter = filter.toLowerCase();
        var matchedChildren = [];

        for (var i = 0; i < children.length; i++) {
          var data = children[i].props.data;

          for (var j = 0; j < this.props.filterable.length; j++) {
            var filterColumn = this.props.filterable[j];

            if (
              typeof(data[filterColumn]) !== 'undefined' &&
              extractDataFrom(data, filterColumn).toString().toLowerCase().indexOf(filter) > -1
            ) {
              matchedChildren.push(children[i]);
              break;
            }
          }
        }

        return matchedChildren;
      },
      sortByCurrentSort: function(){
        // Apply a sort function according to the current sort in the state.
        // This allows us to perform a default sort even on a non sortable column.
        var currentSort = this.state.currentSort;

        if (currentSort.column === null) {
          return;
        }

        this.data.sort(function(a, b){
          var keyA = extractDataFrom(a, currentSort.column);
          keyA = (keyA instanceof Unsafe) ? keyA.toString() : keyA || '';
          var keyB = extractDataFrom(b, currentSort.column);
          keyB = (keyB instanceof Unsafe) ? keyB.toString() : keyB || '';

          // Default sort
          if (
            typeof(this._sortable[currentSort.column]) === 'undefined' ||
            this._sortable[currentSort.column] === 'default'
          ) {

            // Reverse direction if we're doing a reverse sort
            if (keyA < keyB) {
              return -1 * currentSort.direction;
            }

            if (keyA > keyB) {
              return 1 * currentSort.direction;
            }

            return 0;
          } else {
            // Reverse columns if we're doing a reverse sort
            if (currentSort.direction === 1) {
              return this._sortable[currentSort.column](keyA, keyB);
            } else {
              return this._sortable[currentSort.column](keyB, keyA);
            }
          }
        }.bind(this));
      },
      onSort: function(column) {
        // Don't perform sort on unsortable columns
        if (typeof(this._sortable[column]) === 'undefined') {
          return;
        }

        var currentSort = this.state.currentSort;

        if (currentSort.column === column) {
          currentSort.direction *= -1;
        } else {
          currentSort.column = column;
          currentSort.direction = 1;
        }

        // Set the current sort and pass it to the sort function
        this.setState({ currentSort: currentSort });
        this.sortByCurrentSort();
      },
      render: function() {
        var children = [];
        var columns;
        var userColumnsSpecified = false;

        if (
          this.props.children &&
          this.props.children.length > 0 &&
          this.props.children[0].type.ConvenienceConstructor === Thead
        ) {
          columns = this.props.children[0].getColumns();
        } else {
          columns = this.props.columns || [];
        }

        if (columns.length > 0) {
          userColumnsSpecified = true;
          columns = this.translateColumnsArray(columns);
        }

        // Build up table rows
        if (this.data && typeof this.data.map === 'function') {
          // Build up the columns array
          children = children.concat(this.data.map(function(rawData, i) {
            var data = rawData;
            var props = {};
            if (rawData.__reactableMeta === true) {
              data = rawData.data;
              props = rawData.props;
            }

            // Loop through the keys in each data row and build a td for it
            for (var k in data) {
              if (data.hasOwnProperty(k)) {
                // Update the columns array with the data's keys if columns were not
                // already specified
                if (userColumnsSpecified === false) {
                  var column = {
                    key:   k,
                    label: k
                  };

                  // Only add a new column if it doesn't already exist in the columns array
                  if (
                    columns.find(function(element) {
                      return element.key === column.key;
                    }) === undefined
                  ) {
                    columns.push(column);
                  }
                }
              }
            }

            return (
              React.createElement(Tr, React.__spread({columns: columns, key: i, data: data},  props))
            );
          }.bind(this)));
        }

        if (this.props.sortable === true) {
          for (var i = 0; i < columns.length; i++) {
            this._sortable[columns[i].key] = 'default';
          }
        }

        // Determine if we render the filter box
        var filtering = false;
        if (
          this.props.filterable &&
          Array.isArray(this.props.filterable) &&
          this.props.filterable.length > 0
        ) {
          filtering = true;
        }

        // Apply filters
        var filteredChildren = children;
        if (this.state.filter !== '') {
          filteredChildren = this.applyFilter(this.state.filter, filteredChildren);
        }

        // Determine pagination properties and which columns to display
        var itemsPerPage = 0;
        var pagination = false;
        var numPages;
        var currentPage = this.state.currentPage;

        var currentChildren = filteredChildren;
        if (this.props.itemsPerPage > 0) {
          itemsPerPage = this.props.itemsPerPage;
          numPages = Math.ceil(filteredChildren.length / itemsPerPage);

          if (currentPage > numPages - 1) {
            currentPage = numPages - 1;
          }

          pagination = true;
          currentChildren = filteredChildren.slice(
            currentPage * itemsPerPage,
            (currentPage + 1) * itemsPerPage
          );
        }

        // Manually transfer props
        var props = filterPropsFrom(this.props);

        return React.createElement("table", React.__spread({},  props), [
          (columns && columns.length > 0 ?
              React.createElement(Thead, {columns: columns,
                filtering: filtering,
                onFilter: this.filterBy,
                filterPlaceholder: this.props.filterPlaceholder,
                currentFilter: this.state.filter,
                sort: this.state.currentSort,
                sortableColumns: this._sortable,
                onSort: this.onSort,
                key: "thead"})
              : null
          ),
          React.createElement("tbody", {className: "reactable-data", key: "tbody"},
            currentChildren
          ),
          (pagination === true ?
              React.createElement(Paginator, {colSpan: columns.length,
                numPages: numPages,
                currentPage: currentPage,
                onPageChange: this.onPageChange,
                key: "paginator"})
              : null
          )
        ]);
      }
    });

    function toArray(obj) {
      var ret = [];
      for (var attr in obj) {
        ret[attr] = obj;
      }

      return ret;
    }

    function filterPropsFrom(baseProps) {
      baseProps = baseProps || {};
      var props = {};
      for (var key in baseProps) {
        if (!(key in internalProps)) {
          props[key] = baseProps[key];
        }
      }
      return props;
    }

    function extractDataFrom(key, column) {
      var value;
      if (
        typeof(key) !== 'undefined' &&
        key !== null &&
        key.__reactableMeta === true
      ) {
        value = key.data[column];
      } else {
        value = key[column];
      }

      if (
        typeof(value) !== 'undefined' &&
        value !== null &&
        value.__reactableMeta === true
      ) {
        value = (typeof(value.props.value) !== 'undefined' && value.props.value !== null) ?
          value.props.value : value.value;
      }

      return (stringable(value) ? value : '');
    }

    var internalProps = {
      columns: true,
      sortable: true,
      filterable: true,
      sortBy: true,
      defaultSort: true,
      itemsPerPage: true,
      childNode: true,
      data: true,
      children: true
    };

    return exports;
  }));

},{"react":482}],484:[function(require,module,exports){

  module.exports = require('./lib/');

},{"./lib/":485}],485:[function(require,module,exports){

  /**
   * Module dependencies.
   */

  var url = require('./url');
  var parser = require('socket.io-parser');
  var Manager = require('./manager');
  var debug = require('debug')('socket.io-client');

  /**
   * Module exports.
   */

  module.exports = exports = lookup;

  /**
   * Managers cache.
   */

  var cache = exports.managers = {};

  /**
   * Looks up an existing `Manager` for multiplexing.
   * If the user summons:
   *
   *   `io('http://localhost/a');`
   *   `io('http://localhost/b');`
   *
   * We reuse the existing instance based on same scheme/port/host,
   * and we initialize sockets for each namespace.
   *
   * @api public
   */

  function lookup(uri, opts) {
    if (typeof uri == 'object') {
      opts = uri;
      uri = undefined;
    }

    opts = opts || {};

    var parsed = url(uri);
    var source = parsed.source;
    var id = parsed.id;
    var io;

    if (opts.forceNew || opts['force new connection'] || false === opts.multiplex) {
      debug('ignoring socket cache for %s', source);
      io = Manager(source, opts);
    } else {
      if (!cache[id]) {
        debug('new io instance for %s', source);
        cache[id] = Manager(source, opts);
      }
      io = cache[id];
    }

    return io.socket(parsed.path);
  }

  /**
   * Protocol version.
   *
   * @api public
   */

  exports.protocol = parser.protocol;

  /**
   * `connect`.
   *
   * @param {String} uri
   * @api public
   */

  exports.connect = lookup;

  /**
   * Expose constructors for standalone build.
   *
   * @api public
   */

  exports.Manager = require('./manager');
  exports.Socket = require('./socket');

},{"./manager":486,"./socket":488,"./url":489,"debug":493,"socket.io-parser":527}],486:[function(require,module,exports){

  /**
   * Module dependencies.
   */

  var url = require('./url');
  var eio = require('engine.io-client');
  var Socket = require('./socket');
  var Emitter = require('component-emitter');
  var parser = require('socket.io-parser');
  var on = require('./on');
  var bind = require('component-bind');
  var object = require('object-component');
  var debug = require('debug')('socket.io-client:manager');
  var indexOf = require('indexof');
  var Backoff = require('backo2');

  /**
   * Module exports
   */

  module.exports = Manager;

  /**
   * `Manager` constructor.
   *
   * @param {String} engine instance or engine uri/opts
   * @param {Object} options
   * @api public
   */

  function Manager(uri, opts){
    if (!(this instanceof Manager)) return new Manager(uri, opts);
    if (uri && ('object' == typeof uri)) {
      opts = uri;
      uri = undefined;
    }
    opts = opts || {};

    opts.path = opts.path || '/socket.io';
    this.nsps = {};
    this.subs = [];
    this.opts = opts;
    this.reconnection(opts.reconnection !== false);
    this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);
    this.reconnectionDelay(opts.reconnectionDelay || 1000);
    this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);
    this.randomizationFactor(opts.randomizationFactor || 0.5);
    this.backoff = new Backoff({
      min: this.reconnectionDelay(),
      max: this.reconnectionDelayMax(),
      jitter: this.randomizationFactor()
    });
    this.timeout(null == opts.timeout ? 20000 : opts.timeout);
    this.readyState = 'closed';
    this.uri = uri;
    this.connected = [];
    this.encoding = false;
    this.packetBuffer = [];
    this.encoder = new parser.Encoder();
    this.decoder = new parser.Decoder();
    this.autoConnect = opts.autoConnect !== false;
    if (this.autoConnect) this.open();
  }

  /**
   * Propagate given event to sockets and emit on `this`
   *
   * @api private
   */

  Manager.prototype.emitAll = function() {
    this.emit.apply(this, arguments);
    for (var nsp in this.nsps) {
      this.nsps[nsp].emit.apply(this.nsps[nsp], arguments);
    }
  };

  /**
   * Update `socket.id` of all sockets
   *
   * @api private
   */

  Manager.prototype.updateSocketIds = function(){
    for (var nsp in this.nsps) {
      this.nsps[nsp].id = this.engine.id;
    }
  };

  /**
   * Mix in `Emitter`.
   */

  Emitter(Manager.prototype);

  /**
   * Sets the `reconnection` config.
   *
   * @param {Boolean} true/false if it should automatically reconnect
   * @return {Manager} self or value
   * @api public
   */

  Manager.prototype.reconnection = function(v){
    if (!arguments.length) return this._reconnection;
    this._reconnection = !!v;
    return this;
  };

  /**
   * Sets the reconnection attempts config.
   *
   * @param {Number} max reconnection attempts before giving up
   * @return {Manager} self or value
   * @api public
   */

  Manager.prototype.reconnectionAttempts = function(v){
    if (!arguments.length) return this._reconnectionAttempts;
    this._reconnectionAttempts = v;
    return this;
  };

  /**
   * Sets the delay between reconnections.
   *
   * @param {Number} delay
   * @return {Manager} self or value
   * @api public
   */

  Manager.prototype.reconnectionDelay = function(v){
    if (!arguments.length) return this._reconnectionDelay;
    this._reconnectionDelay = v;
    this.backoff && this.backoff.setMin(v);
    return this;
  };

  Manager.prototype.randomizationFactor = function(v){
    if (!arguments.length) return this._randomizationFactor;
    this._randomizationFactor = v;
    this.backoff && this.backoff.setJitter(v);
    return this;
  };

  /**
   * Sets the maximum delay between reconnections.
   *
   * @param {Number} delay
   * @return {Manager} self or value
   * @api public
   */

  Manager.prototype.reconnectionDelayMax = function(v){
    if (!arguments.length) return this._reconnectionDelayMax;
    this._reconnectionDelayMax = v;
    this.backoff && this.backoff.setMax(v);
    return this;
  };

  /**
   * Sets the connection timeout. `false` to disable
   *
   * @return {Manager} self or value
   * @api public
   */

  Manager.prototype.timeout = function(v){
    if (!arguments.length) return this._timeout;
    this._timeout = v;
    return this;
  };

  /**
   * Starts trying to reconnect if reconnection is enabled and we have not
   * started reconnecting yet
   *
   * @api private
   */

  Manager.prototype.maybeReconnectOnOpen = function() {
    // Only try to reconnect if it's the first time we're connecting
    if (!this.reconnecting && this._reconnection && this.backoff.attempts === 0) {
      // keeps reconnection from firing twice for the same reconnection loop
      this.reconnect();
    }
  };


  /**
   * Sets the current transport `socket`.
   *
   * @param {Function} optional, callback
   * @return {Manager} self
   * @api public
   */

  Manager.prototype.open =
    Manager.prototype.connect = function(fn){
      debug('readyState %s', this.readyState);
      if (~this.readyState.indexOf('open')) return this;

      debug('opening %s', this.uri);
      this.engine = eio(this.uri, this.opts);
      var socket = this.engine;
      var self = this;
      this.readyState = 'opening';
      this.skipReconnect = false;

      // emit `open`
      var openSub = on(socket, 'open', function() {
        self.onopen();
        fn && fn();
      });

      // emit `connect_error`
      var errorSub = on(socket, 'error', function(data){
        debug('connect_error');
        self.cleanup();
        self.readyState = 'closed';
        self.emitAll('connect_error', data);
        if (fn) {
          var err = new Error('Connection error');
          err.data = data;
          fn(err);
        } else {
          // Only do this if there is no fn to handle the error
          self.maybeReconnectOnOpen();
        }
      });

      // emit `connect_timeout`
      if (false !== this._timeout) {
        var timeout = this._timeout;
        debug('connect attempt will timeout after %d', timeout);

        // set timer
        var timer = setTimeout(function(){
          debug('connect attempt timed out after %d', timeout);
          openSub.destroy();
          socket.close();
          socket.emit('error', 'timeout');
          self.emitAll('connect_timeout', timeout);
        }, timeout);

        this.subs.push({
          destroy: function(){
            clearTimeout(timer);
          }
        });
      }

      this.subs.push(openSub);
      this.subs.push(errorSub);

      return this;
    };

  /**
   * Called upon transport open.
   *
   * @api private
   */

  Manager.prototype.onopen = function(){
    debug('open');

    // clear old subs
    this.cleanup();

    // mark as open
    this.readyState = 'open';
    this.emit('open');

    // add new subs
    var socket = this.engine;
    this.subs.push(on(socket, 'data', bind(this, 'ondata')));
    this.subs.push(on(this.decoder, 'decoded', bind(this, 'ondecoded')));
    this.subs.push(on(socket, 'error', bind(this, 'onerror')));
    this.subs.push(on(socket, 'close', bind(this, 'onclose')));
  };

  /**
   * Called with data.
   *
   * @api private
   */

  Manager.prototype.ondata = function(data){
    this.decoder.add(data);
  };

  /**
   * Called when parser fully decodes a packet.
   *
   * @api private
   */

  Manager.prototype.ondecoded = function(packet) {
    this.emit('packet', packet);
  };

  /**
   * Called upon socket error.
   *
   * @api private
   */

  Manager.prototype.onerror = function(err){
    debug('error', err);
    this.emitAll('error', err);
  };

  /**
   * Creates a new socket for the given `nsp`.
   *
   * @return {Socket}
   * @api public
   */

  Manager.prototype.socket = function(nsp){
    var socket = this.nsps[nsp];
    if (!socket) {
      socket = new Socket(this, nsp);
      this.nsps[nsp] = socket;
      var self = this;
      socket.on('connect', function(){
        socket.id = self.engine.id;
        if (!~indexOf(self.connected, socket)) {
          self.connected.push(socket);
        }
      });
    }
    return socket;
  };

  /**
   * Called upon a socket close.
   *
   * @param {Socket} socket
   */

  Manager.prototype.destroy = function(socket){
    var index = indexOf(this.connected, socket);
    if (~index) this.connected.splice(index, 1);
    if (this.connected.length) return;

    this.close();
  };

  /**
   * Writes a packet.
   *
   * @param {Object} packet
   * @api private
   */

  Manager.prototype.packet = function(packet){
    debug('writing packet %j', packet);
    var self = this;

    if (!self.encoding) {
      // encode, then write to engine with result
      self.encoding = true;
      this.encoder.encode(packet, function(encodedPackets) {
        for (var i = 0; i < encodedPackets.length; i++) {
          self.engine.write(encodedPackets[i]);
        }
        self.encoding = false;
        self.processPacketQueue();
      });
    } else { // add packet to the queue
      self.packetBuffer.push(packet);
    }
  };

  /**
   * If packet buffer is non-empty, begins encoding the
   * next packet in line.
   *
   * @api private
   */

  Manager.prototype.processPacketQueue = function() {
    if (this.packetBuffer.length > 0 && !this.encoding) {
      var pack = this.packetBuffer.shift();
      this.packet(pack);
    }
  };

  /**
   * Clean up transport subscriptions and packet buffer.
   *
   * @api private
   */

  Manager.prototype.cleanup = function(){
    var sub;
    while (sub = this.subs.shift()) sub.destroy();

    this.packetBuffer = [];
    this.encoding = false;

    this.decoder.destroy();
  };

  /**
   * Close the current socket.
   *
   * @api private
   */

  Manager.prototype.close =
    Manager.prototype.disconnect = function(){
      this.skipReconnect = true;
      this.backoff.reset();
      this.readyState = 'closed';
      this.engine && this.engine.close();
    };

  /**
   * Called upon engine close.
   *
   * @api private
   */

  Manager.prototype.onclose = function(reason){
    debug('close');
    this.cleanup();
    this.backoff.reset();
    this.readyState = 'closed';
    this.emit('close', reason);
    if (this._reconnection && !this.skipReconnect) {
      this.reconnect();
    }
  };

  /**
   * Attempt a reconnection.
   *
   * @api private
   */

  Manager.prototype.reconnect = function(){
    if (this.reconnecting || this.skipReconnect) return this;

    var self = this;

    if (this.backoff.attempts >= this._reconnectionAttempts) {
      debug('reconnect failed');
      this.backoff.reset();
      this.emitAll('reconnect_failed');
      this.reconnecting = false;
    } else {
      var delay = this.backoff.duration();
      debug('will wait %dms before reconnect attempt', delay);

      this.reconnecting = true;
      var timer = setTimeout(function(){
        if (self.skipReconnect) return;

        debug('attempting reconnect');
        self.emitAll('reconnect_attempt', self.backoff.attempts);
        self.emitAll('reconnecting', self.backoff.attempts);

        // check again for the case socket closed in above events
        if (self.skipReconnect) return;

        self.open(function(err){
          if (err) {
            debug('reconnect attempt error');
            self.reconnecting = false;
            self.reconnect();
            self.emitAll('reconnect_error', err.data);
          } else {
            debug('reconnect success');
            self.onreconnect();
          }
        });
      }, delay);

      this.subs.push({
        destroy: function(){
          clearTimeout(timer);
        }
      });
    }
  };

  /**
   * Called upon successful reconnect.
   *
   * @api private
   */

  Manager.prototype.onreconnect = function(){
    var attempt = this.backoff.attempts;
    this.reconnecting = false;
    this.backoff.reset();
    this.updateSocketIds();
    this.emitAll('reconnect', attempt);
  };

},{"./on":487,"./socket":488,"./url":489,"backo2":490,"component-bind":491,"component-emitter":492,"debug":493,"engine.io-client":494,"indexof":523,"object-component":524,"socket.io-parser":527}],487:[function(require,module,exports){

  /**
   * Module exports.
   */

  module.exports = on;

  /**
   * Helper for subscriptions.
   *
   * @param {Object|EventEmitter} obj with `Emitter` mixin or `EventEmitter`
   * @param {String} event name
   * @param {Function} callback
   * @api public
   */

  function on(obj, ev, fn) {
    obj.on(ev, fn);
    return {
      destroy: function(){
        obj.removeListener(ev, fn);
      }
    };
  }

},{}],488:[function(require,module,exports){

  /**
   * Module dependencies.
   */

  var parser = require('socket.io-parser');
  var Emitter = require('component-emitter');
  var toArray = require('to-array');
  var on = require('./on');
  var bind = require('component-bind');
  var debug = require('debug')('socket.io-client:socket');
  var hasBin = require('has-binary');

  /**
   * Module exports.
   */

  module.exports = exports = Socket;

  /**
   * Internal events (blacklisted).
   * These events can't be emitted by the user.
   *
   * @api private
   */

  var events = {
    connect: 1,
    connect_error: 1,
    connect_timeout: 1,
    disconnect: 1,
    error: 1,
    reconnect: 1,
    reconnect_attempt: 1,
    reconnect_failed: 1,
    reconnect_error: 1,
    reconnecting: 1
  };

  /**
   * Shortcut to `Emitter#emit`.
   */

  var emit = Emitter.prototype.emit;

  /**
   * `Socket` constructor.
   *
   * @api public
   */

  function Socket(io, nsp){
    this.io = io;
    this.nsp = nsp;
    this.json = this; // compat
    this.ids = 0;
    this.acks = {};
    if (this.io.autoConnect) this.open();
    this.receiveBuffer = [];
    this.sendBuffer = [];
    this.connected = false;
    this.disconnected = true;
  }

  /**
   * Mix in `Emitter`.
   */

  Emitter(Socket.prototype);

  /**
   * Subscribe to open, close and packet events
   *
   * @api private
   */

  Socket.prototype.subEvents = function() {
    if (this.subs) return;

    var io = this.io;
    this.subs = [
      on(io, 'open', bind(this, 'onopen')),
      on(io, 'packet', bind(this, 'onpacket')),
      on(io, 'close', bind(this, 'onclose'))
    ];
  };

  /**
   * "Opens" the socket.
   *
   * @api public
   */

  Socket.prototype.open =
    Socket.prototype.connect = function(){
      if (this.connected) return this;

      this.subEvents();
      this.io.open(); // ensure open
      if ('open' == this.io.readyState) this.onopen();
      return this;
    };

  /**
   * Sends a `message` event.
   *
   * @return {Socket} self
   * @api public
   */

  Socket.prototype.send = function(){
    var args = toArray(arguments);
    args.unshift('message');
    this.emit.apply(this, args);
    return this;
  };

  /**
   * Override `emit`.
   * If the event is in `events`, it's emitted normally.
   *
   * @param {String} event name
   * @return {Socket} self
   * @api public
   */

  Socket.prototype.emit = function(ev){
    if (events.hasOwnProperty(ev)) {
      emit.apply(this, arguments);
      return this;
    }

    var args = toArray(arguments);
    var parserType = parser.EVENT; // default
    if (hasBin(args)) { parserType = parser.BINARY_EVENT; } // binary
    var packet = { type: parserType, data: args };

    // event ack callback
    if ('function' == typeof args[args.length - 1]) {
      debug('emitting packet with ack id %d', this.ids);
      this.acks[this.ids] = args.pop();
      packet.id = this.ids++;
    }

    if (this.connected) {
      this.packet(packet);
    } else {
      this.sendBuffer.push(packet);
    }

    return this;
  };

  /**
   * Sends a packet.
   *
   * @param {Object} packet
   * @api private
   */

  Socket.prototype.packet = function(packet){
    packet.nsp = this.nsp;
    this.io.packet(packet);
  };

  /**
   * Called upon engine `open`.
   *
   * @api private
   */

  Socket.prototype.onopen = function(){
    debug('transport is open - connecting');

    // write connect packet if necessary
    if ('/' != this.nsp) {
      this.packet({ type: parser.CONNECT });
    }
  };

  /**
   * Called upon engine `close`.
   *
   * @param {String} reason
   * @api private
   */

  Socket.prototype.onclose = function(reason){
    debug('close (%s)', reason);
    this.connected = false;
    this.disconnected = true;
    delete this.id;
    this.emit('disconnect', reason);
  };

  /**
   * Called with socket packet.
   *
   * @param {Object} packet
   * @api private
   */

  Socket.prototype.onpacket = function(packet){
    if (packet.nsp != this.nsp) return;

    switch (packet.type) {
      case parser.CONNECT:
        this.onconnect();
        break;

      case parser.EVENT:
        this.onevent(packet);
        break;

      case parser.BINARY_EVENT:
        this.onevent(packet);
        break;

      case parser.ACK:
        this.onack(packet);
        break;

      case parser.BINARY_ACK:
        this.onack(packet);
        break;

      case parser.DISCONNECT:
        this.ondisconnect();
        break;

      case parser.ERROR:
        this.emit('error', packet.data);
        break;
    }
  };

  /**
   * Called upon a server event.
   *
   * @param {Object} packet
   * @api private
   */

  Socket.prototype.onevent = function(packet){
    var args = packet.data || [];
    debug('emitting event %j', args);

    if (null != packet.id) {
      debug('attaching ack callback to event');
      args.push(this.ack(packet.id));
    }

    if (this.connected) {
      emit.apply(this, args);
    } else {
      this.receiveBuffer.push(args);
    }
  };

  /**
   * Produces an ack callback to emit with an event.
   *
   * @api private
   */

  Socket.prototype.ack = function(id){
    var self = this;
    var sent = false;
    return function(){
      // prevent double callbacks
      if (sent) return;
      sent = true;
      var args = toArray(arguments);
      debug('sending ack %j', args);

      var type = hasBin(args) ? parser.BINARY_ACK : parser.ACK;
      self.packet({
        type: type,
        id: id,
        data: args
      });
    };
  };

  /**
   * Called upon a server acknowlegement.
   *
   * @param {Object} packet
   * @api private
   */

  Socket.prototype.onack = function(packet){
    debug('calling ack %s with %j', packet.id, packet.data);
    var fn = this.acks[packet.id];
    fn.apply(this, packet.data);
    delete this.acks[packet.id];
  };

  /**
   * Called upon server connect.
   *
   * @api private
   */

  Socket.prototype.onconnect = function(){
    this.connected = true;
    this.disconnected = false;
    this.emit('connect');
    this.emitBuffered();
  };

  /**
   * Emit buffered events (received and emitted).
   *
   * @api private
   */

  Socket.prototype.emitBuffered = function(){
    var i;
    for (i = 0; i < this.receiveBuffer.length; i++) {
      emit.apply(this, this.receiveBuffer[i]);
    }
    this.receiveBuffer = [];

    for (i = 0; i < this.sendBuffer.length; i++) {
      this.packet(this.sendBuffer[i]);
    }
    this.sendBuffer = [];
  };

  /**
   * Called upon server disconnect.
   *
   * @api private
   */

  Socket.prototype.ondisconnect = function(){
    debug('server disconnect (%s)', this.nsp);
    this.destroy();
    this.onclose('io server disconnect');
  };

  /**
   * Called upon forced client/server side disconnections,
   * this method ensures the manager stops tracking us and
   * that reconnections don't get triggered for this.
   *
   * @api private.
   */

  Socket.prototype.destroy = function(){
    if (this.subs) {
      // clean subscriptions to avoid reconnections
      for (var i = 0; i < this.subs.length; i++) {
        this.subs[i].destroy();
      }
      this.subs = null;
    }

    this.io.destroy(this);
  };

  /**
   * Disconnects the socket manually.
   *
   * @return {Socket} self
   * @api public
   */

  Socket.prototype.close =
    Socket.prototype.disconnect = function(){
      if (this.connected) {
        debug('performing disconnect (%s)', this.nsp);
        this.packet({ type: parser.DISCONNECT });
      }

      // remove socket from pool
      this.destroy();

      if (this.connected) {
        // fire events
        this.onclose('io client disconnect');
      }
      return this;
    };

},{"./on":487,"component-bind":491,"component-emitter":492,"debug":493,"has-binary":521,"socket.io-parser":527,"to-array":531}],489:[function(require,module,exports){
  (function (global){

    /**
     * Module dependencies.
     */

    var parseuri = require('parseuri');
    var debug = require('debug')('socket.io-client:url');

    /**
     * Module exports.
     */

    module.exports = url;

    /**
     * URL parser.
     *
     * @param {String} url
     * @param {Object} An object meant to mimic window.location.
     *                 Defaults to window.location.
     * @api public
     */

    function url(uri, loc){
      var obj = uri;

      // default to window.location
      var loc = loc || global.location;
      if (null == uri) uri = loc.protocol + '//' + loc.host;

      // relative path support
      if ('string' == typeof uri) {
        if ('/' == uri.charAt(0)) {
          if ('/' == uri.charAt(1)) {
            uri = loc.protocol + uri;
          } else {
            uri = loc.hostname + uri;
          }
        }

        if (!/^(https?|wss?):\/\//.test(uri)) {
          debug('protocol-less url %s', uri);
          if ('undefined' != typeof loc) {
            uri = loc.protocol + '//' + uri;
          } else {
            uri = 'https://' + uri;
          }
        }

        // parse
        debug('parse %s', uri);
        obj = parseuri(uri);
      }

      // make sure we treat `localhost:80` and `localhost` equally
      if (!obj.port) {
        if (/^(http|ws)$/.test(obj.protocol)) {
          obj.port = '80';
        }
        else if (/^(http|ws)s$/.test(obj.protocol)) {
          obj.port = '443';
        }
      }

      obj.path = obj.path || '/';

      // define unique id
      obj.id = obj.protocol + '://' + obj.host + ':' + obj.port;
      // define href
      obj.href = obj.protocol + '://' + obj.host + (loc && loc.port == obj.port ? '' : (':' + obj.port));

      return obj;
    }

  }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"debug":493,"parseuri":525}],490:[function(require,module,exports){

  /**
   * Expose `Backoff`.
   */

  module.exports = Backoff;

  /**
   * Initialize backoff timer with `opts`.
   *
   * - `min` initial timeout in milliseconds [100]
   * - `max` max timeout [10000]
   * - `jitter` [0]
   * - `factor` [2]
   *
   * @param {Object} opts
   * @api public
   */

  function Backoff(opts) {
    opts = opts || {};
    this.ms = opts.min || 100;
    this.max = opts.max || 10000;
    this.factor = opts.factor || 2;
    this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;
    this.attempts = 0;
  }

  /**
   * Return the backoff duration.
   *
   * @return {Number}
   * @api public
   */

  Backoff.prototype.duration = function(){
    var ms = this.ms * Math.pow(this.factor, this.attempts++);
    if (this.jitter) {
      var rand =  Math.random();
      var deviation = Math.floor(rand * this.jitter * ms);
      ms = (Math.floor(rand * 10) & 1) == 0  ? ms - deviation : ms + deviation;
    }
    return Math.min(ms, this.max) | 0;
  };

  /**
   * Reset the number of attempts.
   *
   * @api public
   */

  Backoff.prototype.reset = function(){
    this.attempts = 0;
  };

  /**
   * Set the minimum duration
   *
   * @api public
   */

  Backoff.prototype.setMin = function(min){
    this.ms = min;
  };

  /**
   * Set the maximum duration
   *
   * @api public
   */

  Backoff.prototype.setMax = function(max){
    this.max = max;
  };

  /**
   * Set the jitter
   *
   * @api public
   */

  Backoff.prototype.setJitter = function(jitter){
    this.jitter = jitter;
  };


},{}],491:[function(require,module,exports){
  /**
   * Slice reference.
   */

  var slice = [].slice;

  /**
   * Bind `obj` to `fn`.
   *
   * @param {Object} obj
   * @param {Function|String} fn or string
   * @return {Function}
   * @api public
   */

  module.exports = function(obj, fn){
    if ('string' == typeof fn) fn = obj[fn];
    if ('function' != typeof fn) throw new Error('bind() requires a function');
    var args = slice.call(arguments, 2);
    return function(){
      return fn.apply(obj, args.concat(slice.call(arguments)));
    }
  };

},{}],492:[function(require,module,exports){

  /**
   * Expose `Emitter`.
   */

  module.exports = Emitter;

  /**
   * Initialize a new `Emitter`.
   *
   * @api public
   */

  function Emitter(obj) {
    if (obj) return mixin(obj);
  };

  /**
   * Mixin the emitter properties.
   *
   * @param {Object} obj
   * @return {Object}
   * @api private
   */

  function mixin(obj) {
    for (var key in Emitter.prototype) {
      obj[key] = Emitter.prototype[key];
    }
    return obj;
  }

  /**
   * Listen on the given `event` with `fn`.
   *
   * @param {String} event
   * @param {Function} fn
   * @return {Emitter}
   * @api public
   */

  Emitter.prototype.on =
    Emitter.prototype.addEventListener = function(event, fn){
      this._callbacks = this._callbacks || {};
      (this._callbacks[event] = this._callbacks[event] || [])
        .push(fn);
      return this;
    };

  /**
   * Adds an `event` listener that will be invoked a single
   * time then automatically removed.
   *
   * @param {String} event
   * @param {Function} fn
   * @return {Emitter}
   * @api public
   */

  Emitter.prototype.once = function(event, fn){
    var self = this;
    this._callbacks = this._callbacks || {};

    function on() {
      self.off(event, on);
      fn.apply(this, arguments);
    }

    on.fn = fn;
    this.on(event, on);
    return this;
  };

  /**
   * Remove the given callback for `event` or all
   * registered callbacks.
   *
   * @param {String} event
   * @param {Function} fn
   * @return {Emitter}
   * @api public
   */

  Emitter.prototype.off =
    Emitter.prototype.removeListener =
      Emitter.prototype.removeAllListeners =
        Emitter.prototype.removeEventListener = function(event, fn){
          this._callbacks = this._callbacks || {};

          // all
          if (0 == arguments.length) {
            this._callbacks = {};
            return this;
          }

          // specific event
          var callbacks = this._callbacks[event];
          if (!callbacks) return this;

          // remove all handlers
          if (1 == arguments.length) {
            delete this._callbacks[event];
            return this;
          }

          // remove specific handler
          var cb;
          for (var i = 0; i < callbacks.length; i++) {
            cb = callbacks[i];
            if (cb === fn || cb.fn === fn) {
              callbacks.splice(i, 1);
              break;
            }
          }
          return this;
        };

  /**
   * Emit `event` with the given args.
   *
   * @param {String} event
   * @param {Mixed} ...
   * @return {Emitter}
   */

  Emitter.prototype.emit = function(event){
    this._callbacks = this._callbacks || {};
    var args = [].slice.call(arguments, 1)
      , callbacks = this._callbacks[event];

    if (callbacks) {
      callbacks = callbacks.slice(0);
      for (var i = 0, len = callbacks.length; i < len; ++i) {
        callbacks[i].apply(this, args);
      }
    }

    return this;
  };

  /**
   * Return array of callbacks for `event`.
   *
   * @param {String} event
   * @return {Array}
   * @api public
   */

  Emitter.prototype.listeners = function(event){
    this._callbacks = this._callbacks || {};
    return this._callbacks[event] || [];
  };

  /**
   * Check if this emitter has `event` handlers.
   *
   * @param {String} event
   * @return {Boolean}
   * @api public
   */

  Emitter.prototype.hasListeners = function(event){
    return !! this.listeners(event).length;
  };

},{}],493:[function(require,module,exports){

  /**
   * Expose `debug()` as the module.
   */

  module.exports = debug;

  /**
   * Create a debugger with the given `name`.
   *
   * @param {String} name
   * @return {Type}
   * @api public
   */

  function debug(name) {
    if (!debug.enabled(name)) return function(){};

    return function(fmt){
      fmt = coerce(fmt);

      var curr = new Date;
      var ms = curr - (debug[name] || curr);
      debug[name] = curr;

      fmt = name
        + ' '
        + fmt
        + ' +' + debug.humanize(ms);

      // This hackery is required for IE8
      // where `console.log` doesn't have 'apply'
      window.console
      && console.log
      && Function.prototype.apply.call(console.log, console, arguments);
    }
  }

  /**
   * The currently active debug mode names.
   */

  debug.names = [];
  debug.skips = [];

  /**
   * Enables a debug mode by name. This can include modes
   * separated by a colon and wildcards.
   *
   * @param {String} name
   * @api public
   */

  debug.enable = function(name) {
    try {
      localStorage.debug = name;
    } catch(e){}

    var split = (name || '').split(/[\s,]+/)
      , len = split.length;

    for (var i = 0; i < len; i++) {
      name = split[i].replace('*', '.*?');
      if (name[0] === '-') {
        debug.skips.push(new RegExp('^' + name.substr(1) + '$'));
      }
      else {
        debug.names.push(new RegExp('^' + name + '$'));
      }
    }
  };

  /**
   * Disable debug output.
   *
   * @api public
   */

  debug.disable = function(){
    debug.enable('');
  };

  /**
   * Humanize the given `ms`.
   *
   * @param {Number} m
   * @return {String}
   * @api private
   */

  debug.humanize = function(ms) {
    var sec = 1000
      , min = 60 * 1000
      , hour = 60 * min;

    if (ms >= hour) return (ms / hour).toFixed(1) + 'h';
    if (ms >= min) return (ms / min).toFixed(1) + 'm';
    if (ms >= sec) return (ms / sec | 0) + 's';
    return ms + 'ms';
  };

  /**
   * Returns true if the given mode name is enabled, false otherwise.
   *
   * @param {String} name
   * @return {Boolean}
   * @api public
   */

  debug.enabled = function(name) {
    for (var i = 0, len = debug.skips.length; i < len; i++) {
      if (debug.skips[i].test(name)) {
        return false;
      }
    }
    for (var i = 0, len = debug.names.length; i < len; i++) {
      if (debug.names[i].test(name)) {
        return true;
      }
    }
    return false;
  };

  /**
   * Coerce `val`.
   */

  function coerce(val) {
    if (val instanceof Error) return val.stack || val.message;
    return val;
  }

  // persist

  try {
    if (window.localStorage) debug.enable(localStorage.debug);
  } catch(e){}

},{}],494:[function(require,module,exports){

  module.exports =  require('./lib/');

},{"./lib/":495}],495:[function(require,module,exports){

  module.exports = require('./socket');

  /**
   * Exports parser
   *
   * @api public
   *
   */
  module.exports.parser = require('engine.io-parser');

},{"./socket":496,"engine.io-parser":508}],496:[function(require,module,exports){
  (function (global){
    /**
     * Module dependencies.
     */

    var transports = require('./transports');
    var Emitter = require('component-emitter');
    var debug = require('debug')('engine.io-client:socket');
    var index = require('indexof');
    var parser = require('engine.io-parser');
    var parseuri = require('parseuri');
    var parsejson = require('parsejson');
    var parseqs = require('parseqs');

    /**
     * Module exports.
     */

    module.exports = Socket;

    /**
     * Noop function.
     *
     * @api private
     */

    function noop(){}

    /**
     * Socket constructor.
     *
     * @param {String|Object} uri or options
     * @param {Object} options
     * @api public
     */

    function Socket(uri, opts){
      if (!(this instanceof Socket)) return new Socket(uri, opts);

      opts = opts || {};

      if (uri && 'object' == typeof uri) {
        opts = uri;
        uri = null;
      }

      if (uri) {
        uri = parseuri(uri);
        opts.host = uri.host;
        opts.secure = uri.protocol == 'https' || uri.protocol == 'wss';
        opts.port = uri.port;
        if (uri.query) opts.query = uri.query;
      }

      this.secure = null != opts.secure ? opts.secure :
        (global.location && 'https:' == location.protocol);

      if (opts.host) {
        var pieces = opts.host.split(':');
        opts.hostname = pieces.shift();
        if (pieces.length) {
          opts.port = pieces.pop();
        } else if (!opts.port) {
          // if no port is specified manually, use the protocol default
          opts.port = this.secure ? '443' : '80';
        }
      }

      this.agent = opts.agent || false;
      this.hostname = opts.hostname ||
        (global.location ? location.hostname : 'localhost');
      this.port = opts.port || (global.location && location.port ?
          location.port :
          (this.secure ? 443 : 80));
      this.query = opts.query || {};
      if ('string' == typeof this.query) this.query = parseqs.decode(this.query);
      this.upgrade = false !== opts.upgrade;
      this.path = (opts.path || '/engine.io').replace(/\/$/, '') + '/';
      this.forceJSONP = !!opts.forceJSONP;
      this.jsonp = false !== opts.jsonp;
      this.forceBase64 = !!opts.forceBase64;
      this.enablesXDR = !!opts.enablesXDR;
      this.timestampParam = opts.timestampParam || 't';
      this.timestampRequests = opts.timestampRequests;
      this.transports = opts.transports || ['polling', 'websocket'];
      this.readyState = '';
      this.writeBuffer = [];
      this.callbackBuffer = [];
      this.policyPort = opts.policyPort || 843;
      this.rememberUpgrade = opts.rememberUpgrade || false;
      this.binaryType = null;
      this.onlyBinaryUpgrades = opts.onlyBinaryUpgrades;

      // SSL options for Node.js client
      this.pfx = opts.pfx || null;
      this.key = opts.key || null;
      this.passphrase = opts.passphrase || null;
      this.cert = opts.cert || null;
      this.ca = opts.ca || null;
      this.ciphers = opts.ciphers || null;
      this.rejectUnauthorized = opts.rejectUnauthorized || null;

      this.open();
    }

    Socket.priorWebsocketSuccess = false;

    /**
     * Mix in `Emitter`.
     */

    Emitter(Socket.prototype);

    /**
     * Protocol version.
     *
     * @api public
     */

    Socket.protocol = parser.protocol; // this is an int

    /**
     * Expose deps for legacy compatibility
     * and standalone browser access.
     */

    Socket.Socket = Socket;
    Socket.Transport = require('./transport');
    Socket.transports = require('./transports');
    Socket.parser = require('engine.io-parser');

    /**
     * Creates transport of the given type.
     *
     * @param {String} transport name
     * @return {Transport}
     * @api private
     */

    Socket.prototype.createTransport = function (name) {
      debug('creating transport "%s"', name);
      var query = clone(this.query);

      // append engine.io protocol identifier
      query.EIO = parser.protocol;

      // transport name
      query.transport = name;

      // session id if we already have one
      if (this.id) query.sid = this.id;

      var transport = new transports[name]({
        agent: this.agent,
        hostname: this.hostname,
        port: this.port,
        secure: this.secure,
        path: this.path,
        query: query,
        forceJSONP: this.forceJSONP,
        jsonp: this.jsonp,
        forceBase64: this.forceBase64,
        enablesXDR: this.enablesXDR,
        timestampRequests: this.timestampRequests,
        timestampParam: this.timestampParam,
        policyPort: this.policyPort,
        socket: this,
        pfx: this.pfx,
        key: this.key,
        passphrase: this.passphrase,
        cert: this.cert,
        ca: this.ca,
        ciphers: this.ciphers,
        rejectUnauthorized: this.rejectUnauthorized
      });

      return transport;
    };

    function clone (obj) {
      var o = {};
      for (var i in obj) {
        if (obj.hasOwnProperty(i)) {
          o[i] = obj[i];
        }
      }
      return o;
    }

    /**
     * Initializes transport to use and starts probe.
     *
     * @api private
     */
    Socket.prototype.open = function () {
      var transport;
      if (this.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf('websocket') != -1) {
        transport = 'websocket';
      } else if (0 == this.transports.length) {
        // Emit error on next tick so it can be listened to
        var self = this;
        setTimeout(function() {
          self.emit('error', 'No transports available');
        }, 0);
        return;
      } else {
        transport = this.transports[0];
      }
      this.readyState = 'opening';

      // Retry with the next transport if the transport is disabled (jsonp: false)
      var transport;
      try {
        transport = this.createTransport(transport);
      } catch (e) {
        this.transports.shift();
        this.open();
        return;
      }

      transport.open();
      this.setTransport(transport);
    };

    /**
     * Sets the current transport. Disables the existing one (if any).
     *
     * @api private
     */

    Socket.prototype.setTransport = function(transport){
      debug('setting transport %s', transport.name);
      var self = this;

      if (this.transport) {
        debug('clearing existing transport %s', this.transport.name);
        this.transport.removeAllListeners();
      }

      // set up transport
      this.transport = transport;

      // set up transport listeners
      transport
        .on('drain', function(){
          self.onDrain();
        })
        .on('packet', function(packet){
          self.onPacket(packet);
        })
        .on('error', function(e){
          self.onError(e);
        })
        .on('close', function(){
          self.onClose('transport close');
        });
    };

    /**
     * Probes a transport.
     *
     * @param {String} transport name
     * @api private
     */

    Socket.prototype.probe = function (name) {
      debug('probing transport "%s"', name);
      var transport = this.createTransport(name, { probe: 1 })
        , failed = false
        , self = this;

      Socket.priorWebsocketSuccess = false;

      function onTransportOpen(){
        if (self.onlyBinaryUpgrades) {
          var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;
          failed = failed || upgradeLosesBinary;
        }
        if (failed) return;

        debug('probe transport "%s" opened', name);
        transport.send([{ type: 'ping', data: 'probe' }]);
        transport.once('packet', function (msg) {
          if (failed) return;
          if ('pong' == msg.type && 'probe' == msg.data) {
            debug('probe transport "%s" pong', name);
            self.upgrading = true;
            self.emit('upgrading', transport);
            if (!transport) return;
            Socket.priorWebsocketSuccess = 'websocket' == transport.name;

            debug('pausing current transport "%s"', self.transport.name);
            self.transport.pause(function () {
              if (failed) return;
              if ('closed' == self.readyState) return;
              debug('changing transport and sending upgrade packet');

              cleanup();

              self.setTransport(transport);
              transport.send([{ type: 'upgrade' }]);
              self.emit('upgrade', transport);
              transport = null;
              self.upgrading = false;
              self.flush();
            });
          } else {
            debug('probe transport "%s" failed', name);
            var err = new Error('probe error');
            err.transport = transport.name;
            self.emit('upgradeError', err);
          }
        });
      }

      function freezeTransport() {
        if (failed) return;

        // Any callback called by transport should be ignored since now
        failed = true;

        cleanup();

        transport.close();
        transport = null;
      }

      //Handle any error that happens while probing
      function onerror(err) {
        var error = new Error('probe error: ' + err);
        error.transport = transport.name;

        freezeTransport();

        debug('probe transport "%s" failed because of error: %s', name, err);

        self.emit('upgradeError', error);
      }

      function onTransportClose(){
        onerror("transport closed");
      }

      //When the socket is closed while we're probing
      function onclose(){
        onerror("socket closed");
      }

      //When the socket is upgraded while we're probing
      function onupgrade(to){
        if (transport && to.name != transport.name) {
          debug('"%s" works - aborting "%s"', to.name, transport.name);
          freezeTransport();
        }
      }

      //Remove all listeners on the transport and on self
      function cleanup(){
        transport.removeListener('open', onTransportOpen);
        transport.removeListener('error', onerror);
        transport.removeListener('close', onTransportClose);
        self.removeListener('close', onclose);
        self.removeListener('upgrading', onupgrade);
      }

      transport.once('open', onTransportOpen);
      transport.once('error', onerror);
      transport.once('close', onTransportClose);

      this.once('close', onclose);
      this.once('upgrading', onupgrade);

      transport.open();

    };

    /**
     * Called when connection is deemed open.
     *
     * @api public
     */

    Socket.prototype.onOpen = function () {
      debug('socket open');
      this.readyState = 'open';
      Socket.priorWebsocketSuccess = 'websocket' == this.transport.name;
      this.emit('open');
      this.flush();

      // we check for `readyState` in case an `open`
      // listener already closed the socket
      if ('open' == this.readyState && this.upgrade && this.transport.pause) {
        debug('starting upgrade probes');
        for (var i = 0, l = this.upgrades.length; i < l; i++) {
          this.probe(this.upgrades[i]);
        }
      }
    };

    /**
     * Handles a packet.
     *
     * @api private
     */

    Socket.prototype.onPacket = function (packet) {
      if ('opening' == this.readyState || 'open' == this.readyState) {
        debug('socket receive: type "%s", data "%s"', packet.type, packet.data);

        this.emit('packet', packet);

        // Socket is live - any packet counts
        this.emit('heartbeat');

        switch (packet.type) {
          case 'open':
            this.onHandshake(parsejson(packet.data));
            break;

          case 'pong':
            this.setPing();
            break;

          case 'error':
            var err = new Error('server error');
            err.code = packet.data;
            this.emit('error', err);
            break;

          case 'message':
            this.emit('data', packet.data);
            this.emit('message', packet.data);
            break;
        }
      } else {
        debug('packet received with socket readyState "%s"', this.readyState);
      }
    };

    /**
     * Called upon handshake completion.
     *
     * @param {Object} handshake obj
     * @api private
     */

    Socket.prototype.onHandshake = function (data) {
      this.emit('handshake', data);
      this.id = data.sid;
      this.transport.query.sid = data.sid;
      this.upgrades = this.filterUpgrades(data.upgrades);
      this.pingInterval = data.pingInterval;
      this.pingTimeout = data.pingTimeout;
      this.onOpen();
      // In case open handler closes socket
      if  ('closed' == this.readyState) return;
      this.setPing();

      // Prolong liveness of socket on heartbeat
      this.removeListener('heartbeat', this.onHeartbeat);
      this.on('heartbeat', this.onHeartbeat);
    };

    /**
     * Resets ping timeout.
     *
     * @api private
     */

    Socket.prototype.onHeartbeat = function (timeout) {
      clearTimeout(this.pingTimeoutTimer);
      var self = this;
      self.pingTimeoutTimer = setTimeout(function () {
        if ('closed' == self.readyState) return;
        self.onClose('ping timeout');
      }, timeout || (self.pingInterval + self.pingTimeout));
    };

    /**
     * Pings server every `this.pingInterval` and expects response
     * within `this.pingTimeout` or closes connection.
     *
     * @api private
     */

    Socket.prototype.setPing = function () {
      var self = this;
      clearTimeout(self.pingIntervalTimer);
      self.pingIntervalTimer = setTimeout(function () {
        debug('writing ping packet - expecting pong within %sms', self.pingTimeout);
        self.ping();
        self.onHeartbeat(self.pingTimeout);
      }, self.pingInterval);
    };

    /**
     * Sends a ping packet.
     *
     * @api public
     */

    Socket.prototype.ping = function () {
      this.sendPacket('ping');
    };

    /**
     * Called on `drain` event
     *
     * @api private
     */

    Socket.prototype.onDrain = function() {
      for (var i = 0; i < this.prevBufferLen; i++) {
        if (this.callbackBuffer[i]) {
          this.callbackBuffer[i]();
        }
      }

      this.writeBuffer.splice(0, this.prevBufferLen);
      this.callbackBuffer.splice(0, this.prevBufferLen);

      // setting prevBufferLen = 0 is very important
      // for example, when upgrading, upgrade packet is sent over,
      // and a nonzero prevBufferLen could cause problems on `drain`
      this.prevBufferLen = 0;

      if (this.writeBuffer.length == 0) {
        this.emit('drain');
      } else {
        this.flush();
      }
    };

    /**
     * Flush write buffers.
     *
     * @api private
     */

    Socket.prototype.flush = function () {
      if ('closed' != this.readyState && this.transport.writable &&
        !this.upgrading && this.writeBuffer.length) {
        debug('flushing %d packets in socket', this.writeBuffer.length);
        this.transport.send(this.writeBuffer);
        // keep track of current length of writeBuffer
        // splice writeBuffer and callbackBuffer on `drain`
        this.prevBufferLen = this.writeBuffer.length;
        this.emit('flush');
      }
    };

    /**
     * Sends a message.
     *
     * @param {String} message.
     * @param {Function} callback function.
     * @return {Socket} for chaining.
     * @api public
     */

    Socket.prototype.write =
      Socket.prototype.send = function (msg, fn) {
        this.sendPacket('message', msg, fn);
        return this;
      };

    /**
     * Sends a packet.
     *
     * @param {String} packet type.
     * @param {String} data.
     * @param {Function} callback function.
     * @api private
     */

    Socket.prototype.sendPacket = function (type, data, fn) {
      if ('closing' == this.readyState || 'closed' == this.readyState) {
        return;
      }

      var packet = { type: type, data: data };
      this.emit('packetCreate', packet);
      this.writeBuffer.push(packet);
      this.callbackBuffer.push(fn);
      this.flush();
    };

    /**
     * Closes the connection.
     *
     * @api private
     */

    Socket.prototype.close = function () {
      if ('opening' == this.readyState || 'open' == this.readyState) {
        this.readyState = 'closing';

        var self = this;

        function close() {
          self.onClose('forced close');
          debug('socket closing - telling transport to close');
          self.transport.close();
        }

        function cleanupAndClose() {
          self.removeListener('upgrade', cleanupAndClose);
          self.removeListener('upgradeError', cleanupAndClose);
          close();
        }

        function waitForUpgrade() {
          // wait for upgrade to finish since we can't send packets while pausing a transport
          self.once('upgrade', cleanupAndClose);
          self.once('upgradeError', cleanupAndClose);
        }

        if (this.writeBuffer.length) {
          this.once('drain', function() {
            if (this.upgrading) {
              waitForUpgrade();
            } else {
              close();
            }
          });
        } else if (this.upgrading) {
          waitForUpgrade();
        } else {
          close();
        }
      }

      return this;
    };

    /**
     * Called upon transport error
     *
     * @api private
     */

    Socket.prototype.onError = function (err) {
      debug('socket error %j', err);
      Socket.priorWebsocketSuccess = false;
      this.emit('error', err);
      this.onClose('transport error', err);
    };

    /**
     * Called upon transport close.
     *
     * @api private
     */

    Socket.prototype.onClose = function (reason, desc) {
      if ('opening' == this.readyState || 'open' == this.readyState || 'closing' == this.readyState) {
        debug('socket close with reason: "%s"', reason);
        var self = this;

        // clear timers
        clearTimeout(this.pingIntervalTimer);
        clearTimeout(this.pingTimeoutTimer);

        // clean buffers in next tick, so developers can still
        // grab the buffers on `close` event
        setTimeout(function() {
          self.writeBuffer = [];
          self.callbackBuffer = [];
          self.prevBufferLen = 0;
        }, 0);

        // stop event from firing again for transport
        this.transport.removeAllListeners('close');

        // ensure transport won't stay open
        this.transport.close();

        // ignore further transport communication
        this.transport.removeAllListeners();

        // set ready state
        this.readyState = 'closed';

        // clear session id
        this.id = null;

        // emit close event
        this.emit('close', reason, desc);
      }
    };

    /**
     * Filters upgrades, returning only those matching client transports.
     *
     * @param {Array} server upgrades
     * @api private
     *
     */

    Socket.prototype.filterUpgrades = function (upgrades) {
      var filteredUpgrades = [];
      for (var i = 0, j = upgrades.length; i<j; i++) {
        if (~index(this.transports, upgrades[i])) filteredUpgrades.push(upgrades[i]);
      }
      return filteredUpgrades;
    };

  }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./transport":497,"./transports":498,"component-emitter":492,"debug":505,"engine.io-parser":508,"indexof":523,"parsejson":517,"parseqs":518,"parseuri":519}],497:[function(require,module,exports){
  /**
   * Module dependencies.
   */

  var parser = require('engine.io-parser');
  var Emitter = require('component-emitter');

  /**
   * Module exports.
   */

  module.exports = Transport;

  /**
   * Transport abstract constructor.
   *
   * @param {Object} options.
   * @api private
   */

  function Transport (opts) {
    this.path = opts.path;
    this.hostname = opts.hostname;
    this.port = opts.port;
    this.secure = opts.secure;
    this.query = opts.query;
    this.timestampParam = opts.timestampParam;
    this.timestampRequests = opts.timestampRequests;
    this.readyState = '';
    this.agent = opts.agent || false;
    this.socket = opts.socket;
    this.enablesXDR = opts.enablesXDR;

    // SSL options for Node.js client
    this.pfx = opts.pfx;
    this.key = opts.key;
    this.passphrase = opts.passphrase;
    this.cert = opts.cert;
    this.ca = opts.ca;
    this.ciphers = opts.ciphers;
    this.rejectUnauthorized = opts.rejectUnauthorized;
  }

  /**
   * Mix in `Emitter`.
   */

  Emitter(Transport.prototype);

  /**
   * A counter used to prevent collisions in the timestamps used
   * for cache busting.
   */

  Transport.timestamps = 0;

  /**
   * Emits an error.
   *
   * @param {String} str
   * @return {Transport} for chaining
   * @api public
   */

  Transport.prototype.onError = function (msg, desc) {
    var err = new Error(msg);
    err.type = 'TransportError';
    err.description = desc;
    this.emit('error', err);
    return this;
  };

  /**
   * Opens the transport.
   *
   * @api public
   */

  Transport.prototype.open = function () {
    if ('closed' == this.readyState || '' == this.readyState) {
      this.readyState = 'opening';
      this.doOpen();
    }

    return this;
  };

  /**
   * Closes the transport.
   *
   * @api private
   */

  Transport.prototype.close = function () {
    if ('opening' == this.readyState || 'open' == this.readyState) {
      this.doClose();
      this.onClose();
    }

    return this;
  };

  /**
   * Sends multiple packets.
   *
   * @param {Array} packets
   * @api private
   */

  Transport.prototype.send = function(packets){
    if ('open' == this.readyState) {
      this.write(packets);
    } else {
      throw new Error('Transport not open');
    }
  };

  /**
   * Called upon open
   *
   * @api private
   */

  Transport.prototype.onOpen = function () {
    this.readyState = 'open';
    this.writable = true;
    this.emit('open');
  };

  /**
   * Called with data.
   *
   * @param {String} data
   * @api private
   */

  Transport.prototype.onData = function(data){
    var packet = parser.decodePacket(data, this.socket.binaryType);
    this.onPacket(packet);
  };

  /**
   * Called with a decoded packet.
   */

  Transport.prototype.onPacket = function (packet) {
    this.emit('packet', packet);
  };

  /**
   * Called upon close.
   *
   * @api private
   */

  Transport.prototype.onClose = function () {
    this.readyState = 'closed';
    this.emit('close');
  };

},{"component-emitter":492,"engine.io-parser":508}],498:[function(require,module,exports){
  (function (global){
    /**
     * Module dependencies
     */

    var XMLHttpRequest = require('xmlhttprequest');
    var XHR = require('./polling-xhr');
    var JSONP = require('./polling-jsonp');
    var websocket = require('./websocket');

    /**
     * Export transports.
     */

    exports.polling = polling;
    exports.websocket = websocket;

    /**
     * Polling transport polymorphic constructor.
     * Decides on xhr vs jsonp based on feature detection.
     *
     * @api private
     */

    function polling(opts){
      var xhr;
      var xd = false;
      var xs = false;
      var jsonp = false !== opts.jsonp;

      if (global.location) {
        var isSSL = 'https:' == location.protocol;
        var port = location.port;

        // some user agents have empty `location.port`
        if (!port) {
          port = isSSL ? 443 : 80;
        }

        xd = opts.hostname != location.hostname || port != opts.port;
        xs = opts.secure != isSSL;
      }

      opts.xdomain = xd;
      opts.xscheme = xs;
      xhr = new XMLHttpRequest(opts);

      if ('open' in xhr && !opts.forceJSONP) {
        return new XHR(opts);
      } else {
        if (!jsonp) throw new Error('JSONP disabled');
        return new JSONP(opts);
      }
    }

  }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./polling-jsonp":499,"./polling-xhr":500,"./websocket":502,"xmlhttprequest":503}],499:[function(require,module,exports){
  (function (global){

    /**
     * Module requirements.
     */

    var Polling = require('./polling');
    var inherit = require('component-inherit');

    /**
     * Module exports.
     */

    module.exports = JSONPPolling;

    /**
     * Cached regular expressions.
     */

    var rNewline = /\n/g;
    var rEscapedNewline = /\\n/g;

    /**
     * Global JSONP callbacks.
     */

    var callbacks;

    /**
     * Callbacks count.
     */

    var index = 0;

    /**
     * Noop.
     */

    function empty () { }

    /**
     * JSONP Polling constructor.
     *
     * @param {Object} opts.
     * @api public
     */

    function JSONPPolling (opts) {
      Polling.call(this, opts);

      this.query = this.query || {};

      // define global callbacks array if not present
      // we do this here (lazily) to avoid unneeded global pollution
      if (!callbacks) {
        // we need to consider multiple engines in the same page
        if (!global.___eio) global.___eio = [];
        callbacks = global.___eio;
      }

      // callback identifier
      this.index = callbacks.length;

      // add callback to jsonp global
      var self = this;
      callbacks.push(function (msg) {
        self.onData(msg);
      });

      // append to query string
      this.query.j = this.index;

      // prevent spurious errors from being emitted when the window is unloaded
      if (global.document && global.addEventListener) {
        global.addEventListener('beforeunload', function () {
          if (self.script) self.script.onerror = empty;
        }, false);
      }
    }

    /**
     * Inherits from Polling.
     */

    inherit(JSONPPolling, Polling);

    /*
     * JSONP only supports binary as base64 encoded strings
     */

    JSONPPolling.prototype.supportsBinary = false;

    /**
     * Closes the socket.
     *
     * @api private
     */

    JSONPPolling.prototype.doClose = function () {
      if (this.script) {
        this.script.parentNode.removeChild(this.script);
        this.script = null;
      }

      if (this.form) {
        this.form.parentNode.removeChild(this.form);
        this.form = null;
        this.iframe = null;
      }

      Polling.prototype.doClose.call(this);
    };

    /**
     * Starts a poll cycle.
     *
     * @api private
     */

    JSONPPolling.prototype.doPoll = function () {
      var self = this;
      var script = document.createElement('script');

      if (this.script) {
        this.script.parentNode.removeChild(this.script);
        this.script = null;
      }

      script.async = true;
      script.src = this.uri();
      script.onerror = function(e){
        self.onError('jsonp poll error',e);
      };

      var insertAt = document.getElementsByTagName('script')[0];
      insertAt.parentNode.insertBefore(script, insertAt);
      this.script = script;

      var isUAgecko = 'undefined' != typeof navigator && /gecko/i.test(navigator.userAgent);

      if (isUAgecko) {
        setTimeout(function () {
          var iframe = document.createElement('iframe');
          document.body.appendChild(iframe);
          document.body.removeChild(iframe);
        }, 100);
      }
    };

    /**
     * Writes with a hidden iframe.
     *
     * @param {String} data to send
     * @param {Function} called upon flush.
     * @api private
     */

    JSONPPolling.prototype.doWrite = function (data, fn) {
      var self = this;

      if (!this.form) {
        var form = document.createElement('form');
        var area = document.createElement('textarea');
        var id = this.iframeId = 'eio_iframe_' + this.index;
        var iframe;

        form.className = 'socketio';
        form.style.position = 'absolute';
        form.style.top = '-1000px';
        form.style.left = '-1000px';
        form.target = id;
        form.method = 'POST';
        form.setAttribute('accept-charset', 'utf-8');
        area.name = 'd';
        form.appendChild(area);
        document.body.appendChild(form);

        this.form = form;
        this.area = area;
      }

      this.form.action = this.uri();

      function complete () {
        initIframe();
        fn();
      }

      function initIframe () {
        if (self.iframe) {
          try {
            self.form.removeChild(self.iframe);
          } catch (e) {
            self.onError('jsonp polling iframe removal error', e);
          }
        }

        try {
          // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)
          var html = '<iframe src="javascript:0" name="'+ self.iframeId +'">';
          iframe = document.createElement(html);
        } catch (e) {
          iframe = document.createElement('iframe');
          iframe.name = self.iframeId;
          iframe.src = 'javascript:0';
        }

        iframe.id = self.iframeId;

        self.form.appendChild(iframe);
        self.iframe = iframe;
      }

      initIframe();

      // escape \n to prevent it from being converted into \r\n by some UAs
      // double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side
      data = data.replace(rEscapedNewline, '\\\n');
      this.area.value = data.replace(rNewline, '\\n');

      try {
        this.form.submit();
      } catch(e) {}

      if (this.iframe.attachEvent) {
        this.iframe.onreadystatechange = function(){
          if (self.iframe.readyState == 'complete') {
            complete();
          }
        };
      } else {
        this.iframe.onload = complete;
      }
    };

  }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./polling":501,"component-inherit":504}],500:[function(require,module,exports){
  (function (global){
    /**
     * Module requirements.
     */

    var XMLHttpRequest = require('xmlhttprequest');
    var Polling = require('./polling');
    var Emitter = require('component-emitter');
    var inherit = require('component-inherit');
    var debug = require('debug')('engine.io-client:polling-xhr');

    /**
     * Module exports.
     */

    module.exports = XHR;
    module.exports.Request = Request;

    /**
     * Empty function
     */

    function empty(){}

    /**
     * XHR Polling constructor.
     *
     * @param {Object} opts
     * @api public
     */

    function XHR(opts){
      Polling.call(this, opts);

      if (global.location) {
        var isSSL = 'https:' == location.protocol;
        var port = location.port;

        // some user agents have empty `location.port`
        if (!port) {
          port = isSSL ? 443 : 80;
        }

        this.xd = opts.hostname != global.location.hostname ||
          port != opts.port;
        this.xs = opts.secure != isSSL;
      }
    }

    /**
     * Inherits from Polling.
     */

    inherit(XHR, Polling);

    /**
     * XHR supports binary
     */

    XHR.prototype.supportsBinary = true;

    /**
     * Creates a request.
     *
     * @param {String} method
     * @api private
     */

    XHR.prototype.request = function(opts){
      opts = opts || {};
      opts.uri = this.uri();
      opts.xd = this.xd;
      opts.xs = this.xs;
      opts.agent = this.agent || false;
      opts.supportsBinary = this.supportsBinary;
      opts.enablesXDR = this.enablesXDR;

      // SSL options for Node.js client
      opts.pfx = this.pfx;
      opts.key = this.key;
      opts.passphrase = this.passphrase;
      opts.cert = this.cert;
      opts.ca = this.ca;
      opts.ciphers = this.ciphers;
      opts.rejectUnauthorized = this.rejectUnauthorized;

      return new Request(opts);
    };

    /**
     * Sends data.
     *
     * @param {String} data to send.
     * @param {Function} called upon flush.
     * @api private
     */

    XHR.prototype.doWrite = function(data, fn){
      var isBinary = typeof data !== 'string' && data !== undefined;
      var req = this.request({ method: 'POST', data: data, isBinary: isBinary });
      var self = this;
      req.on('success', fn);
      req.on('error', function(err){
        self.onError('xhr post error', err);
      });
      this.sendXhr = req;
    };

    /**
     * Starts a poll cycle.
     *
     * @api private
     */

    XHR.prototype.doPoll = function(){
      debug('xhr poll');
      var req = this.request();
      var self = this;
      req.on('data', function(data){
        self.onData(data);
      });
      req.on('error', function(err){
        self.onError('xhr poll error', err);
      });
      this.pollXhr = req;
    };

    /**
     * Request constructor
     *
     * @param {Object} options
     * @api public
     */

    function Request(opts){
      this.method = opts.method || 'GET';
      this.uri = opts.uri;
      this.xd = !!opts.xd;
      this.xs = !!opts.xs;
      this.async = false !== opts.async;
      this.data = undefined != opts.data ? opts.data : null;
      this.agent = opts.agent;
      this.isBinary = opts.isBinary;
      this.supportsBinary = opts.supportsBinary;
      this.enablesXDR = opts.enablesXDR;

      // SSL options for Node.js client
      this.pfx = opts.pfx;
      this.key = opts.key;
      this.passphrase = opts.passphrase;
      this.cert = opts.cert;
      this.ca = opts.ca;
      this.ciphers = opts.ciphers;
      this.rejectUnauthorized = opts.rejectUnauthorized;

      this.create();
    }

    /**
     * Mix in `Emitter`.
     */

    Emitter(Request.prototype);

    /**
     * Creates the XHR object and sends the request.
     *
     * @api private
     */

    Request.prototype.create = function(){
      var opts = { agent: this.agent, xdomain: this.xd, xscheme: this.xs, enablesXDR: this.enablesXDR };

      // SSL options for Node.js client
      opts.pfx = this.pfx;
      opts.key = this.key;
      opts.passphrase = this.passphrase;
      opts.cert = this.cert;
      opts.ca = this.ca;
      opts.ciphers = this.ciphers;
      opts.rejectUnauthorized = this.rejectUnauthorized;

      var xhr = this.xhr = new XMLHttpRequest(opts);
      var self = this;

      try {
        debug('xhr open %s: %s', this.method, this.uri);
        xhr.open(this.method, this.uri, this.async);
        if (this.supportsBinary) {
          // This has to be done after open because Firefox is stupid
          // http://stackoverflow.com/questions/13216903/get-binary-data-with-xmlhttprequest-in-a-firefox-extension
          xhr.responseType = 'arraybuffer';
        }

        if ('POST' == this.method) {
          try {
            if (this.isBinary) {
              xhr.setRequestHeader('Content-type', 'application/octet-stream');
            } else {
              xhr.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');
            }
          } catch (e) {}
        }

        // ie6 check
        if ('withCredentials' in xhr) {
          xhr.withCredentials = true;
        }

        if (this.hasXDR()) {
          xhr.onload = function(){
            self.onLoad();
          };
          xhr.onerror = function(){
            self.onError(xhr.responseText);
          };
        } else {
          xhr.onreadystatechange = function(){
            if (4 != xhr.readyState) return;
            if (200 == xhr.status || 1223 == xhr.status) {
              self.onLoad();
            } else {
              // make sure the `error` event handler that's user-set
              // does not throw in the same tick and gets caught here
              setTimeout(function(){
                self.onError(xhr.status);
              }, 0);
            }
          };
        }

        debug('xhr data %s', this.data);
        xhr.send(this.data);
      } catch (e) {
        // Need to defer since .create() is called directly fhrom the constructor
        // and thus the 'error' event can only be only bound *after* this exception
        // occurs.  Therefore, also, we cannot throw here at all.
        setTimeout(function() {
          self.onError(e);
        }, 0);
        return;
      }

      if (global.document) {
        this.index = Request.requestsCount++;
        Request.requests[this.index] = this;
      }
    };

    /**
     * Called upon successful response.
     *
     * @api private
     */

    Request.prototype.onSuccess = function(){
      this.emit('success');
      this.cleanup();
    };

    /**
     * Called if we have data.
     *
     * @api private
     */

    Request.prototype.onData = function(data){
      this.emit('data', data);
      this.onSuccess();
    };

    /**
     * Called upon error.
     *
     * @api private
     */

    Request.prototype.onError = function(err){
      this.emit('error', err);
      this.cleanup(true);
    };

    /**
     * Cleans up house.
     *
     * @api private
     */

    Request.prototype.cleanup = function(fromError){
      if ('undefined' == typeof this.xhr || null === this.xhr) {
        return;
      }
      // xmlhttprequest
      if (this.hasXDR()) {
        this.xhr.onload = this.xhr.onerror = empty;
      } else {
        this.xhr.onreadystatechange = empty;
      }

      if (fromError) {
        try {
          this.xhr.abort();
        } catch(e) {}
      }

      if (global.document) {
        delete Request.requests[this.index];
      }

      this.xhr = null;
    };

    /**
     * Called upon load.
     *
     * @api private
     */

    Request.prototype.onLoad = function(){
      var data;
      try {
        var contentType;
        try {
          contentType = this.xhr.getResponseHeader('Content-Type').split(';')[0];
        } catch (e) {}
        if (contentType === 'application/octet-stream') {
          data = this.xhr.response;
        } else {
          if (!this.supportsBinary) {
            data = this.xhr.responseText;
          } else {
            data = 'ok';
          }
        }
      } catch (e) {
        this.onError(e);
      }
      if (null != data) {
        this.onData(data);
      }
    };

    /**
     * Check if it has XDomainRequest.
     *
     * @api private
     */

    Request.prototype.hasXDR = function(){
      return 'undefined' !== typeof global.XDomainRequest && !this.xs && this.enablesXDR;
    };

    /**
     * Aborts the request.
     *
     * @api public
     */

    Request.prototype.abort = function(){
      this.cleanup();
    };

    /**
     * Aborts pending requests when unloading the window. This is needed to prevent
     * memory leaks (e.g. when using IE) and to ensure that no spurious error is
     * emitted.
     */

    if (global.document) {
      Request.requestsCount = 0;
      Request.requests = {};
      if (global.attachEvent) {
        global.attachEvent('onunload', unloadHandler);
      } else if (global.addEventListener) {
        global.addEventListener('beforeunload', unloadHandler, false);
      }
    }

    function unloadHandler() {
      for (var i in Request.requests) {
        if (Request.requests.hasOwnProperty(i)) {
          Request.requests[i].abort();
        }
      }
    }

  }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./polling":501,"component-emitter":492,"component-inherit":504,"debug":505,"xmlhttprequest":503}],501:[function(require,module,exports){
  /**
   * Module dependencies.
   */

  var Transport = require('../transport');
  var parseqs = require('parseqs');
  var parser = require('engine.io-parser');
  var inherit = require('component-inherit');
  var debug = require('debug')('engine.io-client:polling');

  /**
   * Module exports.
   */

  module.exports = Polling;

  /**
   * Is XHR2 supported?
   */

  var hasXHR2 = (function() {
    var XMLHttpRequest = require('xmlhttprequest');
    var xhr = new XMLHttpRequest({ xdomain: false });
    return null != xhr.responseType;
  })();

  /**
   * Polling interface.
   *
   * @param {Object} opts
   * @api private
   */

  function Polling(opts){
    var forceBase64 = (opts && opts.forceBase64);
    if (!hasXHR2 || forceBase64) {
      this.supportsBinary = false;
    }
    Transport.call(this, opts);
  }

  /**
   * Inherits from Transport.
   */

  inherit(Polling, Transport);

  /**
   * Transport name.
   */

  Polling.prototype.name = 'polling';

  /**
   * Opens the socket (triggers polling). We write a PING message to determine
   * when the transport is open.
   *
   * @api private
   */

  Polling.prototype.doOpen = function(){
    this.poll();
  };

  /**
   * Pauses polling.
   *
   * @param {Function} callback upon buffers are flushed and transport is paused
   * @api private
   */

  Polling.prototype.pause = function(onPause){
    var pending = 0;
    var self = this;

    this.readyState = 'pausing';

    function pause(){
      debug('paused');
      self.readyState = 'paused';
      onPause();
    }

    if (this.polling || !this.writable) {
      var total = 0;

      if (this.polling) {
        debug('we are currently polling - waiting to pause');
        total++;
        this.once('pollComplete', function(){
          debug('pre-pause polling complete');
          --total || pause();
        });
      }

      if (!this.writable) {
        debug('we are currently writing - waiting to pause');
        total++;
        this.once('drain', function(){
          debug('pre-pause writing complete');
          --total || pause();
        });
      }
    } else {
      pause();
    }
  };

  /**
   * Starts polling cycle.
   *
   * @api public
   */

  Polling.prototype.poll = function(){
    debug('polling');
    this.polling = true;
    this.doPoll();
    this.emit('poll');
  };

  /**
   * Overloads onData to detect payloads.
   *
   * @api private
   */

  Polling.prototype.onData = function(data){
    var self = this;
    debug('polling got data %s', data);
    var callback = function(packet, index, total) {
      // if its the first message we consider the transport open
      if ('opening' == self.readyState) {
        self.onOpen();
      }

      // if its a close packet, we close the ongoing requests
      if ('close' == packet.type) {
        self.onClose();
        return false;
      }

      // otherwise bypass onData and handle the message
      self.onPacket(packet);
    };

    // decode payload
    parser.decodePayload(data, this.socket.binaryType, callback);

    // if an event did not trigger closing
    if ('closed' != this.readyState) {
      // if we got data we're not polling
      this.polling = false;
      this.emit('pollComplete');

      if ('open' == this.readyState) {
        this.poll();
      } else {
        debug('ignoring poll - transport state "%s"', this.readyState);
      }
    }
  };

  /**
   * For polling, send a close packet.
   *
   * @api private
   */

  Polling.prototype.doClose = function(){
    var self = this;

    function close(){
      debug('writing close packet');
      self.write([{ type: 'close' }]);
    }

    if ('open' == this.readyState) {
      debug('transport open - closing');
      close();
    } else {
      // in case we're trying to close while
      // handshaking is in progress (GH-164)
      debug('transport not open - deferring close');
      this.once('open', close);
    }
  };

  /**
   * Writes a packets payload.
   *
   * @param {Array} data packets
   * @param {Function} drain callback
   * @api private
   */

  Polling.prototype.write = function(packets){
    var self = this;
    this.writable = false;
    var callbackfn = function() {
      self.writable = true;
      self.emit('drain');
    };

    var self = this;
    parser.encodePayload(packets, this.supportsBinary, function(data) {
      self.doWrite(data, callbackfn);
    });
  };

  /**
   * Generates uri for connection.
   *
   * @api private
   */

  Polling.prototype.uri = function(){
    var query = this.query || {};
    var schema = this.secure ? 'https' : 'http';
    var port = '';

    // cache busting is forced
    if (false !== this.timestampRequests) {
      query[this.timestampParam] = +new Date + '-' + Transport.timestamps++;
    }

    if (!this.supportsBinary && !query.sid) {
      query.b64 = 1;
    }

    query = parseqs.encode(query);

    // avoid port if default for schema
    if (this.port && (('https' == schema && this.port != 443) ||
      ('http' == schema && this.port != 80))) {
      port = ':' + this.port;
    }

    // prepend ? to query
    if (query.length) {
      query = '?' + query;
    }

    return schema + '://' + this.hostname + port + this.path + query;
  };

},{"../transport":497,"component-inherit":504,"debug":505,"engine.io-parser":508,"parseqs":518,"xmlhttprequest":503}],502:[function(require,module,exports){
  /**
   * Module dependencies.
   */

  var Transport = require('../transport');
  var parser = require('engine.io-parser');
  var parseqs = require('parseqs');
  var inherit = require('component-inherit');
  var debug = require('debug')('engine.io-client:websocket');

  /**
   * `ws` exposes a WebSocket-compatible interface in
   * Node, or the `WebSocket` or `MozWebSocket` globals
   * in the browser.
   */

  var WebSocket = require('ws');

  /**
   * Module exports.
   */

  module.exports = WS;

  /**
   * WebSocket transport constructor.
   *
   * @api {Object} connection options
   * @api public
   */

  function WS(opts){
    var forceBase64 = (opts && opts.forceBase64);
    if (forceBase64) {
      this.supportsBinary = false;
    }
    Transport.call(this, opts);
  }

  /**
   * Inherits from Transport.
   */

  inherit(WS, Transport);

  /**
   * Transport name.
   *
   * @api public
   */

  WS.prototype.name = 'websocket';

  /*
   * WebSockets support binary
   */

  WS.prototype.supportsBinary = true;

  /**
   * Opens socket.
   *
   * @api private
   */

  WS.prototype.doOpen = function(){
    if (!this.check()) {
      // let probe timeout
      return;
    }

    var self = this;
    var uri = this.uri();
    var protocols = void(0);
    var opts = { agent: this.agent };

    // SSL options for Node.js client
    opts.pfx = this.pfx;
    opts.key = this.key;
    opts.passphrase = this.passphrase;
    opts.cert = this.cert;
    opts.ca = this.ca;
    opts.ciphers = this.ciphers;
    opts.rejectUnauthorized = this.rejectUnauthorized;

    this.ws = new WebSocket(uri, protocols, opts);

    if (this.ws.binaryType === undefined) {
      this.supportsBinary = false;
    }

    this.ws.binaryType = 'arraybuffer';
    this.addEventListeners();
  };

  /**
   * Adds event listeners to the socket
   *
   * @api private
   */

  WS.prototype.addEventListeners = function(){
    var self = this;

    this.ws.onopen = function(){
      self.onOpen();
    };
    this.ws.onclose = function(){
      self.onClose();
    };
    this.ws.onmessage = function(ev){
      self.onData(ev.data);
    };
    this.ws.onerror = function(e){
      self.onError('websocket error', e);
    };
  };

  /**
   * Override `onData` to use a timer on iOS.
   * See: https://gist.github.com/mloughran/2052006
   *
   * @api private
   */

  if ('undefined' != typeof navigator
    && /iPad|iPhone|iPod/i.test(navigator.userAgent)) {
    WS.prototype.onData = function(data){
      var self = this;
      setTimeout(function(){
        Transport.prototype.onData.call(self, data);
      }, 0);
    };
  }

  /**
   * Writes data to socket.
   *
   * @param {Array} array of packets.
   * @api private
   */

  WS.prototype.write = function(packets){
    var self = this;
    this.writable = false;
    // encodePacket efficient as it uses WS framing
    // no need for encodePayload
    for (var i = 0, l = packets.length; i < l; i++) {
      parser.encodePacket(packets[i], this.supportsBinary, function(data) {
        //Sometimes the websocket has already been closed but the browser didn't
        //have a chance of informing us about it yet, in that case send will
        //throw an error
        try {
          self.ws.send(data);
        } catch (e){
          debug('websocket closed before onclose event');
        }
      });
    }

    function ondrain() {
      self.writable = true;
      self.emit('drain');
    }
    // fake drain
    // defer to next tick to allow Socket to clear writeBuffer
    setTimeout(ondrain, 0);
  };

  /**
   * Called upon close
   *
   * @api private
   */

  WS.prototype.onClose = function(){
    Transport.prototype.onClose.call(this);
  };

  /**
   * Closes socket.
   *
   * @api private
   */

  WS.prototype.doClose = function(){
    if (typeof this.ws !== 'undefined') {
      this.ws.close();
    }
  };

  /**
   * Generates uri for connection.
   *
   * @api private
   */

  WS.prototype.uri = function(){
    var query = this.query || {};
    var schema = this.secure ? 'wss' : 'ws';
    var port = '';

    // avoid port if default for schema
    if (this.port && (('wss' == schema && this.port != 443)
      || ('ws' == schema && this.port != 80))) {
      port = ':' + this.port;
    }

    // append timestamp to URI
    if (this.timestampRequests) {
      query[this.timestampParam] = +new Date;
    }

    // communicate binary support capabilities
    if (!this.supportsBinary) {
      query.b64 = 1;
    }

    query = parseqs.encode(query);

    // prepend ? to query
    if (query.length) {
      query = '?' + query;
    }

    return schema + '://' + this.hostname + port + this.path + query;
  };

  /**
   * Feature detection for WebSocket.
   *
   * @return {Boolean} whether this transport is available.
   * @api public
   */

  WS.prototype.check = function(){
    return !!WebSocket && !('__initialize' in WebSocket && this.name === WS.prototype.name);
  };

},{"../transport":497,"component-inherit":504,"debug":505,"engine.io-parser":508,"parseqs":518,"ws":520}],503:[function(require,module,exports){
  // browser shim for xmlhttprequest module
  var hasCORS = require('has-cors');

  module.exports = function(opts) {
    var xdomain = opts.xdomain;

    // scheme must be same when usign XDomainRequest
    // http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx
    var xscheme = opts.xscheme;

    // XDomainRequest has a flow of not sending cookie, therefore it should be disabled as a default.
    // https://github.com/Automattic/engine.io-client/pull/217
    var enablesXDR = opts.enablesXDR;

    // XMLHttpRequest can be disabled on IE
    try {
      if ('undefined' != typeof XMLHttpRequest && (!xdomain || hasCORS)) {
        return new XMLHttpRequest();
      }
    } catch (e) { }

    // Use XDomainRequest for IE8 if enablesXDR is true
    // because loading bar keeps flashing when using jsonp-polling
    // https://github.com/yujiosaka/socke.io-ie8-loading-example
    try {
      if ('undefined' != typeof XDomainRequest && !xscheme && enablesXDR) {
        return new XDomainRequest();
      }
    } catch (e) { }

    if (!xdomain) {
      try {
        return new ActiveXObject('Microsoft.XMLHTTP');
      } catch(e) { }
    }
  }

},{"has-cors":515}],504:[function(require,module,exports){

  module.exports = function(a, b){
    var fn = function(){};
    fn.prototype = b.prototype;
    a.prototype = new fn;
    a.prototype.constructor = a;
  };
},{}],505:[function(require,module,exports){

  /**
   * This is the web browser implementation of `debug()`.
   *
   * Expose `debug()` as the module.
   */

  exports = module.exports = require('./debug');
  exports.log = log;
  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load;
  exports.useColors = useColors;

  /**
   * Colors.
   */

  exports.colors = [
    'lightseagreen',
    'forestgreen',
    'goldenrod',
    'dodgerblue',
    'darkorchid',
    'crimson'
  ];

  /**
   * Currently only WebKit-based Web Inspectors, Firefox >= v31,
   * and the Firebug extension (any Firefox version) are known
   * to support "%c" CSS customizations.
   *
   * TODO: add a `localStorage` variable to explicitly enable/disable colors
   */

  function useColors() {
    // is webkit? http://stackoverflow.com/a/16459606/376773
    return ('WebkitAppearance' in document.documentElement.style) ||
      // is firebug? http://stackoverflow.com/a/398120/376773
      (window.console && (console.firebug || (console.exception && console.table))) ||
      // is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      (navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31);
  }

  /**
   * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
   */

  exports.formatters.j = function(v) {
    return JSON.stringify(v);
  };


  /**
   * Colorize log arguments if enabled.
   *
   * @api public
   */

  function formatArgs() {
    var args = arguments;
    var useColors = this.useColors;

    args[0] = (useColors ? '%c' : '')
      + this.namespace
      + (useColors ? ' %c' : ' ')
      + args[0]
      + (useColors ? '%c ' : ' ')
      + '+' + exports.humanize(this.diff);

    if (!useColors) return args;

    var c = 'color: ' + this.color;
    args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));

    // the final "%c" is somewhat tricky, because there could be other
    // arguments passed either before or after the %c, so we need to
    // figure out the correct index to insert the CSS into
    var index = 0;
    var lastC = 0;
    args[0].replace(/%[a-z%]/g, function(match) {
      if ('%%' === match) return;
      index++;
      if ('%c' === match) {
        // we only are interested in the *last* %c
        // (the user may have provided their own)
        lastC = index;
      }
    });

    args.splice(lastC, 0, c);
    return args;
  }

  /**
   * Invokes `console.log()` when available.
   * No-op when `console.log` is not a "function".
   *
   * @api public
   */

  function log() {
    // This hackery is required for IE8,
    // where the `console.log` function doesn't have 'apply'
    return 'object' == typeof console
      && 'function' == typeof console.log
      && Function.prototype.apply.call(console.log, console, arguments);
  }

  /**
   * Save `namespaces`.
   *
   * @param {String} namespaces
   * @api private
   */

  function save(namespaces) {
    try {
      if (null == namespaces) {
        localStorage.removeItem('debug');
      } else {
        localStorage.debug = namespaces;
      }
    } catch(e) {}
  }

  /**
   * Load `namespaces`.
   *
   * @return {String} returns the previously persisted debug modes
   * @api private
   */

  function load() {
    var r;
    try {
      r = localStorage.debug;
    } catch(e) {}
    return r;
  }

  /**
   * Enable namespaces listed in `localStorage.debug` initially.
   */

  exports.enable(load());

},{"./debug":506}],506:[function(require,module,exports){

  /**
   * This is the common logic for both the Node.js and web browser
   * implementations of `debug()`.
   *
   * Expose `debug()` as the module.
   */

  exports = module.exports = debug;
  exports.coerce = coerce;
  exports.disable = disable;
  exports.enable = enable;
  exports.enabled = enabled;
  exports.humanize = require('ms');

  /**
   * The currently active debug mode names, and names to skip.
   */

  exports.names = [];
  exports.skips = [];

  /**
   * Map of special "%n" handling functions, for the debug "format" argument.
   *
   * Valid key names are a single, lowercased letter, i.e. "n".
   */

  exports.formatters = {};

  /**
   * Previously assigned color.
   */

  var prevColor = 0;

  /**
   * Previous log timestamp.
   */

  var prevTime;

  /**
   * Select a color.
   *
   * @return {Number}
   * @api private
   */

  function selectColor() {
    return exports.colors[prevColor++ % exports.colors.length];
  }

  /**
   * Create a debugger with the given `namespace`.
   *
   * @param {String} namespace
   * @return {Function}
   * @api public
   */

  function debug(namespace) {

    // define the `disabled` version
    function disabled() {
    }
    disabled.enabled = false;

    // define the `enabled` version
    function enabled() {

      var self = enabled;

      // set `diff` timestamp
      var curr = +new Date();
      var ms = curr - (prevTime || curr);
      self.diff = ms;
      self.prev = prevTime;
      self.curr = curr;
      prevTime = curr;

      // add the `color` if not set
      if (null == self.useColors) self.useColors = exports.useColors();
      if (null == self.color && self.useColors) self.color = selectColor();

      var args = Array.prototype.slice.call(arguments);

      args[0] = exports.coerce(args[0]);

      if ('string' !== typeof args[0]) {
        // anything else let's inspect with %o
        args = ['%o'].concat(args);
      }

      // apply any `formatters` transformations
      var index = 0;
      args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {
        // if we encounter an escaped % then don't increase the array index
        if (match === '%%') return match;
        index++;
        var formatter = exports.formatters[format];
        if ('function' === typeof formatter) {
          var val = args[index];
          match = formatter.call(self, val);

          // now we need to remove `args[index]` since it's inlined in the `format`
          args.splice(index, 1);
          index--;
        }
        return match;
      });

      if ('function' === typeof exports.formatArgs) {
        args = exports.formatArgs.apply(self, args);
      }
      var logFn = enabled.log || exports.log || console.log.bind(console);
      logFn.apply(self, args);
    }
    enabled.enabled = true;

    var fn = exports.enabled(namespace) ? enabled : disabled;

    fn.namespace = namespace;

    return fn;
  }

  /**
   * Enables a debug mode by namespaces. This can include modes
   * separated by a colon and wildcards.
   *
   * @param {String} namespaces
   * @api public
   */

  function enable(namespaces) {
    exports.save(namespaces);

    var split = (namespaces || '').split(/[\s,]+/);
    var len = split.length;

    for (var i = 0; i < len; i++) {
      if (!split[i]) continue; // ignore empty strings
      namespaces = split[i].replace(/\*/g, '.*?');
      if (namespaces[0] === '-') {
        exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
      } else {
        exports.names.push(new RegExp('^' + namespaces + '$'));
      }
    }
  }

  /**
   * Disable debug output.
   *
   * @api public
   */

  function disable() {
    exports.enable('');
  }

  /**
   * Returns true if the given mode name is enabled, false otherwise.
   *
   * @param {String} name
   * @return {Boolean}
   * @api public
   */

  function enabled(name) {
    var i, len;
    for (i = 0, len = exports.skips.length; i < len; i++) {
      if (exports.skips[i].test(name)) {
        return false;
      }
    }
    for (i = 0, len = exports.names.length; i < len; i++) {
      if (exports.names[i].test(name)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Coerce `val`.
   *
   * @param {Mixed} val
   * @return {Mixed}
   * @api private
   */

  function coerce(val) {
    if (val instanceof Error) return val.stack || val.message;
    return val;
  }

},{"ms":507}],507:[function(require,module,exports){
  /**
   * Helpers.
   */

  var s = 1000;
  var m = s * 60;
  var h = m * 60;
  var d = h * 24;
  var y = d * 365.25;

  /**
   * Parse or format the given `val`.
   *
   * Options:
   *
   *  - `long` verbose formatting [false]
   *
   * @param {String|Number} val
   * @param {Object} options
   * @return {String|Number}
   * @api public
   */

  module.exports = function(val, options){
    options = options || {};
    if ('string' == typeof val) return parse(val);
    return options.long
      ? long(val)
      : short(val);
  };

  /**
   * Parse the given `str` and return milliseconds.
   *
   * @param {String} str
   * @return {Number}
   * @api private
   */

  function parse(str) {
    var match = /^((?:\d+)?\.?\d+) *(ms|seconds?|s|minutes?|m|hours?|h|days?|d|years?|y)?$/i.exec(str);
    if (!match) return;
    var n = parseFloat(match[1]);
    var type = (match[2] || 'ms').toLowerCase();
    switch (type) {
      case 'years':
      case 'year':
      case 'y':
        return n * y;
      case 'days':
      case 'day':
      case 'd':
        return n * d;
      case 'hours':
      case 'hour':
      case 'h':
        return n * h;
      case 'minutes':
      case 'minute':
      case 'm':
        return n * m;
      case 'seconds':
      case 'second':
      case 's':
        return n * s;
      case 'ms':
        return n;
    }
  }

  /**
   * Short format for `ms`.
   *
   * @param {Number} ms
   * @return {String}
   * @api private
   */

  function short(ms) {
    if (ms >= d) return Math.round(ms / d) + 'd';
    if (ms >= h) return Math.round(ms / h) + 'h';
    if (ms >= m) return Math.round(ms / m) + 'm';
    if (ms >= s) return Math.round(ms / s) + 's';
    return ms + 'ms';
  }

  /**
   * Long format for `ms`.
   *
   * @param {Number} ms
   * @return {String}
   * @api private
   */

  function long(ms) {
    return plural(ms, d, 'day')
      || plural(ms, h, 'hour')
      || plural(ms, m, 'minute')
      || plural(ms, s, 'second')
      || ms + ' ms';
  }

  /**
   * Pluralization helper.
   */

  function plural(ms, n, name) {
    if (ms < n) return;
    if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;
    return Math.ceil(ms / n) + ' ' + name + 's';
  }

},{}],508:[function(require,module,exports){
  (function (global){
    /**
     * Module dependencies.
     */

    var keys = require('./keys');
    var hasBinary = require('has-binary');
    var sliceBuffer = require('arraybuffer.slice');
    var base64encoder = require('base64-arraybuffer');
    var after = require('after');
    var utf8 = require('utf8');

    /**
     * Check if we are running an android browser. That requires us to use
     * ArrayBuffer with polling transports...
     *
     * http://ghinda.net/jpeg-blob-ajax-android/
     */

    var isAndroid = navigator.userAgent.match(/Android/i);

    /**
     * Check if we are running in PhantomJS.
     * Uploading a Blob with PhantomJS does not work correctly, as reported here:
     * https://github.com/ariya/phantomjs/issues/11395
     * @type boolean
     */
    var isPhantomJS = /PhantomJS/i.test(navigator.userAgent);

    /**
     * When true, avoids using Blobs to encode payloads.
     * @type boolean
     */
    var dontSendBlobs = isAndroid || isPhantomJS;

    /**
     * Current protocol version.
     */

    exports.protocol = 3;

    /**
     * Packet types.
     */

    var packets = exports.packets = {
      open:     0    // non-ws
      , close:    1    // non-ws
      , ping:     2
      , pong:     3
      , message:  4
      , upgrade:  5
      , noop:     6
    };

    var packetslist = keys(packets);

    /**
     * Premade error packet.
     */

    var err = { type: 'error', data: 'parser error' };

    /**
     * Create a blob api even for blob builder when vendor prefixes exist
     */

    var Blob = require('blob');

    /**
     * Encodes a packet.
     *
     *     <packet type id> [ <data> ]
     *
     * Example:
     *
     *     5hello world
     *     3
     *     4
     *
     * Binary is encoded in an identical principle
     *
     * @api private
     */

    exports.encodePacket = function (packet, supportsBinary, utf8encode, callback) {
      if ('function' == typeof supportsBinary) {
        callback = supportsBinary;
        supportsBinary = false;
      }

      if ('function' == typeof utf8encode) {
        callback = utf8encode;
        utf8encode = null;
      }

      var data = (packet.data === undefined)
        ? undefined
        : packet.data.buffer || packet.data;

      if (global.ArrayBuffer && data instanceof ArrayBuffer) {
        return encodeArrayBuffer(packet, supportsBinary, callback);
      } else if (Blob && data instanceof global.Blob) {
        return encodeBlob(packet, supportsBinary, callback);
      }

      // might be an object with { base64: true, data: dataAsBase64String }
      if (data && data.base64) {
        return encodeBase64Object(packet, callback);
      }

      // Sending data as a utf-8 string
      var encoded = packets[packet.type];

      // data fragment is optional
      if (undefined !== packet.data) {
        encoded += utf8encode ? utf8.encode(String(packet.data)) : String(packet.data);
      }

      return callback('' + encoded);

    };

    function encodeBase64Object(packet, callback) {
      // packet data is an object { base64: true, data: dataAsBase64String }
      var message = 'b' + exports.packets[packet.type] + packet.data.data;
      return callback(message);
    }

    /**
     * Encode packet helpers for binary types
     */

    function encodeArrayBuffer(packet, supportsBinary, callback) {
      if (!supportsBinary) {
        return exports.encodeBase64Packet(packet, callback);
      }

      var data = packet.data;
      var contentArray = new Uint8Array(data);
      var resultBuffer = new Uint8Array(1 + data.byteLength);

      resultBuffer[0] = packets[packet.type];
      for (var i = 0; i < contentArray.length; i++) {
        resultBuffer[i+1] = contentArray[i];
      }

      return callback(resultBuffer.buffer);
    }

    function encodeBlobAsArrayBuffer(packet, supportsBinary, callback) {
      if (!supportsBinary) {
        return exports.encodeBase64Packet(packet, callback);
      }

      var fr = new FileReader();
      fr.onload = function() {
        packet.data = fr.result;
        exports.encodePacket(packet, supportsBinary, true, callback);
      };
      return fr.readAsArrayBuffer(packet.data);
    }

    function encodeBlob(packet, supportsBinary, callback) {
      if (!supportsBinary) {
        return exports.encodeBase64Packet(packet, callback);
      }

      if (dontSendBlobs) {
        return encodeBlobAsArrayBuffer(packet, supportsBinary, callback);
      }

      var length = new Uint8Array(1);
      length[0] = packets[packet.type];
      var blob = new Blob([length.buffer, packet.data]);

      return callback(blob);
    }

    /**
     * Encodes a packet with binary data in a base64 string
     *
     * @param {Object} packet, has `type` and `data`
     * @return {String} base64 encoded message
     */

    exports.encodeBase64Packet = function(packet, callback) {
      var message = 'b' + exports.packets[packet.type];
      if (Blob && packet.data instanceof Blob) {
        var fr = new FileReader();
        fr.onload = function() {
          var b64 = fr.result.split(',')[1];
          callback(message + b64);
        };
        return fr.readAsDataURL(packet.data);
      }

      var b64data;
      try {
        b64data = String.fromCharCode.apply(null, new Uint8Array(packet.data));
      } catch (e) {
        // iPhone Safari doesn't let you apply with typed arrays
        var typed = new Uint8Array(packet.data);
        var basic = new Array(typed.length);
        for (var i = 0; i < typed.length; i++) {
          basic[i] = typed[i];
        }
        b64data = String.fromCharCode.apply(null, basic);
      }
      message += global.btoa(b64data);
      return callback(message);
    };

    /**
     * Decodes a packet. Changes format to Blob if requested.
     *
     * @return {Object} with `type` and `data` (if any)
     * @api private
     */

    exports.decodePacket = function (data, binaryType, utf8decode) {
      // String data
      if (typeof data == 'string' || data === undefined) {
        if (data.charAt(0) == 'b') {
          return exports.decodeBase64Packet(data.substr(1), binaryType);
        }

        if (utf8decode) {
          try {
            data = utf8.decode(data);
          } catch (e) {
            return err;
          }
        }
        var type = data.charAt(0);

        if (Number(type) != type || !packetslist[type]) {
          return err;
        }

        if (data.length > 1) {
          return { type: packetslist[type], data: data.substring(1) };
        } else {
          return { type: packetslist[type] };
        }
      }

      var asArray = new Uint8Array(data);
      var type = asArray[0];
      var rest = sliceBuffer(data, 1);
      if (Blob && binaryType === 'blob') {
        rest = new Blob([rest]);
      }
      return { type: packetslist[type], data: rest };
    };

    /**
     * Decodes a packet encoded in a base64 string
     *
     * @param {String} base64 encoded message
     * @return {Object} with `type` and `data` (if any)
     */

    exports.decodeBase64Packet = function(msg, binaryType) {
      var type = packetslist[msg.charAt(0)];
      if (!global.ArrayBuffer) {
        return { type: type, data: { base64: true, data: msg.substr(1) } };
      }

      var data = base64encoder.decode(msg.substr(1));

      if (binaryType === 'blob' && Blob) {
        data = new Blob([data]);
      }

      return { type: type, data: data };
    };

    /**
     * Encodes multiple messages (payload).
     *
     *     <length>:data
     *
     * Example:
     *
     *     11:hello world2:hi
     *
     * If any contents are binary, they will be encoded as base64 strings. Base64
     * encoded strings are marked with a b before the length specifier
     *
     * @param {Array} packets
     * @api private
     */

    exports.encodePayload = function (packets, supportsBinary, callback) {
      if (typeof supportsBinary == 'function') {
        callback = supportsBinary;
        supportsBinary = null;
      }

      var isBinary = hasBinary(packets);

      if (supportsBinary && isBinary) {
        if (Blob && !dontSendBlobs) {
          return exports.encodePayloadAsBlob(packets, callback);
        }

        return exports.encodePayloadAsArrayBuffer(packets, callback);
      }

      if (!packets.length) {
        return callback('0:');
      }

      function setLengthHeader(message) {
        return message.length + ':' + message;
      }

      function encodeOne(packet, doneCallback) {
        exports.encodePacket(packet, !isBinary ? false : supportsBinary, true, function(message) {
          doneCallback(null, setLengthHeader(message));
        });
      }

      map(packets, encodeOne, function(err, results) {
        return callback(results.join(''));
      });
    };

    /**
     * Async array map using after
     */

    function map(ary, each, done) {
      var result = new Array(ary.length);
      var next = after(ary.length, done);

      var eachWithIndex = function(i, el, cb) {
        each(el, function(error, msg) {
          result[i] = msg;
          cb(error, result);
        });
      };

      for (var i = 0; i < ary.length; i++) {
        eachWithIndex(i, ary[i], next);
      }
    }

    /*
     * Decodes data when a payload is maybe expected. Possible binary contents are
     * decoded from their base64 representation
     *
     * @param {String} data, callback method
     * @api public
     */

    exports.decodePayload = function (data, binaryType, callback) {
      if (typeof data != 'string') {
        return exports.decodePayloadAsBinary(data, binaryType, callback);
      }

      if (typeof binaryType === 'function') {
        callback = binaryType;
        binaryType = null;
      }

      var packet;
      if (data == '') {
        // parser error - ignoring payload
        return callback(err, 0, 1);
      }

      var length = ''
        , n, msg;

      for (var i = 0, l = data.length; i < l; i++) {
        var chr = data.charAt(i);

        if (':' != chr) {
          length += chr;
        } else {
          if ('' == length || (length != (n = Number(length)))) {
            // parser error - ignoring payload
            return callback(err, 0, 1);
          }

          msg = data.substr(i + 1, n);

          if (length != msg.length) {
            // parser error - ignoring payload
            return callback(err, 0, 1);
          }

          if (msg.length) {
            packet = exports.decodePacket(msg, binaryType, true);

            if (err.type == packet.type && err.data == packet.data) {
              // parser error in individual packet - ignoring payload
              return callback(err, 0, 1);
            }

            var ret = callback(packet, i + n, l);
            if (false === ret) return;
          }

          // advance cursor
          i += n;
          length = '';
        }
      }

      if (length != '') {
        // parser error - ignoring payload
        return callback(err, 0, 1);
      }

    };

    /**
     * Encodes multiple messages (payload) as binary.
     *
     * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number
     * 255><data>
     *
     * Example:
     * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers
     *
     * @param {Array} packets
     * @return {ArrayBuffer} encoded payload
     * @api private
     */

    exports.encodePayloadAsArrayBuffer = function(packets, callback) {
      if (!packets.length) {
        return callback(new ArrayBuffer(0));
      }

      function encodeOne(packet, doneCallback) {
        exports.encodePacket(packet, true, true, function(data) {
          return doneCallback(null, data);
        });
      }

      map(packets, encodeOne, function(err, encodedPackets) {
        var totalLength = encodedPackets.reduce(function(acc, p) {
          var len;
          if (typeof p === 'string'){
            len = p.length;
          } else {
            len = p.byteLength;
          }
          return acc + len.toString().length + len + 2; // string/binary identifier + separator = 2
        }, 0);

        var resultArray = new Uint8Array(totalLength);

        var bufferIndex = 0;
        encodedPackets.forEach(function(p) {
          var isString = typeof p === 'string';
          var ab = p;
          if (isString) {
            var view = new Uint8Array(p.length);
            for (var i = 0; i < p.length; i++) {
              view[i] = p.charCodeAt(i);
            }
            ab = view.buffer;
          }

          if (isString) { // not true binary
            resultArray[bufferIndex++] = 0;
          } else { // true binary
            resultArray[bufferIndex++] = 1;
          }

          var lenStr = ab.byteLength.toString();
          for (var i = 0; i < lenStr.length; i++) {
            resultArray[bufferIndex++] = parseInt(lenStr[i]);
          }
          resultArray[bufferIndex++] = 255;

          var view = new Uint8Array(ab);
          for (var i = 0; i < view.length; i++) {
            resultArray[bufferIndex++] = view[i];
          }
        });

        return callback(resultArray.buffer);
      });
    };

    /**
     * Encode as Blob
     */

    exports.encodePayloadAsBlob = function(packets, callback) {
      function encodeOne(packet, doneCallback) {
        exports.encodePacket(packet, true, true, function(encoded) {
          var binaryIdentifier = new Uint8Array(1);
          binaryIdentifier[0] = 1;
          if (typeof encoded === 'string') {
            var view = new Uint8Array(encoded.length);
            for (var i = 0; i < encoded.length; i++) {
              view[i] = encoded.charCodeAt(i);
            }
            encoded = view.buffer;
            binaryIdentifier[0] = 0;
          }

          var len = (encoded instanceof ArrayBuffer)
            ? encoded.byteLength
            : encoded.size;

          var lenStr = len.toString();
          var lengthAry = new Uint8Array(lenStr.length + 1);
          for (var i = 0; i < lenStr.length; i++) {
            lengthAry[i] = parseInt(lenStr[i]);
          }
          lengthAry[lenStr.length] = 255;

          if (Blob) {
            var blob = new Blob([binaryIdentifier.buffer, lengthAry.buffer, encoded]);
            doneCallback(null, blob);
          }
        });
      }

      map(packets, encodeOne, function(err, results) {
        return callback(new Blob(results));
      });
    };

    /*
     * Decodes data when a payload is maybe expected. Strings are decoded by
     * interpreting each byte as a key code for entries marked to start with 0. See
     * description of encodePayloadAsBinary
     *
     * @param {ArrayBuffer} data, callback method
     * @api public
     */

    exports.decodePayloadAsBinary = function (data, binaryType, callback) {
      if (typeof binaryType === 'function') {
        callback = binaryType;
        binaryType = null;
      }

      var bufferTail = data;
      var buffers = [];

      var numberTooLong = false;
      while (bufferTail.byteLength > 0) {
        var tailArray = new Uint8Array(bufferTail);
        var isString = tailArray[0] === 0;
        var msgLength = '';

        for (var i = 1; ; i++) {
          if (tailArray[i] == 255) break;

          if (msgLength.length > 310) {
            numberTooLong = true;
            break;
          }

          msgLength += tailArray[i];
        }

        if(numberTooLong) return callback(err, 0, 1);

        bufferTail = sliceBuffer(bufferTail, 2 + msgLength.length);
        msgLength = parseInt(msgLength);

        var msg = sliceBuffer(bufferTail, 0, msgLength);
        if (isString) {
          try {
            msg = String.fromCharCode.apply(null, new Uint8Array(msg));
          } catch (e) {
            // iPhone Safari doesn't let you apply to typed arrays
            var typed = new Uint8Array(msg);
            msg = '';
            for (var i = 0; i < typed.length; i++) {
              msg += String.fromCharCode(typed[i]);
            }
          }
        }

        buffers.push(msg);
        bufferTail = sliceBuffer(bufferTail, msgLength);
      }

      var total = buffers.length;
      buffers.forEach(function(buffer, i) {
        callback(exports.decodePacket(buffer, binaryType, true), i, total);
      });
    };

  }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./keys":509,"after":510,"arraybuffer.slice":511,"base64-arraybuffer":512,"blob":513,"has-binary":521,"utf8":514}],509:[function(require,module,exports){

  /**
   * Gets the keys for an object.
   *
   * @return {Array} keys
   * @api private
   */

  module.exports = Object.keys || function keys (obj){
      var arr = [];
      var has = Object.prototype.hasOwnProperty;

      for (var i in obj) {
        if (has.call(obj, i)) {
          arr.push(i);
        }
      }
      return arr;
    };

},{}],510:[function(require,module,exports){
  module.exports = after

  function after(count, callback, err_cb) {
    var bail = false
    err_cb = err_cb || noop
    proxy.count = count

    return (count === 0) ? callback() : proxy

    function proxy(err, result) {
      if (proxy.count <= 0) {
        throw new Error('after called too many times')
      }
      --proxy.count

      // after first error, rest are passed to err_cb
      if (err) {
        bail = true
        callback(err)
        // future error callbacks will go to error handler
        callback = err_cb
      } else if (proxy.count === 0 && !bail) {
        callback(null, result)
      }
    }
  }

  function noop() {}

},{}],511:[function(require,module,exports){
  /**
   * An abstraction for slicing an arraybuffer even when
   * ArrayBuffer.prototype.slice is not supported
   *
   * @api public
   */

  module.exports = function(arraybuffer, start, end) {
    var bytes = arraybuffer.byteLength;
    start = start || 0;
    end = end || bytes;

    if (arraybuffer.slice) { return arraybuffer.slice(start, end); }

    if (start < 0) { start += bytes; }
    if (end < 0) { end += bytes; }
    if (end > bytes) { end = bytes; }

    if (start >= bytes || start >= end || bytes === 0) {
      return new ArrayBuffer(0);
    }

    var abv = new Uint8Array(arraybuffer);
    var result = new Uint8Array(end - start);
    for (var i = start, ii = 0; i < end; i++, ii++) {
      result[ii] = abv[i];
    }
    return result.buffer;
  };

},{}],512:[function(require,module,exports){
  /*
   * base64-arraybuffer
   * https://github.com/niklasvh/base64-arraybuffer
   *
   * Copyright (c) 2012 Niklas von Hertzen
   * Licensed under the MIT license.
   */
  (function(chars){
    "use strict";

    exports.encode = function(arraybuffer) {
      var bytes = new Uint8Array(arraybuffer),
        i, len = bytes.length, base64 = "";

      for (i = 0; i < len; i+=3) {
        base64 += chars[bytes[i] >> 2];
        base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];
        base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];
        base64 += chars[bytes[i + 2] & 63];
      }

      if ((len % 3) === 2) {
        base64 = base64.substring(0, base64.length - 1) + "=";
      } else if (len % 3 === 1) {
        base64 = base64.substring(0, base64.length - 2) + "==";
      }

      return base64;
    };

    exports.decode =  function(base64) {
      var bufferLength = base64.length * 0.75,
        len = base64.length, i, p = 0,
        encoded1, encoded2, encoded3, encoded4;

      if (base64[base64.length - 1] === "=") {
        bufferLength--;
        if (base64[base64.length - 2] === "=") {
          bufferLength--;
        }
      }

      var arraybuffer = new ArrayBuffer(bufferLength),
        bytes = new Uint8Array(arraybuffer);

      for (i = 0; i < len; i+=4) {
        encoded1 = chars.indexOf(base64[i]);
        encoded2 = chars.indexOf(base64[i+1]);
        encoded3 = chars.indexOf(base64[i+2]);
        encoded4 = chars.indexOf(base64[i+3]);

        bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);
        bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);
        bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);
      }

      return arraybuffer;
    };
  })("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");

},{}],513:[function(require,module,exports){
  (function (global){
    /**
     * Create a blob builder even when vendor prefixes exist
     */

    var BlobBuilder = global.BlobBuilder
      || global.WebKitBlobBuilder
      || global.MSBlobBuilder
      || global.MozBlobBuilder;

    /**
     * Check if Blob constructor is supported
     */

    var blobSupported = (function() {
      try {
        var a = new Blob(['hi']);
        return a.size === 2;
      } catch(e) {
        return false;
      }
    })();

    /**
     * Check if Blob constructor supports ArrayBufferViews
     * Fails in Safari 6, so we need to map to ArrayBuffers there.
     */

    var blobSupportsArrayBufferView = blobSupported && (function() {
        try {
          var b = new Blob([new Uint8Array([1,2])]);
          return b.size === 2;
        } catch(e) {
          return false;
        }
      })();

    /**
     * Check if BlobBuilder is supported
     */

    var blobBuilderSupported = BlobBuilder
      && BlobBuilder.prototype.append
      && BlobBuilder.prototype.getBlob;

    /**
     * Helper function that maps ArrayBufferViews to ArrayBuffers
     * Used by BlobBuilder constructor and old browsers that didn't
     * support it in the Blob constructor.
     */

    function mapArrayBufferViews(ary) {
      for (var i = 0; i < ary.length; i++) {
        var chunk = ary[i];
        if (chunk.buffer instanceof ArrayBuffer) {
          var buf = chunk.buffer;

          // if this is a subarray, make a copy so we only
          // include the subarray region from the underlying buffer
          if (chunk.byteLength !== buf.byteLength) {
            var copy = new Uint8Array(chunk.byteLength);
            copy.set(new Uint8Array(buf, chunk.byteOffset, chunk.byteLength));
            buf = copy.buffer;
          }

          ary[i] = buf;
        }
      }
    }

    function BlobBuilderConstructor(ary, options) {
      options = options || {};

      var bb = new BlobBuilder();
      mapArrayBufferViews(ary);

      for (var i = 0; i < ary.length; i++) {
        bb.append(ary[i]);
      }

      return (options.type) ? bb.getBlob(options.type) : bb.getBlob();
    };

    function BlobConstructor(ary, options) {
      mapArrayBufferViews(ary);
      return new Blob(ary, options || {});
    };

    module.exports = (function() {
      if (blobSupported) {
        return blobSupportsArrayBufferView ? global.Blob : BlobConstructor;
      } else if (blobBuilderSupported) {
        return BlobBuilderConstructor;
      } else {
        return undefined;
      }
    })();

  }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],514:[function(require,module,exports){
  (function (global){
    /*! https://mths.be/utf8js v2.0.0 by @mathias */
    ;(function(root) {

      // Detect free variables `exports`
      var freeExports = typeof exports == 'object' && exports;

      // Detect free variable `module`
      var freeModule = typeof module == 'object' && module &&
        module.exports == freeExports && module;

      // Detect free variable `global`, from Node.js or Browserified code,
      // and use it as `root`
      var freeGlobal = typeof global == 'object' && global;
      if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
        root = freeGlobal;
      }

      /*--------------------------------------------------------------------------*/

      var stringFromCharCode = String.fromCharCode;

      // Taken from https://mths.be/punycode
      function ucs2decode(string) {
        var output = [];
        var counter = 0;
        var length = string.length;
        var value;
        var extra;
        while (counter < length) {
          value = string.charCodeAt(counter++);
          if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
            // high surrogate, and there is a next character
            extra = string.charCodeAt(counter++);
            if ((extra & 0xFC00) == 0xDC00) { // low surrogate
              output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
            } else {
              // unmatched surrogate; only append this code unit, in case the next
              // code unit is the high surrogate of a surrogate pair
              output.push(value);
              counter--;
            }
          } else {
            output.push(value);
          }
        }
        return output;
      }

      // Taken from https://mths.be/punycode
      function ucs2encode(array) {
        var length = array.length;
        var index = -1;
        var value;
        var output = '';
        while (++index < length) {
          value = array[index];
          if (value > 0xFFFF) {
            value -= 0x10000;
            output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
            value = 0xDC00 | value & 0x3FF;
          }
          output += stringFromCharCode(value);
        }
        return output;
      }

      function checkScalarValue(codePoint) {
        if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {
          throw Error(
            'Lone surrogate U+' + codePoint.toString(16).toUpperCase() +
            ' is not a scalar value'
          );
        }
      }
      /*--------------------------------------------------------------------------*/

      function createByte(codePoint, shift) {
        return stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);
      }

      function encodeCodePoint(codePoint) {
        if ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence
          return stringFromCharCode(codePoint);
        }
        var symbol = '';
        if ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence
          symbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);
        }
        else if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence
          checkScalarValue(codePoint);
          symbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);
          symbol += createByte(codePoint, 6);
        }
        else if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence
          symbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);
          symbol += createByte(codePoint, 12);
          symbol += createByte(codePoint, 6);
        }
        symbol += stringFromCharCode((codePoint & 0x3F) | 0x80);
        return symbol;
      }

      function utf8encode(string) {
        var codePoints = ucs2decode(string);
        var length = codePoints.length;
        var index = -1;
        var codePoint;
        var byteString = '';
        while (++index < length) {
          codePoint = codePoints[index];
          byteString += encodeCodePoint(codePoint);
        }
        return byteString;
      }

      /*--------------------------------------------------------------------------*/

      function readContinuationByte() {
        if (byteIndex >= byteCount) {
          throw Error('Invalid byte index');
        }

        var continuationByte = byteArray[byteIndex] & 0xFF;
        byteIndex++;

        if ((continuationByte & 0xC0) == 0x80) {
          return continuationByte & 0x3F;
        }

        // If we end up here, it’s not a continuation byte
        throw Error('Invalid continuation byte');
      }

      function decodeSymbol() {
        var byte1;
        var byte2;
        var byte3;
        var byte4;
        var codePoint;

        if (byteIndex > byteCount) {
          throw Error('Invalid byte index');
        }

        if (byteIndex == byteCount) {
          return false;
        }

        // Read first byte
        byte1 = byteArray[byteIndex] & 0xFF;
        byteIndex++;

        // 1-byte sequence (no continuation bytes)
        if ((byte1 & 0x80) == 0) {
          return byte1;
        }

        // 2-byte sequence
        if ((byte1 & 0xE0) == 0xC0) {
          var byte2 = readContinuationByte();
          codePoint = ((byte1 & 0x1F) << 6) | byte2;
          if (codePoint >= 0x80) {
            return codePoint;
          } else {
            throw Error('Invalid continuation byte');
          }
        }

        // 3-byte sequence (may include unpaired surrogates)
        if ((byte1 & 0xF0) == 0xE0) {
          byte2 = readContinuationByte();
          byte3 = readContinuationByte();
          codePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;
          if (codePoint >= 0x0800) {
            checkScalarValue(codePoint);
            return codePoint;
          } else {
            throw Error('Invalid continuation byte');
          }
        }

        // 4-byte sequence
        if ((byte1 & 0xF8) == 0xF0) {
          byte2 = readContinuationByte();
          byte3 = readContinuationByte();
          byte4 = readContinuationByte();
          codePoint = ((byte1 & 0x0F) << 0x12) | (byte2 << 0x0C) |
            (byte3 << 0x06) | byte4;
          if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {
            return codePoint;
          }
        }

        throw Error('Invalid UTF-8 detected');
      }

      var byteArray;
      var byteCount;
      var byteIndex;
      function utf8decode(byteString) {
        byteArray = ucs2decode(byteString);
        byteCount = byteArray.length;
        byteIndex = 0;
        var codePoints = [];
        var tmp;
        while ((tmp = decodeSymbol()) !== false) {
          codePoints.push(tmp);
        }
        return ucs2encode(codePoints);
      }

      /*--------------------------------------------------------------------------*/

      var utf8 = {
        'version': '2.0.0',
        'encode': utf8encode,
        'decode': utf8decode
      };

      // Some AMD build optimizers, like r.js, check for specific condition patterns
      // like the following:
      if (
        typeof define == 'function' &&
        typeof define.amd == 'object' &&
        define.amd
      ) {
        define(function() {
          return utf8;
        });
      }	else if (freeExports && !freeExports.nodeType) {
        if (freeModule) { // in Node.js or RingoJS v0.8.0+
          freeModule.exports = utf8;
        } else { // in Narwhal or RingoJS v0.7.0-
          var object = {};
          var hasOwnProperty = object.hasOwnProperty;
          for (var key in utf8) {
            hasOwnProperty.call(utf8, key) && (freeExports[key] = utf8[key]);
          }
        }
      } else { // in Rhino or a web browser
        root.utf8 = utf8;
      }

    }(this));

  }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],515:[function(require,module,exports){

  /**
   * Module dependencies.
   */

  var global = require('global');

  /**
   * Module exports.
   *
   * Logic borrowed from Modernizr:
   *
   *   - https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cors.js
   */

  try {
    module.exports = 'XMLHttpRequest' in global &&
      'withCredentials' in new global.XMLHttpRequest();
  } catch (err) {
    // if XMLHttp support is disabled in IE then it will throw
    // when trying to create
    module.exports = false;
  }

},{"global":516}],516:[function(require,module,exports){

  /**
   * Returns `this`. Execute this without a "context" (i.e. without it being
   * attached to an object of the left-hand side), and `this` points to the
   * "global" scope of the current JS execution.
   */

  module.exports = (function () { return this; })();

},{}],517:[function(require,module,exports){
  (function (global){
    /**
     * JSON parse.
     *
     * @see Based on jQuery#parseJSON (MIT) and JSON2
     * @api private
     */

    var rvalidchars = /^[\],:{}\s]*$/;
    var rvalidescape = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g;
    var rvalidtokens = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
    var rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g;
    var rtrimLeft = /^\s+/;
    var rtrimRight = /\s+$/;

    module.exports = function parsejson(data) {
      if ('string' != typeof data || !data) {
        return null;
      }

      data = data.replace(rtrimLeft, '').replace(rtrimRight, '');

      // Attempt to parse using the native JSON parser first
      if (global.JSON && JSON.parse) {
        return JSON.parse(data);
      }

      if (rvalidchars.test(data.replace(rvalidescape, '@')
          .replace(rvalidtokens, ']')
          .replace(rvalidbraces, ''))) {
        return (new Function('return ' + data))();
      }
    };
  }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],518:[function(require,module,exports){
  /**
   * Compiles a querystring
   * Returns string representation of the object
   *
   * @param {Object}
   * @api private
   */

  exports.encode = function (obj) {
    var str = '';

    for (var i in obj) {
      if (obj.hasOwnProperty(i)) {
        if (str.length) str += '&';
        str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);
      }
    }

    return str;
  };

  /**
   * Parses a simple querystring into an object
   *
   * @param {String} qs
   * @api private
   */

  exports.decode = function(qs){
    var qry = {};
    var pairs = qs.split('&');
    for (var i = 0, l = pairs.length; i < l; i++) {
      var pair = pairs[i].split('=');
      qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
    }
    return qry;
  };

},{}],519:[function(require,module,exports){
  /**
   * Parses an URI
   *
   * @author Steven Levithan <stevenlevithan.com> (MIT license)
   * @api private
   */

  var re = /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;

  var parts = [
    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'
  ];

  module.exports = function parseuri(str) {
    var src = str,
      b = str.indexOf('['),
      e = str.indexOf(']');

    if (b != -1 && e != -1) {
      str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);
    }

    var m = re.exec(str || ''),
      uri = {},
      i = 14;

    while (i--) {
      uri[parts[i]] = m[i] || '';
    }

    if (b != -1 && e != -1) {
      uri.source = src;
      uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');
      uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');
      uri.ipv6uri = true;
    }

    return uri;
  };

},{}],520:[function(require,module,exports){

  /**
   * Module dependencies.
   */

  var global = (function() { return this; })();

  /**
   * WebSocket constructor.
   */

  var WebSocket = global.WebSocket || global.MozWebSocket;

  /**
   * Module exports.
   */

  module.exports = WebSocket ? ws : null;

  /**
   * WebSocket constructor.
   *
   * The third `opts` options object gets ignored in web browsers, since it's
   * non-standard, and throws a TypeError if passed to the constructor.
   * See: https://github.com/einaros/ws/issues/227
   *
   * @param {String} uri
   * @param {Array} protocols (optional)
   * @param {Object) opts (optional)
   * @api public
   */

  function ws(uri, protocols, opts) {
    var instance;
    if (protocols) {
      instance = new WebSocket(uri, protocols);
    } else {
      instance = new WebSocket(uri);
    }
    return instance;
  }

  if (WebSocket) ws.prototype = WebSocket.prototype;

},{}],521:[function(require,module,exports){
  (function (global){

    /*
     * Module requirements.
     */

    var isArray = require('isarray');

    /**
     * Module exports.
     */

    module.exports = hasBinary;

    /**
     * Checks for binary data.
     *
     * Right now only Buffer and ArrayBuffer are supported..
     *
     * @param {Object} anything
     * @api public
     */

    function hasBinary(data) {

      function _hasBinary(obj) {
        if (!obj) return false;

        if ( (global.Buffer && global.Buffer.isBuffer(obj)) ||
          (global.ArrayBuffer && obj instanceof ArrayBuffer) ||
          (global.Blob && obj instanceof Blob) ||
          (global.File && obj instanceof File)
        ) {
          return true;
        }

        if (isArray(obj)) {
          for (var i = 0; i < obj.length; i++) {
            if (_hasBinary(obj[i])) {
              return true;
            }
          }
        } else if (obj && 'object' == typeof obj) {
          if (obj.toJSON) {
            obj = obj.toJSON();
          }

          for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key) && _hasBinary(obj[key])) {
              return true;
            }
          }
        }

        return false;
      }

      return _hasBinary(data);
    }

  }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"isarray":522}],522:[function(require,module,exports){
  module.exports = Array.isArray || function (arr) {
      return Object.prototype.toString.call(arr) == '[object Array]';
    };

},{}],523:[function(require,module,exports){

  var indexOf = [].indexOf;

  module.exports = function(arr, obj){
    if (indexOf) return arr.indexOf(obj);
    for (var i = 0; i < arr.length; ++i) {
      if (arr[i] === obj) return i;
    }
    return -1;
  };
},{}],524:[function(require,module,exports){

  /**
   * HOP ref.
   */

  var has = Object.prototype.hasOwnProperty;

  /**
   * Return own keys in `obj`.
   *
   * @param {Object} obj
   * @return {Array}
   * @api public
   */

  exports.keys = Object.keys || function(obj){
      var keys = [];
      for (var key in obj) {
        if (has.call(obj, key)) {
          keys.push(key);
        }
      }
      return keys;
    };

  /**
   * Return own values in `obj`.
   *
   * @param {Object} obj
   * @return {Array}
   * @api public
   */

  exports.values = function(obj){
    var vals = [];
    for (var key in obj) {
      if (has.call(obj, key)) {
        vals.push(obj[key]);
      }
    }
    return vals;
  };

  /**
   * Merge `b` into `a`.
   *
   * @param {Object} a
   * @param {Object} b
   * @return {Object} a
   * @api public
   */

  exports.merge = function(a, b){
    for (var key in b) {
      if (has.call(b, key)) {
        a[key] = b[key];
      }
    }
    return a;
  };

  /**
   * Return length of `obj`.
   *
   * @param {Object} obj
   * @return {Number}
   * @api public
   */

  exports.length = function(obj){
    return exports.keys(obj).length;
  };

  /**
   * Check if `obj` is empty.
   *
   * @param {Object} obj
   * @return {Boolean}
   * @api public
   */

  exports.isEmpty = function(obj){
    return 0 == exports.length(obj);
  };
},{}],525:[function(require,module,exports){
  /**
   * Parses an URI
   *
   * @author Steven Levithan <stevenlevithan.com> (MIT license)
   * @api private
   */

  var re = /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;

  var parts = [
    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host'
    , 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'
  ];

  module.exports = function parseuri(str) {
    var m = re.exec(str || '')
      , uri = {}
      , i = 14;

    while (i--) {
      uri[parts[i]] = m[i] || '';
    }

    return uri;
  };

},{}],526:[function(require,module,exports){
  (function (global){
    /*global Blob,File*/

    /**
     * Module requirements
     */

    var isArray = require('isarray');
    var isBuf = require('./is-buffer');

    /**
     * Replaces every Buffer | ArrayBuffer in packet with a numbered placeholder.
     * Anything with blobs or files should be fed through removeBlobs before coming
     * here.
     *
     * @param {Object} packet - socket.io event packet
     * @return {Object} with deconstructed packet and list of buffers
     * @api public
     */

    exports.deconstructPacket = function(packet){
      var buffers = [];
      var packetData = packet.data;

      function _deconstructPacket(data) {
        if (!data) return data;

        if (isBuf(data)) {
          var placeholder = { _placeholder: true, num: buffers.length };
          buffers.push(data);
          return placeholder;
        } else if (isArray(data)) {
          var newData = new Array(data.length);
          for (var i = 0; i < data.length; i++) {
            newData[i] = _deconstructPacket(data[i]);
          }
          return newData;
        } else if ('object' == typeof data && !(data instanceof Date)) {
          var newData = {};
          for (var key in data) {
            newData[key] = _deconstructPacket(data[key]);
          }
          return newData;
        }
        return data;
      }

      var pack = packet;
      pack.data = _deconstructPacket(packetData);
      pack.attachments = buffers.length; // number of binary 'attachments'
      return {packet: pack, buffers: buffers};
    };

    /**
     * Reconstructs a binary packet from its placeholder packet and buffers
     *
     * @param {Object} packet - event packet with placeholders
     * @param {Array} buffers - binary buffers to put in placeholder positions
     * @return {Object} reconstructed packet
     * @api public
     */

    exports.reconstructPacket = function(packet, buffers) {
      var curPlaceHolder = 0;

      function _reconstructPacket(data) {
        if (data && data._placeholder) {
          var buf = buffers[data.num]; // appropriate buffer (should be natural order anyway)
          return buf;
        } else if (isArray(data)) {
          for (var i = 0; i < data.length; i++) {
            data[i] = _reconstructPacket(data[i]);
          }
          return data;
        } else if (data && 'object' == typeof data) {
          for (var key in data) {
            data[key] = _reconstructPacket(data[key]);
          }
          return data;
        }
        return data;
      }

      packet.data = _reconstructPacket(packet.data);
      packet.attachments = undefined; // no longer useful
      return packet;
    };

    /**
     * Asynchronously removes Blobs or Files from data via
     * FileReader's readAsArrayBuffer method. Used before encoding
     * data as msgpack. Calls callback with the blobless data.
     *
     * @param {Object} data
     * @param {Function} callback
     * @api private
     */

    exports.removeBlobs = function(data, callback) {
      function _removeBlobs(obj, curKey, containingObject) {
        if (!obj) return obj;

        // convert any blob
        if ((global.Blob && obj instanceof Blob) ||
          (global.File && obj instanceof File)) {
          pendingBlobs++;

          // async filereader
          var fileReader = new FileReader();
          fileReader.onload = function() { // this.result == arraybuffer
            if (containingObject) {
              containingObject[curKey] = this.result;
            }
            else {
              bloblessData = this.result;
            }

            // if nothing pending its callback time
            if(! --pendingBlobs) {
              callback(bloblessData);
            }
          };

          fileReader.readAsArrayBuffer(obj); // blob -> arraybuffer
        } else if (isArray(obj)) { // handle array
          for (var i = 0; i < obj.length; i++) {
            _removeBlobs(obj[i], i, obj);
          }
        } else if (obj && 'object' == typeof obj && !isBuf(obj)) { // and object
          for (var key in obj) {
            _removeBlobs(obj[key], key, obj);
          }
        }
      }

      var pendingBlobs = 0;
      var bloblessData = data;
      _removeBlobs(bloblessData);
      if (!pendingBlobs) {
        callback(bloblessData);
      }
    };

  }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./is-buffer":528,"isarray":529}],527:[function(require,module,exports){

  /**
   * Module dependencies.
   */

  var debug = require('debug')('socket.io-parser');
  var json = require('json3');
  var isArray = require('isarray');
  var Emitter = require('component-emitter');
  var binary = require('./binary');
  var isBuf = require('./is-buffer');

  /**
   * Protocol version.
   *
   * @api public
   */

  exports.protocol = 4;

  /**
   * Packet types.
   *
   * @api public
   */

  exports.types = [
    'CONNECT',
    'DISCONNECT',
    'EVENT',
    'BINARY_EVENT',
    'ACK',
    'BINARY_ACK',
    'ERROR'
  ];

  /**
   * Packet type `connect`.
   *
   * @api public
   */

  exports.CONNECT = 0;

  /**
   * Packet type `disconnect`.
   *
   * @api public
   */

  exports.DISCONNECT = 1;

  /**
   * Packet type `event`.
   *
   * @api public
   */

  exports.EVENT = 2;

  /**
   * Packet type `ack`.
   *
   * @api public
   */

  exports.ACK = 3;

  /**
   * Packet type `error`.
   *
   * @api public
   */

  exports.ERROR = 4;

  /**
   * Packet type 'binary event'
   *
   * @api public
   */

  exports.BINARY_EVENT = 5;

  /**
   * Packet type `binary ack`. For acks with binary arguments.
   *
   * @api public
   */

  exports.BINARY_ACK = 6;

  /**
   * Encoder constructor.
   *
   * @api public
   */

  exports.Encoder = Encoder;

  /**
   * Decoder constructor.
   *
   * @api public
   */

  exports.Decoder = Decoder;

  /**
   * A socket.io Encoder instance
   *
   * @api public
   */

  function Encoder() {}

  /**
   * Encode a packet as a single string if non-binary, or as a
   * buffer sequence, depending on packet type.
   *
   * @param {Object} obj - packet object
   * @param {Function} callback - function to handle encodings (likely engine.write)
   * @return Calls callback with Array of encodings
   * @api public
   */

  Encoder.prototype.encode = function(obj, callback){
    debug('encoding packet %j', obj);

    if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {
      encodeAsBinary(obj, callback);
    }
    else {
      var encoding = encodeAsString(obj);
      callback([encoding]);
    }
  };

  /**
   * Encode packet as string.
   *
   * @param {Object} packet
   * @return {String} encoded
   * @api private
   */

  function encodeAsString(obj) {
    var str = '';
    var nsp = false;

    // first is type
    str += obj.type;

    // attachments if we have them
    if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {
      str += obj.attachments;
      str += '-';
    }

    // if we have a namespace other than `/`
    // we append it followed by a comma `,`
    if (obj.nsp && '/' != obj.nsp) {
      nsp = true;
      str += obj.nsp;
    }

    // immediately followed by the id
    if (null != obj.id) {
      if (nsp) {
        str += ',';
        nsp = false;
      }
      str += obj.id;
    }

    // json data
    if (null != obj.data) {
      if (nsp) str += ',';
      str += json.stringify(obj.data);
    }

    debug('encoded %j as %s', obj, str);
    return str;
  }

  /**
   * Encode packet as 'buffer sequence' by removing blobs, and
   * deconstructing packet into object with placeholders and
   * a list of buffers.
   *
   * @param {Object} packet
   * @return {Buffer} encoded
   * @api private
   */

  function encodeAsBinary(obj, callback) {

    function writeEncoding(bloblessData) {
      var deconstruction = binary.deconstructPacket(bloblessData);
      var pack = encodeAsString(deconstruction.packet);
      var buffers = deconstruction.buffers;

      buffers.unshift(pack); // add packet info to beginning of data list
      callback(buffers); // write all the buffers
    }

    binary.removeBlobs(obj, writeEncoding);
  }

  /**
   * A socket.io Decoder instance
   *
   * @return {Object} decoder
   * @api public
   */

  function Decoder() {
    this.reconstructor = null;
  }

  /**
   * Mix in `Emitter` with Decoder.
   */

  Emitter(Decoder.prototype);

  /**
   * Decodes an ecoded packet string into packet JSON.
   *
   * @param {String} obj - encoded packet
   * @return {Object} packet
   * @api public
   */

  Decoder.prototype.add = function(obj) {
    var packet;
    if ('string' == typeof obj) {
      packet = decodeString(obj);
      if (exports.BINARY_EVENT == packet.type || exports.BINARY_ACK == packet.type) { // binary packet's json
        this.reconstructor = new BinaryReconstructor(packet);

        // no attachments, labeled binary but no binary data to follow
        if (this.reconstructor.reconPack.attachments === 0) {
          this.emit('decoded', packet);
        }
      } else { // non-binary full packet
        this.emit('decoded', packet);
      }
    }
    else if (isBuf(obj) || obj.base64) { // raw binary data
      if (!this.reconstructor) {
        throw new Error('got binary data when not reconstructing a packet');
      } else {
        packet = this.reconstructor.takeBinaryData(obj);
        if (packet) { // received final buffer
          this.reconstructor = null;
          this.emit('decoded', packet);
        }
      }
    }
    else {
      throw new Error('Unknown type: ' + obj);
    }
  };

  /**
   * Decode a packet String (JSON data)
   *
   * @param {String} str
   * @return {Object} packet
   * @api private
   */

  function decodeString(str) {
    var p = {};
    var i = 0;

    // look up type
    p.type = Number(str.charAt(0));
    if (null == exports.types[p.type]) return error();

    // look up attachments if type binary
    if (exports.BINARY_EVENT == p.type || exports.BINARY_ACK == p.type) {
      var buf = '';
      while (str.charAt(++i) != '-') {
        buf += str.charAt(i);
        if (i == str.length) break;
      }
      if (buf != Number(buf) || str.charAt(i) != '-') {
        throw new Error('Illegal attachments');
      }
      p.attachments = Number(buf);
    }

    // look up namespace (if any)
    if ('/' == str.charAt(i + 1)) {
      p.nsp = '';
      while (++i) {
        var c = str.charAt(i);
        if (',' == c) break;
        p.nsp += c;
        if (i == str.length) break;
      }
    } else {
      p.nsp = '/';
    }

    // look up id
    var next = str.charAt(i + 1);
    if ('' !== next && Number(next) == next) {
      p.id = '';
      while (++i) {
        var c = str.charAt(i);
        if (null == c || Number(c) != c) {
          --i;
          break;
        }
        p.id += str.charAt(i);
        if (i == str.length) break;
      }
      p.id = Number(p.id);
    }

    // look up json data
    if (str.charAt(++i)) {
      try {
        p.data = json.parse(str.substr(i));
      } catch(e){
        return error();
      }
    }

    debug('decoded %s as %j', str, p);
    return p;
  }

  /**
   * Deallocates a parser's resources
   *
   * @api public
   */

  Decoder.prototype.destroy = function() {
    if (this.reconstructor) {
      this.reconstructor.finishedReconstruction();
    }
  };

  /**
   * A manager of a binary event's 'buffer sequence'. Should
   * be constructed whenever a packet of type BINARY_EVENT is
   * decoded.
   *
   * @param {Object} packet
   * @return {BinaryReconstructor} initialized reconstructor
   * @api private
   */

  function BinaryReconstructor(packet) {
    this.reconPack = packet;
    this.buffers = [];
  }

  /**
   * Method to be called when binary data received from connection
   * after a BINARY_EVENT packet.
   *
   * @param {Buffer | ArrayBuffer} binData - the raw binary data received
   * @return {null | Object} returns null if more binary data is expected or
   *   a reconstructed packet object if all buffers have been received.
   * @api private
   */

  BinaryReconstructor.prototype.takeBinaryData = function(binData) {
    this.buffers.push(binData);
    if (this.buffers.length == this.reconPack.attachments) { // done with buffer list
      var packet = binary.reconstructPacket(this.reconPack, this.buffers);
      this.finishedReconstruction();
      return packet;
    }
    return null;
  };

  /**
   * Cleans up binary packet reconstruction variables.
   *
   * @api private
   */

  BinaryReconstructor.prototype.finishedReconstruction = function() {
    this.reconPack = null;
    this.buffers = [];
  };

  function error(data){
    return {
      type: exports.ERROR,
      data: 'parser error'
    };
  }

},{"./binary":526,"./is-buffer":528,"component-emitter":492,"debug":493,"isarray":529,"json3":530}],528:[function(require,module,exports){
  (function (global){

    module.exports = isBuf;

    /**
     * Returns true if obj is a buffer or an arraybuffer.
     *
     * @api private
     */

    function isBuf(obj) {
      return (global.Buffer && global.Buffer.isBuffer(obj)) ||
        (global.ArrayBuffer && obj instanceof ArrayBuffer);
    }

  }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],529:[function(require,module,exports){
  arguments[4][522][0].apply(exports,arguments)
},{"dup":522}],530:[function(require,module,exports){
  /*! JSON v3.2.6 | http://bestiejs.github.io/json3 | Copyright 2012-2013, Kit Cambridge | http://kit.mit-license.org */
  ;(function (window) {
    // Convenience aliases.
    var getClass = {}.toString, isProperty, forEach, undef;

    // Detect the `define` function exposed by asynchronous module loaders. The
    // strict `define` check is necessary for compatibility with `r.js`.
    var isLoader = typeof define === "function" && define.amd;

    // Detect native implementations.
    var nativeJSON = typeof JSON == "object" && JSON;

    // Set up the JSON 3 namespace, preferring the CommonJS `exports` object if
    // available.
    var JSON3 = typeof exports == "object" && exports && !exports.nodeType && exports;

    if (JSON3 && nativeJSON) {
      // Explicitly delegate to the native `stringify` and `parse`
      // implementations in CommonJS environments.
      JSON3.stringify = nativeJSON.stringify;
      JSON3.parse = nativeJSON.parse;
    } else {
      // Export for web browsers, JavaScript engines, and asynchronous module
      // loaders, using the global `JSON` object if available.
      JSON3 = window.JSON = nativeJSON || {};
    }

    // Test the `Date#getUTC*` methods. Based on work by @Yaffle.
    var isExtended = new Date(-3509827334573292);
    try {
      // The `getUTCFullYear`, `Month`, and `Date` methods return nonsensical
      // results for certain dates in Opera >= 10.53.
      isExtended = isExtended.getUTCFullYear() == -109252 && isExtended.getUTCMonth() === 0 && isExtended.getUTCDate() === 1 &&
        // Safari < 2.0.2 stores the internal millisecond time value correctly,
        // but clips the values returned by the date methods to the range of
        // signed 32-bit integers ([-2 ** 31, 2 ** 31 - 1]).
        isExtended.getUTCHours() == 10 && isExtended.getUTCMinutes() == 37 && isExtended.getUTCSeconds() == 6 && isExtended.getUTCMilliseconds() == 708;
    } catch (exception) {}

    // Internal: Determines whether the native `JSON.stringify` and `parse`
    // implementations are spec-compliant. Based on work by Ken Snyder.
    function has(name) {
      if (has[name] !== undef) {
        // Return cached feature test result.
        return has[name];
      }

      var isSupported;
      if (name == "bug-string-char-index") {
        // IE <= 7 doesn't support accessing string characters using square
        // bracket notation. IE 8 only supports this for primitives.
        isSupported = "a"[0] != "a";
      } else if (name == "json") {
        // Indicates whether both `JSON.stringify` and `JSON.parse` are
        // supported.
        isSupported = has("json-stringify") && has("json-parse");
      } else {
        var value, serialized = '{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}';
        // Test `JSON.stringify`.
        if (name == "json-stringify") {
          var stringify = JSON3.stringify, stringifySupported = typeof stringify == "function" && isExtended;
          if (stringifySupported) {
            // A test function object with a custom `toJSON` method.
            (value = function () {
              return 1;
            }).toJSON = value;
            try {
              stringifySupported =
                // Firefox 3.1b1 and b2 serialize string, number, and boolean
                // primitives as object literals.
                stringify(0) === "0" &&
                // FF 3.1b1, b2, and JSON 2 serialize wrapped primitives as object
                // literals.
                stringify(new Number()) === "0" &&
                stringify(new String()) == '""' &&
                // FF 3.1b1, 2 throw an error if the value is `null`, `undefined`, or
                // does not define a canonical JSON representation (this applies to
                // objects with `toJSON` properties as well, *unless* they are nested
                // within an object or array).
                stringify(getClass) === undef &&
                // IE 8 serializes `undefined` as `"undefined"`. Safari <= 5.1.7 and
                // FF 3.1b3 pass this test.
                stringify(undef) === undef &&
                // Safari <= 5.1.7 and FF 3.1b3 throw `Error`s and `TypeError`s,
                // respectively, if the value is omitted entirely.
                stringify() === undef &&
                // FF 3.1b1, 2 throw an error if the given value is not a number,
                // string, array, object, Boolean, or `null` literal. This applies to
                // objects with custom `toJSON` methods as well, unless they are nested
                // inside object or array literals. YUI 3.0.0b1 ignores custom `toJSON`
                // methods entirely.
                stringify(value) === "1" &&
                stringify([value]) == "[1]" &&
                // Prototype <= 1.6.1 serializes `[undefined]` as `"[]"` instead of
                // `"[null]"`.
                stringify([undef]) == "[null]" &&
                // YUI 3.0.0b1 fails to serialize `null` literals.
                stringify(null) == "null" &&
                // FF 3.1b1, 2 halts serialization if an array contains a function:
                // `[1, true, getClass, 1]` serializes as "[1,true,],". FF 3.1b3
                // elides non-JSON values from objects and arrays, unless they
                // define custom `toJSON` methods.
                stringify([undef, getClass, null]) == "[null,null,null]" &&
                // Simple serialization test. FF 3.1b1 uses Unicode escape sequences
                // where character escape codes are expected (e.g., `\b` => `\u0008`).
                stringify({ "a": [value, true, false, null, "\x00\b\n\f\r\t"] }) == serialized &&
                // FF 3.1b1 and b2 ignore the `filter` and `width` arguments.
                stringify(null, value) === "1" &&
                stringify([1, 2], null, 1) == "[\n 1,\n 2\n]" &&
                // JSON 2, Prototype <= 1.7, and older WebKit builds incorrectly
                // serialize extended years.
                stringify(new Date(-8.64e15)) == '"-271821-04-20T00:00:00.000Z"' &&
                // The milliseconds are optional in ES 5, but required in 5.1.
                stringify(new Date(8.64e15)) == '"+275760-09-13T00:00:00.000Z"' &&
                // Firefox <= 11.0 incorrectly serializes years prior to 0 as negative
                // four-digit years instead of six-digit years. Credits: @Yaffle.
                stringify(new Date(-621987552e5)) == '"-000001-01-01T00:00:00.000Z"' &&
                // Safari <= 5.1.5 and Opera >= 10.53 incorrectly serialize millisecond
                // values less than 1000. Credits: @Yaffle.
                stringify(new Date(-1)) == '"1969-12-31T23:59:59.999Z"';
            } catch (exception) {
              stringifySupported = false;
            }
          }
          isSupported = stringifySupported;
        }
        // Test `JSON.parse`.
        if (name == "json-parse") {
          var parse = JSON3.parse;
          if (typeof parse == "function") {
            try {
              // FF 3.1b1, b2 will throw an exception if a bare literal is provided.
              // Conforming implementations should also coerce the initial argument to
              // a string prior to parsing.
              if (parse("0") === 0 && !parse(false)) {
                // Simple parsing test.
                value = parse(serialized);
                var parseSupported = value["a"].length == 5 && value["a"][0] === 1;
                if (parseSupported) {
                  try {
                    // Safari <= 5.1.2 and FF 3.1b1 allow unescaped tabs in strings.
                    parseSupported = !parse('"\t"');
                  } catch (exception) {}
                  if (parseSupported) {
                    try {
                      // FF 4.0 and 4.0.1 allow leading `+` signs and leading
                      // decimal points. FF 4.0, 4.0.1, and IE 9-10 also allow
                      // certain octal literals.
                      parseSupported = parse("01") !== 1;
                    } catch (exception) {}
                  }
                  if (parseSupported) {
                    try {
                      // FF 4.0, 4.0.1, and Rhino 1.7R3-R4 allow trailing decimal
                      // points. These environments, along with FF 3.1b1 and 2,
                      // also allow trailing commas in JSON objects and arrays.
                      parseSupported = parse("1.") !== 1;
                    } catch (exception) {}
                  }
                }
              }
            } catch (exception) {
              parseSupported = false;
            }
          }
          isSupported = parseSupported;
        }
      }
      return has[name] = !!isSupported;
    }

    if (!has("json")) {
      // Common `[[Class]]` name aliases.
      var functionClass = "[object Function]";
      var dateClass = "[object Date]";
      var numberClass = "[object Number]";
      var stringClass = "[object String]";
      var arrayClass = "[object Array]";
      var booleanClass = "[object Boolean]";

      // Detect incomplete support for accessing string characters by index.
      var charIndexBuggy = has("bug-string-char-index");

      // Define additional utility methods if the `Date` methods are buggy.
      if (!isExtended) {
        var floor = Math.floor;
        // A mapping between the months of the year and the number of days between
        // January 1st and the first of the respective month.
        var Months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
        // Internal: Calculates the number of days between the Unix epoch and the
        // first day of the given month.
        var getDay = function (year, month) {
          return Months[month] + 365 * (year - 1970) + floor((year - 1969 + (month = +(month > 1))) / 4) - floor((year - 1901 + month) / 100) + floor((year - 1601 + month) / 400);
        };
      }

      // Internal: Determines if a property is a direct property of the given
      // object. Delegates to the native `Object#hasOwnProperty` method.
      if (!(isProperty = {}.hasOwnProperty)) {
        isProperty = function (property) {
          var members = {}, constructor;
          if ((members.__proto__ = null, members.__proto__ = {
              // The *proto* property cannot be set multiple times in recent
              // versions of Firefox and SeaMonkey.
              "toString": 1
            }, members).toString != getClass) {
            // Safari <= 2.0.3 doesn't implement `Object#hasOwnProperty`, but
            // supports the mutable *proto* property.
            isProperty = function (property) {
              // Capture and break the object's prototype chain (see section 8.6.2
              // of the ES 5.1 spec). The parenthesized expression prevents an
              // unsafe transformation by the Closure Compiler.
              var original = this.__proto__, result = property in (this.__proto__ = null, this);
              // Restore the original prototype chain.
              this.__proto__ = original;
              return result;
            };
          } else {
            // Capture a reference to the top-level `Object` constructor.
            constructor = members.constructor;
            // Use the `constructor` property to simulate `Object#hasOwnProperty` in
            // other environments.
            isProperty = function (property) {
              var parent = (this.constructor || constructor).prototype;
              return property in this && !(property in parent && this[property] === parent[property]);
            };
          }
          members = null;
          return isProperty.call(this, property);
        };
      }

      // Internal: A set of primitive types used by `isHostType`.
      var PrimitiveTypes = {
        'boolean': 1,
        'number': 1,
        'string': 1,
        'undefined': 1
      };

      // Internal: Determines if the given object `property` value is a
      // non-primitive.
      var isHostType = function (object, property) {
        var type = typeof object[property];
        return type == 'object' ? !!object[property] : !PrimitiveTypes[type];
      };

      // Internal: Normalizes the `for...in` iteration algorithm across
      // environments. Each enumerated key is yielded to a `callback` function.
      forEach = function (object, callback) {
        var size = 0, Properties, members, property;

        // Tests for bugs in the current environment's `for...in` algorithm. The
        // `valueOf` property inherits the non-enumerable flag from
        // `Object.prototype` in older versions of IE, Netscape, and Mozilla.
        (Properties = function () {
          this.valueOf = 0;
        }).prototype.valueOf = 0;

        // Iterate over a new instance of the `Properties` class.
        members = new Properties();
        for (property in members) {
          // Ignore all properties inherited from `Object.prototype`.
          if (isProperty.call(members, property)) {
            size++;
          }
        }
        Properties = members = null;

        // Normalize the iteration algorithm.
        if (!size) {
          // A list of non-enumerable properties inherited from `Object.prototype`.
          members = ["valueOf", "toString", "toLocaleString", "propertyIsEnumerable", "isPrototypeOf", "hasOwnProperty", "constructor"];
          // IE <= 8, Mozilla 1.0, and Netscape 6.2 ignore shadowed non-enumerable
          // properties.
          forEach = function (object, callback) {
            var isFunction = getClass.call(object) == functionClass, property, length;
            var hasProperty = !isFunction && typeof object.constructor != 'function' && isHostType(object, 'hasOwnProperty') ? object.hasOwnProperty : isProperty;
            for (property in object) {
              // Gecko <= 1.0 enumerates the `prototype` property of functions under
              // certain conditions; IE does not.
              if (!(isFunction && property == "prototype") && hasProperty.call(object, property)) {
                callback(property);
              }
            }
            // Manually invoke the callback for each non-enumerable property.
            for (length = members.length; property = members[--length]; hasProperty.call(object, property) && callback(property));
          };
        } else if (size == 2) {
          // Safari <= 2.0.4 enumerates shadowed properties twice.
          forEach = function (object, callback) {
            // Create a set of iterated properties.
            var members = {}, isFunction = getClass.call(object) == functionClass, property;
            for (property in object) {
              // Store each property name to prevent double enumeration. The
              // `prototype` property of functions is not enumerated due to cross-
              // environment inconsistencies.
              if (!(isFunction && property == "prototype") && !isProperty.call(members, property) && (members[property] = 1) && isProperty.call(object, property)) {
                callback(property);
              }
            }
          };
        } else {
          // No bugs detected; use the standard `for...in` algorithm.
          forEach = function (object, callback) {
            var isFunction = getClass.call(object) == functionClass, property, isConstructor;
            for (property in object) {
              if (!(isFunction && property == "prototype") && isProperty.call(object, property) && !(isConstructor = property === "constructor")) {
                callback(property);
              }
            }
            // Manually invoke the callback for the `constructor` property due to
            // cross-environment inconsistencies.
            if (isConstructor || isProperty.call(object, (property = "constructor"))) {
              callback(property);
            }
          };
        }
        return forEach(object, callback);
      };

      // Public: Serializes a JavaScript `value` as a JSON string. The optional
      // `filter` argument may specify either a function that alters how object and
      // array members are serialized, or an array of strings and numbers that
      // indicates which properties should be serialized. The optional `width`
      // argument may be either a string or number that specifies the indentation
      // level of the output.
      if (!has("json-stringify")) {
        // Internal: A map of control characters and their escaped equivalents.
        var Escapes = {
          92: "\\\\",
          34: '\\"',
          8: "\\b",
          12: "\\f",
          10: "\\n",
          13: "\\r",
          9: "\\t"
        };

        // Internal: Converts `value` into a zero-padded string such that its
        // length is at least equal to `width`. The `width` must be <= 6.
        var leadingZeroes = "000000";
        var toPaddedString = function (width, value) {
          // The `|| 0` expression is necessary to work around a bug in
          // Opera <= 7.54u2 where `0 == -0`, but `String(-0) !== "0"`.
          return (leadingZeroes + (value || 0)).slice(-width);
        };

        // Internal: Double-quotes a string `value`, replacing all ASCII control
        // characters (characters with code unit values between 0 and 31) with
        // their escaped equivalents. This is an implementation of the
        // `Quote(value)` operation defined in ES 5.1 section 15.12.3.
        var unicodePrefix = "\\u00";
        var quote = function (value) {
          var result = '"', index = 0, length = value.length, isLarge = length > 10 && charIndexBuggy, symbols;
          if (isLarge) {
            symbols = value.split("");
          }
          for (; index < length; index++) {
            var charCode = value.charCodeAt(index);
            // If the character is a control character, append its Unicode or
            // shorthand escape sequence; otherwise, append the character as-is.
            switch (charCode) {
              case 8: case 9: case 10: case 12: case 13: case 34: case 92:
              result += Escapes[charCode];
              break;
              default:
                if (charCode < 32) {
                  result += unicodePrefix + toPaddedString(2, charCode.toString(16));
                  break;
                }
                result += isLarge ? symbols[index] : charIndexBuggy ? value.charAt(index) : value[index];
            }
          }
          return result + '"';
        };

        // Internal: Recursively serializes an object. Implements the
        // `Str(key, holder)`, `JO(value)`, and `JA(value)` operations.
        var serialize = function (property, object, callback, properties, whitespace, indentation, stack) {
          var value, className, year, month, date, time, hours, minutes, seconds, milliseconds, results, element, index, length, prefix, result;
          try {
            // Necessary for host object support.
            value = object[property];
          } catch (exception) {}
          if (typeof value == "object" && value) {
            className = getClass.call(value);
            if (className == dateClass && !isProperty.call(value, "toJSON")) {
              if (value > -1 / 0 && value < 1 / 0) {
                // Dates are serialized according to the `Date#toJSON` method
                // specified in ES 5.1 section 15.9.5.44. See section 15.9.1.15
                // for the ISO 8601 date time string format.
                if (getDay) {
                  // Manually compute the year, month, date, hours, minutes,
                  // seconds, and milliseconds if the `getUTC*` methods are
                  // buggy. Adapted from @Yaffle's `date-shim` project.
                  date = floor(value / 864e5);
                  for (year = floor(date / 365.2425) + 1970 - 1; getDay(year + 1, 0) <= date; year++);
                  for (month = floor((date - getDay(year, 0)) / 30.42); getDay(year, month + 1) <= date; month++);
                  date = 1 + date - getDay(year, month);
                  // The `time` value specifies the time within the day (see ES
                  // 5.1 section 15.9.1.2). The formula `(A % B + B) % B` is used
                  // to compute `A modulo B`, as the `%` operator does not
                  // correspond to the `modulo` operation for negative numbers.
                  time = (value % 864e5 + 864e5) % 864e5;
                  // The hours, minutes, seconds, and milliseconds are obtained by
                  // decomposing the time within the day. See section 15.9.1.10.
                  hours = floor(time / 36e5) % 24;
                  minutes = floor(time / 6e4) % 60;
                  seconds = floor(time / 1e3) % 60;
                  milliseconds = time % 1e3;
                } else {
                  year = value.getUTCFullYear();
                  month = value.getUTCMonth();
                  date = value.getUTCDate();
                  hours = value.getUTCHours();
                  minutes = value.getUTCMinutes();
                  seconds = value.getUTCSeconds();
                  milliseconds = value.getUTCMilliseconds();
                }
                // Serialize extended years correctly.
                value = (year <= 0 || year >= 1e4 ? (year < 0 ? "-" : "+") + toPaddedString(6, year < 0 ? -year : year) : toPaddedString(4, year)) +
                  "-" + toPaddedString(2, month + 1) + "-" + toPaddedString(2, date) +
                  // Months, dates, hours, minutes, and seconds should have two
                  // digits; milliseconds should have three.
                  "T" + toPaddedString(2, hours) + ":" + toPaddedString(2, minutes) + ":" + toPaddedString(2, seconds) +
                  // Milliseconds are optional in ES 5.0, but required in 5.1.
                  "." + toPaddedString(3, milliseconds) + "Z";
              } else {
                value = null;
              }
            } else if (typeof value.toJSON == "function" && ((className != numberClass && className != stringClass && className != arrayClass) || isProperty.call(value, "toJSON"))) {
              // Prototype <= 1.6.1 adds non-standard `toJSON` methods to the
              // `Number`, `String`, `Date`, and `Array` prototypes. JSON 3
              // ignores all `toJSON` methods on these objects unless they are
              // defined directly on an instance.
              value = value.toJSON(property);
            }
          }
          if (callback) {
            // If a replacement function was provided, call it to obtain the value
            // for serialization.
            value = callback.call(object, property, value);
          }
          if (value === null) {
            return "null";
          }
          className = getClass.call(value);
          if (className == booleanClass) {
            // Booleans are represented literally.
            return "" + value;
          } else if (className == numberClass) {
            // JSON numbers must be finite. `Infinity` and `NaN` are serialized as
            // `"null"`.
            return value > -1 / 0 && value < 1 / 0 ? "" + value : "null";
          } else if (className == stringClass) {
            // Strings are double-quoted and escaped.
            return quote("" + value);
          }
          // Recursively serialize objects and arrays.
          if (typeof value == "object") {
            // Check for cyclic structures. This is a linear search; performance
            // is inversely proportional to the number of unique nested objects.
            for (length = stack.length; length--;) {
              if (stack[length] === value) {
                // Cyclic structures cannot be serialized by `JSON.stringify`.
                throw TypeError();
              }
            }
            // Add the object to the stack of traversed objects.
            stack.push(value);
            results = [];
            // Save the current indentation level and indent one additional level.
            prefix = indentation;
            indentation += whitespace;
            if (className == arrayClass) {
              // Recursively serialize array elements.
              for (index = 0, length = value.length; index < length; index++) {
                element = serialize(index, value, callback, properties, whitespace, indentation, stack);
                results.push(element === undef ? "null" : element);
              }
              result = results.length ? (whitespace ? "[\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "]" : ("[" + results.join(",") + "]")) : "[]";
            } else {
              // Recursively serialize object members. Members are selected from
              // either a user-specified list of property names, or the object
              // itself.
              forEach(properties || value, function (property) {
                var element = serialize(property, value, callback, properties, whitespace, indentation, stack);
                if (element !== undef) {
                  // According to ES 5.1 section 15.12.3: "If `gap` {whitespace}
                  // is not the empty string, let `member` {quote(property) + ":"}
                  // be the concatenation of `member` and the `space` character."
                  // The "`space` character" refers to the literal space
                  // character, not the `space` {width} argument provided to
                  // `JSON.stringify`.
                  results.push(quote(property) + ":" + (whitespace ? " " : "") + element);
                }
              });
              result = results.length ? (whitespace ? "{\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "}" : ("{" + results.join(",") + "}")) : "{}";
            }
            // Remove the object from the traversed object stack.
            stack.pop();
            return result;
          }
        };

        // Public: `JSON.stringify`. See ES 5.1 section 15.12.3.
        JSON3.stringify = function (source, filter, width) {
          var whitespace, callback, properties, className;
          if (typeof filter == "function" || typeof filter == "object" && filter) {
            if ((className = getClass.call(filter)) == functionClass) {
              callback = filter;
            } else if (className == arrayClass) {
              // Convert the property names array into a makeshift set.
              properties = {};
              for (var index = 0, length = filter.length, value; index < length; value = filter[index++], ((className = getClass.call(value)), className == stringClass || className == numberClass) && (properties[value] = 1));
            }
          }
          if (width) {
            if ((className = getClass.call(width)) == numberClass) {
              // Convert the `width` to an integer and create a string containing
              // `width` number of space characters.
              if ((width -= width % 1) > 0) {
                for (whitespace = "", width > 10 && (width = 10); whitespace.length < width; whitespace += " ");
              }
            } else if (className == stringClass) {
              whitespace = width.length <= 10 ? width : width.slice(0, 10);
            }
          }
          // Opera <= 7.54u2 discards the values associated with empty string keys
          // (`""`) only if they are used directly within an object member list
          // (e.g., `!("" in { "": 1})`).
          return serialize("", (value = {}, value[""] = source, value), callback, properties, whitespace, "", []);
        };
      }

      // Public: Parses a JSON source string.
      if (!has("json-parse")) {
        var fromCharCode = String.fromCharCode;

        // Internal: A map of escaped control characters and their unescaped
        // equivalents.
        var Unescapes = {
          92: "\\",
          34: '"',
          47: "/",
          98: "\b",
          116: "\t",
          110: "\n",
          102: "\f",
          114: "\r"
        };

        // Internal: Stores the parser state.
        var Index, Source;

        // Internal: Resets the parser state and throws a `SyntaxError`.
        var abort = function() {
          Index = Source = null;
          throw SyntaxError();
        };

        // Internal: Returns the next token, or `"$"` if the parser has reached
        // the end of the source string. A token may be a string, number, `null`
        // literal, or Boolean literal.
        var lex = function () {
          var source = Source, length = source.length, value, begin, position, isSigned, charCode;
          while (Index < length) {
            charCode = source.charCodeAt(Index);
            switch (charCode) {
              case 9: case 10: case 13: case 32:
              // Skip whitespace tokens, including tabs, carriage returns, line
              // feeds, and space characters.
              Index++;
              break;
              case 123: case 125: case 91: case 93: case 58: case 44:
              // Parse a punctuator token (`{`, `}`, `[`, `]`, `:`, or `,`) at
              // the current position.
              value = charIndexBuggy ? source.charAt(Index) : source[Index];
              Index++;
              return value;
              case 34:
                // `"` delimits a JSON string; advance to the next character and
                // begin parsing the string. String tokens are prefixed with the
                // sentinel `@` character to distinguish them from punctuators and
                // end-of-string tokens.
                for (value = "@", Index++; Index < length;) {
                  charCode = source.charCodeAt(Index);
                  if (charCode < 32) {
                    // Unescaped ASCII control characters (those with a code unit
                    // less than the space character) are not permitted.
                    abort();
                  } else if (charCode == 92) {
                    // A reverse solidus (`\`) marks the beginning of an escaped
                    // control character (including `"`, `\`, and `/`) or Unicode
                    // escape sequence.
                    charCode = source.charCodeAt(++Index);
                    switch (charCode) {
                      case 92: case 34: case 47: case 98: case 116: case 110: case 102: case 114:
                      // Revive escaped control characters.
                      value += Unescapes[charCode];
                      Index++;
                      break;
                      case 117:
                        // `\u` marks the beginning of a Unicode escape sequence.
                        // Advance to the first character and validate the
                        // four-digit code point.
                        begin = ++Index;
                        for (position = Index + 4; Index < position; Index++) {
                          charCode = source.charCodeAt(Index);
                          // A valid sequence comprises four hexdigits (case-
                          // insensitive) that form a single hexadecimal value.
                          if (!(charCode >= 48 && charCode <= 57 || charCode >= 97 && charCode <= 102 || charCode >= 65 && charCode <= 70)) {
                            // Invalid Unicode escape sequence.
                            abort();
                          }
                        }
                        // Revive the escaped character.
                        value += fromCharCode("0x" + source.slice(begin, Index));
                        break;
                      default:
                        // Invalid escape sequence.
                        abort();
                    }
                  } else {
                    if (charCode == 34) {
                      // An unescaped double-quote character marks the end of the
                      // string.
                      break;
                    }
                    charCode = source.charCodeAt(Index);
                    begin = Index;
                    // Optimize for the common case where a string is valid.
                    while (charCode >= 32 && charCode != 92 && charCode != 34) {
                      charCode = source.charCodeAt(++Index);
                    }
                    // Append the string as-is.
                    value += source.slice(begin, Index);
                  }
                }
                if (source.charCodeAt(Index) == 34) {
                  // Advance to the next character and return the revived string.
                  Index++;
                  return value;
                }
                // Unterminated string.
                abort();
              default:
                // Parse numbers and literals.
                begin = Index;
                // Advance past the negative sign, if one is specified.
                if (charCode == 45) {
                  isSigned = true;
                  charCode = source.charCodeAt(++Index);
                }
                // Parse an integer or floating-point value.
                if (charCode >= 48 && charCode <= 57) {
                  // Leading zeroes are interpreted as octal literals.
                  if (charCode == 48 && ((charCode = source.charCodeAt(Index + 1)), charCode >= 48 && charCode <= 57)) {
                    // Illegal octal literal.
                    abort();
                  }
                  isSigned = false;
                  // Parse the integer component.
                  for (; Index < length && ((charCode = source.charCodeAt(Index)), charCode >= 48 && charCode <= 57); Index++);
                  // Floats cannot contain a leading decimal point; however, this
                  // case is already accounted for by the parser.
                  if (source.charCodeAt(Index) == 46) {
                    position = ++Index;
                    // Parse the decimal component.
                    for (; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);
                    if (position == Index) {
                      // Illegal trailing decimal.
                      abort();
                    }
                    Index = position;
                  }
                  // Parse exponents. The `e` denoting the exponent is
                  // case-insensitive.
                  charCode = source.charCodeAt(Index);
                  if (charCode == 101 || charCode == 69) {
                    charCode = source.charCodeAt(++Index);
                    // Skip past the sign following the exponent, if one is
                    // specified.
                    if (charCode == 43 || charCode == 45) {
                      Index++;
                    }
                    // Parse the exponential component.
                    for (position = Index; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);
                    if (position == Index) {
                      // Illegal empty exponent.
                      abort();
                    }
                    Index = position;
                  }
                  // Coerce the parsed value to a JavaScript number.
                  return +source.slice(begin, Index);
                }
                // A negative sign may only precede numbers.
                if (isSigned) {
                  abort();
                }
                // `true`, `false`, and `null` literals.
                if (source.slice(Index, Index + 4) == "true") {
                  Index += 4;
                  return true;
                } else if (source.slice(Index, Index + 5) == "false") {
                  Index += 5;
                  return false;
                } else if (source.slice(Index, Index + 4) == "null") {
                  Index += 4;
                  return null;
                }
                // Unrecognized token.
                abort();
            }
          }
          // Return the sentinel `$` character if the parser has reached the end
          // of the source string.
          return "$";
        };

        // Internal: Parses a JSON `value` token.
        var get = function (value) {
          var results, hasMembers;
          if (value == "$") {
            // Unexpected end of input.
            abort();
          }
          if (typeof value == "string") {
            if ((charIndexBuggy ? value.charAt(0) : value[0]) == "@") {
              // Remove the sentinel `@` character.
              return value.slice(1);
            }
            // Parse object and array literals.
            if (value == "[") {
              // Parses a JSON array, returning a new JavaScript array.
              results = [];
              for (;; hasMembers || (hasMembers = true)) {
                value = lex();
                // A closing square bracket marks the end of the array literal.
                if (value == "]") {
                  break;
                }
                // If the array literal contains elements, the current token
                // should be a comma separating the previous element from the
                // next.
                if (hasMembers) {
                  if (value == ",") {
                    value = lex();
                    if (value == "]") {
                      // Unexpected trailing `,` in array literal.
                      abort();
                    }
                  } else {
                    // A `,` must separate each array element.
                    abort();
                  }
                }
                // Elisions and leading commas are not permitted.
                if (value == ",") {
                  abort();
                }
                results.push(get(value));
              }
              return results;
            } else if (value == "{") {
              // Parses a JSON object, returning a new JavaScript object.
              results = {};
              for (;; hasMembers || (hasMembers = true)) {
                value = lex();
                // A closing curly brace marks the end of the object literal.
                if (value == "}") {
                  break;
                }
                // If the object literal contains members, the current token
                // should be a comma separator.
                if (hasMembers) {
                  if (value == ",") {
                    value = lex();
                    if (value == "}") {
                      // Unexpected trailing `,` in object literal.
                      abort();
                    }
                  } else {
                    // A `,` must separate each object member.
                    abort();
                  }
                }
                // Leading commas are not permitted, object property names must be
                // double-quoted strings, and a `:` must separate each property
                // name and value.
                if (value == "," || typeof value != "string" || (charIndexBuggy ? value.charAt(0) : value[0]) != "@" || lex() != ":") {
                  abort();
                }
                results[value.slice(1)] = get(lex());
              }
              return results;
            }
            // Unexpected token encountered.
            abort();
          }
          return value;
        };

        // Internal: Updates a traversed object member.
        var update = function(source, property, callback) {
          var element = walk(source, property, callback);
          if (element === undef) {
            delete source[property];
          } else {
            source[property] = element;
          }
        };

        // Internal: Recursively traverses a parsed JSON object, invoking the
        // `callback` function for each value. This is an implementation of the
        // `Walk(holder, name)` operation defined in ES 5.1 section 15.12.2.
        var walk = function (source, property, callback) {
          var value = source[property], length;
          if (typeof value == "object" && value) {
            // `forEach` can't be used to traverse an array in Opera <= 8.54
            // because its `Object#hasOwnProperty` implementation returns `false`
            // for array indices (e.g., `![1, 2, 3].hasOwnProperty("0")`).
            if (getClass.call(value) == arrayClass) {
              for (length = value.length; length--;) {
                update(value, length, callback);
              }
            } else {
              forEach(value, function (property) {
                update(value, property, callback);
              });
            }
          }
          return callback.call(source, property, value);
        };

        // Public: `JSON.parse`. See ES 5.1 section 15.12.2.
        JSON3.parse = function (source, callback) {
          var result, value;
          Index = 0;
          Source = "" + source;
          result = get(lex());
          // If a JSON string contains multiple tokens, it is invalid.
          if (lex() != "$") {
            abort();
          }
          // Reset the parser state.
          Index = Source = null;
          return callback && getClass.call(callback) == functionClass ? walk((value = {}, value[""] = result, value), "", callback) : result;
        };
      }
    }

    // Export for asynchronous module loaders.
    if (isLoader) {
      define(function () {
        return JSON3;
      });
    }
  }(this));

},{}],531:[function(require,module,exports){
  module.exports = toArray

  function toArray(list, index) {
    var array = []

    index = index || 0

    for (var i = index || 0; i < list.length; i++) {
      array[i - index] = list[i]
    }

    return array
  }

},{}]},{},[1]);
