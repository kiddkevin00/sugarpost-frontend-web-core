{"version":3,"sources":["../../../src/lib/server/cluster-app.js"],"names":["require","packageJson","setupExpressServer","setupRoutes","cluster","http","express","os","numCPUs","cpus","length","isMaster","i","fork","on","worker","code","signal","console","log","process","pid","app","server","createServer","webServer","listen","config","port","ip","address","get"],"mappings":";;AAAA;;;;;;AAMAA,QAAQ,gBAAR;;AAEA,IAAMC,cAAcD,QAAQ,uBAAR,CAApB;AACA,IAAME,qBAAqBF,QAAQ,kBAAR,CAA3B;AACA,IAAMG,cAAcH,QAAQ,aAAR,CAApB;AACA,IAAMI,UAAUJ,QAAQ,SAAR,CAAhB;AACA,IAAMK,OAAOL,QAAQ,MAAR,CAAb;AACA,IAAMM,UAAUN,QAAQ,SAAR,CAAhB;AACA,IAAMO,KAAKP,QAAQ,IAAR,CAAX;;AAEA,IAAMQ,UAAUD,GAAGE,IAAH,GAAUC,MAA1B;;AAEA,IAAIN,QAAQO,QAAZ,EAAsB;AACpB;AACA,OAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIJ,OAApB,EAA6BI,GAA7B,EAAkC;AAChCR,YAAQS,IAAR;AACD;;AAEDT,UAAQU,EAAR,CAAW,MAAX,EAAmB,UAACC,MAAD,EAASC,IAAT,EAAeC,MAAf,EAA0B;AAC3C;AACAC,YAAQC,GAAR,CAAY,YAAYJ,OAAOK,OAAP,CAAeC,GAA3B,GAAiC,OAA7C;AACD,GAHD;AAID,CAVD,MAUO;AAAA;AACL;AACA,QAAMC,MAAMhB,SAAZ;AACA,QAAMiB,SAASlB,KAAKmB,YAAL,CAAkBF,GAAlB,CAAf;;AAEApB,uBAAmBoB,GAAnB;AACAnB,gBAAYmB,GAAZ;;AAEA,QAAMG,YAAYF,OAAOG,MAAP,CAAczB,YAAY0B,MAAZ,CAAmBC,IAAjC,EAAuC3B,YAAY0B,MAAZ,CAAmBE,EAA1D,EAA8D,YAAM;AACpF;AACAX,cAAQC,GAAR,CAAY,4DAAZ,EACEM,UAAUK,OAAV,GAAoBF,IADtB,EAEEH,UAAUK,OAAV,GAAoBA,OAFtB,EAE+BR,IAAIS,GAAJ,CAAQ,KAAR,CAF/B;AAGD,KALiB,CAAlB;AARK;AAcN","file":"cluster-app.js","sourcesContent":["/**\n * The process of the web application begins here - cluster mode.\n *\n * Usage: Run `$ NODE_DEBUG=cluster node src/lib/server/cluster-app.js`\n */\n\nrequire('babel-register');\n\nconst packageJson = require('../../../package.json');\nconst setupExpressServer = require('./express-server');\nconst setupRoutes = require('./routes.js');\nconst cluster = require('cluster');\nconst http = require('http');\nconst express = require('express');\nconst os = require('os');\n\nconst numCPUs = os.cpus().length;\n\nif (cluster.isMaster) {\n  // Forks the master worker.\n  for (let i = 0; i < numCPUs; i++) {\n    cluster.fork();\n  }\n\n  cluster.on('exit', (worker, code, signal) => {\n    // [TODO] Replace with logger module.\n    console.log('Worker ' + worker.process.pid + ' died');\n  });\n} else {\n  // Forked Workers can share a new TCP connection.\n  const app = express();\n  const server = http.createServer(app);\n\n  setupExpressServer(app);\n  setupRoutes(app);\n\n  const webServer = server.listen(packageJson.config.port, packageJson.config.ip, () => {\n    // [TODO] Replace with logger module.\n    console.log('Express server listening on port: %d at IP: %s, in %s mode',\n      webServer.address().port,\n      webServer.address().address, app.get('env'));\n  });\n}\n"]}