{"version":3,"sources":["../../../src/lib/server/express-server.js"],"names":["express","require","cors","session","favicon","morgan","cookieParser","bodyParser","methodOverride","compression","errorHandler","path","fs","setupExpressServer","app","use","urlencoded","extended","json","type","secret","httpOnly","secure","maxAge","resave","saveUninitialized","resolve","__dirname","set","env","get","static","etag","accessLogStream","createWriteStream","flags","stream","module","exports"],"mappings":";;AAAA,IAAMA,UAAUC,QAAQ,SAAR,CAAhB;AACA,IAAMC,OAAOD,QAAQ,MAAR,CAAb;AACA,IAAME,UAAUF,QAAQ,iBAAR,CAAhB;AACA,IAAMG,UAAUH,QAAQ,eAAR,CAAhB;AACA,IAAMI,SAASJ,QAAQ,QAAR,CAAf;AACA,IAAMK,eAAeL,QAAQ,eAAR,CAArB;AACA,IAAMM,aAAaN,QAAQ,aAAR,CAAnB;AACA,IAAMO,iBAAiBP,QAAQ,iBAAR,CAAvB;AACA,IAAMQ,cAAcR,QAAQ,aAAR,CAApB;AACA,IAAMS,eAAeT,QAAQ,cAAR,CAArB;AACA,IAAMU,OAAOV,QAAQ,MAAR,CAAb;AACA,IAAMW,KAAKX,QAAQ,IAAR,CAAX;;AAEA,SAASY,kBAAT,CAA4BC,GAA5B,EAAiC;AAC/BA,MAAIC,GAAJ,CAAQR,WAAWS,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAR;AACAH,MAAIC,GAAJ,CAAQR,WAAWW,IAAX,EAAR;AACAJ,MAAIC,GAAJ,CAAQR,WAAWW,IAAX,CAAgB;AACtBC,UAAM,0BADgB,EAAhB,CAAR;;AAIAL,MAAIC,GAAJ,CAAQP,gBAAR,EAP+B,CAOJ;AAC3BM,MAAIC,GAAJ,CAAQT,cAAR;;AAEAQ,MAAIC,GAAJ,CAAQN,aAAR;;AAEAK,MAAIC,GAAJ,CAAQb,MAAR;;AAEA;AACAY,MAAIC,GAAJ,CAAQZ,QAAQ;AACdiB,YAAQ,gBADM,EACY;AAC1BT,UAAM,GAFQ;AAGdU,cAAU,KAHI;AAIdC,YAAQ,KAJM,EAIC;AACfC,YAAQ,OAAO,EAAP,GAAY,EAAZ,GAAiB,CALX,EAKc;AAC5BC,YAAQ,IANM,EAMA;AACdC,uBAAmB;AAPL,GAAR,CAAR;;AAUAX,MAAIC,GAAJ,CAAQX,QAAQO,KAAKe,OAAL,CAAaC,SAAb,EAAwB,mBAAxB,EAA6C,aAA7C,CAAR,CAAR;;AAEA;AACAb,MAAIc,GAAJ,CAAQ,OAAR,EAAiBjB,KAAKe,OAAL,CAAaC,SAAb,EAAwB,SAAxB,CAAjB;AACAb,MAAIc,GAAJ,CAAQ,aAAR,EAAuB,MAAvB;;AAEA,MAAMC,MAAMf,IAAIgB,GAAJ,CAAQ,KAAR,CAAZ,CA/B+B,CA+BH;;AAE5B,MAAID,QAAQ,YAAZ,EAA0B;AACxB;AACAf,QAAIC,GAAJ,CAAQf,QAAQ+B,MAAR,CAAepB,KAAKe,OAAL,CAAaC,SAAb,EAAwB,gBAAxB,CAAf,EAA0D;AAChEK,YAAM,IAD0D;AAEhET,cAAQ,QAFwD,EAA1D,CAAR;;AAKA,QAAMU,kBAAkBrB,GAAGsB,iBAAH,CAAqBvB,KAAKe,OAAL,CAAaC,SAAb,EAAwB,qBAAxB,CAArB,EACtB,EAAEQ,OAAO,GAAT,EADsB,CAAxB;;AAGArB,QAAIC,GAAJ,CAAQV,OAAO,UAAP,EAAmB,EAAE+B,QAAQH,eAAV,EAAnB,CAAR;AACAnB,QAAIC,GAAJ,CAAQV,OAAO,KAAP,CAAR;AACD,GAZD,MAYO;AACL;;AAEA;;;;;;;;;;AAUA;AACAS,QAAIC,GAAJ,CAAQf,QAAQ+B,MAAR,CAAepB,KAAKe,OAAL,CAAaC,SAAb,EAAwB,mBAAxB,CAAf,EAA6D;AACnEK,YAAM,IAD6D;AAEnET,cAAQ;AAF2D,KAA7D,CAAR;;AAKAT,QAAIC,GAAJ,CAAQV,OAAO,KAAP,CAAR;AACAS,QAAIC,GAAJ,CAAQL,cAAR,EApBK,CAoBoB;AAC1B;AACF;;AAED2B,OAAOC,OAAP,GAAiBA,UAAUzB,kBAA3B","file":"express-server.js","sourcesContent":["const express = require('express');\nconst cors = require('cors');\nconst session = require('express-session');\nconst favicon = require('serve-favicon');\nconst morgan = require('morgan');\nconst cookieParser = require('cookie-parser');\nconst bodyParser = require('body-parser');\nconst methodOverride = require('method-override');\nconst compression = require('compression');\nconst errorHandler = require('errorhandler');\nconst path = require('path');\nconst fs = require('fs');\n\nfunction setupExpressServer(app) {\n  app.use(bodyParser.urlencoded({ extended: false }));\n  app.use(bodyParser.json());\n  app.use(bodyParser.json({\n    type: 'application/vnd.api+json', // Parses \"application/vnd.api+json\" content-type as json.\n  }));\n\n  app.use(methodOverride()); // Simulates DELETE and PUT methods if browser doesn't support.\n  app.use(cookieParser());\n\n  app.use(compression());\n\n  app.use(cors());\n\n  // [TODO] Uses JWT instead of session.\n  app.use(session({\n    secret: 'SESSION_SECRET', // [TODO]\n    path: '/',\n    httpOnly: false,\n    secure: false, // HTTPS-enabled website required.\n    maxAge: 1000 * 60 * 60 * 8, // [TBD] Set 8 Hours for now.\n    resave: true, // Forces the session to be saved back to the session store.\n    saveUninitialized: false,\n  }));\n\n  app.use(favicon(path.resolve(__dirname, '../client/static/', 'favicon.ico')));\n\n  // For 404 error and server-side rendering pages only.\n  app.set('views', path.resolve(__dirname, './views'));\n  app.set('view engine', 'jade');\n\n  const env = app.get('env'); // Same as `process.env.NODE_ENV`.\n\n  if (env === 'production') {\n    // Here are all the minified version of all JS and CSS files.\n    app.use(express.static(path.resolve(__dirname, '../../../dist/'), {\n      etag: true,\n      maxAge: 86400000, // [TBD] 86400000 (unit: ms) - one day.\n    }));\n    \n    const accessLogStream = fs.createWriteStream(path.resolve(__dirname, '../../../morgan.log'),\n      { flags: 'a' });\n\n    app.use(morgan('combined', { stream: accessLogStream }));\n    app.use(morgan('dev'));\n  } else {\n    // The Node environment variable should be either \"test\" or \"development\".\n\n    /*\n     * [Note] Install Chrome extension LiveReload instead of adding live-reloaded script to the\n     * response, implemented as the following:\n     * ```\n     * app.use(require('connect-livereload')());\n     * ```\n     *\n     * For more information: https://chrome.google.com/webstore/detail/livereload/jnihajbhpnppcggbcgedagnkighmdlei\n     */\n\n    // Here are all the original version of JS and CSS files.\n    app.use(express.static(path.resolve(__dirname, '../client/static/'), {\n      etag: true,\n      maxAge: 0,\n    }));\n\n    app.use(morgan('dev'));\n    app.use(errorHandler()); // Error handler - has to be the last.\n  }\n}\n\nmodule.exports = exports = setupExpressServer;\n"]}