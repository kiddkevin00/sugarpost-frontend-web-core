'use strict';

var express = require('express');
var cors = require('cors');
var session = require('express-session');
var favicon = require('serve-favicon');
var morgan = require('morgan');
var cookieParser = require('cookie-parser');
var bodyParser = require('body-parser');
var methodOverride = require('method-override');
var compression = require('compression');
var errorHandler = require('errorhandler');
var path = require('path');
var fs = require('fs');

function setupExpressServer(app) {
  app.use(bodyParser.urlencoded({ extended: false }));
  app.use(bodyParser.json());
  app.use(bodyParser.json({
    type: 'application/vnd.api+json' }));

  app.use(methodOverride()); // Simulates DELETE and PUT methods if browser doesn't support.
  app.use(cookieParser());

  app.use(compression());

  app.use(cors());

  // [TODO] Uses JWT instead of session.
  app.use(session({
    secret: 'SESSION_SECRET', // [TODO]
    path: '/',
    httpOnly: false,
    secure: false, // HTTPS-enabled website required.
    maxAge: 1000 * 60 * 60 * 8, // [TBD] Set 8 Hours for now.
    resave: true, // Forces the session to be saved back to the session store.
    saveUninitialized: false
  }));

  app.use(favicon(path.resolve(__dirname, '../client/static/', 'favicon.ico')));

  // For 404 error and server-side rendering pages only.
  app.set('views', path.resolve(__dirname, './views'));
  app.set('view engine', 'jade');

  var env = app.get('env'); // Same as `process.env.NODE_ENV`.

  if (env === 'production') {
    // Here are all the minified version of all JS and CSS files.
    app.use(express.static(path.resolve(__dirname, '../../../dist/'), {
      etag: true,
      maxAge: 86400000 }));

    var accessLogStream = fs.createWriteStream(path.resolve(__dirname, '../../../morgan.log'), { flags: 'a' });

    app.use(morgan('combined', { stream: accessLogStream }));
    app.use(morgan('dev'));
  } else {
    // The Node environment variable should be either "test" or "development".

    /*
     * [Note] Install Chrome extension LiveReload instead of adding live-reloaded script to the
     * response, implemented as the following:
     * ```
     * app.use(require('connect-livereload')());
     * ```
     *
     * For more information: https://chrome.google.com/webstore/detail/livereload/jnihajbhpnppcggbcgedagnkighmdlei
     */

    // Here are all the original version of JS and CSS files.
    app.use(express.static(path.resolve(__dirname, '../client/static/'), {
      etag: true,
      maxAge: 0
    }));

    app.use(morgan('dev'));
    app.use(errorHandler()); // Error handler - has to be the last.
  }
}

module.exports = exports = setupExpressServer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvc2VydmVyL2V4cHJlc3Mtc2VydmVyLmpzIl0sIm5hbWVzIjpbImV4cHJlc3MiLCJyZXF1aXJlIiwiY29ycyIsInNlc3Npb24iLCJmYXZpY29uIiwibW9yZ2FuIiwiY29va2llUGFyc2VyIiwiYm9keVBhcnNlciIsIm1ldGhvZE92ZXJyaWRlIiwiY29tcHJlc3Npb24iLCJlcnJvckhhbmRsZXIiLCJwYXRoIiwiZnMiLCJzZXR1cEV4cHJlc3NTZXJ2ZXIiLCJhcHAiLCJ1c2UiLCJ1cmxlbmNvZGVkIiwiZXh0ZW5kZWQiLCJqc29uIiwidHlwZSIsInNlY3JldCIsImh0dHBPbmx5Iiwic2VjdXJlIiwibWF4QWdlIiwicmVzYXZlIiwic2F2ZVVuaW5pdGlhbGl6ZWQiLCJyZXNvbHZlIiwiX19kaXJuYW1lIiwic2V0IiwiZW52IiwiZ2V0Iiwic3RhdGljIiwiZXRhZyIsImFjY2Vzc0xvZ1N0cmVhbSIsImNyZWF0ZVdyaXRlU3RyZWFtIiwiZmxhZ3MiLCJzdHJlYW0iLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQU1BLFVBQVVDLFFBQVEsU0FBUixDQUFoQjtBQUNBLElBQU1DLE9BQU9ELFFBQVEsTUFBUixDQUFiO0FBQ0EsSUFBTUUsVUFBVUYsUUFBUSxpQkFBUixDQUFoQjtBQUNBLElBQU1HLFVBQVVILFFBQVEsZUFBUixDQUFoQjtBQUNBLElBQU1JLFNBQVNKLFFBQVEsUUFBUixDQUFmO0FBQ0EsSUFBTUssZUFBZUwsUUFBUSxlQUFSLENBQXJCO0FBQ0EsSUFBTU0sYUFBYU4sUUFBUSxhQUFSLENBQW5CO0FBQ0EsSUFBTU8saUJBQWlCUCxRQUFRLGlCQUFSLENBQXZCO0FBQ0EsSUFBTVEsY0FBY1IsUUFBUSxhQUFSLENBQXBCO0FBQ0EsSUFBTVMsZUFBZVQsUUFBUSxjQUFSLENBQXJCO0FBQ0EsSUFBTVUsT0FBT1YsUUFBUSxNQUFSLENBQWI7QUFDQSxJQUFNVyxLQUFLWCxRQUFRLElBQVIsQ0FBWDs7QUFFQSxTQUFTWSxrQkFBVCxDQUE0QkMsR0FBNUIsRUFBaUM7QUFDL0JBLE1BQUlDLEdBQUosQ0FBUVIsV0FBV1MsVUFBWCxDQUFzQixFQUFFQyxVQUFVLEtBQVosRUFBdEIsQ0FBUjtBQUNBSCxNQUFJQyxHQUFKLENBQVFSLFdBQVdXLElBQVgsRUFBUjtBQUNBSixNQUFJQyxHQUFKLENBQVFSLFdBQVdXLElBQVgsQ0FBZ0I7QUFDdEJDLFVBQU0sMEJBRGdCLEVBQWhCLENBQVI7O0FBSUFMLE1BQUlDLEdBQUosQ0FBUVAsZ0JBQVIsRUFQK0IsQ0FPSjtBQUMzQk0sTUFBSUMsR0FBSixDQUFRVCxjQUFSOztBQUVBUSxNQUFJQyxHQUFKLENBQVFOLGFBQVI7O0FBRUFLLE1BQUlDLEdBQUosQ0FBUWIsTUFBUjs7QUFFQTtBQUNBWSxNQUFJQyxHQUFKLENBQVFaLFFBQVE7QUFDZGlCLFlBQVEsZ0JBRE0sRUFDWTtBQUMxQlQsVUFBTSxHQUZRO0FBR2RVLGNBQVUsS0FISTtBQUlkQyxZQUFRLEtBSk0sRUFJQztBQUNmQyxZQUFRLE9BQU8sRUFBUCxHQUFZLEVBQVosR0FBaUIsQ0FMWCxFQUtjO0FBQzVCQyxZQUFRLElBTk0sRUFNQTtBQUNkQyx1QkFBbUI7QUFQTCxHQUFSLENBQVI7O0FBVUFYLE1BQUlDLEdBQUosQ0FBUVgsUUFBUU8sS0FBS2UsT0FBTCxDQUFhQyxTQUFiLEVBQXdCLG1CQUF4QixFQUE2QyxhQUE3QyxDQUFSLENBQVI7O0FBRUE7QUFDQWIsTUFBSWMsR0FBSixDQUFRLE9BQVIsRUFBaUJqQixLQUFLZSxPQUFMLENBQWFDLFNBQWIsRUFBd0IsU0FBeEIsQ0FBakI7QUFDQWIsTUFBSWMsR0FBSixDQUFRLGFBQVIsRUFBdUIsTUFBdkI7O0FBRUEsTUFBTUMsTUFBTWYsSUFBSWdCLEdBQUosQ0FBUSxLQUFSLENBQVosQ0EvQitCLENBK0JIOztBQUU1QixNQUFJRCxRQUFRLFlBQVosRUFBMEI7QUFDeEI7QUFDQWYsUUFBSUMsR0FBSixDQUFRZixRQUFRK0IsTUFBUixDQUFlcEIsS0FBS2UsT0FBTCxDQUFhQyxTQUFiLEVBQXdCLGdCQUF4QixDQUFmLEVBQTBEO0FBQ2hFSyxZQUFNLElBRDBEO0FBRWhFVCxjQUFRLFFBRndELEVBQTFELENBQVI7O0FBS0EsUUFBTVUsa0JBQWtCckIsR0FBR3NCLGlCQUFILENBQXFCdkIsS0FBS2UsT0FBTCxDQUFhQyxTQUFiLEVBQXdCLHFCQUF4QixDQUFyQixFQUN0QixFQUFFUSxPQUFPLEdBQVQsRUFEc0IsQ0FBeEI7O0FBR0FyQixRQUFJQyxHQUFKLENBQVFWLE9BQU8sVUFBUCxFQUFtQixFQUFFK0IsUUFBUUgsZUFBVixFQUFuQixDQUFSO0FBQ0FuQixRQUFJQyxHQUFKLENBQVFWLE9BQU8sS0FBUCxDQUFSO0FBQ0QsR0FaRCxNQVlPO0FBQ0w7O0FBRUE7Ozs7Ozs7Ozs7QUFVQTtBQUNBUyxRQUFJQyxHQUFKLENBQVFmLFFBQVErQixNQUFSLENBQWVwQixLQUFLZSxPQUFMLENBQWFDLFNBQWIsRUFBd0IsbUJBQXhCLENBQWYsRUFBNkQ7QUFDbkVLLFlBQU0sSUFENkQ7QUFFbkVULGNBQVE7QUFGMkQsS0FBN0QsQ0FBUjs7QUFLQVQsUUFBSUMsR0FBSixDQUFRVixPQUFPLEtBQVAsQ0FBUjtBQUNBUyxRQUFJQyxHQUFKLENBQVFMLGNBQVIsRUFwQkssQ0FvQm9CO0FBQzFCO0FBQ0Y7O0FBRUQyQixPQUFPQyxPQUFQLEdBQWlCQSxVQUFVekIsa0JBQTNCIiwiZmlsZSI6ImV4cHJlc3Mtc2VydmVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZXhwcmVzcyA9IHJlcXVpcmUoJ2V4cHJlc3MnKTtcbmNvbnN0IGNvcnMgPSByZXF1aXJlKCdjb3JzJyk7XG5jb25zdCBzZXNzaW9uID0gcmVxdWlyZSgnZXhwcmVzcy1zZXNzaW9uJyk7XG5jb25zdCBmYXZpY29uID0gcmVxdWlyZSgnc2VydmUtZmF2aWNvbicpO1xuY29uc3QgbW9yZ2FuID0gcmVxdWlyZSgnbW9yZ2FuJyk7XG5jb25zdCBjb29raWVQYXJzZXIgPSByZXF1aXJlKCdjb29raWUtcGFyc2VyJyk7XG5jb25zdCBib2R5UGFyc2VyID0gcmVxdWlyZSgnYm9keS1wYXJzZXInKTtcbmNvbnN0IG1ldGhvZE92ZXJyaWRlID0gcmVxdWlyZSgnbWV0aG9kLW92ZXJyaWRlJyk7XG5jb25zdCBjb21wcmVzc2lvbiA9IHJlcXVpcmUoJ2NvbXByZXNzaW9uJyk7XG5jb25zdCBlcnJvckhhbmRsZXIgPSByZXF1aXJlKCdlcnJvcmhhbmRsZXInKTtcbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5cbmZ1bmN0aW9uIHNldHVwRXhwcmVzc1NlcnZlcihhcHApIHtcbiAgYXBwLnVzZShib2R5UGFyc2VyLnVybGVuY29kZWQoeyBleHRlbmRlZDogZmFsc2UgfSkpO1xuICBhcHAudXNlKGJvZHlQYXJzZXIuanNvbigpKTtcbiAgYXBwLnVzZShib2R5UGFyc2VyLmpzb24oe1xuICAgIHR5cGU6ICdhcHBsaWNhdGlvbi92bmQuYXBpK2pzb24nLCAvLyBQYXJzZXMgXCJhcHBsaWNhdGlvbi92bmQuYXBpK2pzb25cIiBjb250ZW50LXR5cGUgYXMganNvbi5cbiAgfSkpO1xuXG4gIGFwcC51c2UobWV0aG9kT3ZlcnJpZGUoKSk7IC8vIFNpbXVsYXRlcyBERUxFVEUgYW5kIFBVVCBtZXRob2RzIGlmIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0LlxuICBhcHAudXNlKGNvb2tpZVBhcnNlcigpKTtcblxuICBhcHAudXNlKGNvbXByZXNzaW9uKCkpO1xuXG4gIGFwcC51c2UoY29ycygpKTtcblxuICAvLyBbVE9ET10gVXNlcyBKV1QgaW5zdGVhZCBvZiBzZXNzaW9uLlxuICBhcHAudXNlKHNlc3Npb24oe1xuICAgIHNlY3JldDogJ1NFU1NJT05fU0VDUkVUJywgLy8gW1RPRE9dXG4gICAgcGF0aDogJy8nLFxuICAgIGh0dHBPbmx5OiBmYWxzZSxcbiAgICBzZWN1cmU6IGZhbHNlLCAvLyBIVFRQUy1lbmFibGVkIHdlYnNpdGUgcmVxdWlyZWQuXG4gICAgbWF4QWdlOiAxMDAwICogNjAgKiA2MCAqIDgsIC8vIFtUQkRdIFNldCA4IEhvdXJzIGZvciBub3cuXG4gICAgcmVzYXZlOiB0cnVlLCAvLyBGb3JjZXMgdGhlIHNlc3Npb24gdG8gYmUgc2F2ZWQgYmFjayB0byB0aGUgc2Vzc2lvbiBzdG9yZS5cbiAgICBzYXZlVW5pbml0aWFsaXplZDogZmFsc2UsXG4gIH0pKTtcblxuICBhcHAudXNlKGZhdmljb24ocGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4uL2NsaWVudC9zdGF0aWMvJywgJ2Zhdmljb24uaWNvJykpKTtcblxuICAvLyBGb3IgNDA0IGVycm9yIGFuZCBzZXJ2ZXItc2lkZSByZW5kZXJpbmcgcGFnZXMgb25seS5cbiAgYXBwLnNldCgndmlld3MnLCBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLi92aWV3cycpKTtcbiAgYXBwLnNldCgndmlldyBlbmdpbmUnLCAnamFkZScpO1xuXG4gIGNvbnN0IGVudiA9IGFwcC5nZXQoJ2VudicpOyAvLyBTYW1lIGFzIGBwcm9jZXNzLmVudi5OT0RFX0VOVmAuXG5cbiAgaWYgKGVudiA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gSGVyZSBhcmUgYWxsIHRoZSBtaW5pZmllZCB2ZXJzaW9uIG9mIGFsbCBKUyBhbmQgQ1NTIGZpbGVzLlxuICAgIGFwcC51c2UoZXhwcmVzcy5zdGF0aWMocGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4uLy4uLy4uL2Rpc3QvJyksIHtcbiAgICAgIGV0YWc6IHRydWUsXG4gICAgICBtYXhBZ2U6IDg2NDAwMDAwLCAvLyBbVEJEXSA4NjQwMDAwMCAodW5pdDogbXMpIC0gb25lIGRheS5cbiAgICB9KSk7XG4gICAgXG4gICAgY29uc3QgYWNjZXNzTG9nU3RyZWFtID0gZnMuY3JlYXRlV3JpdGVTdHJlYW0ocGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4uLy4uLy4uL21vcmdhbi5sb2cnKSxcbiAgICAgIHsgZmxhZ3M6ICdhJyB9KTtcblxuICAgIGFwcC51c2UobW9yZ2FuKCdjb21iaW5lZCcsIHsgc3RyZWFtOiBhY2Nlc3NMb2dTdHJlYW0gfSkpO1xuICAgIGFwcC51c2UobW9yZ2FuKCdkZXYnKSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gVGhlIE5vZGUgZW52aXJvbm1lbnQgdmFyaWFibGUgc2hvdWxkIGJlIGVpdGhlciBcInRlc3RcIiBvciBcImRldmVsb3BtZW50XCIuXG5cbiAgICAvKlxuICAgICAqIFtOb3RlXSBJbnN0YWxsIENocm9tZSBleHRlbnNpb24gTGl2ZVJlbG9hZCBpbnN0ZWFkIG9mIGFkZGluZyBsaXZlLXJlbG9hZGVkIHNjcmlwdCB0byB0aGVcbiAgICAgKiByZXNwb25zZSwgaW1wbGVtZW50ZWQgYXMgdGhlIGZvbGxvd2luZzpcbiAgICAgKiBgYGBcbiAgICAgKiBhcHAudXNlKHJlcXVpcmUoJ2Nvbm5lY3QtbGl2ZXJlbG9hZCcpKCkpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogRm9yIG1vcmUgaW5mb3JtYXRpb246IGh0dHBzOi8vY2hyb21lLmdvb2dsZS5jb20vd2Vic3RvcmUvZGV0YWlsL2xpdmVyZWxvYWQvam5paGFqYmhwbnBwY2dnYmNnZWRhZ25raWdobWRsZWlcbiAgICAgKi9cblxuICAgIC8vIEhlcmUgYXJlIGFsbCB0aGUgb3JpZ2luYWwgdmVyc2lvbiBvZiBKUyBhbmQgQ1NTIGZpbGVzLlxuICAgIGFwcC51c2UoZXhwcmVzcy5zdGF0aWMocGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4uL2NsaWVudC9zdGF0aWMvJyksIHtcbiAgICAgIGV0YWc6IHRydWUsXG4gICAgICBtYXhBZ2U6IDAsXG4gICAgfSkpO1xuXG4gICAgYXBwLnVzZShtb3JnYW4oJ2RldicpKTtcbiAgICBhcHAudXNlKGVycm9ySGFuZGxlcigpKTsgLy8gRXJyb3IgaGFuZGxlciAtIGhhcyB0byBiZSB0aGUgbGFzdC5cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBzZXR1cEV4cHJlc3NTZXJ2ZXI7XG4iXX0=
//# sourceMappingURL=express-server.js.map
