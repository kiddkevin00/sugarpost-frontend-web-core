{"version":3,"sources":["../../../../../../../../src/lib/client/src/app/dashboard/memo/stores/memoStore.js"],"names":["changeEvent","Symbol","storeContext","MemoStore","todos","id","isComplete","emit","callback","on","removeListener","text","Date","Math","floor","random","toString","updates","Object","assign","_update","_destroy","memoStore","register","action","console","log","JSON","stringify","actionType","trim","TODO_CREATE","_create","emitChange","TODO_TOGGLE_COMPLETE","TODO_TOGGLE_COMPLETE_ALL","areAllComplete","_updateAll","TODO_DESTROY","TODO_DESTROY_COMPLETED","_destroyCompleted","TODO_UPDATE_TEXT"],"mappings":"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","file":"memoStore.js","sourcesContent":["import AppDispatcher from '../../../../common/dispatcher/AppDispatcher';\nimport memoConstants from '../constants/memoConstants';\nimport EventEmitter from 'events';\n\nconst changeEvent = Symbol('change');\nconst storeContext = Symbol('memoStoreContext');\n\n// A Flux's store.\nclass MemoStore extends EventEmitter {\n\n  constructor() {\n    super();\n\n    // All internal store data.\n    this[storeContext] = {\n      todos: {},\n    };\n  }\n\n  getAll() {\n    return this[storeContext].todos;\n  }\n\n  areAllComplete() {\n    for (let id in this[storeContext].todos) {\n      if (!this[storeContext].todos[id].isComplete) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  emitChange() {\n    this.emit(changeEvent);\n  }\n\n  addChangeListener(callback) {\n    this.on(changeEvent, callback);\n  }\n\n  removeChangeListener(callback) {\n    this.removeListener(changeEvent, callback);\n  }\n\n  _create(text) {\n    const id = (+new Date() + Math.floor(Math.random() * 999999).toString(36));\n\n    this[storeContext].todos[id] = {\n      id, text,\n      isComplete: false\n    };\n  }\n\n  _update(id, updates) {\n    this[storeContext].todos[id] = Object.assign({}, this[storeContext].todos[id], updates);\n  }\n\n  _updateAll(updates) {\n    for (let id in this[storeContext].todos) {\n      this._update(id, updates);\n    }\n  }\n\n  _destroy(id) {\n    delete this[storeContext].todos[id];\n  }\n\n  _destroyCompleted() {\n    for (let id in this[storeContext].todos) {\n      if (this[storeContext].todos[id].isComplete) {\n        this._destroy(id);\n      }\n    }\n  }\n\n}\n\nconst memoStore = new MemoStore();\n\n// The dispatcher registration for the current store component.\nAppDispatcher.register((action) => {\n  console.log(`Action in \\`memoStore\\`: ${JSON.stringify(action, null, 2)}`);\n\n  const actionType = action.actionType;\n  const id = action.id || 0;\n  const isComplete = action.isComplete || false;\n  const text = action.text && action.text.trim() || '';\n\n  switch (actionType) {\n    case memoConstants.TODO_CREATE:\n      if (text) {\n        memoStore._create(text);\n\n        memoStore.emitChange();\n      }\n      break;\n    case memoConstants.TODO_TOGGLE_COMPLETE:\n      memoStore._update(id, { isComplete: !isComplete });\n\n      memoStore.emitChange();\n      break;\n    case memoConstants.TODO_TOGGLE_COMPLETE_ALL:\n      if (memoStore.areAllComplete()) {\n        memoStore._updateAll({ isComplete: false });\n      } else {\n        memoStore._updateAll({ isComplete: true });\n      }\n\n      memoStore.emitChange();\n      break;\n    case memoConstants.TODO_DESTROY:\n      memoStore._destroy(id);\n\n      memoStore.emitChange();\n      break;\n    case memoConstants.TODO_DESTROY_COMPLETED:\n      memoStore._destroyCompleted();\n\n      memoStore.emitChange();\n      break;\n    case memoConstants.TODO_UPDATE_TEXT:\n      if (text) {\n        memoStore._update(id, { text });\n\n        memoStore.emitChange();\n      }\n      break;\n    default:\n      return;\n  }\n});\n\nexport default memoStore;\n"]}