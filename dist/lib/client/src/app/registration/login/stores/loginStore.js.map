{"version":3,"sources":["../../../../../../../../src/lib/client/src/app/registration/login/stores/loginStore.js"],"names":["changeEvent","Symbol","storeContext","LoginStore","isLoggedIn","emit","callback","on","removeListener","email","password","loginStore","register","action","console","log","JSON","stringify","actionType","BASIC_LOGIN","_login","emitChange"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;;;AAEA,IAAMA,cAAcC,OAAO,QAAP,CAApB;AACA,IAAMC,eAAeD,OAAO,mBAAP,CAArB;;AAEA;;IACME,U;;;AAEJ,wBAAc;AAAA;;AAGZ;AAHY;;AAIZ,UAAKD,YAAL,IAAqB;AACnBE,kBAAY;AADO,KAArB;AAJY;AAOb;;;;iCAEY;AACX,aAAO,KAAKF,YAAL,EAAmBE,UAA1B;AACD;;;iCAEY;AACX,WAAKC,IAAL,CAAUL,WAAV;AACD;;;sCAEiBM,Q,EAAU;AAC1B,WAAKC,EAAL,CAAQP,WAAR,EAAqBM,QAArB;AACD;;;yCAEoBA,Q,EAAU;AAC7B,WAAKE,cAAL,CAAoBR,WAApB,EAAiCM,QAAjC;AACD;;;2BAEMG,K,EAAOC,Q,EAAU;AACtB,UAAID,UAAU,eAAV,IAA6BC,aAAa,OAA9C,EAAuD;AACrD,aAAKR,YAAL,EAAmBE,UAAnB,GAAgC,IAAhC;AACD;AACF;;;;;;AAIH,IAAMO,aAAa,IAAIR,UAAJ,EAAnB;;AAEA;AACA,wBAAcS,QAAd,CAAuB,UAACC,MAAD,EAAY;AACjCC,UAAQC,GAAR,8BAAyCC,KAAKC,SAAL,CAAeJ,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAzC;;AAEA,MAAMK,aAAaL,OAAOK,UAA1B;AACA,MAAMT,QAAQI,OAAOJ,KAArB;AACA,MAAMC,WAAWG,OAAOH,QAAxB;;AAEA,UAAQQ,UAAR;AACE,SAAK,yBAAeC,WAApB;AACER,iBAAWS,MAAX,CAAkBX,KAAlB,EAAyBC,QAAzB;;AAEAC,iBAAWU,UAAX;AACA;AACF;AACE;AAPJ;AASD,CAhBD;;kBAkBeV,U","file":"loginStore.js","sourcesContent":["import AppDispatcher from '../../../../common/dispatcher/AppDispatcher';\nimport loginConstants from '../constants/loginConstants';\nimport EventEmitter from 'events';\n\nconst changeEvent = Symbol('change');\nconst storeContext = Symbol('loginStoreContext');\n\n// A Flux's store.\nclass LoginStore extends EventEmitter {\n\n  constructor() {\n    super();\n\n    // All internal store data.\n    this[storeContext] = {\n      isLoggedIn: false,\n    };\n  }\n  \n  isLoggedIn() {\n    return this[storeContext].isLoggedIn;\n  }\n\n  emitChange() {\n    this.emit(changeEvent);\n  }\n\n  addChangeListener(callback) {\n    this.on(changeEvent, callback);\n  }\n\n  removeChangeListener(callback) {\n    this.removeListener(changeEvent, callback);\n  }\n\n  _login(email, password) {\n    if (email === 'admin@teu.com' && password === 'admin') {\n      this[storeContext].isLoggedIn = true;\n    }\n  }\n\n}\n\nconst loginStore = new LoginStore();\n\n// The dispatcher registration for the current store component.\nAppDispatcher.register((action) => {\n  console.log(`Action in \\`loginStore\\`: ${JSON.stringify(action, null, 2)}`);\n\n  const actionType = action.actionType;\n  const email = action.email;\n  const password = action.password;\n\n  switch (actionType) {\n    case loginConstants.BASIC_LOGIN:\n      loginStore._login(email, password);\n\n      loginStore.emitChange();\n      break;\n    default:\n      return;\n  }\n});\n\nexport default loginStore;\n"]}