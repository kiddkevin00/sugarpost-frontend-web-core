{"version":3,"sources":["../../../../../../src/lib/client/src/common/dispatcher/CustomDispatcher.js"],"names":["CustomDispatcher","Object","assign","prototype","handleViewAction","action","dispatch","source","handleServerAction"],"mappings":";;;;;;AAAA;;;;;;AAEA,IAAMA,mBAAmBC,OAAOC,MAAP,CAAc,EAAd,EAAkB,wBAAWC,SAA7B,EAAwC;AAC/D;;;;;;AAMAC,kBAP+D,4BAO9CC,MAP8C,EAOtC;AACvB,SAAKC,QAAL,CAAc;AACZC,cAAQ,aADI;AAEZF,cAAQA;AAFI,KAAd;AAID,GAZ8D;AAc/DG,oBAd+D,8BAc5CH,MAd4C,EAcpC;AACzB,SAAKC,QAAL,CAAc;AACZC,cAAQ,eADI;AAEZF,cAAQA;AAFI,KAAd;AAID;AAnB8D,CAAxC,CAAzB;;kBAsBeL,gB","file":"CustomDispatcher.js","sourcesContent":["import Dispatcher from './AppDispatcher';\n\nconst CustomDispatcher = Object.assign({}, Dispatcher.prototype, {\n  /**\n   * A bridge function between the views and the dispatcher, marking the action\n   * as a view action.  Another variant here could be `handleServerAction` method.\n   *\n   * @param {Object} action - the data coming from the view.\n   */\n  handleViewAction(action) {\n    this.dispatch({\n      source: 'VIEW_ACTION',\n      action: action\n    });\n  },\n\n  handleServerAction(action) {\n    this.dispatch({\n      source: 'SERVER_ACTION',\n      action: action\n    });\n  }\n});\n\nexport default CustomDispatcher;\n"]}